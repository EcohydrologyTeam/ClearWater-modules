from collections import OrderedDict

import unittest
from numba.typed import Dict
from numba import types
import os
import sys

from _alkalinity import Alkalinity

class Test_alkalinity(unittest.TestCase):

    def setUp(self) :
        self.global_module_choices =Dict.empty(key_type=types.unicode_type, value_type=types.float64)
        self.global_module_choices = {
            'use_Algae' : True,
            'use_BAlgae': True,
            'use_NH4' : True,
            'use_NO3' : True,
            'use_Alk' : True,

        }

        #User-defined global variables
        self.global_vars = Dict.empty(key_type=types.unicode_type, value_type=types.float64)
        self.global_vars = {
            'TwaterC' : 25.0,
            'depth' : 1.0,
            'Alk' : 10,
            'pH' : 7,
            'DIC' : 10,
        }
        
        self.alkalinity_constant_changes= Dict.empty(key_type=types.unicode_type, value_type=types.float64)
        self.alkalinity_constant_changes = {
            'ralkca' : 14/106/12/1000, #translating algal and balgal growht into Alk if NH2 is the N source (eq/ug-chla)
            'ralkcn' : 18/106/12/1000, #ratio translating algal and balgal growth into Alk if NO3 is the N source (eq/ug-Chla)
            'ralkn' : 2/14/1000, #nitrification
            'ralkden' : 4/14/1000, # denitrification
            'pH_solution' : 1,
            'imax' : 13, # maximum iteration number for computing pH
            'es' : 0.003, # maximum relative error for computing pH
        }

        self.algae_pathways = Dict.empty(key_type=types.unicode_type, value_type=types.float64)
        self.algae_pathways = {
            'ApGrowth': 100,
            'ApRespiration' : 20,       
            'rca': 0.04,
        } 

        self.balgae_pathways = Dict.empty(key_type=types.unicode_type, value_type=types.float64)
        self.balgae_pathways = {
            'rcb' : 0.4,
            'AbGrowth' : 3,
            'AbRespiration' : 30,
            'Fb' : 0.1
        }

        self.nitrogen_pathways = Dict.empty(key_type=types.unicode_type, value_type=types.float64)
        self.nitrogen_pathways = {
            'NH4_Nitrification' : 10,
            'NO3_Denit' : 0.1,
            'ApUptakeFr_NH4': 0.5,
            'AbUptakeFr_NH4': 0.5,
        }

#First run 1
    def test_first (self):

        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.2044025157233, 4)
        self.assertAlmostEqual(pH, 2.69656749486696, 4)


#ralkca 2
    def test_ralkca (self):
        self.alkalinity_constant_changes['ralkca'] = 0.002
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,322.6273585, 4)
        self.assertAlmostEqual(pH, 2.69656749486696, 4)

#ralkcn 3
    def test_ralkcn (self):
        self.alkalinity_constant_changes['ralkcn'] = 0.002
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-261.831761, 4)
        self.assertAlmostEqual(pH, 2.69656749486696, 4)

#ralkn 4
    def test_ralkn (self):
        self.alkalinity_constant_changes['ralkn'] = 0.002
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-997.7758311, 4)
        self.assertAlmostEqual(pH, 2.69656749486696, 4)

#ralkd3n 5
    def test_ralkden (self):
        self.alkalinity_constant_changes['ralkden'] = 0.002
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-60.63297394, 4)
        self.assertAlmostEqual(pH, 2.69656749486696, 4)

#depth 6
    def test_depth (self):
        self.global_vars['depth']=5
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.74025157, 4)
        self.assertAlmostEqual(pH, 2.69656749486696, 4)

#TwaterC 7
    def test_TwaterC (self):
        self.global_vars['TwaterC']=15
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.20440252, 4)
        self.assertAlmostEqual(pH, 2.731677332, 4)

#Alk 8
    def test_Alk (self):
        self.global_vars['Alk']=500
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.2044025157233, 4)
        self.assertAlmostEqual(pH, 3.37044092080951, 4)

#pH 9
    def test_pH (self):
        self.global_vars['pH']=5
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.20440252, 4)
        self.assertAlmostEqual(pH, 2.69656749486696, 4)

#DIC 10
    def test_DIC (self):
        self.global_vars['DIC']=5
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.2044025157233, 4)
        self.assertAlmostEqual(pH, 2.855621845, 4)

#use_Algae 11
    def test_use_Algae (self):
        self.global_module_choices['use_Algae'] = False
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.33018868, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#use_Balgae 12
    def test_use_Balgae (self):
        self.global_module_choices['use_BAlgae'] = False
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.87421384, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#use_NH4 13
    def test_use_NH4 (self):
        self.global_module_choices['use_NH4'] = False
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,2.224168913, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#use_NO3 14
    def test_use_NO3 (self):
        self.global_module_choices['use_NO3'] = False
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-70.63297394, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#ApGrowth 15
    def test_ApGrowth (self):
        self.algae_pathways['ApGrowth'] = 10
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-68.92138365, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#ApRespiration 16
    def test_ApRespiration (self):
        self.algae_pathways['ApRespiration'] = 50
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-68.54402516, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#rca 17
    def test_rca (self):
        self.algae_pathways['rca'] = 0.1
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.01572327, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#Fb 18
    def test_Fb (self):
        self.balgae_pathways['Fb'] = 0.3
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-67.86477987, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#AbGrowth 19
    def test_AbGrowth (self):
        self.balgae_pathways['AbGrowth'] = 20
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.1509434, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#AbRespiration 20
    def test_AbRespiration (self):
        self.balgae_pathways['AbRespiration'] = 5
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.75471698, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#rcb 21
    def test_rcb (self):
        self.balgae_pathways['rcb'] = 0.6
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-68.86949686, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#NH4_Nitrification 22
    def test_NH4_Nitrification (self):
        self.nitrogen_pathways['NH4_Nitrification'] = 15
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-104.9186882, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#NO3_Denit 23
    def test_NO3_Denit (self):
        self.nitrogen_pathways['NO3_Denit'] = 10
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,72.22416891, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#ApUpTakeFr_NH4 24
    def test_ApUpTakeFr_NH4 (self):
        self.nitrogen_pathways['ApUptakeFr_NH4'] = 0.3
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-70.21069182, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#AbUptakeFr_NH4 25
    def test_AbUptakeFr_NH4 (self):
        self.nitrogen_pathways['AbUptakeFr_NH4'] = 0.7
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.23459119, 4)
        self.assertAlmostEqual(pH, 2.696567495, 4)

#pH_Solution 26
    def test_pH_Solution (self):
        self.alkalinity_constant_changes['pH_solution'] = 2
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.20440252, 4)
        self.assertAlmostEqual(pH, 2.693359375, 4)

#pH_Solution and es 27
    def test_pH_Solution_es (self):
        self.alkalinity_constant_changes['pH_solution'] = 2
        self.alkalinity_constant_changes['es'] = 0.006
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.20440252, 4)
        self.assertAlmostEqual(pH, 2.69921875, 4)

#pH_Solution and TwaterC 28
    def test_pH_Solution_TwaterC (self):
        self.alkalinity_constant_changes['pH_solution'] = 2
        self.global_vars['TwaterC'] = 10
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.20440252, 4)
        self.assertAlmostEqual(pH, 2.751953125, 4)

#pH_Solution and Alk 29
    def test_pH_Solution_Alk (self):
        self.alkalinity_constant_changes['pH_solution'] = 2
        self.global_vars['Alk'] = 5
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.20440252, 4)
        self.assertAlmostEqual(pH, 2.681640625, 4)

#pH_Solution and pH 30
    def test_pH_Solution_pH (self):
        self.alkalinity_constant_changes['pH_solution'] = 2
        self.global_vars['pH'] = 5
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.20440252, 4)
        self.assertAlmostEqual(pH, 2.693359375, 4)

#pH_Solution and DIC 31
    def test_pH_Solution_DIC (self):
        self.alkalinity_constant_changes['pH_solution'] = 2
        self.global_vars['DIC'] = 30
        dAlkdt, pH = Alkalinity(self.global_module_choices, self.global_vars, self.algae_pathways, self.balgae_pathways, self.nitrogen_pathways, self.alkalinity_constant_changes).Calculations_Alk()
        
        self.assertAlmostEqual(dAlkdt,-69.20440252, 4)
        self.assertAlmostEqual(pH, 2.447265625, 4)

if __name__ == '__main__':
    unittest.main()
