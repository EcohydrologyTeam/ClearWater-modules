DEBUG    2022-12-09 16:53:27,285: bytecode dump:
>          0	NOP(arg=None, lineno=23)
           2	LOAD_GLOBAL(arg=0, lineno=23)
           4	LOAD_METHOD(arg=1, lineno=23)
           6	LOAD_GLOBAL(arg=0, lineno=23)
           8	LOAD_METHOD(arg=2, lineno=23)
          10	LOAD_FAST(arg=0, lineno=23)
          12	LOAD_FAST(arg=1, lineno=23)
          14	CALL_METHOD(arg=2, lineno=23)
          16	CALL_METHOD(arg=1, lineno=23)
          18	RETURN_VALUE(arg=None, lineno=23)
DEBUG    2022-12-09 16:53:27,285: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,285: stack: []
DEBUG    2022-12-09 16:53:27,285: dispatch pc=0, inst=NOP(arg=None, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack []
DEBUG    2022-12-09 16:53:27,285: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack []
DEBUG    2022-12-09 16:53:27,285: dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack ['$2load_global.0']
DEBUG    2022-12-09 16:53:27,285: dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack ['$4load_method.1']
DEBUG    2022-12-09 16:53:27,285: dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack ['$4load_method.1', '$6load_global.2']
DEBUG    2022-12-09 16:53:27,285: dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack ['$4load_method.1', '$8load_method.3']
DEBUG    2022-12-09 16:53:27,285: dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack ['$4load_method.1', '$8load_method.3', '$keyty10.4']
DEBUG    2022-12-09 16:53:27,285: dispatch pc=14, inst=CALL_METHOD(arg=2, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack ['$4load_method.1', '$8load_method.3', '$keyty10.4', '$valty12.5']
DEBUG    2022-12-09 16:53:27,285: dispatch pc=16, inst=CALL_METHOD(arg=1, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack ['$4load_method.1', '$14call_method.6']
DEBUG    2022-12-09 16:53:27,285: dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=23)
DEBUG    2022-12-09 16:53:27,285: stack ['$16call_method.7']
DEBUG    2022-12-09 16:53:27,285: end state. edges=[]
DEBUG    2022-12-09 16:53:27,285: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,285: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,285: defmap: {}
DEBUG    2022-12-09 16:53:27,285: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,285: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,285: keep phismap: {}
DEBUG    2022-12-09 16:53:27,285: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,285: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,285: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_method.3'}), (10, {'res': '$keyty10.4'}), (12, {'res': '$valty12.5'}), (14, {'func': '$8load_method.3', 'args': ['$keyty10.4', '$valty12.5'], 'res': '$14call_method.6'}), (16, {'func': '$4load_method.1', 'args': ['$14call_method.6'], 'res': '$16call_method.7'}), (18, {'retval': '$16call_method.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,285: label 0:
    keyty = arg(0, name=keyty)               ['keyty']
    valty = arg(1, name=valty)               ['valty']
    $2load_global.0 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=_as_meminfo) ['$2load_global.0', '$4load_method.1']
    $6load_global.2 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>) ['$6load_global.2']
    $8load_method.3 = getattr(value=$6load_global.2, attr=new_dict) ['$6load_global.2', '$8load_method.3']
    $14call_method.6 = call $8load_method.3(keyty, valty, func=$8load_method.3, args=[Var(keyty, typeddict.py:23), Var(valty, typeddict.py:23)], kws=(), vararg=None, target=None) ['$14call_method.6', '$8load_method.3', 'keyty', 'valty']
    $16call_method.7 = call $4load_method.1($14call_method.6, func=$4load_method.1, args=[Var($14call_method.6, typeddict.py:23)], kws=(), vararg=None, target=None) ['$14call_method.6', '$16call_method.7', '$4load_method.1']
    $18return_value.8 = cast(value=$16call_method.7) ['$16call_method.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

DEBUG    2022-12-09 16:53:27,295: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,295: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C1DAC40>
DEBUG    2022-12-09 16:53:27,295: on stmt: keyty = arg(0, name=keyty)
DEBUG    2022-12-09 16:53:27,295: on stmt: valty = arg(1, name=valty)
DEBUG    2022-12-09 16:53:27,295: on stmt: $2load_global.0 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>)
DEBUG    2022-12-09 16:53:27,295: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=_as_meminfo)
DEBUG    2022-12-09 16:53:27,295: on stmt: $6load_global.2 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>)
DEBUG    2022-12-09 16:53:27,295: on stmt: $8load_method.3 = getattr(value=$6load_global.2, attr=new_dict)
DEBUG    2022-12-09 16:53:27,295: on stmt: $14call_method.6 = call $8load_method.3(keyty, valty, func=$8load_method.3, args=[Var(keyty, typeddict.py:23), Var(valty, typeddict.py:23)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,295: on stmt: $16call_method.7 = call $4load_method.1($14call_method.6, func=$4load_method.1, args=[Var($14call_method.6, typeddict.py:23)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,295: on stmt: $18return_value.8 = cast(value=$16call_method.7)
DEBUG    2022-12-09 16:53:27,295: on stmt: return $18return_value.8
DEBUG    2022-12-09 16:53:27,295: defs defaultdict(<class 'list'>,
            {'$14call_method.6': [<numba.core.ir.Assign object at 0x0000024C8C1A3280>],
             '$16call_method.7': [<numba.core.ir.Assign object at 0x0000024C8C1A3400>],
             '$18return_value.8': [<numba.core.ir.Assign object at 0x0000024C8C1A34F0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C19FB50>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000024C8C19F850>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x0000024C8C1925B0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x0000024C8C192EB0>],
             'keyty': [<numba.core.ir.Assign object at 0x0000024C8C192730>],
             'valty': [<numba.core.ir.Assign object at 0x0000024C8C19FEB0>]})
DEBUG    2022-12-09 16:53:27,295: SSA violators set()
DEBUG    2022-12-09 16:53:27,295: bytecode dump:
>          0	NOP(arg=None, lineno=653)
           2	LOAD_GLOBAL(arg=0, lineno=653)
           4	LOAD_DEREF(arg=0, lineno=653)
           6	LOAD_DEREF(arg=1, lineno=653)
           8	CALL_FUNCTION(arg=2, lineno=653)
          10	STORE_FAST(arg=2, lineno=653)
          12	LOAD_GLOBAL(arg=1, lineno=654)
          14	LOAD_FAST(arg=2, lineno=654)
          16	LOAD_DEREF(arg=0, lineno=654)
          18	LOAD_DEREF(arg=1, lineno=654)
          20	CALL_FUNCTION(arg=3, lineno=654)
          22	POP_TOP(arg=None, lineno=654)
          24	LOAD_GLOBAL(arg=2, lineno=655)
          26	LOAD_DEREF(arg=0, lineno=655)
          28	LOAD_DEREF(arg=1, lineno=655)
          30	LOAD_FAST(arg=2, lineno=655)
          32	CALL_FUNCTION(arg=3, lineno=655)
          34	STORE_FAST(arg=3, lineno=655)
          36	LOAD_FAST(arg=3, lineno=656)
          38	RETURN_VALUE(arg=None, lineno=656)
DEBUG    2022-12-09 16:53:27,295: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,295: stack: []
DEBUG    2022-12-09 16:53:27,295: dispatch pc=0, inst=NOP(arg=None, lineno=653)
DEBUG    2022-12-09 16:53:27,295: stack []
DEBUG    2022-12-09 16:53:27,295: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=653)
DEBUG    2022-12-09 16:53:27,295: stack []
DEBUG    2022-12-09 16:53:27,295: dispatch pc=4, inst=LOAD_DEREF(arg=0, lineno=653)
DEBUG    2022-12-09 16:53:27,295: stack ['$2load_global.0']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=6, inst=LOAD_DEREF(arg=1, lineno=653)
DEBUG    2022-12-09 16:53:27,295: stack ['$2load_global.0', '$4load_deref.1']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=653)
DEBUG    2022-12-09 16:53:27,295: stack ['$2load_global.0', '$4load_deref.1', '$6load_deref.2']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=10, inst=STORE_FAST(arg=2, lineno=653)
DEBUG    2022-12-09 16:53:27,295: stack ['$8call_function.3']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=654)
DEBUG    2022-12-09 16:53:27,295: stack []
DEBUG    2022-12-09 16:53:27,295: dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=654)
DEBUG    2022-12-09 16:53:27,295: stack ['$12load_global.4']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=16, inst=LOAD_DEREF(arg=0, lineno=654)
DEBUG    2022-12-09 16:53:27,295: stack ['$12load_global.4', '$dp14.5']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=18, inst=LOAD_DEREF(arg=1, lineno=654)
DEBUG    2022-12-09 16:53:27,295: stack ['$12load_global.4', '$dp14.5', '$16load_deref.6']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=20, inst=CALL_FUNCTION(arg=3, lineno=654)
DEBUG    2022-12-09 16:53:27,295: stack ['$12load_global.4', '$dp14.5', '$16load_deref.6', '$18load_deref.7']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=22, inst=POP_TOP(arg=None, lineno=654)
DEBUG    2022-12-09 16:53:27,295: stack ['$20call_function.8']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=24, inst=LOAD_GLOBAL(arg=2, lineno=655)
DEBUG    2022-12-09 16:53:27,295: stack []
DEBUG    2022-12-09 16:53:27,295: dispatch pc=26, inst=LOAD_DEREF(arg=0, lineno=655)
DEBUG    2022-12-09 16:53:27,295: stack ['$24load_global.9']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=28, inst=LOAD_DEREF(arg=1, lineno=655)
DEBUG    2022-12-09 16:53:27,295: stack ['$24load_global.9', '$26load_deref.10']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=655)
DEBUG    2022-12-09 16:53:27,295: stack ['$24load_global.9', '$26load_deref.10', '$28load_deref.11']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=32, inst=CALL_FUNCTION(arg=3, lineno=655)
DEBUG    2022-12-09 16:53:27,295: stack ['$24load_global.9', '$26load_deref.10', '$28load_deref.11', '$dp30.12']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=34, inst=STORE_FAST(arg=3, lineno=655)
DEBUG    2022-12-09 16:53:27,295: stack ['$32call_function.13']
DEBUG    2022-12-09 16:53:27,295: dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=656)
DEBUG    2022-12-09 16:53:27,295: stack []
DEBUG    2022-12-09 16:53:27,295: dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=656)
DEBUG    2022-12-09 16:53:27,295: stack ['$d36.14']
DEBUG    2022-12-09 16:53:27,295: end state. edges=[]
DEBUG    2022-12-09 16:53:27,295: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,295: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,295: defmap: {}
DEBUG    2022-12-09 16:53:27,295: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,295: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,295: keep phismap: {}
DEBUG    2022-12-09 16:53:27,303: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,303: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,303: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_deref.1'}), (6, {'res': '$6load_deref.2'}), (8, {'func': '$2load_global.0', 'args': ['$4load_deref.1', '$6load_deref.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$dp14.5'}), (16, {'res': '$16load_deref.6'}), (18, {'res': '$18load_deref.7'}), (20, {'func': '$12load_global.4', 'args': ['$dp14.5', '$16load_deref.6', '$18load_deref.7'], 'res': '$20call_function.8'}), (24, {'res': '$24load_global.9'}), (26, {'res': '$26load_deref.10'}), (28, {'res': '$28load_deref.11'}), (30, {'res': '$dp30.12'}), (32, {'func': '$24load_global.9', 'args': ['$26load_deref.10', '$28load_deref.11', '$dp30.12'], 'res': '$32call_function.13'}), (34, {'value': '$32call_function.13'}), (36, {'res': '$d36.14'}), (38, {'retval': '$d36.14', 'castval': '$38return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,324: label 0:
    key = arg(0, name=key)                   ['key']
    value = arg(1, name=value)               ['value']
    $2load_global.0 = global(_dict_new_minsize: <intrinsic _dict_new_minsize>) ['$2load_global.0']
    $4load_deref.1 = freevar(keyty: typeref[unicode_type]) ['$4load_deref.1']
    $6load_deref.2 = freevar(valty: class(float64)) ['$6load_deref.2']
    dp = call $2load_global.0($4load_deref.1, $6load_deref.2, func=$2load_global.0, args=[Var($4load_deref.1, dictobject.py:653), Var($6load_deref.2, dictobject.py:653)], kws=(), vararg=None, target=None) ['$2load_global.0', '$4load_deref.1', '$6load_deref.2', 'dp']
    $12load_global.4 = global(_dict_set_method_table: <intrinsic _dict_set_method_table>) ['$12load_global.4']
    $16load_deref.6 = freevar(keyty: typeref[unicode_type]) ['$16load_deref.6']
    $18load_deref.7 = freevar(valty: class(float64)) ['$18load_deref.7']
    $20call_function.8 = call $12load_global.4(dp, $16load_deref.6, $18load_deref.7, func=$12load_global.4, args=[Var(dp, dictobject.py:653), Var($16load_deref.6, dictobject.py:654), Var($18load_deref.7, dictobject.py:654)], kws=(), vararg=None, target=None) ['$12load_global.4', '$16load_deref.6', '$18load_deref.7', '$20call_function.8', 'dp']
    $24load_global.9 = global(_make_dict: <intrinsic _make_dict>) ['$24load_global.9']
    $26load_deref.10 = freevar(keyty: typeref[unicode_type]) ['$26load_deref.10']
    $28load_deref.11 = freevar(valty: class(float64)) ['$28load_deref.11']
    d = call $24load_global.9($26load_deref.10, $28load_deref.11, dp, func=$24load_global.9, args=[Var($26load_deref.10, dictobject.py:655), Var($28load_deref.11, dictobject.py:655), Var(dp, dictobject.py:653)], kws=(), vararg=None, target=None) ['$24load_global.9', '$26load_deref.10', '$28load_deref.11', 'd', 'dp']
    $38return_value.15 = cast(value=d)       ['$38return_value.15', 'd']
    return $38return_value.15                ['$38return_value.15']

DEBUG    2022-12-09 16:53:27,324: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,324: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C20F9D0>
DEBUG    2022-12-09 16:53:27,324: on stmt: key = arg(0, name=key)
DEBUG    2022-12-09 16:53:27,324: on stmt: value = arg(1, name=value)
DEBUG    2022-12-09 16:53:27,324: on stmt: $2load_global.0 = global(_dict_new_minsize: <intrinsic _dict_new_minsize>)
DEBUG    2022-12-09 16:53:27,324: on stmt: $4load_deref.1 = freevar(keyty: typeref[unicode_type])
DEBUG    2022-12-09 16:53:27,324: on stmt: $6load_deref.2 = freevar(valty: class(float64))
DEBUG    2022-12-09 16:53:27,326: on stmt: dp = call $2load_global.0($4load_deref.1, $6load_deref.2, func=$2load_global.0, args=[Var($4load_deref.1, dictobject.py:653), Var($6load_deref.2, dictobject.py:653)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,326: on stmt: $12load_global.4 = global(_dict_set_method_table: <intrinsic _dict_set_method_table>)
DEBUG    2022-12-09 16:53:27,326: on stmt: $16load_deref.6 = freevar(keyty: typeref[unicode_type])
DEBUG    2022-12-09 16:53:27,326: on stmt: $18load_deref.7 = freevar(valty: class(float64))
DEBUG    2022-12-09 16:53:27,326: on stmt: $20call_function.8 = call $12load_global.4(dp, $16load_deref.6, $18load_deref.7, func=$12load_global.4, args=[Var(dp, dictobject.py:653), Var($16load_deref.6, dictobject.py:654), Var($18load_deref.7, dictobject.py:654)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,326: on stmt: $24load_global.9 = global(_make_dict: <intrinsic _make_dict>)
DEBUG    2022-12-09 16:53:27,326: on stmt: $26load_deref.10 = freevar(keyty: typeref[unicode_type])
DEBUG    2022-12-09 16:53:27,326: on stmt: $28load_deref.11 = freevar(valty: class(float64))
DEBUG    2022-12-09 16:53:27,326: on stmt: d = call $24load_global.9($26load_deref.10, $28load_deref.11, dp, func=$24load_global.9, args=[Var($26load_deref.10, dictobject.py:655), Var($28load_deref.11, dictobject.py:655), Var(dp, dictobject.py:653)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,326: on stmt: $38return_value.15 = cast(value=d)
DEBUG    2022-12-09 16:53:27,326: on stmt: return $38return_value.15
DEBUG    2022-12-09 16:53:27,326: defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x0000024C8C1A3F70>],
             '$16load_deref.6': [<numba.core.ir.Assign object at 0x0000024C8C20FE80>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x0000024C8C20F940>],
             '$20call_function.8': [<numba.core.ir.Assign object at 0x0000024C8AC0FCA0>],
             '$24load_global.9': [<numba.core.ir.Assign object at 0x0000024C8AC0FA30>],
             '$26load_deref.10': [<numba.core.ir.Assign object at 0x0000024C8C23CB20>],
             '$28load_deref.11': [<numba.core.ir.Assign object at 0x0000024C8C23CB50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C19F1C0>],
             '$38return_value.15': [<numba.core.ir.Assign object at 0x0000024C8C23CF40>],
             '$4load_deref.1': [<numba.core.ir.Assign object at 0x0000024C8C1DA820>],
             '$6load_deref.2': [<numba.core.ir.Assign object at 0x0000024C8C1DA940>],
             'd': [<numba.core.ir.Assign object at 0x0000024C8C23C820>],
             'dp': [<numba.core.ir.Assign object at 0x0000024C8C1A3670>],
             'key': [<numba.core.ir.Assign object at 0x0000024C8C23C1C0>],
             'value': [<numba.core.ir.Assign object at 0x0000024C8C23CD30>]})
DEBUG    2022-12-09 16:53:27,326: SSA violators set()
DEBUG    2022-12-09 16:53:27,336: bytecode dump:
>          0	NOP(arg=None, lineno=468)
           2	LOAD_FAST(arg=0, lineno=468)
           4	LOAD_CONST(arg=0, lineno=468)
           6	IS_OP(arg=0, lineno=468)
           8	STORE_FAST(arg=2, lineno=468)
          10	LOAD_FAST(arg=1, lineno=469)
          12	LOAD_CONST(arg=0, lineno=469)
          14	IS_OP(arg=0, lineno=469)
          16	STORE_FAST(arg=3, lineno=469)
          18	LOAD_FAST(arg=2, lineno=470)
          20	POP_JUMP_IF_TRUE(arg=26, lineno=470)
          22	LOAD_FAST(arg=3, lineno=470)
          24	POP_JUMP_IF_FALSE(arg=42, lineno=470)
>         26	LOAD_FAST(arg=2, lineno=471)
          28	POP_JUMP_IF_FALSE(arg=38, lineno=471)
          30	LOAD_FAST(arg=3, lineno=471)
          32	POP_JUMP_IF_FALSE(arg=38, lineno=471)
          34	LOAD_CONST(arg=1, lineno=472)
          36	RETURN_VALUE(arg=None, lineno=472)
>         38	LOAD_CONST(arg=2, lineno=474)
          40	RETURN_VALUE(arg=None, lineno=474)
>         42	LOAD_GLOBAL(arg=0, lineno=476)
          44	LOAD_FAST(arg=0, lineno=476)
          46	CALL_FUNCTION(arg=1, lineno=476)
          48	STORE_FAST(arg=0, lineno=476)
          50	LOAD_GLOBAL(arg=0, lineno=477)
          52	LOAD_FAST(arg=1, lineno=477)
          54	CALL_FUNCTION(arg=1, lineno=477)
          56	STORE_FAST(arg=1, lineno=477)
          58	LOAD_GLOBAL(arg=1, lineno=478)
          60	LOAD_FAST(arg=0, lineno=478)
          62	CALL_FUNCTION(arg=1, lineno=478)
          64	LOAD_GLOBAL(arg=1, lineno=478)
          66	LOAD_FAST(arg=1, lineno=478)
          68	CALL_FUNCTION(arg=1, lineno=478)
          70	COMPARE_OP(arg=3, lineno=478)
          72	POP_JUMP_IF_FALSE(arg=78, lineno=478)
          74	LOAD_CONST(arg=2, lineno=479)
          76	RETURN_VALUE(arg=None, lineno=479)
>         78	LOAD_GLOBAL(arg=2, lineno=480)
          80	LOAD_FAST(arg=0, lineno=480)
          82	LOAD_CONST(arg=3, lineno=480)
          84	LOAD_FAST(arg=1, lineno=480)
          86	LOAD_CONST(arg=3, lineno=480)
          88	LOAD_GLOBAL(arg=1, lineno=480)
          90	LOAD_FAST(arg=0, lineno=480)
          92	CALL_FUNCTION(arg=1, lineno=480)
          94	CALL_FUNCTION(arg=5, lineno=480)
          96	LOAD_CONST(arg=3, lineno=480)
          98	COMPARE_OP(arg=2, lineno=480)
         100	RETURN_VALUE(arg=None, lineno=480)
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: stack: []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=0, inst=NOP(arg=None, lineno=468)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=468)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=468)
DEBUG    2022-12-09 16:53:27,336: stack ['$a2.0']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=6, inst=IS_OP(arg=0, lineno=468)
DEBUG    2022-12-09 16:53:27,336: stack ['$a2.0', '$const4.1']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=8, inst=STORE_FAST(arg=2, lineno=468)
DEBUG    2022-12-09 16:53:27,336: stack ['$6is_op.2']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=469)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=12, inst=LOAD_CONST(arg=0, lineno=469)
DEBUG    2022-12-09 16:53:27,336: stack ['$b10.3']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=14, inst=IS_OP(arg=0, lineno=469)
DEBUG    2022-12-09 16:53:27,336: stack ['$b10.3', '$const12.4']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=16, inst=STORE_FAST(arg=3, lineno=469)
DEBUG    2022-12-09 16:53:27,336: stack ['$14is_op.5']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=470)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=20, inst=POP_JUMP_IF_TRUE(arg=26, lineno=470)
DEBUG    2022-12-09 16:53:27,336: stack ['$a_none18.6']
DEBUG    2022-12-09 16:53:27,336: end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: stack: []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=470)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=42, lineno=470)
DEBUG    2022-12-09 16:53:27,336: stack ['$b_none22.0']
DEBUG    2022-12-09 16:53:27,336: end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: stack: []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=471)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=38, lineno=471)
DEBUG    2022-12-09 16:53:27,336: stack ['$a_none26.0']
DEBUG    2022-12-09 16:53:27,336: end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: stack: []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=476)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=476)
DEBUG    2022-12-09 16:53:27,336: stack ['$42load_global.0']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=476)
DEBUG    2022-12-09 16:53:27,336: stack ['$42load_global.0', '$a44.1']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=48, inst=STORE_FAST(arg=0, lineno=476)
DEBUG    2022-12-09 16:53:27,336: stack ['$46call_function.2']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=477)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=477)
DEBUG    2022-12-09 16:53:27,336: stack ['$50load_global.3']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=477)
DEBUG    2022-12-09 16:53:27,336: stack ['$50load_global.3', '$b52.4']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=56, inst=STORE_FAST(arg=1, lineno=477)
DEBUG    2022-12-09 16:53:27,336: stack ['$54call_function.5']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=478)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=60, inst=LOAD_FAST(arg=0, lineno=478)
DEBUG    2022-12-09 16:53:27,336: stack ['$58load_global.6']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=478)
DEBUG    2022-12-09 16:53:27,336: stack ['$58load_global.6', '$a60.7']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=64, inst=LOAD_GLOBAL(arg=1, lineno=478)
DEBUG    2022-12-09 16:53:27,336: stack ['$62call_function.8']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=478)
DEBUG    2022-12-09 16:53:27,336: stack ['$62call_function.8', '$64load_global.9']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=68, inst=CALL_FUNCTION(arg=1, lineno=478)
DEBUG    2022-12-09 16:53:27,336: stack ['$62call_function.8', '$64load_global.9', '$b66.10']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=478)
DEBUG    2022-12-09 16:53:27,336: stack ['$62call_function.8', '$68call_function.11']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=78, lineno=478)
DEBUG    2022-12-09 16:53:27,336: stack ['$70compare_op.12']
DEBUG    2022-12-09 16:53:27,336: end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: stack: []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=471)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=38, lineno=471)
DEBUG    2022-12-09 16:53:27,336: stack ['$b_none30.0']
DEBUG    2022-12-09 16:53:27,336: end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: stack: []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=474)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=474)
DEBUG    2022-12-09 16:53:27,336: stack ['$const38.0']
DEBUG    2022-12-09 16:53:27,336: end state. edges=[]
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: stack: []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=479)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=479)
DEBUG    2022-12-09 16:53:27,336: stack ['$const74.0']
DEBUG    2022-12-09 16:53:27,336: end state. edges=[]
DEBUG    2022-12-09 16:53:27,336: pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,336: stack: []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=78, inst=LOAD_GLOBAL(arg=2, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack []
DEBUG    2022-12-09 16:53:27,336: dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$78load_global.0']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=82, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$78load_global.0', '$a80.1']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=84, inst=LOAD_FAST(arg=1, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$78load_global.0', '$a80.1', '$const82.2']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=86, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=90, inst=LOAD_FAST(arg=0, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$88load_global.5']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=92, inst=CALL_FUNCTION(arg=1, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$88load_global.5', '$a90.6']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=94, inst=CALL_FUNCTION(arg=5, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$92call_function.7']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$94call_function.8']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=98, inst=COMPARE_OP(arg=2, lineno=480)
DEBUG    2022-12-09 16:53:27,336: stack ['$94call_function.8', '$const96.9']
DEBUG    2022-12-09 16:53:27,336: dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=480)
DEBUG    2022-12-09 16:53:27,344: stack ['$98compare_op.10']
DEBUG    2022-12-09 16:53:27,344: end state. edges=[]
DEBUG    2022-12-09 16:53:27,344: pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,344: stack: []
DEBUG    2022-12-09 16:53:27,344: dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=472)
DEBUG    2022-12-09 16:53:27,344: stack []
DEBUG    2022-12-09 16:53:27,344: dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=472)
DEBUG    2022-12-09 16:53:27,344: stack ['$const34.0']
DEBUG    2022-12-09 16:53:27,344: end state. edges=[]
DEBUG    2022-12-09 16:53:27,344: pending: deque([State(pc_initial=38 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,344: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,344: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,344: defmap: {}
DEBUG    2022-12-09 16:53:27,344: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,344: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,344: keep phismap: {}
DEBUG    2022-12-09 16:53:27,344: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,344: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$const4.1', 'res': '$6is_op.2'}), (8, {'value': '$6is_op.2'}), (10, {'res': '$b10.3'}), (12, {'res': '$const12.4'}), (14, {'lhs': '$b10.3', 'rhs': '$const12.4', 'res': '$14is_op.5'}), (16, {'value': '$14is_op.5'}), (18, {'res': '$a_none18.6'}), (20, {'pred': '$a_none18.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$b_none22.0'}), (24, {'pred': '$b_none22.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 42: ()})
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$a_none26.0'}), (28, {'pred': '$a_none26.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 38: ()})
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$b_none30.0'}), (32, {'pred': '$b_none30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$const38.0'}), (40, {'retval': '$const38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$a44.1'}), (46, {'func': '$42load_global.0', 'args': ['$a44.1'], 'res': '$46call_function.2'}), (48, {'value': '$46call_function.2'}), (50, {'res': '$50load_global.3'}), (52, {'res': '$b52.4'}), (54, {'func': '$50load_global.3', 'args': ['$b52.4'], 'res': '$54call_function.5'}), (56, {'value': '$54call_function.5'}), (58, {'res': '$58load_global.6'}), (60, {'res': '$a60.7'}), (62, {'func': '$58load_global.6', 'args': ['$a60.7'], 'res': '$62call_function.8'}), (64, {'res': '$64load_global.9'}), (66, {'res': '$b66.10'}), (68, {'func': '$64load_global.9', 'args': ['$b66.10'], 'res': '$68call_function.11'}), (70, {'lhs': '$62call_function.8', 'rhs': '$68call_function.11', 'res': '$70compare_op.12'}), (72, {'pred': '$70compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 78: ()})
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'retval': '$const74.0', 'castval': '$76return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,344: block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$a80.1'}), (82, {'res': '$const82.2'}), (84, {'res': '$b84.3'}), (86, {'res': '$const86.4'}), (88, {'res': '$88load_global.5'}), (90, {'res': '$a90.6'}), (92, {'func': '$88load_global.5', 'args': ['$a90.6'], 'res': '$92call_function.7'}), (94, {'func': '$78load_global.0', 'args': ['$a80.1', '$const82.2', '$b84.3', '$const86.4', '$92call_function.7'], 'res': '$94call_function.8'}), (96, {'res': '$const96.9'}), (98, {'lhs': '$94call_function.8', 'rhs': '$const96.9', 'res': '$98compare_op.10'}), (100, {'retval': '$98compare_op.10', 'castval': '$100return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,346: label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    a_none = a is $const4.1                  ['$const4.1', 'a', 'a_none']
    $const12.4 = const(NoneType, None)       ['$const12.4']
    b_none = b is $const12.4                 ['$const12.4', 'b', 'b_none']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None) ['$20pred', 'a_none', 'bool20']
    branch $20pred, 26, 22                   ['$20pred']
label 22:
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None) ['$24pred', 'b_none', 'bool24']
    branch $24pred, 26, 42                   ['$24pred']
label 26:
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None) ['$28pred', 'a_none', 'bool28']
    branch $28pred, 30, 38                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None) ['$32pred', 'b_none', 'bool32']
    branch $32pred, 34, 38                   ['$32pred']
label 34:
    $const34.0 = const(bool, True)           ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']
label 38:
    $const38.0 = const(bool, False)          ['$const38.0']
    $40return_value.1 = cast(value=$const38.0) ['$40return_value.1', '$const38.0']
    return $40return_value.1                 ['$40return_value.1']
label 42:
    $42load_global.0 = global(str: <class 'str'>) ['$42load_global.0']
    a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$42load_global.0', 'a', 'a']
    $50load_global.3 = global(str: <class 'str'>) ['$50load_global.3']
    b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None) ['$50load_global.3', 'b', 'b']
    $58load_global.6 = global(len: <built-in function len>) ['$58load_global.6']
    $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$58load_global.6', '$62call_function.8', 'a']
    $64load_global.9 = global(len: <built-in function len>) ['$64load_global.9']
    $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None) ['$64load_global.9', '$68call_function.11', 'b']
    $70compare_op.12 = $62call_function.8 != $68call_function.11 ['$62call_function.8', '$68call_function.11', '$70compare_op.12']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None) ['$70compare_op.12', '$72pred', 'bool72']
    branch $72pred, 74, 78                   ['$72pred']
label 74:
    $const74.0 = const(bool, False)          ['$const74.0']
    $76return_value.1 = cast(value=$const74.0) ['$76return_value.1', '$const74.0']
    return $76return_value.1                 ['$76return_value.1']
label 78:
    $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000024C8AB37310>) ['$78load_global.0']
    $const82.2 = const(int, 0)               ['$const82.2']
    $const86.4 = const(int, 0)               ['$const86.4']
    $88load_global.5 = global(len: <built-in function len>) ['$88load_global.5']
    $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$88load_global.5', '$92call_function.7', 'a']
    $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None) ['$78load_global.0', '$92call_function.7', '$94call_function.8', '$const82.2', '$const86.4', 'a', 'b']
    $const96.9 = const(int, 0)               ['$const96.9']
    $98compare_op.10 = $94call_function.8 == $const96.9 ['$94call_function.8', '$98compare_op.10', '$const96.9']
    $100return_value.11 = cast(value=$98compare_op.10) ['$100return_value.11', '$98compare_op.10']
    return $100return_value.11               ['$100return_value.11']

DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:27,346: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:27,346: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,346: on stmt: a_none = a is $const4.1
DEBUG    2022-12-09 16:53:27,346: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,346: on stmt: b_none = b is $const12.4
DEBUG    2022-12-09 16:53:27,346: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,346: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: branch $20pred, 26, 22
DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 22
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,346: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: branch $24pred, 26, 42
DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 26
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,346: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: branch $28pred, 30, 38
DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 30
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,346: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: branch $32pred, 34, 38
DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 34
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: $const34.0 = const(bool, True)
DEBUG    2022-12-09 16:53:27,346: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2022-12-09 16:53:27,346: on stmt: return $36return_value.1
DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 38
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: $const38.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,346: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2022-12-09 16:53:27,346: on stmt: return $40return_value.1
DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 42
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,346: on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,346: on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,346: on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,346: on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2022-12-09 16:53:27,346: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,346: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,346: on stmt: branch $72pred, 74, 78
DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 74
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: $const74.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,346: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2022-12-09 16:53:27,346: on stmt: return $76return_value.1
DEBUG    2022-12-09 16:53:27,346: ==== SSA block analysis pass on 78
DEBUG    2022-12-09 16:53:27,346: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2A03A0>
DEBUG    2022-12-09 16:53:27,346: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000024C8AB37310>)
DEBUG    2022-12-09 16:53:27,354: on stmt: $const82.2 = const(int, 0)
DEBUG    2022-12-09 16:53:27,354: on stmt: $const86.4 = const(int, 0)
DEBUG    2022-12-09 16:53:27,354: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,354: on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,354: on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,354: on stmt: $const96.9 = const(int, 0)
DEBUG    2022-12-09 16:53:27,354: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2022-12-09 16:53:27,354: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2022-12-09 16:53:27,354: on stmt: return $100return_value.11
DEBUG    2022-12-09 16:53:27,354: defs defaultdict(<class 'list'>,
            {'$100return_value.11': [<numba.core.ir.Assign object at 0x0000024C8C2B93A0>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000024C8C2B0670>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000024C8C2B0970>],
             '$28pred': [<numba.core.ir.Assign object at 0x0000024C8C2B0DF0>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000024C8C2B32B0>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C2B3670>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C2B3A90>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C2B3D30>],
             '$50load_global.3': [<numba.core.ir.Assign object at 0x0000024C8C2B5250>],
             '$58load_global.6': [<numba.core.ir.Assign object at 0x0000024C8C2B5730>],
             '$62call_function.8': [<numba.core.ir.Assign object at 0x0000024C8C2B5A30>],
             '$64load_global.9': [<numba.core.ir.Assign object at 0x0000024C8C2B5B50>],
             '$68call_function.11': [<numba.core.ir.Assign object at 0x0000024C8C2B5E50>],
             '$70compare_op.12': [<numba.core.ir.Assign object at 0x0000024C8C2B5FA0>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000024C8C2B7250>],
             '$76return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C298940>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C2B7400>],
             '$88load_global.5': [<numba.core.ir.Assign object at 0x0000024C8C2B7AC0>],
             '$92call_function.7': [<numba.core.ir.Assign object at 0x0000024C8C2B7DC0>],
             '$94call_function.8': [<numba.core.ir.Assign object at 0x0000024C8C2B7F40>],
             '$98compare_op.10': [<numba.core.ir.Assign object at 0x0000024C8C2B9250>],
             '$const12.4': [<numba.core.ir.Assign object at 0x0000024C8C2A0FD0>],
             '$const34.0': [<numba.core.ir.Assign object at 0x0000024C8C2B34F0>],
             '$const38.0': [<numba.core.ir.Assign object at 0x0000024C8C2B3910>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024C8C2A0760>],
             '$const74.0': [<numba.core.ir.Assign object at 0x0000024C8C2B3C10>],
             '$const82.2': [<numba.core.ir.Assign object at 0x0000024C8C2B76A0>],
             '$const86.4': [<numba.core.ir.Assign object at 0x0000024C8C2B7940>],
             '$const96.9': [<numba.core.ir.Assign object at 0x0000024C8C2B90A0>],
             'a': [<numba.core.ir.Assign object at 0x0000024C8C2A04C0>,
                   <numba.core.ir.Assign object at 0x0000024C8C2B5070>],
             'a_none': [<numba.core.ir.Assign object at 0x0000024C8C2A0C40>],
             'b': [<numba.core.ir.Assign object at 0x0000024C8C2A00A0>,
                   <numba.core.ir.Assign object at 0x0000024C8C2B5550>],
             'b_none': [<numba.core.ir.Assign object at 0x0000024C8C2B01C0>],
             'bool20': [<numba.core.ir.Assign object at 0x0000024C8C2B0550>],
             'bool24': [<numba.core.ir.Assign object at 0x0000024C8C2B0850>],
             'bool28': [<numba.core.ir.Assign object at 0x0000024C8C2B0CD0>],
             'bool32': [<numba.core.ir.Assign object at 0x0000024C8C2B3190>],
             'bool72': [<numba.core.ir.Assign object at 0x0000024C8C2B7130>]})
DEBUG    2022-12-09 16:53:27,354: SSA violators {'b', 'a'}
DEBUG    2022-12-09 16:53:27,354: Fix SSA violator on var b
DEBUG    2022-12-09 16:53:27,354: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:27,354: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,354: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:27,354: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:27,354: first assign: b
DEBUG    2022-12-09 16:53:27,354: replaced with: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:27,354: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,354: on stmt: a_none = a is $const4.1
DEBUG    2022-12-09 16:53:27,354: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,354: on stmt: b_none = b is $const12.4
DEBUG    2022-12-09 16:53:27,354: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,354: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,354: on stmt: branch $20pred, 26, 22
DEBUG    2022-12-09 16:53:27,354: ==== SSA block rewrite pass on 22
DEBUG    2022-12-09 16:53:27,354: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,354: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,354: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,354: on stmt: branch $24pred, 26, 42
DEBUG    2022-12-09 16:53:27,354: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:27,354: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,354: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $28pred, 30, 38
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 30
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $32pred, 34, 38
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 34
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $const34.0 = const(bool, True)
DEBUG    2022-12-09 16:53:27,356: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $36return_value.1
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 38
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $const38.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,356: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $40return_value.1
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 42
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: replaced with: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2022-12-09 16:53:27,356: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $72pred, 74, 78
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 74
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $const74.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,356: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $76return_value.1
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 78
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000024C8AB37310>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $const82.2 = const(int, 0)
DEBUG    2022-12-09 16:53:27,356: on stmt: $const86.4 = const(int, 0)
DEBUG    2022-12-09 16:53:27,356: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $const96.9 = const(int, 0)
DEBUG    2022-12-09 16:53:27,356: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2022-12-09 16:53:27,356: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $100return_value.11
DEBUG    2022-12-09 16:53:27,356: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024C8C2B7C70>],
             42: [<numba.core.ir.Assign object at 0x0000024C8C2B9CA0>]})
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:27,356: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:27,356: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,356: on stmt: a_none = a is $const4.1
DEBUG    2022-12-09 16:53:27,356: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,356: on stmt: b_none = b is $const12.4
DEBUG    2022-12-09 16:53:27,356: find_def var='b' stmt=b_none = b is $const12.4
DEBUG    2022-12-09 16:53:27,356: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $20pred, 26, 22
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 22
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $24pred, 26, 42
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $28pred, 30, 38
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 30
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $32pred, 34, 38
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 34
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $const34.0 = const(bool, True)
DEBUG    2022-12-09 16:53:27,356: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $36return_value.1
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 38
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $const38.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,356: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $40return_value.1
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 42
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: find_def var='b' stmt=b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: find_def_from_top label 42
DEBUG    2022-12-09 16:53:27,356: idom 22 from label 42
DEBUG    2022-12-09 16:53:27,356: find_def_from_bottom label 22
DEBUG    2022-12-09 16:53:27,356: find_def_from_top label 22
DEBUG    2022-12-09 16:53:27,356: idom 0 from label 22
DEBUG    2022-12-09 16:53:27,356: find_def_from_bottom label 0
DEBUG    2022-12-09 16:53:27,356: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: find_def var='b' stmt=$68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: replaced with: $68call_function.11 = call $64load_global.9(b.1, func=$64load_global.9, args=[Var(b.1, unicode.py:477)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2022-12-09 16:53:27,356: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $72pred, 74, 78
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 74
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $const74.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,356: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $76return_value.1
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 78
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B55B0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000024C8AB37310>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $const82.2 = const(int, 0)
DEBUG    2022-12-09 16:53:27,356: on stmt: $const86.4 = const(int, 0)
DEBUG    2022-12-09 16:53:27,356: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: find_def var='b' stmt=$94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: find_def_from_top label 78
DEBUG    2022-12-09 16:53:27,356: idom 42 from label 78
DEBUG    2022-12-09 16:53:27,356: find_def_from_bottom label 42
DEBUG    2022-12-09 16:53:27,356: replaced with: $94call_function.8 = call $78load_global.0(a, $const82.2, b.1, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b.1, unicode.py:477), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: $const96.9 = const(int, 0)
DEBUG    2022-12-09 16:53:27,356: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2022-12-09 16:53:27,356: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $100return_value.11
DEBUG    2022-12-09 16:53:27,356: Fix SSA violator on var a
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,356: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:27,356: first assign: a
DEBUG    2022-12-09 16:53:27,356: replaced with: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:27,356: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:27,356: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,356: on stmt: a_none = a is $const4.1
DEBUG    2022-12-09 16:53:27,356: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,356: on stmt: b_none = b is $const12.4
DEBUG    2022-12-09 16:53:27,356: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $20pred, 26, 22
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 22
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,356: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $24pred, 26, 42
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,356: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $28pred, 30, 38
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 30
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,356: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,356: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,356: on stmt: branch $32pred, 34, 38
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 34
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,356: on stmt: $const34.0 = const(bool, True)
DEBUG    2022-12-09 16:53:27,356: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2022-12-09 16:53:27,356: on stmt: return $36return_value.1
DEBUG    2022-12-09 16:53:27,356: ==== SSA block rewrite pass on 38
DEBUG    2022-12-09 16:53:27,356: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,364: on stmt: $const38.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,364: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2022-12-09 16:53:27,364: on stmt: return $40return_value.1
DEBUG    2022-12-09 16:53:27,364: ==== SSA block rewrite pass on 42
DEBUG    2022-12-09 16:53:27,364: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,364: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,364: on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,364: replaced with: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,364: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,364: on stmt: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,364: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,364: on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,364: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,364: on stmt: $68call_function.11 = call $64load_global.9(b.1, func=$64load_global.9, args=[Var(b.1, unicode.py:477)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,364: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2022-12-09 16:53:27,364: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,364: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,364: on stmt: branch $72pred, 74, 78
DEBUG    2022-12-09 16:53:27,364: ==== SSA block rewrite pass on 74
DEBUG    2022-12-09 16:53:27,364: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,364: on stmt: $const74.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,364: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2022-12-09 16:53:27,364: on stmt: return $76return_value.1
DEBUG    2022-12-09 16:53:27,364: ==== SSA block rewrite pass on 78
DEBUG    2022-12-09 16:53:27,364: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2B7BE0>
DEBUG    2022-12-09 16:53:27,364: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000024C8AB37310>)
DEBUG    2022-12-09 16:53:27,364: on stmt: $const82.2 = const(int, 0)
DEBUG    2022-12-09 16:53:27,364: on stmt: $const86.4 = const(int, 0)
DEBUG    2022-12-09 16:53:27,364: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,364: on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,364: on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b.1, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b.1, unicode.py:477), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,364: on stmt: $const96.9 = const(int, 0)
DEBUG    2022-12-09 16:53:27,364: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2022-12-09 16:53:27,364: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2022-12-09 16:53:27,364: on stmt: return $100return_value.11
DEBUG    2022-12-09 16:53:27,366: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024C8C2B9F40>],
             42: [<numba.core.ir.Assign object at 0x0000024C8C2B9820>]})
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:27,366: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:27,366: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,366: on stmt: a_none = a is $const4.1
DEBUG    2022-12-09 16:53:27,366: find_def var='a' stmt=a_none = a is $const4.1
DEBUG    2022-12-09 16:53:27,366: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,366: on stmt: b_none = b is $const12.4
DEBUG    2022-12-09 16:53:27,366: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: branch $20pred, 26, 22
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 22
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: branch $24pred, 26, 42
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: branch $28pred, 30, 38
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 30
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: branch $32pred, 34, 38
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 34
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: $const34.0 = const(bool, True)
DEBUG    2022-12-09 16:53:27,366: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2022-12-09 16:53:27,366: on stmt: return $36return_value.1
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 38
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: $const38.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,366: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2022-12-09 16:53:27,366: on stmt: return $40return_value.1
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 42
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,366: on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: find_def var='a' stmt=a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: find_def_from_top label 42
DEBUG    2022-12-09 16:53:27,366: idom 22 from label 42
DEBUG    2022-12-09 16:53:27,366: find_def_from_bottom label 22
DEBUG    2022-12-09 16:53:27,366: find_def_from_top label 22
DEBUG    2022-12-09 16:53:27,366: idom 0 from label 22
DEBUG    2022-12-09 16:53:27,366: find_def_from_bottom label 0
DEBUG    2022-12-09 16:53:27,366: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2022-12-09 16:53:27,366: on stmt: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: find_def var='a' stmt=$62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: replaced with: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $68call_function.11 = call $64load_global.9(b.1, func=$64load_global.9, args=[Var(b.1, unicode.py:477)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2022-12-09 16:53:27,366: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: branch $72pred, 74, 78
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 74
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: $const74.0 = const(bool, False)
DEBUG    2022-12-09 16:53:27,366: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2022-12-09 16:53:27,366: on stmt: return $76return_value.1
DEBUG    2022-12-09 16:53:27,366: ==== SSA block rewrite pass on 78
DEBUG    2022-12-09 16:53:27,366: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2B9790>
DEBUG    2022-12-09 16:53:27,366: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000024C8AB37310>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $const82.2 = const(int, 0)
DEBUG    2022-12-09 16:53:27,366: on stmt: $const86.4 = const(int, 0)
DEBUG    2022-12-09 16:53:27,366: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2022-12-09 16:53:27,366: on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: find_def var='a' stmt=$92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: find_def_from_top label 78
DEBUG    2022-12-09 16:53:27,366: idom 42 from label 78
DEBUG    2022-12-09 16:53:27,366: find_def_from_bottom label 42
DEBUG    2022-12-09 16:53:27,366: replaced with: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b.1, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b.1, unicode.py:477), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: find_def var='a' stmt=$94call_function.8 = call $78load_global.0(a, $const82.2, b.1, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b.1, unicode.py:477), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: find_def_from_top label 78
DEBUG    2022-12-09 16:53:27,366: idom 42 from label 78
DEBUG    2022-12-09 16:53:27,366: find_def_from_bottom label 42
DEBUG    2022-12-09 16:53:27,366: replaced with: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b.1, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b.1, unicode.py:477), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,366: on stmt: $const96.9 = const(int, 0)
DEBUG    2022-12-09 16:53:27,366: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2022-12-09 16:53:27,366: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2022-12-09 16:53:27,366: on stmt: return $100return_value.11
DEBUG    2022-12-09 16:53:27,376: bytecode dump:
>          0	NOP(arg=None, lineno=439)
           2	LOAD_FAST(arg=0, lineno=439)
           4	RETURN_VALUE(arg=None, lineno=439)
DEBUG    2022-12-09 16:53:27,376: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,376: stack: []
DEBUG    2022-12-09 16:53:27,376: dispatch pc=0, inst=NOP(arg=None, lineno=439)
DEBUG    2022-12-09 16:53:27,376: stack []
DEBUG    2022-12-09 16:53:27,376: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=439)
DEBUG    2022-12-09 16:53:27,376: stack []
DEBUG    2022-12-09 16:53:27,376: dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=439)
DEBUG    2022-12-09 16:53:27,376: stack ['$s2.0']
DEBUG    2022-12-09 16:53:27,376: end state. edges=[]
DEBUG    2022-12-09 16:53:27,376: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,376: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,376: defmap: {}
DEBUG    2022-12-09 16:53:27,376: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,376: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,376: keep phismap: {}
DEBUG    2022-12-09 16:53:27,376: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,376: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,376: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$s2.0'}), (4, {'retval': '$s2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,376: label 0:
    s = arg(0, name=s)                       ['s']
    $4return_value.1 = cast(value=s)         ['$4return_value.1', 's']
    return $4return_value.1                  ['$4return_value.1']

DEBUG    2022-12-09 16:53:27,376: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,376: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C2EC880>
DEBUG    2022-12-09 16:53:27,376: on stmt: s = arg(0, name=s)
DEBUG    2022-12-09 16:53:27,376: on stmt: $4return_value.1 = cast(value=s)
DEBUG    2022-12-09 16:53:27,376: on stmt: return $4return_value.1
DEBUG    2022-12-09 16:53:27,376: defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C2F02B0>],
             's': [<numba.core.ir.Assign object at 0x0000024C8C2F0550>]})
DEBUG    2022-12-09 16:53:27,376: SSA violators set()
DEBUG    2022-12-09 16:53:27,404: bytecode dump:
>          0	NOP(arg=None, lineno=446)
           2	LOAD_FAST(arg=0, lineno=446)
           4	LOAD_ATTR(arg=0, lineno=446)
           6	RETURN_VALUE(arg=None, lineno=446)
DEBUG    2022-12-09 16:53:27,404: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,404: stack: []
DEBUG    2022-12-09 16:53:27,404: dispatch pc=0, inst=NOP(arg=None, lineno=446)
DEBUG    2022-12-09 16:53:27,404: stack []
DEBUG    2022-12-09 16:53:27,404: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=446)
DEBUG    2022-12-09 16:53:27,404: stack []
DEBUG    2022-12-09 16:53:27,404: dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=446)
DEBUG    2022-12-09 16:53:27,404: stack ['$s2.0']
DEBUG    2022-12-09 16:53:27,404: dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=446)
DEBUG    2022-12-09 16:53:27,404: stack ['$4load_attr.1']
DEBUG    2022-12-09 16:53:27,404: end state. edges=[]
DEBUG    2022-12-09 16:53:27,404: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,404: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,404: defmap: {}
DEBUG    2022-12-09 16:53:27,404: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,405: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,405: keep phismap: {}
DEBUG    2022-12-09 16:53:27,405: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,405: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,405: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$s2.0'}), (4, {'item': '$s2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,405: label 0:
    s = arg(0, name=s)                       ['s']
    $4load_attr.1 = getattr(value=s, attr=_length) ['$4load_attr.1', 's']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG    2022-12-09 16:53:27,406: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,406: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C319B80>
DEBUG    2022-12-09 16:53:27,406: on stmt: s = arg(0, name=s)
DEBUG    2022-12-09 16:53:27,406: on stmt: $4load_attr.1 = getattr(value=s, attr=_length)
DEBUG    2022-12-09 16:53:27,406: on stmt: $6return_value.2 = cast(value=$4load_attr.1)
DEBUG    2022-12-09 16:53:27,406: on stmt: return $6return_value.2
DEBUG    2022-12-09 16:53:27,407: defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x0000024C8C334BB0>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x0000024C8C334D30>],
             's': [<numba.core.ir.Assign object at 0x0000024C8C334070>]})
DEBUG    2022-12-09 16:53:27,407: SSA violators set()
DEBUG    2022-12-09 16:53:27,428: bytecode dump:
>          0	NOP(arg=None, lineno=389)
           2	LOAD_FAST(arg=4, lineno=389)
           4	LOAD_CONST(arg=1, lineno=389)
           6	COMPARE_OP(arg=2, lineno=389)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=389)
          10	LOAD_CONST(arg=1, lineno=390)
          12	RETURN_VALUE(arg=None, lineno=390)
>         14	LOAD_FAST(arg=1, lineno=391)
          16	LOAD_FAST(arg=4, lineno=391)
          18	BINARY_ADD(arg=None, lineno=391)
          20	LOAD_FAST(arg=0, lineno=391)
          22	LOAD_ATTR(arg=0, lineno=391)
          24	COMPARE_OP(arg=4, lineno=391)
          26	POP_JUMP_IF_FALSE(arg=32, lineno=391)
          28	LOAD_CONST(arg=2, lineno=392)
          30	RETURN_VALUE(arg=None, lineno=392)
>         32	LOAD_FAST(arg=3, lineno=393)
          34	LOAD_FAST(arg=4, lineno=393)
          36	BINARY_ADD(arg=None, lineno=393)
          38	LOAD_FAST(arg=2, lineno=393)
          40	LOAD_ATTR(arg=0, lineno=393)
          42	COMPARE_OP(arg=4, lineno=393)
          44	POP_JUMP_IF_FALSE(arg=50, lineno=393)
          46	LOAD_CONST(arg=3, lineno=394)
          48	RETURN_VALUE(arg=None, lineno=394)
>         50	LOAD_GLOBAL(arg=1, lineno=396)
          52	LOAD_FAST(arg=4, lineno=396)
          54	CALL_FUNCTION(arg=1, lineno=396)
          56	GET_ITER(arg=None, lineno=396)
>         58	FOR_ITER(arg=60, lineno=396)
          60	STORE_FAST(arg=5, lineno=396)
          62	LOAD_GLOBAL(arg=2, lineno=397)
          64	LOAD_FAST(arg=0, lineno=397)
          66	LOAD_FAST(arg=1, lineno=397)
          68	LOAD_FAST(arg=5, lineno=397)
          70	BINARY_ADD(arg=None, lineno=397)
          72	CALL_FUNCTION(arg=2, lineno=397)
          74	STORE_FAST(arg=6, lineno=397)
          76	LOAD_GLOBAL(arg=2, lineno=398)
          78	LOAD_FAST(arg=2, lineno=398)
          80	LOAD_FAST(arg=3, lineno=398)
          82	LOAD_FAST(arg=5, lineno=398)
          84	BINARY_ADD(arg=None, lineno=398)
          86	CALL_FUNCTION(arg=2, lineno=398)
          88	STORE_FAST(arg=7, lineno=398)
          90	LOAD_FAST(arg=6, lineno=399)
          92	LOAD_FAST(arg=7, lineno=399)
          94	COMPARE_OP(arg=0, lineno=399)
          96	POP_JUMP_IF_FALSE(arg=104, lineno=399)
          98	POP_TOP(arg=None, lineno=400)
         100	LOAD_CONST(arg=2, lineno=400)
         102	RETURN_VALUE(arg=None, lineno=400)
>        104	LOAD_FAST(arg=6, lineno=401)
         106	LOAD_FAST(arg=7, lineno=401)
         108	COMPARE_OP(arg=4, lineno=401)
         110	POP_JUMP_IF_FALSE(arg=58, lineno=401)
         112	POP_TOP(arg=None, lineno=402)
         114	LOAD_CONST(arg=3, lineno=402)
         116	RETURN_VALUE(arg=None, lineno=402)
         118	JUMP_ABSOLUTE(arg=58, lineno=402)
>        120	LOAD_CONST(arg=1, lineno=404)
         122	RETURN_VALUE(arg=None, lineno=404)
DEBUG    2022-12-09 16:53:27,428: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,428: stack: []
DEBUG    2022-12-09 16:53:27,428: dispatch pc=0, inst=NOP(arg=None, lineno=389)
DEBUG    2022-12-09 16:53:27,428: stack []
DEBUG    2022-12-09 16:53:27,428: dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=389)
DEBUG    2022-12-09 16:53:27,428: stack []
DEBUG    2022-12-09 16:53:27,428: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=389)
DEBUG    2022-12-09 16:53:27,429: stack ['$n2.0']
DEBUG    2022-12-09 16:53:27,429: dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=389)
DEBUG    2022-12-09 16:53:27,429: stack ['$n2.0', '$const4.1']
DEBUG    2022-12-09 16:53:27,429: dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=389)
DEBUG    2022-12-09 16:53:27,429: stack ['$6compare_op.2']
DEBUG    2022-12-09 16:53:27,429: end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,429: pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,429: stack: []
DEBUG    2022-12-09 16:53:27,429: dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=390)
DEBUG    2022-12-09 16:53:27,429: stack []
DEBUG    2022-12-09 16:53:27,429: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=390)
DEBUG    2022-12-09 16:53:27,429: stack ['$const10.0']
DEBUG    2022-12-09 16:53:27,429: end state. edges=[]
DEBUG    2022-12-09 16:53:27,429: pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,429: stack: []
DEBUG    2022-12-09 16:53:27,429: dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=391)
DEBUG    2022-12-09 16:53:27,430: stack []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=16, inst=LOAD_FAST(arg=4, lineno=391)
DEBUG    2022-12-09 16:53:27,430: stack ['$a_offset14.0']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=391)
DEBUG    2022-12-09 16:53:27,430: stack ['$a_offset14.0', '$n16.1']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=391)
DEBUG    2022-12-09 16:53:27,430: stack ['$18binary_add.2']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=22, inst=LOAD_ATTR(arg=0, lineno=391)
DEBUG    2022-12-09 16:53:27,430: stack ['$18binary_add.2', '$a20.3']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=391)
DEBUG    2022-12-09 16:53:27,430: stack ['$18binary_add.2', '$22load_attr.4']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=32, lineno=391)
DEBUG    2022-12-09 16:53:27,430: stack ['$24compare_op.5']
DEBUG    2022-12-09 16:53:27,430: end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,430: pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,430: stack: []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=392)
DEBUG    2022-12-09 16:53:27,430: stack []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=392)
DEBUG    2022-12-09 16:53:27,430: stack ['$const28.0']
DEBUG    2022-12-09 16:53:27,430: end state. edges=[]
DEBUG    2022-12-09 16:53:27,430: pending: deque([State(pc_initial=32 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,430: stack: []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=393)
DEBUG    2022-12-09 16:53:27,430: stack []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=393)
DEBUG    2022-12-09 16:53:27,430: stack ['$b_offset32.0']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=36, inst=BINARY_ADD(arg=None, lineno=393)
DEBUG    2022-12-09 16:53:27,430: stack ['$b_offset32.0', '$n34.1']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=393)
DEBUG    2022-12-09 16:53:27,430: stack ['$36binary_add.2']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=40, inst=LOAD_ATTR(arg=0, lineno=393)
DEBUG    2022-12-09 16:53:27,430: stack ['$36binary_add.2', '$b38.3']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=42, inst=COMPARE_OP(arg=4, lineno=393)
DEBUG    2022-12-09 16:53:27,430: stack ['$36binary_add.2', '$40load_attr.4']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=44, inst=POP_JUMP_IF_FALSE(arg=50, lineno=393)
DEBUG    2022-12-09 16:53:27,430: stack ['$42compare_op.5']
DEBUG    2022-12-09 16:53:27,430: end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,430: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,430: stack: []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=46, inst=LOAD_CONST(arg=3, lineno=394)
DEBUG    2022-12-09 16:53:27,430: stack []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=394)
DEBUG    2022-12-09 16:53:27,430: stack ['$const46.0']
DEBUG    2022-12-09 16:53:27,430: end state. edges=[]
DEBUG    2022-12-09 16:53:27,430: pending: deque([State(pc_initial=50 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,430: stack: []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=50, inst=LOAD_GLOBAL(arg=1, lineno=396)
DEBUG    2022-12-09 16:53:27,430: stack []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=396)
DEBUG    2022-12-09 16:53:27,430: stack ['$50load_global.0']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=396)
DEBUG    2022-12-09 16:53:27,430: stack ['$50load_global.0', '$n52.1']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=56, inst=GET_ITER(arg=None, lineno=396)
DEBUG    2022-12-09 16:53:27,430: stack ['$54call_function.2']
DEBUG    2022-12-09 16:53:27,430: end state. edges=[Edge(pc=58, stack=('$56get_iter.3',), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,430: pending: deque([State(pc_initial=58 nstack_initial=1)])
DEBUG    2022-12-09 16:53:27,430: stack: ['$phi58.0']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=58, inst=FOR_ITER(arg=60, lineno=396)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi58.0']
DEBUG    2022-12-09 16:53:27,430: end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0), Edge(pc=60, stack=('$phi58.0', '$58for_iter.2'), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,430: pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=60 nstack_initial=2)])
DEBUG    2022-12-09 16:53:27,430: stack: []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=120, inst=LOAD_CONST(arg=1, lineno=404)
DEBUG    2022-12-09 16:53:27,430: stack []
DEBUG    2022-12-09 16:53:27,430: dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=404)
DEBUG    2022-12-09 16:53:27,430: stack ['$const120.0']
DEBUG    2022-12-09 16:53:27,430: end state. edges=[]
DEBUG    2022-12-09 16:53:27,430: pending: deque([State(pc_initial=60 nstack_initial=2)])
DEBUG    2022-12-09 16:53:27,430: stack: ['$phi60.0', '$phi60.1']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=60, inst=STORE_FAST(arg=5, lineno=396)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$phi60.1']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=62, inst=LOAD_GLOBAL(arg=2, lineno=397)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=397)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$62load_global.2']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=397)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$62load_global.2', '$a64.3']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=397)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$62load_global.2', '$a64.3', '$a_offset66.4']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=70, inst=BINARY_ADD(arg=None, lineno=397)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$62load_global.2', '$a64.3', '$a_offset66.4', '$i68.5']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=397)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$62load_global.2', '$a64.3', '$70binary_add.6']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=74, inst=STORE_FAST(arg=6, lineno=397)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$72call_function.7']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=76, inst=LOAD_GLOBAL(arg=2, lineno=398)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=398)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$76load_global.8']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=398)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$76load_global.8', '$b78.9']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=398)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$76load_global.8', '$b78.9', '$b_offset80.10']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=84, inst=BINARY_ADD(arg=None, lineno=398)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$76load_global.8', '$b78.9', '$b_offset80.10', '$i82.11']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=86, inst=CALL_FUNCTION(arg=2, lineno=398)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$76load_global.8', '$b78.9', '$84binary_add.12']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=88, inst=STORE_FAST(arg=7, lineno=398)
DEBUG    2022-12-09 16:53:27,430: stack ['$phi60.0', '$86call_function.13']
DEBUG    2022-12-09 16:53:27,430: dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=399)
DEBUG    2022-12-09 16:53:27,435: stack ['$phi60.0']
DEBUG    2022-12-09 16:53:27,435: dispatch pc=92, inst=LOAD_FAST(arg=7, lineno=399)
DEBUG    2022-12-09 16:53:27,435: stack ['$phi60.0', '$a_chr90.14']
DEBUG    2022-12-09 16:53:27,435: dispatch pc=94, inst=COMPARE_OP(arg=0, lineno=399)
DEBUG    2022-12-09 16:53:27,435: stack ['$phi60.0', '$a_chr90.14', '$b_chr92.15']
DEBUG    2022-12-09 16:53:27,435: dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=104, lineno=399)
DEBUG    2022-12-09 16:53:27,435: stack ['$phi60.0', '$94compare_op.16']
DEBUG    2022-12-09 16:53:27,435: end state. edges=[Edge(pc=98, stack=('$phi60.0',), blockstack=(), npush=0), Edge(pc=104, stack=('$phi60.0',), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,435: pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=104 nstack_initial=1)])
DEBUG    2022-12-09 16:53:27,435: stack: ['$phi98.0']
DEBUG    2022-12-09 16:53:27,435: dispatch pc=98, inst=POP_TOP(arg=None, lineno=400)
DEBUG    2022-12-09 16:53:27,435: stack ['$phi98.0']
DEBUG    2022-12-09 16:53:27,435: dispatch pc=100, inst=LOAD_CONST(arg=2, lineno=400)
DEBUG    2022-12-09 16:53:27,435: stack []
DEBUG    2022-12-09 16:53:27,435: dispatch pc=102, inst=RETURN_VALUE(arg=None, lineno=400)
DEBUG    2022-12-09 16:53:27,435: stack ['$const100.1']
DEBUG    2022-12-09 16:53:27,435: end state. edges=[]
DEBUG    2022-12-09 16:53:27,435: pending: deque([State(pc_initial=104 nstack_initial=1)])
DEBUG    2022-12-09 16:53:27,435: stack: ['$phi104.0']
DEBUG    2022-12-09 16:53:27,435: dispatch pc=104, inst=LOAD_FAST(arg=6, lineno=401)
DEBUG    2022-12-09 16:53:27,435: stack ['$phi104.0']
DEBUG    2022-12-09 16:53:27,435: dispatch pc=106, inst=LOAD_FAST(arg=7, lineno=401)
DEBUG    2022-12-09 16:53:27,435: stack ['$phi104.0', '$a_chr104.1']
DEBUG    2022-12-09 16:53:27,435: dispatch pc=108, inst=COMPARE_OP(arg=4, lineno=401)
DEBUG    2022-12-09 16:53:27,437: stack ['$phi104.0', '$a_chr104.1', '$b_chr106.2']
DEBUG    2022-12-09 16:53:27,437: dispatch pc=110, inst=POP_JUMP_IF_FALSE(arg=58, lineno=401)
DEBUG    2022-12-09 16:53:27,437: stack ['$phi104.0', '$108compare_op.3']
DEBUG    2022-12-09 16:53:27,437: end state. edges=[Edge(pc=112, stack=('$phi104.0',), blockstack=(), npush=0), Edge(pc=58, stack=('$phi104.0',), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,437: pending: deque([State(pc_initial=112 nstack_initial=1), State(pc_initial=58 nstack_initial=1)])
DEBUG    2022-12-09 16:53:27,437: stack: ['$phi112.0']
DEBUG    2022-12-09 16:53:27,437: dispatch pc=112, inst=POP_TOP(arg=None, lineno=402)
DEBUG    2022-12-09 16:53:27,437: stack ['$phi112.0']
DEBUG    2022-12-09 16:53:27,437: dispatch pc=114, inst=LOAD_CONST(arg=3, lineno=402)
DEBUG    2022-12-09 16:53:27,437: stack []
DEBUG    2022-12-09 16:53:27,437: dispatch pc=116, inst=RETURN_VALUE(arg=None, lineno=402)
DEBUG    2022-12-09 16:53:27,437: stack ['$const114.1']
DEBUG    2022-12-09 16:53:27,437: end state. edges=[]
DEBUG    2022-12-09 16:53:27,437: pending: deque([State(pc_initial=58 nstack_initial=1)])
DEBUG    2022-12-09 16:53:27,437: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,437: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=1): {'$phi58.0'},
             State(pc_initial=60 nstack_initial=2): {'$phi60.1'},
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=1): set(),
             State(pc_initial=112 nstack_initial=1): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,437: defmap: {'$phi58.0': State(pc_initial=50 nstack_initial=0),
 '$phi60.1': State(pc_initial=58 nstack_initial=1)}
DEBUG    2022-12-09 16:53:27,437: phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi60.0', State(pc_initial=60 nstack_initial=2))},
             '$phi112.0': {('$phi104.0',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0)),
                          ('$phi104.0',
                           State(pc_initial=104 nstack_initial=1))},
             '$phi60.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$phi60.0', State(pc_initial=60 nstack_initial=2))}})
DEBUG    2022-12-09 16:53:27,437: changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi112.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0)),
                          ('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG    2022-12-09 16:53:27,437: changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi112.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG    2022-12-09 16:53:27,437: changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi112.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG    2022-12-09 16:53:27,437: keep phismap: {'$phi58.0': {('$56get_iter.3', State(pc_initial=50 nstack_initial=0))},
 '$phi60.1': {('$58for_iter.2', State(pc_initial=58 nstack_initial=1))}}
DEBUG    2022-12-09 16:53:27,437: new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=50 nstack_initial=0): {'$phi58.0': '$56get_iter.3'},
             State(pc_initial=58 nstack_initial=1): {'$phi60.1': '$58for_iter.2'}})
DEBUG    2022-12-09 16:53:27,437: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$n2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$n2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$a_offset14.0'}), (16, {'res': '$n16.1'}), (18, {'lhs': '$a_offset14.0', 'rhs': '$n16.1', 'res': '$18binary_add.2'}), (20, {'res': '$a20.3'}), (22, {'item': '$a20.3', 'res': '$22load_attr.4'}), (24, {'lhs': '$18binary_add.2', 'rhs': '$22load_attr.4', 'res': '$24compare_op.5'}), (26, {'pred': '$24compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 32: ()})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$const28.0'}), (30, {'retval': '$const28.0', 'castval': '$30return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$b_offset32.0'}), (34, {'res': '$n34.1'}), (36, {'lhs': '$b_offset32.0', 'rhs': '$n34.1', 'res': '$36binary_add.2'}), (38, {'res': '$b38.3'}), (40, {'item': '$b38.3', 'res': '$40load_attr.4'}), (42, {'lhs': '$36binary_add.2', 'rhs': '$40load_attr.4', 'res': '$42compare_op.5'}), (44, {'pred': '$42compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: (), 50: ()})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$const46.0'}), (48, {'retval': '$const46.0', 'castval': '$48return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.0'}), (52, {'res': '$n52.1'}), (54, {'func': '$50load_global.0', 'args': ['$n52.1'], 'res': '$54call_function.2'}), (56, {'value': '$54call_function.2', 'res': '$56get_iter.3'})), outgoing_phis={'$phi58.0': '$56get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ('$56get_iter.3',)})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=58 nstack_initial=1):
AdaptBlockInfo(insts=((58, {'iterator': '$phi58.0', 'pair': '$58for_iter.1', 'indval': '$58for_iter.2', 'pred': '$58for_iter.3'}),), outgoing_phis={'$phi60.1': '$58for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: (), 60: ('$phi58.0', '$58for_iter.2')})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=60 nstack_initial=2):
AdaptBlockInfo(insts=((60, {'value': '$phi60.1'}), (62, {'res': '$62load_global.2'}), (64, {'res': '$a64.3'}), (66, {'res': '$a_offset66.4'}), (68, {'res': '$i68.5'}), (70, {'lhs': '$a_offset66.4', 'rhs': '$i68.5', 'res': '$70binary_add.6'}), (72, {'func': '$62load_global.2', 'args': ['$a64.3', '$70binary_add.6'], 'res': '$72call_function.7'}), (74, {'value': '$72call_function.7'}), (76, {'res': '$76load_global.8'}), (78, {'res': '$b78.9'}), (80, {'res': '$b_offset80.10'}), (82, {'res': '$i82.11'}), (84, {'lhs': '$b_offset80.10', 'rhs': '$i82.11', 'res': '$84binary_add.12'}), (86, {'func': '$76load_global.8', 'args': ['$b78.9', '$84binary_add.12'], 'res': '$86call_function.13'}), (88, {'value': '$86call_function.13'}), (90, {'res': '$a_chr90.14'}), (92, {'res': '$b_chr92.15'}), (94, {'lhs': '$a_chr90.14', 'rhs': '$b_chr92.15', 'res': '$94compare_op.16'}), (96, {'pred': '$94compare_op.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi60.0',), 104: ('$phi60.0',)})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((100, {'res': '$const100.1'}), (102, {'retval': '$const100.1', 'castval': '$102return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=104 nstack_initial=1):
AdaptBlockInfo(insts=((104, {'res': '$a_chr104.1'}), (106, {'res': '$b_chr106.2'}), (108, {'lhs': '$a_chr104.1', 'rhs': '$b_chr106.2', 'res': '$108compare_op.3'}), (110, {'pred': '$108compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: ('$phi104.0',), 58: ('$phi104.0',)})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=112 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'res': '$const114.1'}), (116, {'retval': '$const114.1', 'castval': '$116return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,437: block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$const120.0'}), (122, {'retval': '$const120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,437: label 0:
    a = arg(0, name=a)                       ['a']
    a_offset = arg(1, name=a_offset)         ['a_offset']
    b = arg(2, name=b)                       ['b']
    b_offset = arg(3, name=b_offset)         ['b_offset']
    n = arg(4, name=n)                       ['n']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = n == $const4.1          ['$6compare_op.2', '$const4.1', 'n']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, unicode.py:389),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $18binary_add.2 = a_offset + n           ['$18binary_add.2', 'a_offset', 'n']
    $22load_attr.4 = getattr(value=a, attr=_length) ['$22load_attr.4', 'a']
    $24compare_op.5 = $18binary_add.2 > $22load_attr.4 ['$18binary_add.2', '$22load_attr.4', '$24compare_op.5']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.5, func=bool26, args=(Var($24compare_op.5, unicode.py:391),), kws=(), vararg=None, target=None) ['$24compare_op.5', '$26pred', 'bool26']
    branch $26pred, 28, 32                   ['$26pred']
label 28:
    $const28.0 = const(int, -1)              ['$const28.0']
    $30return_value.1 = cast(value=$const28.0) ['$30return_value.1', '$const28.0']
    return $30return_value.1                 ['$30return_value.1']
label 32:
    $36binary_add.2 = b_offset + n           ['$36binary_add.2', 'b_offset', 'n']
    $40load_attr.4 = getattr(value=b, attr=_length) ['$40load_attr.4', 'b']
    $42compare_op.5 = $36binary_add.2 > $40load_attr.4 ['$36binary_add.2', '$40load_attr.4', '$42compare_op.5']
    bool44 = global(bool: <class 'bool'>)    ['bool44']
    $44pred = call bool44($42compare_op.5, func=bool44, args=(Var($42compare_op.5, unicode.py:393),), kws=(), vararg=None, target=None) ['$42compare_op.5', '$44pred', 'bool44']
    branch $44pred, 46, 50                   ['$44pred']
label 46:
    $const46.0 = const(int, 1)               ['$const46.0']
    $48return_value.1 = cast(value=$const46.0) ['$48return_value.1', '$const46.0']
    return $48return_value.1                 ['$48return_value.1']
label 50:
    $50load_global.0 = global(range: <class 'range'>) ['$50load_global.0']
    $54call_function.2 = call $50load_global.0(n, func=$50load_global.0, args=[Var(n, unicode.py:389)], kws=(), vararg=None, target=None) ['$50load_global.0', '$54call_function.2', 'n']
    $56get_iter.3 = getiter(value=$54call_function.2) ['$54call_function.2', '$56get_iter.3']
    $phi58.0 = $56get_iter.3                 ['$56get_iter.3', '$phi58.0']
    jump 58                                  []
label 58:
    $58for_iter.1 = iternext(value=$phi58.0) ['$58for_iter.1', '$phi58.0']
    $58for_iter.2 = pair_first(value=$58for_iter.1) ['$58for_iter.1', '$58for_iter.2']
    $58for_iter.3 = pair_second(value=$58for_iter.1) ['$58for_iter.1', '$58for_iter.3']
    $phi60.1 = $58for_iter.2                 ['$58for_iter.2', '$phi60.1']
    branch $58for_iter.3, 60, 120            ['$58for_iter.3']
label 60:
    i = $phi60.1                             ['$phi60.1', 'i']
    $62load_global.2 = global(_get_code_point: <function _get_code_point at 0x0000024C8AB30AF0>) ['$62load_global.2']
    $70binary_add.6 = a_offset + i           ['$70binary_add.6', 'a_offset', 'i']
    a_chr = call $62load_global.2(a, $70binary_add.6, func=$62load_global.2, args=[Var(a, unicode.py:389), Var($70binary_add.6, unicode.py:397)], kws=(), vararg=None, target=None) ['$62load_global.2', '$70binary_add.6', 'a', 'a_chr']
    $76load_global.8 = global(_get_code_point: <function _get_code_point at 0x0000024C8AB30AF0>) ['$76load_global.8']
    $84binary_add.12 = b_offset + i          ['$84binary_add.12', 'b_offset', 'i']
    b_chr = call $76load_global.8(b, $84binary_add.12, func=$76load_global.8, args=[Var(b, unicode.py:389), Var($84binary_add.12, unicode.py:398)], kws=(), vararg=None, target=None) ['$76load_global.8', '$84binary_add.12', 'b', 'b_chr']
    $94compare_op.16 = a_chr < b_chr         ['$94compare_op.16', 'a_chr', 'b_chr']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94compare_op.16, func=bool96, args=(Var($94compare_op.16, unicode.py:399),), kws=(), vararg=None, target=None) ['$94compare_op.16', '$96pred', 'bool96']
    branch $96pred, 98, 104                  ['$96pred']
label 98:
    $const100.1 = const(int, -1)             ['$const100.1']
    $102return_value.2 = cast(value=$const100.1) ['$102return_value.2', '$const100.1']
    return $102return_value.2                ['$102return_value.2']
label 104:
    $108compare_op.3 = a_chr > b_chr         ['$108compare_op.3', 'a_chr', 'b_chr']
    bool110 = global(bool: <class 'bool'>)   ['bool110']
    $110pred = call bool110($108compare_op.3, func=bool110, args=(Var($108compare_op.3, unicode.py:401),), kws=(), vararg=None, target=None) ['$108compare_op.3', '$110pred', 'bool110']
    branch $110pred, 112, 58                 ['$110pred']
label 112:
    $const114.1 = const(int, 1)              ['$const114.1']
    $116return_value.2 = cast(value=$const114.1) ['$116return_value.2', '$const114.1']
    return $116return_value.2                ['$116return_value.2']
label 120:
    $const120.0 = const(int, 0)              ['$const120.0']
    $122return_value.1 = cast(value=$const120.0) ['$122return_value.1', '$const120.0']
    return $122return_value.1                ['$122return_value.1']

DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:27,447: on stmt: a_offset = arg(1, name=a_offset)
DEBUG    2022-12-09 16:53:27,447: on stmt: b = arg(2, name=b)
DEBUG    2022-12-09 16:53:27,447: on stmt: b_offset = arg(3, name=b_offset)
DEBUG    2022-12-09 16:53:27,447: on stmt: n = arg(4, name=n)
DEBUG    2022-12-09 16:53:27,447: on stmt: $const4.1 = const(int, 0)
DEBUG    2022-12-09 16:53:27,447: on stmt: $6compare_op.2 = n == $const4.1
DEBUG    2022-12-09 16:53:27,447: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,447: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, unicode.py:389),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,447: on stmt: branch $8pred, 10, 14
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 10
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $const10.0 = const(int, 0)
DEBUG    2022-12-09 16:53:27,447: on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG    2022-12-09 16:53:27,447: on stmt: return $12return_value.1
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 14
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $18binary_add.2 = a_offset + n
DEBUG    2022-12-09 16:53:27,447: on stmt: $22load_attr.4 = getattr(value=a, attr=_length)
DEBUG    2022-12-09 16:53:27,447: on stmt: $24compare_op.5 = $18binary_add.2 > $22load_attr.4
DEBUG    2022-12-09 16:53:27,447: on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,447: on stmt: $26pred = call bool26($24compare_op.5, func=bool26, args=(Var($24compare_op.5, unicode.py:391),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,447: on stmt: branch $26pred, 28, 32
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 28
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $const28.0 = const(int, -1)
DEBUG    2022-12-09 16:53:27,447: on stmt: $30return_value.1 = cast(value=$const28.0)
DEBUG    2022-12-09 16:53:27,447: on stmt: return $30return_value.1
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 32
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $36binary_add.2 = b_offset + n
DEBUG    2022-12-09 16:53:27,447: on stmt: $40load_attr.4 = getattr(value=b, attr=_length)
DEBUG    2022-12-09 16:53:27,447: on stmt: $42compare_op.5 = $36binary_add.2 > $40load_attr.4
DEBUG    2022-12-09 16:53:27,447: on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,447: on stmt: $44pred = call bool44($42compare_op.5, func=bool44, args=(Var($42compare_op.5, unicode.py:393),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,447: on stmt: branch $44pred, 46, 50
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 46
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $const46.0 = const(int, 1)
DEBUG    2022-12-09 16:53:27,447: on stmt: $48return_value.1 = cast(value=$const46.0)
DEBUG    2022-12-09 16:53:27,447: on stmt: return $48return_value.1
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 50
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $50load_global.0 = global(range: <class 'range'>)
DEBUG    2022-12-09 16:53:27,447: on stmt: $54call_function.2 = call $50load_global.0(n, func=$50load_global.0, args=[Var(n, unicode.py:389)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,447: on stmt: $56get_iter.3 = getiter(value=$54call_function.2)
DEBUG    2022-12-09 16:53:27,447: on stmt: $phi58.0 = $56get_iter.3
DEBUG    2022-12-09 16:53:27,447: on stmt: jump 58
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 58
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $58for_iter.1 = iternext(value=$phi58.0)
DEBUG    2022-12-09 16:53:27,447: on stmt: $58for_iter.2 = pair_first(value=$58for_iter.1)
DEBUG    2022-12-09 16:53:27,447: on stmt: $58for_iter.3 = pair_second(value=$58for_iter.1)
DEBUG    2022-12-09 16:53:27,447: on stmt: $phi60.1 = $58for_iter.2
DEBUG    2022-12-09 16:53:27,447: on stmt: branch $58for_iter.3, 60, 120
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 60
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: i = $phi60.1
DEBUG    2022-12-09 16:53:27,447: on stmt: $62load_global.2 = global(_get_code_point: <function _get_code_point at 0x0000024C8AB30AF0>)
DEBUG    2022-12-09 16:53:27,447: on stmt: $70binary_add.6 = a_offset + i
DEBUG    2022-12-09 16:53:27,447: on stmt: a_chr = call $62load_global.2(a, $70binary_add.6, func=$62load_global.2, args=[Var(a, unicode.py:389), Var($70binary_add.6, unicode.py:397)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,447: on stmt: $76load_global.8 = global(_get_code_point: <function _get_code_point at 0x0000024C8AB30AF0>)
DEBUG    2022-12-09 16:53:27,447: on stmt: $84binary_add.12 = b_offset + i
DEBUG    2022-12-09 16:53:27,447: on stmt: b_chr = call $76load_global.8(b, $84binary_add.12, func=$76load_global.8, args=[Var(b, unicode.py:389), Var($84binary_add.12, unicode.py:398)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,447: on stmt: $94compare_op.16 = a_chr < b_chr
DEBUG    2022-12-09 16:53:27,447: on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,447: on stmt: $96pred = call bool96($94compare_op.16, func=bool96, args=(Var($94compare_op.16, unicode.py:399),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,447: on stmt: branch $96pred, 98, 104
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 98
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $const100.1 = const(int, -1)
DEBUG    2022-12-09 16:53:27,447: on stmt: $102return_value.2 = cast(value=$const100.1)
DEBUG    2022-12-09 16:53:27,447: on stmt: return $102return_value.2
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 104
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $108compare_op.3 = a_chr > b_chr
DEBUG    2022-12-09 16:53:27,447: on stmt: bool110 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,447: on stmt: $110pred = call bool110($108compare_op.3, func=bool110, args=(Var($108compare_op.3, unicode.py:401),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,447: on stmt: branch $110pred, 112, 58
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 112
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $const114.1 = const(int, 1)
DEBUG    2022-12-09 16:53:27,447: on stmt: $116return_value.2 = cast(value=$const114.1)
DEBUG    2022-12-09 16:53:27,447: on stmt: return $116return_value.2
DEBUG    2022-12-09 16:53:27,447: ==== SSA block analysis pass on 120
DEBUG    2022-12-09 16:53:27,447: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C397F70>
DEBUG    2022-12-09 16:53:27,447: on stmt: $const120.0 = const(int, 0)
DEBUG    2022-12-09 16:53:27,447: on stmt: $122return_value.1 = cast(value=$const120.0)
DEBUG    2022-12-09 16:53:27,447: on stmt: return $122return_value.1
DEBUG    2022-12-09 16:53:27,455: defs defaultdict(<class 'list'>,
            {'$102return_value.2': [<numba.core.ir.Assign object at 0x0000024C8C394850>],
             '$108compare_op.3': [<numba.core.ir.Assign object at 0x0000024C8C3972B0>],
             '$110pred': [<numba.core.ir.Assign object at 0x0000024C8C397520>],
             '$116return_value.2': [<numba.core.ir.Assign object at 0x0000024C8C397880>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C397CA0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C388760>],
             '$18binary_add.2': [<numba.core.ir.Assign object at 0x0000024C8C388C70>],
             '$22load_attr.4': [<numba.core.ir.Assign object at 0x0000024C8C388EE0>],
             '$24compare_op.5': [<numba.core.ir.Assign object at 0x0000024C8C38D0D0>],
             '$26pred': [<numba.core.ir.Assign object at 0x0000024C8C38D340>],
             '$30return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C38D640>],
             '$36binary_add.2': [<numba.core.ir.Assign object at 0x0000024C8C38DB50>],
             '$40load_attr.4': [<numba.core.ir.Assign object at 0x0000024C8C38DDC0>],
             '$42compare_op.5': [<numba.core.ir.Assign object at 0x0000024C8C38DF70>],
             '$44pred': [<numba.core.ir.Assign object at 0x0000024C8C38F220>],
             '$48return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C38F520>],
             '$50load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C38F7C0>],
             '$54call_function.2': [<numba.core.ir.Assign object at 0x0000024C8C38FAC0>],
             '$56get_iter.3': [<numba.core.ir.Assign object at 0x0000024C8C38FBE0>],
             '$58for_iter.1': [<numba.core.ir.Assign object at 0x0000024C8C38FF10>],
             '$58for_iter.2': [<numba.core.ir.Assign object at 0x0000024C8C392070>],
             '$58for_iter.3': [<numba.core.ir.Assign object at 0x0000024C8C392190>],
             '$62load_global.2': [<numba.core.ir.Assign object at 0x0000024C8C3925E0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C388130>],
             '$70binary_add.6': [<numba.core.ir.Assign object at 0x0000024C8C392AF0>],
             '$76load_global.8': [<numba.core.ir.Assign object at 0x0000024C8C392EE0>],
             '$84binary_add.12': [<numba.core.ir.Assign object at 0x0000024C8C394430>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000024C8C3883A0>],
             '$94compare_op.16': [<numba.core.ir.Assign object at 0x0000024C8C394A90>],
             '$96pred': [<numba.core.ir.Assign object at 0x0000024C8C394D00>],
             '$const10.0': [<numba.core.ir.Assign object at 0x0000024C8C3885E0>],
             '$const100.1': [<numba.core.ir.Assign object at 0x0000024C8C3940D0>],
             '$const114.1': [<numba.core.ir.Assign object at 0x0000024C8C397700>],
             '$const120.0': [<numba.core.ir.Assign object at 0x0000024C8C397B20>],
             '$const28.0': [<numba.core.ir.Assign object at 0x0000024C8C38D4C0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024C8C37AF40>],
             '$const46.0': [<numba.core.ir.Assign object at 0x0000024C8C38F3A0>],
             '$phi58.0': [<numba.core.ir.Assign object at 0x0000024C8C38F8E0>],
             '$phi60.1': [<numba.core.ir.Assign object at 0x0000024C8C38FE50>],
             'a': [<numba.core.ir.Assign object at 0x0000024C8C37A0D0>],
             'a_chr': [<numba.core.ir.Assign object at 0x0000024C8C392CA0>],
             'a_offset': [<numba.core.ir.Assign object at 0x0000024C8C37A2E0>],
             'b': [<numba.core.ir.Assign object at 0x0000024C8C37A1C0>],
             'b_chr': [<numba.core.ir.Assign object at 0x0000024C8C3945E0>],
             'b_offset': [<numba.core.ir.Assign object at 0x0000024C8C37A640>],
             'bool110': [<numba.core.ir.Assign object at 0x0000024C8C397400>],
             'bool26': [<numba.core.ir.Assign object at 0x0000024C8C38D220>],
             'bool44': [<numba.core.ir.Assign object at 0x0000024C8C38F100>],
             'bool8': [<numba.core.ir.Assign object at 0x0000024C8C388280>],
             'bool96': [<numba.core.ir.Assign object at 0x0000024C8C394BE0>],
             'i': [<numba.core.ir.Assign object at 0x0000024C8C392460>],
             'n': [<numba.core.ir.Assign object at 0x0000024C8C37A0A0>]})
DEBUG    2022-12-09 16:53:27,455: SSA violators set()
DEBUG    2022-12-09 16:53:27,467: bytecode dump:
>          0	NOP(arg=None, lineno=285)
           2	LOAD_FAST(arg=0, lineno=285)
           4	LOAD_ATTR(arg=0, lineno=285)
           6	LOAD_GLOBAL(arg=1, lineno=285)
           8	COMPARE_OP(arg=2, lineno=285)
          10	POP_JUMP_IF_FALSE(arg=24, lineno=285)
          12	LOAD_GLOBAL(arg=2, lineno=286)
          14	LOAD_FAST(arg=0, lineno=286)
          16	LOAD_ATTR(arg=3, lineno=286)
          18	LOAD_FAST(arg=1, lineno=286)
          20	CALL_FUNCTION(arg=2, lineno=286)
          22	RETURN_VALUE(arg=None, lineno=286)
>         24	LOAD_FAST(arg=0, lineno=287)
          26	LOAD_ATTR(arg=0, lineno=287)
          28	LOAD_GLOBAL(arg=4, lineno=287)
          30	COMPARE_OP(arg=2, lineno=287)
          32	POP_JUMP_IF_FALSE(arg=46, lineno=287)
          34	LOAD_GLOBAL(arg=5, lineno=288)
          36	LOAD_FAST(arg=0, lineno=288)
          38	LOAD_ATTR(arg=3, lineno=288)
          40	LOAD_FAST(arg=1, lineno=288)
          42	CALL_FUNCTION(arg=2, lineno=288)
          44	RETURN_VALUE(arg=None, lineno=288)
>         46	LOAD_FAST(arg=0, lineno=289)
          48	LOAD_ATTR(arg=0, lineno=289)
          50	LOAD_GLOBAL(arg=6, lineno=289)
          52	COMPARE_OP(arg=2, lineno=289)
          54	POP_JUMP_IF_FALSE(arg=68, lineno=289)
          56	LOAD_GLOBAL(arg=7, lineno=290)
          58	LOAD_FAST(arg=0, lineno=290)
          60	LOAD_ATTR(arg=3, lineno=290)
          62	LOAD_FAST(arg=1, lineno=290)
          64	CALL_FUNCTION(arg=2, lineno=290)
          66	RETURN_VALUE(arg=None, lineno=290)
>         68	LOAD_CONST(arg=1, lineno=294)
          70	RETURN_VALUE(arg=None, lineno=294)
          72	LOAD_CONST(arg=0, lineno=294)
          74	RETURN_VALUE(arg=None, lineno=294)
DEBUG    2022-12-09 16:53:27,467: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,467: stack: []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=0, inst=NOP(arg=None, lineno=285)
DEBUG    2022-12-09 16:53:27,467: stack []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=285)
DEBUG    2022-12-09 16:53:27,467: stack []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=285)
DEBUG    2022-12-09 16:53:27,467: stack ['$a2.0']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=285)
DEBUG    2022-12-09 16:53:27,467: stack ['$4load_attr.1']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=285)
DEBUG    2022-12-09 16:53:27,467: stack ['$4load_attr.1', '$6load_global.2']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=24, lineno=285)
DEBUG    2022-12-09 16:53:27,467: stack ['$8compare_op.3']
DEBUG    2022-12-09 16:53:27,467: end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,467: pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,467: stack: []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=286)
DEBUG    2022-12-09 16:53:27,467: stack []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=286)
DEBUG    2022-12-09 16:53:27,467: stack ['$12load_global.0']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=286)
DEBUG    2022-12-09 16:53:27,467: stack ['$12load_global.0', '$a14.1']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=286)
DEBUG    2022-12-09 16:53:27,467: stack ['$12load_global.0', '$16load_attr.2']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=286)
DEBUG    2022-12-09 16:53:27,467: stack ['$12load_global.0', '$16load_attr.2', '$i18.3']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=286)
DEBUG    2022-12-09 16:53:27,467: stack ['$20call_function.4']
DEBUG    2022-12-09 16:53:27,467: end state. edges=[]
DEBUG    2022-12-09 16:53:27,467: pending: deque([State(pc_initial=24 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,467: stack: []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=287)
DEBUG    2022-12-09 16:53:27,467: stack []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=26, inst=LOAD_ATTR(arg=0, lineno=287)
DEBUG    2022-12-09 16:53:27,467: stack ['$a24.0']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=28, inst=LOAD_GLOBAL(arg=4, lineno=287)
DEBUG    2022-12-09 16:53:27,467: stack ['$26load_attr.1']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=30, inst=COMPARE_OP(arg=2, lineno=287)
DEBUG    2022-12-09 16:53:27,467: stack ['$26load_attr.1', '$28load_global.2']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=46, lineno=287)
DEBUG    2022-12-09 16:53:27,467: stack ['$30compare_op.3']
DEBUG    2022-12-09 16:53:27,467: end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,467: pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,467: stack: []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=34, inst=LOAD_GLOBAL(arg=5, lineno=288)
DEBUG    2022-12-09 16:53:27,467: stack []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=288)
DEBUG    2022-12-09 16:53:27,467: stack ['$34load_global.0']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=288)
DEBUG    2022-12-09 16:53:27,467: stack ['$34load_global.0', '$a36.1']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=288)
DEBUG    2022-12-09 16:53:27,467: stack ['$34load_global.0', '$38load_attr.2']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=288)
DEBUG    2022-12-09 16:53:27,467: stack ['$34load_global.0', '$38load_attr.2', '$i40.3']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=288)
DEBUG    2022-12-09 16:53:27,467: stack ['$42call_function.4']
DEBUG    2022-12-09 16:53:27,467: end state. edges=[]
DEBUG    2022-12-09 16:53:27,467: pending: deque([State(pc_initial=46 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,467: stack: []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=289)
DEBUG    2022-12-09 16:53:27,467: stack []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=48, inst=LOAD_ATTR(arg=0, lineno=289)
DEBUG    2022-12-09 16:53:27,467: stack ['$a46.0']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=50, inst=LOAD_GLOBAL(arg=6, lineno=289)
DEBUG    2022-12-09 16:53:27,467: stack ['$48load_attr.1']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=52, inst=COMPARE_OP(arg=2, lineno=289)
DEBUG    2022-12-09 16:53:27,467: stack ['$48load_attr.1', '$50load_global.2']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=54, inst=POP_JUMP_IF_FALSE(arg=68, lineno=289)
DEBUG    2022-12-09 16:53:27,467: stack ['$52compare_op.3']
DEBUG    2022-12-09 16:53:27,467: end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,467: pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,467: stack: []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=56, inst=LOAD_GLOBAL(arg=7, lineno=290)
DEBUG    2022-12-09 16:53:27,467: stack []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=58, inst=LOAD_FAST(arg=0, lineno=290)
DEBUG    2022-12-09 16:53:27,467: stack ['$56load_global.0']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=60, inst=LOAD_ATTR(arg=3, lineno=290)
DEBUG    2022-12-09 16:53:27,467: stack ['$56load_global.0', '$a58.1']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=290)
DEBUG    2022-12-09 16:53:27,467: stack ['$56load_global.0', '$60load_attr.2']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=64, inst=CALL_FUNCTION(arg=2, lineno=290)
DEBUG    2022-12-09 16:53:27,467: stack ['$56load_global.0', '$60load_attr.2', '$i62.3']
DEBUG    2022-12-09 16:53:27,467: dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=290)
DEBUG    2022-12-09 16:53:27,467: stack ['$64call_function.4']
DEBUG    2022-12-09 16:53:27,467: end state. edges=[]
DEBUG    2022-12-09 16:53:27,467: pending: deque([State(pc_initial=68 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,467: stack: []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=294)
DEBUG    2022-12-09 16:53:27,467: stack []
DEBUG    2022-12-09 16:53:27,467: dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=294)
DEBUG    2022-12-09 16:53:27,467: stack ['$const68.0']
DEBUG    2022-12-09 16:53:27,467: end state. edges=[]
DEBUG    2022-12-09 16:53:27,467: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,475: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,475: defmap: {}
DEBUG    2022-12-09 16:53:27,475: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,475: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,475: keep phismap: {}
DEBUG    2022-12-09 16:53:27,475: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,475: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,475: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$6load_global.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$6load_global.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 24: ()})
DEBUG    2022-12-09 16:53:27,475: block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$a14.1'}), (16, {'item': '$a14.1', 'res': '$16load_attr.2'}), (18, {'res': '$i18.3'}), (20, {'func': '$12load_global.0', 'args': ['$16load_attr.2', '$i18.3'], 'res': '$20call_function.4'}), (22, {'retval': '$20call_function.4', 'castval': '$22return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,475: block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$a24.0'}), (26, {'item': '$a24.0', 'res': '$26load_attr.1'}), (28, {'res': '$28load_global.2'}), (30, {'lhs': '$26load_attr.1', 'rhs': '$28load_global.2', 'res': '$30compare_op.3'}), (32, {'pred': '$30compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 46: ()})
DEBUG    2022-12-09 16:53:27,475: block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'res': '$i40.3'}), (42, {'func': '$34load_global.0', 'args': ['$38load_attr.2', '$i40.3'], 'res': '$42call_function.4'}), (44, {'retval': '$42call_function.4', 'castval': '$44return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,475: block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$a46.0'}), (48, {'item': '$a46.0', 'res': '$48load_attr.1'}), (50, {'res': '$50load_global.2'}), (52, {'lhs': '$48load_attr.1', 'rhs': '$50load_global.2', 'res': '$52compare_op.3'}), (54, {'pred': '$52compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 68: ()})
DEBUG    2022-12-09 16:53:27,475: block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$56load_global.0'}), (58, {'res': '$a58.1'}), (60, {'item': '$a58.1', 'res': '$60load_attr.2'}), (62, {'res': '$i62.3'}), (64, {'func': '$56load_global.0', 'args': ['$60load_attr.2', '$i62.3'], 'res': '$64call_function.4'}), (66, {'retval': '$64call_function.4', 'castval': '$66return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,475: block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$const68.0'}), (70, {'retval': '$const68.0', 'castval': '$70return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,477: label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $4load_attr.1 = getattr(value=a, attr=_kind) ['$4load_attr.1', 'a']
    $6load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1) ['$6load_global.2']
    $8compare_op.3 = $4load_attr.1 == $6load_global.2 ['$4load_attr.1', '$6load_global.2', '$8compare_op.3']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, unicode.py:285),), kws=(), vararg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 24                   ['$10pred']
label 12:
    $12load_global.0 = global(deref_uint8: <intrinsic deref_uint8>) ['$12load_global.0']
    $16load_attr.2 = getattr(value=a, attr=_data) ['$16load_attr.2', 'a']
    $20call_function.4 = call $12load_global.0($16load_attr.2, i, func=$12load_global.0, args=[Var($16load_attr.2, unicode.py:286), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16load_attr.2', '$20call_function.4', 'i']
    $22return_value.5 = cast(value=$20call_function.4) ['$20call_function.4', '$22return_value.5']
    return $22return_value.5                 ['$22return_value.5']
label 24:
    $26load_attr.1 = getattr(value=a, attr=_kind) ['$26load_attr.1', 'a']
    $28load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2) ['$28load_global.2']
    $30compare_op.3 = $26load_attr.1 == $28load_global.2 ['$26load_attr.1', '$28load_global.2', '$30compare_op.3']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.3, func=bool32, args=(Var($30compare_op.3, unicode.py:287),), kws=(), vararg=None, target=None) ['$30compare_op.3', '$32pred', 'bool32']
    branch $32pred, 34, 46                   ['$32pred']
label 34:
    $34load_global.0 = global(deref_uint16: <intrinsic deref_uint16>) ['$34load_global.0']
    $38load_attr.2 = getattr(value=a, attr=_data) ['$38load_attr.2', 'a']
    $42call_function.4 = call $34load_global.0($38load_attr.2, i, func=$34load_global.0, args=[Var($38load_attr.2, unicode.py:288), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$34load_global.0', '$38load_attr.2', '$42call_function.4', 'i']
    $44return_value.5 = cast(value=$42call_function.4) ['$42call_function.4', '$44return_value.5']
    return $44return_value.5                 ['$44return_value.5']
label 46:
    $48load_attr.1 = getattr(value=a, attr=_kind) ['$48load_attr.1', 'a']
    $50load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4) ['$50load_global.2']
    $52compare_op.3 = $48load_attr.1 == $50load_global.2 ['$48load_attr.1', '$50load_global.2', '$52compare_op.3']
    bool54 = global(bool: <class 'bool'>)    ['bool54']
    $54pred = call bool54($52compare_op.3, func=bool54, args=(Var($52compare_op.3, unicode.py:289),), kws=(), vararg=None, target=None) ['$52compare_op.3', '$54pred', 'bool54']
    branch $54pred, 56, 68                   ['$54pred']
label 56:
    $56load_global.0 = global(deref_uint32: <intrinsic deref_uint32>) ['$56load_global.0']
    $60load_attr.2 = getattr(value=a, attr=_data) ['$60load_attr.2', 'a']
    $64call_function.4 = call $56load_global.0($60load_attr.2, i, func=$56load_global.0, args=[Var($60load_attr.2, unicode.py:290), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$56load_global.0', '$60load_attr.2', '$64call_function.4', 'i']
    $66return_value.5 = cast(value=$64call_function.4) ['$64call_function.4', '$66return_value.5']
    return $66return_value.5                 ['$66return_value.5']
label 68:
    $const68.0 = const(int, 0)               ['$const68.0']
    $70return_value.1 = cast(value=$const68.0) ['$70return_value.1', '$const68.0']
    return $70return_value.1                 ['$70return_value.1']

DEBUG    2022-12-09 16:53:27,477: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,477: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C34B760>
DEBUG    2022-12-09 16:53:27,477: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:27,477: on stmt: i = arg(1, name=i)
DEBUG    2022-12-09 16:53:27,477: on stmt: $4load_attr.1 = getattr(value=a, attr=_kind)
DEBUG    2022-12-09 16:53:27,477: on stmt: $6load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1)
DEBUG    2022-12-09 16:53:27,477: on stmt: $8compare_op.3 = $4load_attr.1 == $6load_global.2
DEBUG    2022-12-09 16:53:27,477: on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,477: on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, unicode.py:285),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,477: on stmt: branch $10pred, 12, 24
DEBUG    2022-12-09 16:53:27,477: ==== SSA block analysis pass on 12
DEBUG    2022-12-09 16:53:27,477: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C34B760>
DEBUG    2022-12-09 16:53:27,477: on stmt: $12load_global.0 = global(deref_uint8: <intrinsic deref_uint8>)
DEBUG    2022-12-09 16:53:27,477: on stmt: $16load_attr.2 = getattr(value=a, attr=_data)
DEBUG    2022-12-09 16:53:27,477: on stmt: $20call_function.4 = call $12load_global.0($16load_attr.2, i, func=$12load_global.0, args=[Var($16load_attr.2, unicode.py:286), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,477: on stmt: $22return_value.5 = cast(value=$20call_function.4)
DEBUG    2022-12-09 16:53:27,477: on stmt: return $22return_value.5
DEBUG    2022-12-09 16:53:27,477: ==== SSA block analysis pass on 24
DEBUG    2022-12-09 16:53:27,477: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C34B760>
DEBUG    2022-12-09 16:53:27,477: on stmt: $26load_attr.1 = getattr(value=a, attr=_kind)
DEBUG    2022-12-09 16:53:27,477: on stmt: $28load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2)
DEBUG    2022-12-09 16:53:27,477: on stmt: $30compare_op.3 = $26load_attr.1 == $28load_global.2
DEBUG    2022-12-09 16:53:27,477: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,477: on stmt: $32pred = call bool32($30compare_op.3, func=bool32, args=(Var($30compare_op.3, unicode.py:287),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,477: on stmt: branch $32pred, 34, 46
DEBUG    2022-12-09 16:53:27,477: ==== SSA block analysis pass on 34
DEBUG    2022-12-09 16:53:27,477: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C34B760>
DEBUG    2022-12-09 16:53:27,477: on stmt: $34load_global.0 = global(deref_uint16: <intrinsic deref_uint16>)
DEBUG    2022-12-09 16:53:27,477: on stmt: $38load_attr.2 = getattr(value=a, attr=_data)
DEBUG    2022-12-09 16:53:27,477: on stmt: $42call_function.4 = call $34load_global.0($38load_attr.2, i, func=$34load_global.0, args=[Var($38load_attr.2, unicode.py:288), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,477: on stmt: $44return_value.5 = cast(value=$42call_function.4)
DEBUG    2022-12-09 16:53:27,477: on stmt: return $44return_value.5
DEBUG    2022-12-09 16:53:27,477: ==== SSA block analysis pass on 46
DEBUG    2022-12-09 16:53:27,477: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C34B760>
DEBUG    2022-12-09 16:53:27,477: on stmt: $48load_attr.1 = getattr(value=a, attr=_kind)
DEBUG    2022-12-09 16:53:27,477: on stmt: $50load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4)
DEBUG    2022-12-09 16:53:27,477: on stmt: $52compare_op.3 = $48load_attr.1 == $50load_global.2
DEBUG    2022-12-09 16:53:27,477: on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:27,477: on stmt: $54pred = call bool54($52compare_op.3, func=bool54, args=(Var($52compare_op.3, unicode.py:289),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,477: on stmt: branch $54pred, 56, 68
DEBUG    2022-12-09 16:53:27,477: ==== SSA block analysis pass on 56
DEBUG    2022-12-09 16:53:27,477: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C34B760>
DEBUG    2022-12-09 16:53:27,477: on stmt: $56load_global.0 = global(deref_uint32: <intrinsic deref_uint32>)
DEBUG    2022-12-09 16:53:27,477: on stmt: $60load_attr.2 = getattr(value=a, attr=_data)
DEBUG    2022-12-09 16:53:27,477: on stmt: $64call_function.4 = call $56load_global.0($60load_attr.2, i, func=$56load_global.0, args=[Var($60load_attr.2, unicode.py:290), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,477: on stmt: $66return_value.5 = cast(value=$64call_function.4)
DEBUG    2022-12-09 16:53:27,477: on stmt: return $66return_value.5
DEBUG    2022-12-09 16:53:27,477: ==== SSA block analysis pass on 68
DEBUG    2022-12-09 16:53:27,477: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C34B760>
DEBUG    2022-12-09 16:53:27,477: on stmt: $const68.0 = const(int, 0)
DEBUG    2022-12-09 16:53:27,477: on stmt: $70return_value.1 = cast(value=$const68.0)
DEBUG    2022-12-09 16:53:27,477: on stmt: return $70return_value.1
DEBUG    2022-12-09 16:53:27,477: defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x0000024C8C341460>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C341280>],
             '$16load_attr.2': [<numba.core.ir.Assign object at 0x0000024C8C341820>],
             '$20call_function.4': [<numba.core.ir.Assign object at 0x0000024C8C33DD90>],
             '$22return_value.5': [<numba.core.ir.Assign object at 0x0000024C8C33D340>],
             '$26load_attr.1': [<numba.core.ir.Assign object at 0x0000024C8C33DA30>],
             '$28load_global.2': [<numba.core.ir.Assign object at 0x0000024C8C33D820>],
             '$30compare_op.3': [<numba.core.ir.Assign object at 0x0000024C8C33D730>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000024C8C33D6D0>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C33DD30>],
             '$38load_attr.2': [<numba.core.ir.Assign object at 0x0000024C8C334940>],
             '$42call_function.4': [<numba.core.ir.Assign object at 0x0000024C8C334700>],
             '$44return_value.5': [<numba.core.ir.Assign object at 0x0000024C8C334A90>],
             '$48load_attr.1': [<numba.core.ir.Assign object at 0x0000024C8C319D90>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000024C8C341EE0>],
             '$50load_global.2': [<numba.core.ir.Assign object at 0x0000024C8C3195B0>],
             '$52compare_op.3': [<numba.core.ir.Assign object at 0x0000024C8C319460>],
             '$54pred': [<numba.core.ir.Assign object at 0x0000024C8C319040>],
             '$56load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C319940>],
             '$60load_attr.2': [<numba.core.ir.Assign object at 0x0000024C8C335880>],
             '$64call_function.4': [<numba.core.ir.Assign object at 0x0000024C8C34B310>],
             '$66return_value.5': [<numba.core.ir.Assign object at 0x0000024C8C34BD30>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x0000024C8C341C10>],
             '$70return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C3196A0>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x0000024C8C3419A0>],
             '$const68.0': [<numba.core.ir.Assign object at 0x0000024C8C34BCA0>],
             'a': [<numba.core.ir.Assign object at 0x0000024C8C3358E0>],
             'bool10': [<numba.core.ir.Assign object at 0x0000024C8C341160>],
             'bool32': [<numba.core.ir.Assign object at 0x0000024C8C33D550>],
             'bool54': [<numba.core.ir.Assign object at 0x0000024C8C319220>],
             'i': [<numba.core.ir.Assign object at 0x0000024C8C3356D0>]})
DEBUG    2022-12-09 16:53:27,477: SSA violators set()
DEBUG    2022-12-09 16:53:27,852: bytecode dump:
>          0	NOP(arg=None, lineno=63)
           2	LOAD_GLOBAL(arg=0, lineno=63)
           4	LOAD_FAST(arg=0, lineno=63)
           6	LOAD_METHOD(arg=1, lineno=63)
           8	CALL_METHOD(arg=0, lineno=63)
          10	CALL_FUNCTION(arg=1, lineno=63)
          12	RETURN_VALUE(arg=None, lineno=63)
DEBUG    2022-12-09 16:53:27,852: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,852: stack: []
DEBUG    2022-12-09 16:53:27,852: dispatch pc=0, inst=NOP(arg=None, lineno=63)
DEBUG    2022-12-09 16:53:27,852: stack []
DEBUG    2022-12-09 16:53:27,852: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=63)
DEBUG    2022-12-09 16:53:27,852: stack []
DEBUG    2022-12-09 16:53:27,852: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=63)
DEBUG    2022-12-09 16:53:27,852: stack ['$2load_global.0']
DEBUG    2022-12-09 16:53:27,852: dispatch pc=6, inst=LOAD_METHOD(arg=1, lineno=63)
DEBUG    2022-12-09 16:53:27,852: stack ['$2load_global.0', '$d4.1']
DEBUG    2022-12-09 16:53:27,852: dispatch pc=8, inst=CALL_METHOD(arg=0, lineno=63)
DEBUG    2022-12-09 16:53:27,852: stack ['$2load_global.0', '$6load_method.2']
DEBUG    2022-12-09 16:53:27,852: dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=63)
DEBUG    2022-12-09 16:53:27,852: stack ['$2load_global.0', '$8call_method.3']
DEBUG    2022-12-09 16:53:27,852: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=63)
DEBUG    2022-12-09 16:53:27,852: stack ['$10call_function.4']
DEBUG    2022-12-09 16:53:27,852: end state. edges=[]
DEBUG    2022-12-09 16:53:27,852: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,852: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,852: defmap: {}
DEBUG    2022-12-09 16:53:27,852: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,852: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,852: keep phismap: {}
DEBUG    2022-12-09 16:53:27,852: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,852: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,852: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$d4.1'}), (6, {'item': '$d4.1', 'res': '$6load_method.2'}), (8, {'func': '$6load_method.2', 'args': [], 'res': '$8call_method.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_method.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,852: label 0:
    d = arg(0, name=d)                       ['d']
    $2load_global.0 = global(list: <class 'list'>) ['$2load_global.0']
    $6load_method.2 = getattr(value=d, attr=keys) ['$6load_method.2', 'd']
    $8call_method.3 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, target=None) ['$6load_method.2', '$8call_method.3']
    $10call_function.4 = call $2load_global.0($8call_method.3, func=$2load_global.0, args=[Var($8call_method.3, typeddict.py:63)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_method.3']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG    2022-12-09 16:53:27,862: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,862: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C1E1160>
DEBUG    2022-12-09 16:53:27,862: on stmt: d = arg(0, name=d)
DEBUG    2022-12-09 16:53:27,862: on stmt: $2load_global.0 = global(list: <class 'list'>)
DEBUG    2022-12-09 16:53:27,862: on stmt: $6load_method.2 = getattr(value=d, attr=keys)
DEBUG    2022-12-09 16:53:27,862: on stmt: $8call_method.3 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,862: on stmt: $10call_function.4 = call $2load_global.0($8call_method.3, func=$2load_global.0, args=[Var($8call_method.3, typeddict.py:63)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,862: on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG    2022-12-09 16:53:27,862: on stmt: return $12return_value.5
DEBUG    2022-12-09 16:53:27,862: defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000024C8C479CD0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000024C8C479DF0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C4796D0>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x0000024C8C479970>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x0000024C8C479B80>],
             'd': [<numba.core.ir.Assign object at 0x0000024C8C4790A0>]})
DEBUG    2022-12-09 16:53:27,862: SSA violators set()
DEBUG    2022-12-09 16:53:27,862: bytecode dump:
>          0	NOP(arg=None, lineno=878)
           2	LOAD_GLOBAL(arg=0, lineno=878)
           4	LOAD_FAST(arg=0, lineno=878)
           6	CALL_FUNCTION(arg=1, lineno=878)
           8	RETURN_VALUE(arg=None, lineno=878)
DEBUG    2022-12-09 16:53:27,862: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,862: stack: []
DEBUG    2022-12-09 16:53:27,862: dispatch pc=0, inst=NOP(arg=None, lineno=878)
DEBUG    2022-12-09 16:53:27,862: stack []
DEBUG    2022-12-09 16:53:27,862: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=878)
DEBUG    2022-12-09 16:53:27,862: stack []
DEBUG    2022-12-09 16:53:27,862: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=878)
DEBUG    2022-12-09 16:53:27,862: stack ['$2load_global.0']
DEBUG    2022-12-09 16:53:27,862: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=878)
DEBUG    2022-12-09 16:53:27,862: stack ['$2load_global.0', '$d4.1']
DEBUG    2022-12-09 16:53:27,862: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=878)
DEBUG    2022-12-09 16:53:27,862: stack ['$6call_function.2']
DEBUG    2022-12-09 16:53:27,862: end state. edges=[]
DEBUG    2022-12-09 16:53:27,862: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,862: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,862: defmap: {}
DEBUG    2022-12-09 16:53:27,862: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,862: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,862: keep phismap: {}
DEBUG    2022-12-09 16:53:27,862: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,862: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,862: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$d4.1'}), (6, {'func': '$2load_global.0', 'args': ['$d4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,862: label 0:
    d = arg(0, name=d)                       ['d']
    $2load_global.0 = global(_dict_keys: <intrinsic _dict_keys>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(d, func=$2load_global.0, args=[Var(d, dictobject.py:878)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'd']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2022-12-09 16:53:27,862: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,862: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4C2310>
DEBUG    2022-12-09 16:53:27,870: on stmt: d = arg(0, name=d)
DEBUG    2022-12-09 16:53:27,870: on stmt: $2load_global.0 = global(_dict_keys: <intrinsic _dict_keys>)
DEBUG    2022-12-09 16:53:27,870: on stmt: $6call_function.2 = call $2load_global.0(d, func=$2load_global.0, args=[Var(d, dictobject.py:878)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,870: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2022-12-09 16:53:27,870: on stmt: return $8return_value.3
DEBUG    2022-12-09 16:53:27,871: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C4C5550>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000024C8C4C5850>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000024C8C4C5970>],
             'd': [<numba.core.ir.Assign object at 0x0000024C8C4C2460>]})
DEBUG    2022-12-09 16:53:27,871: SSA violators set()
DEBUG    2022-12-09 16:53:27,897: bytecode dump:
>          0	NOP(arg=None, lineno=468)
           2	BUILD_LIST(arg=0, lineno=468)
           4	STORE_FAST(arg=1, lineno=468)
           6	LOAD_FAST(arg=1, lineno=469)
           8	LOAD_METHOD(arg=0, lineno=469)
          10	LOAD_FAST(arg=0, lineno=469)
          12	CALL_METHOD(arg=1, lineno=469)
          14	POP_TOP(arg=None, lineno=469)
          16	LOAD_FAST(arg=1, lineno=470)
          18	RETURN_VALUE(arg=None, lineno=470)
DEBUG    2022-12-09 16:53:27,897: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,897: stack: []
DEBUG    2022-12-09 16:53:27,897: dispatch pc=0, inst=NOP(arg=None, lineno=468)
DEBUG    2022-12-09 16:53:27,897: stack []
DEBUG    2022-12-09 16:53:27,897: dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=468)
DEBUG    2022-12-09 16:53:27,897: stack []
DEBUG    2022-12-09 16:53:27,897: dispatch pc=4, inst=STORE_FAST(arg=1, lineno=468)
DEBUG    2022-12-09 16:53:27,897: stack ['$2build_list.0']
DEBUG    2022-12-09 16:53:27,897: dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=469)
DEBUG    2022-12-09 16:53:27,897: stack []
DEBUG    2022-12-09 16:53:27,897: dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=469)
DEBUG    2022-12-09 16:53:27,897: stack ['$res6.1']
DEBUG    2022-12-09 16:53:27,898: dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=469)
DEBUG    2022-12-09 16:53:27,898: stack ['$8load_method.2']
DEBUG    2022-12-09 16:53:27,898: dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=469)
DEBUG    2022-12-09 16:53:27,898: stack ['$8load_method.2', '$iterable10.3']
DEBUG    2022-12-09 16:53:27,898: dispatch pc=14, inst=POP_TOP(arg=None, lineno=469)
DEBUG    2022-12-09 16:53:27,898: stack ['$12call_method.4']
DEBUG    2022-12-09 16:53:27,898: dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=470)
DEBUG    2022-12-09 16:53:27,898: stack []
DEBUG    2022-12-09 16:53:27,898: dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=470)
DEBUG    2022-12-09 16:53:27,898: stack ['$res16.5']
DEBUG    2022-12-09 16:53:27,898: end state. edges=[]
DEBUG    2022-12-09 16:53:27,898: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,898: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,898: defmap: {}
DEBUG    2022-12-09 16:53:27,898: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,898: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:27,898: keep phismap: {}
DEBUG    2022-12-09 16:53:27,898: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:27,898: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,899: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'value': '$2build_list.0'}), (6, {'res': '$res6.1'}), (8, {'item': '$res6.1', 'res': '$8load_method.2'}), (10, {'res': '$iterable10.3'}), (12, {'func': '$8load_method.2', 'args': ['$iterable10.3'], 'res': '$12call_method.4'}), (16, {'res': '$res16.5'}), (18, {'retval': '$res16.5', 'castval': '$18return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,899: label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    res = build_list(items=[])               ['res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:468)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

DEBUG    2022-12-09 16:53:27,903: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,903: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C426610>
DEBUG    2022-12-09 16:53:27,903: on stmt: iterable = arg(0, name=iterable)
DEBUG    2022-12-09 16:53:27,904: on stmt: res = build_list(items=[])
DEBUG    2022-12-09 16:53:27,904: on stmt: $8load_method.2 = getattr(value=res, attr=extend)
DEBUG    2022-12-09 16:53:27,904: on stmt: $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:468)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,904: on stmt: $18return_value.6 = cast(value=res)
DEBUG    2022-12-09 16:53:27,904: on stmt: return $18return_value.6
DEBUG    2022-12-09 16:53:27,904: defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x0000024C8C1E1160>],
             '$18return_value.6': [<numba.core.ir.Assign object at 0x0000024C8C1DA2B0>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x0000024C8C45D730>],
             'iterable': [<numba.core.ir.Assign object at 0x0000024C8C45D550>],
             'res': [<numba.core.ir.Assign object at 0x0000024C8C45D400>]})
DEBUG    2022-12-09 16:53:27,904: SSA violators set()
DEBUG    2022-12-09 16:53:27,914: bytecode dump:
>          0	NOP(arg=None, lineno=912)
           2	LOAD_FAST(arg=0, lineno=912)
           4	LOAD_ATTR(arg=0, lineno=912)
           6	STORE_FAST(arg=2, lineno=912)
           8	LOAD_FAST(arg=1, lineno=913)
          10	GET_ITER(arg=None, lineno=913)
>         12	FOR_ITER(arg=12, lineno=913)
          14	STORE_FAST(arg=3, lineno=913)
          16	LOAD_FAST(arg=2, lineno=914)
          18	LOAD_FAST(arg=3, lineno=914)
          20	CALL_FUNCTION(arg=1, lineno=914)
          22	POP_TOP(arg=None, lineno=914)
          24	JUMP_ABSOLUTE(arg=12, lineno=914)
>         26	LOAD_CONST(arg=0, lineno=914)
          28	RETURN_VALUE(arg=None, lineno=914)
DEBUG    2022-12-09 16:53:27,914: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:27,914: stack: []
DEBUG    2022-12-09 16:53:27,914: dispatch pc=0, inst=NOP(arg=None, lineno=912)
DEBUG    2022-12-09 16:53:27,914: stack []
DEBUG    2022-12-09 16:53:27,914: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=912)
DEBUG    2022-12-09 16:53:27,914: stack []
DEBUG    2022-12-09 16:53:27,914: dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=912)
DEBUG    2022-12-09 16:53:27,914: stack ['$lst2.0']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=6, inst=STORE_FAST(arg=2, lineno=912)
DEBUG    2022-12-09 16:53:27,914: stack ['$4load_attr.1']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=913)
DEBUG    2022-12-09 16:53:27,914: stack []
DEBUG    2022-12-09 16:53:27,914: dispatch pc=10, inst=GET_ITER(arg=None, lineno=913)
DEBUG    2022-12-09 16:53:27,914: stack ['$iterable8.2']
DEBUG    2022-12-09 16:53:27,914: end state. edges=[Edge(pc=12, stack=('$10get_iter.3',), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,914: pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG    2022-12-09 16:53:27,914: stack: ['$phi12.0']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=12, inst=FOR_ITER(arg=12, lineno=913)
DEBUG    2022-12-09 16:53:27,914: stack ['$phi12.0']
DEBUG    2022-12-09 16:53:27,914: end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,914: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
DEBUG    2022-12-09 16:53:27,914: stack: []
DEBUG    2022-12-09 16:53:27,914: dispatch pc=26, inst=LOAD_CONST(arg=0, lineno=914)
DEBUG    2022-12-09 16:53:27,914: stack []
DEBUG    2022-12-09 16:53:27,914: dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=914)
DEBUG    2022-12-09 16:53:27,914: stack ['$const26.0']
DEBUG    2022-12-09 16:53:27,914: end state. edges=[]
DEBUG    2022-12-09 16:53:27,914: pending: deque([State(pc_initial=14 nstack_initial=2)])
DEBUG    2022-12-09 16:53:27,914: stack: ['$phi14.0', '$phi14.1']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=14, inst=STORE_FAST(arg=3, lineno=913)
DEBUG    2022-12-09 16:53:27,914: stack ['$phi14.0', '$phi14.1']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=914)
DEBUG    2022-12-09 16:53:27,914: stack ['$phi14.0']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=914)
DEBUG    2022-12-09 16:53:27,914: stack ['$phi14.0', '$meth16.2']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=914)
DEBUG    2022-12-09 16:53:27,914: stack ['$phi14.0', '$meth16.2', '$v18.3']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=22, inst=POP_TOP(arg=None, lineno=914)
DEBUG    2022-12-09 16:53:27,914: stack ['$phi14.0', '$20call_function.4']
DEBUG    2022-12-09 16:53:27,914: dispatch pc=24, inst=JUMP_ABSOLUTE(arg=12, lineno=914)
DEBUG    2022-12-09 16:53:27,914: stack ['$phi14.0']
DEBUG    2022-12-09 16:53:27,914: end state. edges=[Edge(pc=12, stack=('$phi14.0',), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:27,914: pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG    2022-12-09 16:53:27,914: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:27,914: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=26 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:27,914: defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1)}
DEBUG    2022-12-09 16:53:27,914: phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG    2022-12-09 16:53:27,914: changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG    2022-12-09 16:53:27,914: changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG    2022-12-09 16:53:27,914: changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG    2022-12-09 16:53:27,914: keep phismap: {'$phi12.0': {('$10get_iter.3', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))}}
DEBUG    2022-12-09 16:53:27,914: new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.3'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'}})
DEBUG    2022-12-09 16:53:27,914: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:27,914: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$lst2.0'}), (4, {'item': '$lst2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$iterable8.2'}), (10, {'value': '$iterable8.2', 'res': '$10get_iter.3'})), outgoing_phis={'$phi12.0': '$10get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.3',)})
DEBUG    2022-12-09 16:53:27,914: block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 14: ('$phi12.0', '$12for_iter.2')})
DEBUG    2022-12-09 16:53:27,914: block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'value': '$phi14.1'}), (16, {'res': '$meth16.2'}), (18, {'res': '$v18.3'}), (20, {'func': '$meth16.2', 'args': ['$v18.3'], 'res': '$20call_function.4'}), (24, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi14.0',)})
DEBUG    2022-12-09 16:53:27,914: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'retval': '$const26.0', 'castval': '$28return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:27,914: label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    meth = getattr(value=lst, attr=append)   ['lst', 'meth']
    $10get_iter.3 = getiter(value=iterable)  ['$10get_iter.3', 'iterable']
    $phi12.0 = $10get_iter.3                 ['$10get_iter.3', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 26             ['$12for_iter.3']
label 14:
    v = $phi14.1                             ['$phi14.1', 'v']
    $20call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:913)], kws=(), vararg=None, target=None) ['$20call_function.4', 'meth', 'v']
    jump 12                                  []
label 26:
    $const26.0 = const(NoneType, None)       ['$const26.0']
    $28return_value.1 = cast(value=$const26.0) ['$28return_value.1', '$const26.0']
    return $28return_value.1                 ['$28return_value.1']

DEBUG    2022-12-09 16:53:27,923: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:27,923: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4E6700>
DEBUG    2022-12-09 16:53:27,923: on stmt: lst = arg(0, name=lst)
DEBUG    2022-12-09 16:53:27,923: on stmt: iterable = arg(1, name=iterable)
DEBUG    2022-12-09 16:53:27,923: on stmt: meth = getattr(value=lst, attr=append)
DEBUG    2022-12-09 16:53:27,923: on stmt: $10get_iter.3 = getiter(value=iterable)
DEBUG    2022-12-09 16:53:27,923: on stmt: $phi12.0 = $10get_iter.3
DEBUG    2022-12-09 16:53:27,923: on stmt: jump 12
DEBUG    2022-12-09 16:53:27,923: ==== SSA block analysis pass on 12
DEBUG    2022-12-09 16:53:27,923: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4E6700>
DEBUG    2022-12-09 16:53:27,923: on stmt: $12for_iter.1 = iternext(value=$phi12.0)
DEBUG    2022-12-09 16:53:27,923: on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
DEBUG    2022-12-09 16:53:27,923: on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
DEBUG    2022-12-09 16:53:27,923: on stmt: $phi14.1 = $12for_iter.2
DEBUG    2022-12-09 16:53:27,923: on stmt: branch $12for_iter.3, 14, 26
DEBUG    2022-12-09 16:53:27,923: ==== SSA block analysis pass on 14
DEBUG    2022-12-09 16:53:27,923: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4E6700>
DEBUG    2022-12-09 16:53:27,923: on stmt: v = $phi14.1
DEBUG    2022-12-09 16:53:27,923: on stmt: $20call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:913)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:27,923: on stmt: jump 12
DEBUG    2022-12-09 16:53:27,923: ==== SSA block analysis pass on 26
DEBUG    2022-12-09 16:53:27,923: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4E6700>
DEBUG    2022-12-09 16:53:27,923: on stmt: $const26.0 = const(NoneType, None)
DEBUG    2022-12-09 16:53:27,923: on stmt: $28return_value.1 = cast(value=$const26.0)
DEBUG    2022-12-09 16:53:27,923: on stmt: return $28return_value.1
DEBUG    2022-12-09 16:53:27,923: defs defaultdict(<class 'list'>,
            {'$10get_iter.3': [<numba.core.ir.Assign object at 0x0000024C8C4EDDF0>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x0000024C8C4F10A0>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x0000024C8C4F11C0>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x0000024C8C4F12E0>],
             '$20call_function.4': [<numba.core.ir.Assign object at 0x0000024C8C4F19D0>],
             '$28return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C4F1D30>],
             '$const26.0': [<numba.core.ir.Assign object at 0x0000024C8C4F1BB0>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x0000024C8C4ED940>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x0000024C8C4EDFA0>],
             'iterable': [<numba.core.ir.Assign object at 0x0000024C8C4ED790>],
             'lst': [<numba.core.ir.Assign object at 0x0000024C8C4ED0A0>],
             'meth': [<numba.core.ir.Assign object at 0x0000024C8C4EDA30>],
             'v': [<numba.core.ir.Assign object at 0x0000024C8C4F15B0>]})
DEBUG    2022-12-09 16:53:27,923: SSA violators set()
DEBUG    2022-12-09 16:53:28,024: bytecode dump:
>          0	NOP(arg=None, lineno=278)
           2	LOAD_GLOBAL(arg=0, lineno=278)
           4	LOAD_METHOD(arg=1, lineno=278)
           6	LOAD_FAST(arg=0, lineno=278)
           8	LOAD_FAST(arg=1, lineno=278)
          10	CALL_METHOD(arg=2, lineno=278)
          12	RETURN_VALUE(arg=None, lineno=278)
DEBUG    2022-12-09 16:53:28,024: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,024: stack: []
DEBUG    2022-12-09 16:53:28,024: dispatch pc=0, inst=NOP(arg=None, lineno=278)
DEBUG    2022-12-09 16:53:28,024: stack []
DEBUG    2022-12-09 16:53:28,024: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG    2022-12-09 16:53:28,024: stack []
DEBUG    2022-12-09 16:53:28,024: dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=278)
DEBUG    2022-12-09 16:53:28,024: stack ['$2load_global.0']
DEBUG    2022-12-09 16:53:28,024: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG    2022-12-09 16:53:28,024: stack ['$4load_method.1']
DEBUG    2022-12-09 16:53:28,024: dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=278)
DEBUG    2022-12-09 16:53:28,024: stack ['$4load_method.1', '$mi6.2']
DEBUG    2022-12-09 16:53:28,024: dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=278)
DEBUG    2022-12-09 16:53:28,024: stack ['$4load_method.1', '$mi6.2', '$typ8.3']
DEBUG    2022-12-09 16:53:28,024: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=278)
DEBUG    2022-12-09 16:53:28,024: stack ['$10call_method.4']
DEBUG    2022-12-09 16:53:28,024: end state. edges=[]
DEBUG    2022-12-09 16:53:28,024: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,024: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,024: defmap: {}
DEBUG    2022-12-09 16:53:28,024: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,024: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,024: keep phismap: {}
DEBUG    2022-12-09 16:53:28,024: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,024: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,024: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$mi6.2'}), (8, {'res': '$typ8.3'}), (10, {'func': '$4load_method.1', 'args': ['$mi6.2', '$typ8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,024: label 0:
    mi = arg(0, name=mi)                     ['mi']
    typ = arg(1, name=typ)                   ['typ']
    $2load_global.0 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=_from_meminfo) ['$2load_global.0', '$4load_method.1']
    $10call_method.4 = call $4load_method.1(mi, typ, func=$4load_method.1, args=[Var(mi, typeddict.py:278), Var(typ, typeddict.py:278)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'mi', 'typ']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG    2022-12-09 16:53:28,024: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,024: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C5929A0>
DEBUG    2022-12-09 16:53:28,024: on stmt: mi = arg(0, name=mi)
DEBUG    2022-12-09 16:53:28,024: on stmt: typ = arg(1, name=typ)
DEBUG    2022-12-09 16:53:28,024: on stmt: $2load_global.0 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>)
DEBUG    2022-12-09 16:53:28,024: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=_from_meminfo)
DEBUG    2022-12-09 16:53:28,024: on stmt: $10call_method.4 = call $4load_method.1(mi, typ, func=$4load_method.1, args=[Var(mi, typeddict.py:278), Var(typ, typeddict.py:278)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,024: on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG    2022-12-09 16:53:28,024: on stmt: return $12return_value.5
DEBUG    2022-12-09 16:53:28,024: defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x0000024C8C599C40>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000024C8C599D30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C599670>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000024C8C5997F0>],
             'mi': [<numba.core.ir.Assign object at 0x0000024C8C592550>],
             'typ': [<numba.core.ir.Assign object at 0x0000024C8C5990D0>]})
DEBUG    2022-12-09 16:53:28,024: SSA violators set()
DEBUG    2022-12-09 16:53:28,095: bytecode dump:
>          0	NOP(arg=None, lineno=156)
           2	LOAD_FAST(arg=0, lineno=156)
           4	LOAD_CONST(arg=1, lineno=156)
           6	BINARY_ADD(arg=None, lineno=156)
           8	RETURN_VALUE(arg=None, lineno=156)
DEBUG    2022-12-09 16:53:28,095: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,095: stack: []
DEBUG    2022-12-09 16:53:28,095: dispatch pc=0, inst=NOP(arg=None, lineno=156)
DEBUG    2022-12-09 16:53:28,095: stack []
DEBUG    2022-12-09 16:53:28,095: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG    2022-12-09 16:53:28,095: stack []
DEBUG    2022-12-09 16:53:28,095: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=156)
DEBUG    2022-12-09 16:53:28,095: stack ['$tempc2.0']
DEBUG    2022-12-09 16:53:28,095: dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=156)
DEBUG    2022-12-09 16:53:28,095: stack ['$tempc2.0', '$const4.1']
DEBUG    2022-12-09 16:53:28,095: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=156)
DEBUG    2022-12-09 16:53:28,095: stack ['$6binary_add.2']
DEBUG    2022-12-09 16:53:28,095: end state. edges=[]
DEBUG    2022-12-09 16:53:28,095: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,095: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,095: defmap: {}
DEBUG    2022-12-09 16:53:28,095: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,095: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,095: keep phismap: {}
DEBUG    2022-12-09 16:53:28,095: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,095: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,095: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$tempc2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$tempc2.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,095: label 0:
    tempc = arg(0, name=tempc)               ['tempc']
    $const4.1 = const(float, 273.16)         ['$const4.1']
    $6binary_add.2 = tempc + $const4.1       ['$6binary_add.2', '$const4.1', 'tempc']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2022-12-09 16:53:28,095: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,095: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C5F89D0>
DEBUG    2022-12-09 16:53:28,095: on stmt: tempc = arg(0, name=tempc)
DEBUG    2022-12-09 16:53:28,095: on stmt: $const4.1 = const(float, 273.16)
DEBUG    2022-12-09 16:53:28,095: on stmt: $6binary_add.2 = tempc + $const4.1
DEBUG    2022-12-09 16:53:28,095: on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG    2022-12-09 16:53:28,095: on stmt: return $8return_value.3
DEBUG    2022-12-09 16:53:28,095: defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x0000024C8C602520>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000024C8C602670>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024C8C602370>],
             'tempc': [<numba.core.ir.Assign object at 0x0000024C8C5EB490>]})
DEBUG    2022-12-09 16:53:28,095: SSA violators set()
DEBUG    2022-12-09 16:53:28,133: bytecode dump:
>          0	NOP(arg=None, lineno=124)
           2	LOAD_CONST(arg=1, lineno=124)
           4	LOAD_CONST(arg=2, lineno=124)
           6	LOAD_FAST(arg=2, lineno=124)
           8	LOAD_CONST(arg=3, lineno=124)
          10	BINARY_POWER(arg=None, lineno=124)
          12	BINARY_MULTIPLY(arg=None, lineno=124)
          14	BINARY_ADD(arg=None, lineno=124)
          16	LOAD_FAST(arg=1, lineno=124)
          18	BINARY_MULTIPLY(arg=None, lineno=124)
          20	LOAD_FAST(arg=3, lineno=124)
          22	BINARY_MULTIPLY(arg=None, lineno=124)
          24	LOAD_FAST(arg=0, lineno=124)
          26	LOAD_CONST(arg=4, lineno=124)
          28	BINARY_POWER(arg=None, lineno=124)
          30	BINARY_MULTIPLY(arg=None, lineno=124)
          32	RETURN_VALUE(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,133: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,133: stack: []
DEBUG    2022-12-09 16:53:28,133: dispatch pc=0, inst=NOP(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack []
DEBUG    2022-12-09 16:53:28,133: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack []
DEBUG    2022-12-09 16:53:28,133: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$const2.0']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$const2.0', '$const4.1']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=8, inst=LOAD_CONST(arg=3, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$const2.0', '$const4.1', '$cloudiness6.2']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=10, inst=BINARY_POWER(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$const2.0', '$const4.1', '$cloudiness6.2', '$const8.3']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=12, inst=BINARY_MULTIPLY(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$const2.0', '$const4.1', '$10binary_power.4']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$const2.0', '$12binary_multiply.5']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$14binary_add.6']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$14binary_add.6', '$emissivity_air16.7']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=124)
DEBUG    2022-12-09 16:53:28,133: stack ['$18binary_multiply.8']
DEBUG    2022-12-09 16:53:28,133: dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,135: stack ['$18binary_multiply.8', '$stefan_boltzmann20.9']
DEBUG    2022-12-09 16:53:28,135: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=124)
DEBUG    2022-12-09 16:53:28,135: stack ['$22binary_multiply.10']
DEBUG    2022-12-09 16:53:28,135: dispatch pc=26, inst=LOAD_CONST(arg=4, lineno=124)
DEBUG    2022-12-09 16:53:28,135: stack ['$22binary_multiply.10', '$TairK24.11']
DEBUG    2022-12-09 16:53:28,135: dispatch pc=28, inst=BINARY_POWER(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,135: stack ['$22binary_multiply.10', '$TairK24.11', '$const26.12']
DEBUG    2022-12-09 16:53:28,135: dispatch pc=30, inst=BINARY_MULTIPLY(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,135: stack ['$22binary_multiply.10', '$28binary_power.13']
DEBUG    2022-12-09 16:53:28,135: dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=124)
DEBUG    2022-12-09 16:53:28,135: stack ['$30binary_multiply.14']
DEBUG    2022-12-09 16:53:28,135: end state. edges=[]
DEBUG    2022-12-09 16:53:28,135: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,135: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,135: defmap: {}
DEBUG    2022-12-09 16:53:28,135: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,135: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,135: keep phismap: {}
DEBUG    2022-12-09 16:53:28,135: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,135: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,135: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$cloudiness6.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$cloudiness6.2', 'rhs': '$const8.3', 'res': '$10binary_power.4'}), (12, {'lhs': '$const4.1', 'rhs': '$10binary_power.4', 'res': '$12binary_multiply.5'}), (14, {'lhs': '$const2.0', 'rhs': '$12binary_multiply.5', 'res': '$14binary_add.6'}), (16, {'res': '$emissivity_air16.7'}), (18, {'lhs': '$14binary_add.6', 'rhs': '$emissivity_air16.7', 'res': '$18binary_multiply.8'}), (20, {'res': '$stefan_boltzmann20.9'}), (22, {'lhs': '$18binary_multiply.8', 'rhs': '$stefan_boltzmann20.9', 'res': '$22binary_multiply.10'}), (24, {'res': '$TairK24.11'}), (26, {'res': '$const26.12'}), (28, {'lhs': '$TairK24.11', 'rhs': '$const26.12', 'res': '$28binary_power.13'}), (30, {'lhs': '$22binary_multiply.10', 'rhs': '$28binary_power.13', 'res': '$30binary_multiply.14'}), (32, {'retval': '$30binary_multiply.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,135: label 0:
    TairK = arg(0, name=TairK)               ['TairK']
    emissivity_air = arg(1, name=emissivity_air) ['emissivity_air']
    cloudiness = arg(2, name=cloudiness)     ['cloudiness']
    stefan_boltzmann = arg(3, name=stefan_boltzmann) ['stefan_boltzmann']
    $const2.0 = const(float, 1.0)            ['$const2.0']
    $const4.1 = const(float, 0.17)           ['$const4.1']
    $const8.3 = const(int, 2)                ['$const8.3']
    $10binary_power.4 = cloudiness ** $const8.3 ['$10binary_power.4', '$const8.3', 'cloudiness']
    $12binary_multiply.5 = $const4.1 * $10binary_power.4 ['$10binary_power.4', '$12binary_multiply.5', '$const4.1']
    $14binary_add.6 = $const2.0 + $12binary_multiply.5 ['$12binary_multiply.5', '$14binary_add.6', '$const2.0']
    $18binary_multiply.8 = $14binary_add.6 * emissivity_air ['$14binary_add.6', '$18binary_multiply.8', 'emissivity_air']
    $22binary_multiply.10 = $18binary_multiply.8 * stefan_boltzmann ['$18binary_multiply.8', '$22binary_multiply.10', 'stefan_boltzmann']
    $const26.12 = const(float, 4.0)          ['$const26.12']
    $28binary_power.13 = TairK ** $const26.12 ['$28binary_power.13', '$const26.12', 'TairK']
    $30binary_multiply.14 = $22binary_multiply.10 * $28binary_power.13 ['$22binary_multiply.10', '$28binary_power.13', '$30binary_multiply.14']
    $32return_value.15 = cast(value=$30binary_multiply.14) ['$30binary_multiply.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

DEBUG    2022-12-09 16:53:28,135: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,135: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C602130>
DEBUG    2022-12-09 16:53:28,135: on stmt: TairK = arg(0, name=TairK)
DEBUG    2022-12-09 16:53:28,135: on stmt: emissivity_air = arg(1, name=emissivity_air)
DEBUG    2022-12-09 16:53:28,135: on stmt: cloudiness = arg(2, name=cloudiness)
DEBUG    2022-12-09 16:53:28,135: on stmt: stefan_boltzmann = arg(3, name=stefan_boltzmann)
DEBUG    2022-12-09 16:53:28,135: on stmt: $const2.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,135: on stmt: $const4.1 = const(float, 0.17)
DEBUG    2022-12-09 16:53:28,135: on stmt: $const8.3 = const(int, 2)
DEBUG    2022-12-09 16:53:28,135: on stmt: $10binary_power.4 = cloudiness ** $const8.3
DEBUG    2022-12-09 16:53:28,135: on stmt: $12binary_multiply.5 = $const4.1 * $10binary_power.4
DEBUG    2022-12-09 16:53:28,135: on stmt: $14binary_add.6 = $const2.0 + $12binary_multiply.5
DEBUG    2022-12-09 16:53:28,135: on stmt: $18binary_multiply.8 = $14binary_add.6 * emissivity_air
DEBUG    2022-12-09 16:53:28,135: on stmt: $22binary_multiply.10 = $18binary_multiply.8 * stefan_boltzmann
DEBUG    2022-12-09 16:53:28,135: on stmt: $const26.12 = const(float, 4.0)
DEBUG    2022-12-09 16:53:28,135: on stmt: $28binary_power.13 = TairK ** $const26.12
DEBUG    2022-12-09 16:53:28,135: on stmt: $30binary_multiply.14 = $22binary_multiply.10 * $28binary_power.13
DEBUG    2022-12-09 16:53:28,135: on stmt: $32return_value.15 = cast(value=$30binary_multiply.14)
DEBUG    2022-12-09 16:53:28,135: on stmt: return $32return_value.15
DEBUG    2022-12-09 16:53:28,135: defs defaultdict(<class 'list'>,
            {'$10binary_power.4': [<numba.core.ir.Assign object at 0x0000024C8C5AA880>],
             '$12binary_multiply.5': [<numba.core.ir.Assign object at 0x0000024C8C5AAA00>],
             '$14binary_add.6': [<numba.core.ir.Assign object at 0x0000024C8C5AAB80>],
             '$18binary_multiply.8': [<numba.core.ir.Assign object at 0x0000024C8C5AAE20>],
             '$22binary_multiply.10': [<numba.core.ir.Assign object at 0x0000024C8C60E100>],
             '$28binary_power.13': [<numba.core.ir.Assign object at 0x0000024C8C60E520>],
             '$30binary_multiply.14': [<numba.core.ir.Assign object at 0x0000024C8C60E6A0>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x0000024C8C60E7F0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000024C8C5AA2B0>],
             '$const26.12': [<numba.core.ir.Assign object at 0x0000024C8C60E370>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024C8C5AA430>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000024C8C5AA6D0>],
             'TairK': [<numba.core.ir.Assign object at 0x0000024C8C5AF670>],
             'cloudiness': [<numba.core.ir.Assign object at 0x0000024C8C5AFFD0>],
             'emissivity_air': [<numba.core.ir.Assign object at 0x0000024C8C5AF580>],
             'stefan_boltzmann': [<numba.core.ir.Assign object at 0x0000024C8C5AA130>]})
DEBUG    2022-12-09 16:53:28,135: SSA violators set()
DEBUG    2022-12-09 16:53:28,155: bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG    2022-12-09 16:53:28,155: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,155: stack: []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG    2022-12-09 16:53:28,155: stack ['$2load_deref.0']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG    2022-12-09 16:53:28,155: stack ['$2load_deref.0', '$const4.1']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG    2022-12-09 16:53:28,155: stack ['$6call_function.2']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG    2022-12-09 16:53:28,155: stack ['$10load_deref.3']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG    2022-12-09 16:53:28,155: stack ['$10load_deref.3', '$a12.4']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG    2022-12-09 16:53:28,155: stack ['$14call_function.5']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG    2022-12-09 16:53:28,155: stack ['$b18.6']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG    2022-12-09 16:53:28,155: stack ['$b18.6', '$const20.7']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG    2022-12-09 16:53:28,155: stack ['$22compare_op.8']
DEBUG    2022-12-09 16:53:28,155: end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,155: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,155: stack: []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG    2022-12-09 16:53:28,155: stack ['$const26.0']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG    2022-12-09 16:53:28,155: stack ['$b30.1']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG    2022-12-09 16:53:28,155: stack ['$32unary_negative.2']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG    2022-12-09 16:53:28,155: stack ['$exp36.3']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG    2022-12-09 16:53:28,155: stack ['$exp36.3', '$const38.4']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG    2022-12-09 16:53:28,155: stack ['$40compare_op.5']
DEBUG    2022-12-09 16:53:28,155: end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,155: pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,155: stack: []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG    2022-12-09 16:53:28,155: stack ['$const98.0']
DEBUG    2022-12-09 16:53:28,155: dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG    2022-12-09 16:53:28,155: stack ['$b102.1']
DEBUG    2022-12-09 16:53:28,155: end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,155: pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,155: stack: []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG    2022-12-09 16:53:28,155: stack ['$44load_global.0']
DEBUG    2022-12-09 16:53:28,155: end state. edges=[]
DEBUG    2022-12-09 16:53:28,155: pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,155: stack: []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG    2022-12-09 16:53:28,155: stack []
DEBUG    2022-12-09 16:53:28,155: dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG    2022-12-09 16:53:28,155: stack ['$48load_deref.0']
DEBUG    2022-12-09 16:53:28,155: end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,155: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,163: stack: []
DEBUG    2022-12-09 16:53:28,163: dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG    2022-12-09 16:53:28,163: stack []
DEBUG    2022-12-09 16:53:28,163: dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG    2022-12-09 16:53:28,163: stack ['$exp106.0']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG    2022-12-09 16:53:28,163: stack ['$exp106.0', '$const108.1']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG    2022-12-09 16:53:28,163: stack ['$110compare_op.2']
DEBUG    2022-12-09 16:53:28,163: end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,163: pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,163: stack: []
DEBUG    2022-12-09 16:53:28,163: dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG    2022-12-09 16:53:28,163: stack []
DEBUG    2022-12-09 16:53:28,163: dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG    2022-12-09 16:53:28,163: stack ['$a52.0']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG    2022-12-09 16:53:28,163: stack ['$a52.0', '$const54.1']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG    2022-12-09 16:53:28,163: stack ['$56compare_op.2']
DEBUG    2022-12-09 16:53:28,163: end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,163: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,163: pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,163: stack: []
DEBUG    2022-12-09 16:53:28,163: dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG    2022-12-09 16:53:28,163: stack []
DEBUG    2022-12-09 16:53:28,163: dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG    2022-12-09 16:53:28,163: stack ['$114load_global.0']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG    2022-12-09 16:53:28,163: stack ['$116load_method.1']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG    2022-12-09 16:53:28,163: stack ['$116load_method.1', '$a118.2']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG    2022-12-09 16:53:28,163: stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG    2022-12-09 16:53:28,163: stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG    2022-12-09 16:53:28,163: dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG    2022-12-09 16:53:28,165: stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG    2022-12-09 16:53:28,166: stack ['$126call_method.6']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG    2022-12-09 16:53:28,166: stack ['$exp130.0']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG    2022-12-09 16:53:28,166: stack ['$exp130.0', '$const132.1']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG    2022-12-09 16:53:28,166: stack ['$134compare_op.2']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG    2022-12-09 16:53:28,166: stack ['$60load_deref.0']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG    2022-12-09 16:53:28,166: stack ['$a76.0']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG    2022-12-09 16:53:28,166: stack ['$a76.0', '$const78.1']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG    2022-12-09 16:53:28,166: stack ['$80compare_op.2']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG    2022-12-09 16:53:28,166: stack ['$exp138.0']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG    2022-12-09 16:53:28,166: stack ['$exp138.0', '$const140.1']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG    2022-12-09 16:53:28,166: stack ['$142binary_and.2']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG    2022-12-09 16:53:28,166: stack ['$invert172.0']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG    2022-12-09 16:53:28,166: stack ['$64load_deref.0']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG    2022-12-09 16:53:28,166: stack ['$68load_global.0']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG    2022-12-09 16:53:28,166: stack ['$68load_global.0', '$const70.1']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG    2022-12-09 16:53:28,166: stack ['$72call_function.2']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG    2022-12-09 16:53:28,166: stack ['$a84.0']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG    2022-12-09 16:53:28,166: stack ['$a84.0', '$const86.1']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG    2022-12-09 16:53:28,166: stack ['$88compare_op.2']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG    2022-12-09 16:53:28,166: stack ['$r146.0']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG    2022-12-09 16:53:28,166: stack ['$r146.0', '$a148.1']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG    2022-12-09 16:53:28,166: stack ['$150inplace_multiply.2']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG    2022-12-09 16:53:28,166: stack ['$exp154.0']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG    2022-12-09 16:53:28,166: stack ['$exp154.0', '$const156.1']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG    2022-12-09 16:53:28,166: stack ['$158inplace_rshift.2']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG    2022-12-09 16:53:28,166: stack ['$a162.3']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG    2022-12-09 16:53:28,166: stack ['$a162.3', '$a164.4']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG    2022-12-09 16:53:28,166: stack ['$166inplace_multiply.5']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG    2022-12-09 16:53:28,166: stack ['$const176.0']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG    2022-12-09 16:53:28,166: stack ['$const176.0', '$r178.1']
DEBUG    2022-12-09 16:53:28,166: dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG    2022-12-09 16:53:28,166: stack ['$180binary_true_divide.2']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG    2022-12-09 16:53:28,166: stack ['$r184.0']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: stack: []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG    2022-12-09 16:53:28,166: stack []
DEBUG    2022-12-09 16:53:28,166: dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG    2022-12-09 16:53:28,166: stack ['$const92.0']
DEBUG    2022-12-09 16:53:28,166: end state. edges=[]
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,166: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,166: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,166: defmap: {}
DEBUG    2022-12-09 16:53:28,166: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,166: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,166: keep phismap: {}
DEBUG    2022-12-09 16:53:28,166: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,166: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,166: block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,174: block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,176: label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG    2022-12-09 16:53:28,186: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,186: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,186: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,186: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,186: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,186: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,186: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,186: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,186: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,186: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,186: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,186: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,186: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,186: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,186: ==== SSA block analysis pass on 26
DEBUG    2022-12-09 16:53:28,186: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,186: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,186: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,186: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,186: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,186: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,186: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,186: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,186: ==== SSA block analysis pass on 44
DEBUG    2022-12-09 16:53:28,186: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,186: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,186: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,186: ==== SSA block analysis pass on 48
DEBUG    2022-12-09 16:53:28,186: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,186: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,186: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,186: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,186: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,186: ==== SSA block analysis pass on 98
DEBUG    2022-12-09 16:53:28,186: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,186: on stmt: invert = const(bool, False)
DEBUG    2022-12-09 16:53:28,186: on stmt: exp = b
DEBUG    2022-12-09 16:53:28,186: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,186: ==== SSA block analysis pass on 106
DEBUG    2022-12-09 16:53:28,186: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,186: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,186: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2022-12-09 16:53:28,186: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,186: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,186: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,186: ==== SSA block analysis pass on 114
DEBUG    2022-12-09 16:53:28,186: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,186: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,194: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,194: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,194: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,194: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,194: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,194: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,194: ==== SSA block analysis pass on 130
DEBUG    2022-12-09 16:53:28,194: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,194: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,194: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2022-12-09 16:53:28,194: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,194: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,194: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,194: ==== SSA block analysis pass on 138
DEBUG    2022-12-09 16:53:28,194: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,194: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,194: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2022-12-09 16:53:28,194: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,194: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,194: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,194: ==== SSA block analysis pass on 146
DEBUG    2022-12-09 16:53:28,194: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,194: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,194: on stmt: r = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,194: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,194: ==== SSA block analysis pass on 154
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,196: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,196: on stmt: exp = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,196: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,196: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,196: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,196: ==== SSA block analysis pass on 172
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,196: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,196: ==== SSA block analysis pass on 176
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,196: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2022-12-09 16:53:28,196: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,196: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,196: ==== SSA block analysis pass on 184
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C61E5E0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2022-12-09 16:53:28,196: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,196: defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x0000024C8C62E100>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C5D83D0>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000024C8C5D8640>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C5D8880>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000024C8C5D8A00>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000024C8C5D8CA0>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000024C8C5D8FA0>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000024C8C5E9190>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x0000024C8C5E9280>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C5E9730>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000024C8C5E99A0>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x0000024C8C5E9EB0>],
             '$144pred': [<numba.core.ir.Assign object at 0x0000024C8C5D5160>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000024C8C5D5610>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000024C8C5D5B50>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000024C8C5D5FD0>],
             '$174pred': [<numba.core.ir.Assign object at 0x0000024C8C5D74C0>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000024C8C5D79D0>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x0000024C8C5D7B20>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C5D7E80>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x0000024C8C62E910>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000024C8C62EB80>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000024C8C61E1C0>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x0000024C8C62D610>],
             '$42pred': [<numba.core.ir.Assign object at 0x0000024C8C62D880>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000024C8C62D9A0>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x0000024C8C62DCA0>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000024C8C62DF40>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000024C8C5D8220>],
             '$const132.1': [<numba.core.ir.Assign object at 0x0000024C8C5E9580>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000024C8C5E9D00>],
             '$const156.1': [<numba.core.ir.Assign object at 0x0000024C8C5D59A0>],
             '$const176.0': [<numba.core.ir.Assign object at 0x0000024C8C5D7700>],
             '$const20.7': [<numba.core.ir.Assign object at 0x0000024C8C62E760>],
             '$const38.4': [<numba.core.ir.Assign object at 0x0000024C8C62D460>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024C8C61ECA0>],
             'a': [<numba.core.ir.Assign object at 0x0000024C8C61E160>],
             'a.1': [<numba.core.ir.Assign object at 0x0000024C8C62E400>,
                     <numba.core.ir.Assign object at 0x0000024C8C5D70D0>],
             'b': [<numba.core.ir.Assign object at 0x0000024C8C61E0A0>],
             'bool112': [<numba.core.ir.Assign object at 0x0000024C8C5D8520>],
             'bool136': [<numba.core.ir.Assign object at 0x0000024C8C5E9880>],
             'bool144': [<numba.core.ir.Assign object at 0x0000024C8C5D5040>],
             'bool174': [<numba.core.ir.Assign object at 0x0000024C8C5D73A0>],
             'bool24': [<numba.core.ir.Assign object at 0x0000024C8C62EA60>],
             'bool42': [<numba.core.ir.Assign object at 0x0000024C8C62D760>],
             'bool50': [<numba.core.ir.Assign object at 0x0000024C8C62DE20>],
             'exp': [<numba.core.ir.Assign object at 0x0000024C8C62D0A0>,
                     <numba.core.ir.Assign object at 0x0000024C8C5DAF70>,
                     <numba.core.ir.Assign object at 0x0000024C8C5D5C10>],
             'invert': [<numba.core.ir.Assign object at 0x0000024C8C62ECA0>,
                        <numba.core.ir.Assign object at 0x0000024C8C5DACA0>],
             'r': [<numba.core.ir.Assign object at 0x0000024C8C61EE80>,
                   <numba.core.ir.Assign object at 0x0000024C8C5D56D0>]})
DEBUG    2022-12-09 16:53:28,196: SSA violators {'exp', 'a.1', 'r', 'invert'}
DEBUG    2022-12-09 16:53:28,196: Fix SSA violator on var exp
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,196: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,196: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,196: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,196: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,196: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,196: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,196: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,196: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,196: first assign: exp
DEBUG    2022-12-09 16:53:28,196: replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,196: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,196: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,196: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 48
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,196: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: invert = const(bool, False)
DEBUG    2022-12-09 16:53:28,196: on stmt: exp = b
DEBUG    2022-12-09 16:53:28,196: replaced with: exp.1 = b
DEBUG    2022-12-09 16:53:28,196: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,196: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2022-12-09 16:53:28,196: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 114
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,196: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,196: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 130
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,196: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2022-12-09 16:53:28,196: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 138
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,196: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2022-12-09 16:53:28,196: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,196: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,196: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 146
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,196: on stmt: r = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,196: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,196: ==== SSA block rewrite pass on 154
DEBUG    2022-12-09 16:53:28,196: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,196: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,196: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,196: on stmt: exp = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,196: replaced with: exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,196: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,196: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,196: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,204: ==== SSA block rewrite pass on 172
DEBUG    2022-12-09 16:53:28,204: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,204: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,204: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,204: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,204: ==== SSA block rewrite pass on 176
DEBUG    2022-12-09 16:53:28,204: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,204: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,204: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2022-12-09 16:53:28,204: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,204: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,204: ==== SSA block rewrite pass on 184
DEBUG    2022-12-09 16:53:28,204: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,204: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2022-12-09 16:53:28,204: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,204: Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000024C8C61BEE0>],
             98: [<numba.core.ir.Assign object at 0x0000024C8C61BC10>],
             154: [<numba.core.ir.Assign object at 0x0000024C8C637A30>]})
DEBUG    2022-12-09 16:53:28,204: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,204: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,204: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,204: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,204: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,204: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,204: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,204: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,204: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,204: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,204: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,204: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,204: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,206: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,206: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,206: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,206: find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,206: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,206: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,206: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 48
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,206: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,206: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: invert = const(bool, False)
DEBUG    2022-12-09 16:53:28,206: on stmt: exp.1 = b
DEBUG    2022-12-09 16:53:28,206: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,206: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2022-12-09 16:53:28,206: find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG    2022-12-09 16:53:28,206: find_def_from_top label 106
DEBUG    2022-12-09 16:53:28,206: insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG    2022-12-09 16:53:28,206: find_def_from_bottom label 48
DEBUG    2022-12-09 16:53:28,206: find_def_from_top label 48
DEBUG    2022-12-09 16:53:28,206: idom 26 from label 48
DEBUG    2022-12-09 16:53:28,206: find_def_from_bottom label 26
DEBUG    2022-12-09 16:53:28,206: incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,206: find_def_from_bottom label 98
DEBUG    2022-12-09 16:53:28,206: incoming_def exp.1 = b
DEBUG    2022-12-09 16:53:28,206: replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2022-12-09 16:53:28,206: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,206: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 114
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,206: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,206: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,206: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,206: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 130
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,206: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2022-12-09 16:53:28,206: find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG    2022-12-09 16:53:28,206: find_def_from_top label 130
DEBUG    2022-12-09 16:53:28,206: insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2022-12-09 16:53:28,206: find_def_from_bottom label 106
DEBUG    2022-12-09 16:53:28,206: incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2022-12-09 16:53:28,206: find_def_from_bottom label 154
DEBUG    2022-12-09 16:53:28,206: incoming_def exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,206: replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2022-12-09 16:53:28,206: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,206: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 138
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,206: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2022-12-09 16:53:28,206: find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG    2022-12-09 16:53:28,206: find_def_from_top label 138
DEBUG    2022-12-09 16:53:28,206: idom 130 from label 138
DEBUG    2022-12-09 16:53:28,206: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,206: replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2022-12-09 16:53:28,206: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,206: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 146
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,206: on stmt: r = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,206: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 154
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,206: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,206: find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,206: find_def_from_top label 154
DEBUG    2022-12-09 16:53:28,206: idom 138 from label 154
DEBUG    2022-12-09 16:53:28,206: find_def_from_bottom label 138
DEBUG    2022-12-09 16:53:28,206: find_def_from_top label 138
DEBUG    2022-12-09 16:53:28,206: idom 130 from label 138
DEBUG    2022-12-09 16:53:28,206: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,206: replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,206: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,206: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,206: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,206: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 172
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,206: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,206: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 176
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,206: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2022-12-09 16:53:28,206: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,206: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 184
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,206: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2022-12-09 16:53:28,206: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,206: Fix SSA violator on var a.1
DEBUG    2022-12-09 16:53:28,206: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,206: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,206: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,206: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,206: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,214: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,214: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,214: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,214: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,214: first assign: a.1
DEBUG    2022-12-09 16:53:28,214: replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,214: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,214: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,214: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,214: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,214: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,214: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:28,214: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,214: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,216: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,216: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,216: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,216: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 48
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,216: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: invert = const(bool, False)
DEBUG    2022-12-09 16:53:28,216: on stmt: exp.1 = b
DEBUG    2022-12-09 16:53:28,216: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2022-12-09 16:53:28,216: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,216: on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2022-12-09 16:53:28,216: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 114
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,216: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,216: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 130
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,216: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,216: on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2022-12-09 16:53:28,216: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 138
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,216: on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2022-12-09 16:53:28,216: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 146
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,216: on stmt: r = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,216: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 154
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,216: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,216: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,216: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,216: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,216: replaced with: a.1.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,216: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 172
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 176
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,216: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2022-12-09 16:53:28,216: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,216: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 184
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C637130>
DEBUG    2022-12-09 16:53:28,216: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2022-12-09 16:53:28,216: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,216: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024C8C637CA0>],
             154: [<numba.core.ir.Assign object at 0x0000024C8C61B040>]})
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,216: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,216: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,216: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,216: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,216: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,216: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,216: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,216: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,216: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,216: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,216: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 48
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,216: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: invert = const(bool, False)
DEBUG    2022-12-09 16:53:28,216: on stmt: exp.1 = b
DEBUG    2022-12-09 16:53:28,216: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2022-12-09 16:53:28,216: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,216: on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2022-12-09 16:53:28,216: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 114
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,216: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: find_def_from_top label 114
DEBUG    2022-12-09 16:53:28,216: idom 106 from label 114
DEBUG    2022-12-09 16:53:28,216: find_def_from_bottom label 106
DEBUG    2022-12-09 16:53:28,216: find_def_from_top label 106
DEBUG    2022-12-09 16:53:28,216: idom 0 from label 106
DEBUG    2022-12-09 16:53:28,216: find_def_from_bottom label 0
DEBUG    2022-12-09 16:53:28,216: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,216: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 130
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,216: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,216: on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2022-12-09 16:53:28,216: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 138
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,216: on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2022-12-09 16:53:28,216: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,216: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,216: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,216: ==== SSA block rewrite pass on 146
DEBUG    2022-12-09 16:53:28,216: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,216: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,224: find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,224: find_def_from_top label 146
DEBUG    2022-12-09 16:53:28,224: idom 138 from label 146
DEBUG    2022-12-09 16:53:28,224: find_def_from_bottom label 138
DEBUG    2022-12-09 16:53:28,224: find_def_from_top label 138
DEBUG    2022-12-09 16:53:28,224: idom 130 from label 138
DEBUG    2022-12-09 16:53:28,224: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,224: find_def_from_top label 130
DEBUG    2022-12-09 16:53:28,224: insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2022-12-09 16:53:28,224: find_def_from_bottom label 106
DEBUG    2022-12-09 16:53:28,224: find_def_from_top label 106
DEBUG    2022-12-09 16:53:28,224: idom 0 from label 106
DEBUG    2022-12-09 16:53:28,224: find_def_from_bottom label 0
DEBUG    2022-12-09 16:53:28,224: incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,224: find_def_from_bottom label 154
DEBUG    2022-12-09 16:53:28,224: incoming_def a.1.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,224: replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,224: on stmt: r = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,224: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,224: ==== SSA block rewrite pass on 154
DEBUG    2022-12-09 16:53:28,224: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,224: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,224: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,224: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,224: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,224: find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,224: find_def_from_top label 154
DEBUG    2022-12-09 16:53:28,224: idom 138 from label 154
DEBUG    2022-12-09 16:53:28,224: find_def_from_bottom label 138
DEBUG    2022-12-09 16:53:28,224: find_def_from_top label 138
DEBUG    2022-12-09 16:53:28,224: idom 130 from label 138
DEBUG    2022-12-09 16:53:28,224: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,224: replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,224: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,224: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,224: ==== SSA block rewrite pass on 172
DEBUG    2022-12-09 16:53:28,224: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,224: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,224: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,224: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,224: ==== SSA block rewrite pass on 176
DEBUG    2022-12-09 16:53:28,224: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,224: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,224: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2022-12-09 16:53:28,226: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,226: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 184
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2022-12-09 16:53:28,226: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,226: Fix SSA violator on var r
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,226: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,226: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,226: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,226: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: first assign: r
DEBUG    2022-12-09 16:53:28,226: replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,226: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,226: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,226: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,226: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,226: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,226: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,226: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 48
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,226: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: invert = const(bool, False)
DEBUG    2022-12-09 16:53:28,226: on stmt: exp.1 = b
DEBUG    2022-12-09 16:53:28,226: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2022-12-09 16:53:28,226: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,226: on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2022-12-09 16:53:28,226: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 114
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,226: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,226: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 130
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,226: on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,226: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,226: on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2022-12-09 16:53:28,226: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 138
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,226: on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2022-12-09 16:53:28,226: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 146
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,226: on stmt: r = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,226: replaced with: r.1 = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,226: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 154
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,226: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,226: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,226: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,226: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,226: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 172
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 176
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,226: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2022-12-09 16:53:28,226: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,226: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 184
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BBB0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2022-12-09 16:53:28,226: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,226: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024C8C61BF40>],
             146: [<numba.core.ir.Assign object at 0x0000024C8C63A130>]})
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,226: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,226: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,226: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,226: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,226: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,226: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,226: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,226: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,226: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,226: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,226: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 48
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,226: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: invert = const(bool, False)
DEBUG    2022-12-09 16:53:28,226: on stmt: exp.1 = b
DEBUG    2022-12-09 16:53:28,226: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2022-12-09 16:53:28,226: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,226: on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2022-12-09 16:53:28,226: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 114
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,226: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,226: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,226: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,226: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,226: ==== SSA block rewrite pass on 130
DEBUG    2022-12-09 16:53:28,226: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,226: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,226: on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,226: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,226: on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2022-12-09 16:53:28,226: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,234: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,234: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,234: ==== SSA block rewrite pass on 138
DEBUG    2022-12-09 16:53:28,234: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,234: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,234: on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2022-12-09 16:53:28,234: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,234: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,234: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,234: ==== SSA block rewrite pass on 146
DEBUG    2022-12-09 16:53:28,234: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,234: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,234: find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,234: find_def_from_top label 146
DEBUG    2022-12-09 16:53:28,234: idom 138 from label 146
DEBUG    2022-12-09 16:53:28,234: find_def_from_bottom label 138
DEBUG    2022-12-09 16:53:28,234: find_def_from_top label 138
DEBUG    2022-12-09 16:53:28,234: idom 130 from label 138
DEBUG    2022-12-09 16:53:28,234: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,234: find_def_from_top label 130
DEBUG    2022-12-09 16:53:28,234: insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2022-12-09 16:53:28,234: find_def_from_bottom label 106
DEBUG    2022-12-09 16:53:28,234: find_def_from_top label 106
DEBUG    2022-12-09 16:53:28,234: idom 0 from label 106
DEBUG    2022-12-09 16:53:28,234: find_def_from_bottom label 0
DEBUG    2022-12-09 16:53:28,234: incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,234: find_def_from_bottom label 154
DEBUG    2022-12-09 16:53:28,234: find_def_from_top label 154
DEBUG    2022-12-09 16:53:28,234: insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG    2022-12-09 16:53:28,234: find_def_from_bottom label 138
DEBUG    2022-12-09 16:53:28,234: find_def_from_top label 138
DEBUG    2022-12-09 16:53:28,234: idom 130 from label 138
DEBUG    2022-12-09 16:53:28,234: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,236: incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG    2022-12-09 16:53:28,236: find_def_from_bottom label 146
DEBUG    2022-12-09 16:53:28,236: incoming_def r.1 = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,236: incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2022-12-09 16:53:28,236: replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,236: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,236: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 154
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,236: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,236: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,236: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,236: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,236: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,236: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 172
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,236: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 176
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,236: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,236: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2022-12-09 16:53:28,236: find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG    2022-12-09 16:53:28,236: find_def_from_top label 176
DEBUG    2022-12-09 16:53:28,236: idom 172 from label 176
DEBUG    2022-12-09 16:53:28,236: find_def_from_bottom label 172
DEBUG    2022-12-09 16:53:28,236: find_def_from_top label 172
DEBUG    2022-12-09 16:53:28,236: idom 130 from label 172
DEBUG    2022-12-09 16:53:28,236: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,236: replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2022-12-09 16:53:28,236: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,236: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 184
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C61E6A0>
DEBUG    2022-12-09 16:53:28,236: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2022-12-09 16:53:28,236: find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG    2022-12-09 16:53:28,236: find_def_from_top label 184
DEBUG    2022-12-09 16:53:28,236: idom 172 from label 184
DEBUG    2022-12-09 16:53:28,236: find_def_from_bottom label 172
DEBUG    2022-12-09 16:53:28,236: find_def_from_top label 172
DEBUG    2022-12-09 16:53:28,236: idom 130 from label 172
DEBUG    2022-12-09 16:53:28,236: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,236: replaced with: $186return_value.1 = cast(value=r.2)
DEBUG    2022-12-09 16:53:28,236: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,236: Fix SSA violator on var invert
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,236: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,236: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,236: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,236: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,236: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,236: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,236: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,236: first assign: invert
DEBUG    2022-12-09 16:53:28,236: replaced with: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,236: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,236: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,236: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,236: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 48
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,236: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: invert = const(bool, False)
DEBUG    2022-12-09 16:53:28,236: replaced with: invert.1 = const(bool, False)
DEBUG    2022-12-09 16:53:28,236: on stmt: exp.1 = b
DEBUG    2022-12-09 16:53:28,236: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2022-12-09 16:53:28,236: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,236: on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2022-12-09 16:53:28,236: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 114
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,236: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,236: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 130
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,236: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,236: on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,236: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,236: on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2022-12-09 16:53:28,236: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 138
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,236: on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2022-12-09 16:53:28,236: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,236: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,236: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,236: ==== SSA block rewrite pass on 146
DEBUG    2022-12-09 16:53:28,236: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,236: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,236: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,244: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,244: ==== SSA block rewrite pass on 154
DEBUG    2022-12-09 16:53:28,244: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,244: on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2022-12-09 16:53:28,244: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,244: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,244: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,244: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,244: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,244: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,244: ==== SSA block rewrite pass on 172
DEBUG    2022-12-09 16:53:28,244: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,244: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,244: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,244: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,244: ==== SSA block rewrite pass on 176
DEBUG    2022-12-09 16:53:28,244: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,244: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,244: on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2022-12-09 16:53:28,244: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,244: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,244: ==== SSA block rewrite pass on 184
DEBUG    2022-12-09 16:53:28,244: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C61BAF0>
DEBUG    2022-12-09 16:53:28,244: on stmt: $186return_value.1 = cast(value=r.2)
DEBUG    2022-12-09 16:53:28,244: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,244: Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000024C8C61BB20>],
             98: [<numba.core.ir.Assign object at 0x0000024C8C6371F0>]})
DEBUG    2022-12-09 16:53:28,244: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,244: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,244: on stmt: a = arg(0, name=a)
DEBUG    2022-12-09 16:53:28,244: on stmt: b = arg(1, name=b)
DEBUG    2022-12-09 16:53:28,244: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,244: on stmt: $const4.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,244: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,244: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2022-12-09 16:53:28,244: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,244: on stmt: $const20.7 = const(int, 0)
DEBUG    2022-12-09 16:53:28,244: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2022-12-09 16:53:28,244: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,244: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,244: on stmt: branch $24pred, 26, 98
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 26
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,246: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2022-12-09 16:53:28,246: on stmt: $const38.4 = const(int, 0)
DEBUG    2022-12-09 16:53:28,246: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2022-12-09 16:53:28,246: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,246: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: on stmt: branch $42pred, 44, 48
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2022-12-09 16:53:28,246: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 48
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2022-12-09 16:53:28,246: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,246: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: invert.1 = const(bool, False)
DEBUG    2022-12-09 16:53:28,246: on stmt: exp.1 = b
DEBUG    2022-12-09 16:53:28,246: on stmt: jump 106
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2022-12-09 16:53:28,246: on stmt: $const108.1 = const(int, 65536)
DEBUG    2022-12-09 16:53:28,246: on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2022-12-09 16:53:28,246: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,246: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: on stmt: branch $112pred, 114, 130
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 114
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2022-12-09 16:53:28,246: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2022-12-09 16:53:28,246: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2022-12-09 16:53:28,246: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2022-12-09 16:53:28,246: on stmt: return $128return_value.7
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 130
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,246: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,246: on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG    2022-12-09 16:53:28,246: on stmt: $const132.1 = const(int, 0)
DEBUG    2022-12-09 16:53:28,246: on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2022-12-09 16:53:28,246: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,246: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: on stmt: branch $136pred, 138, 172
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 138
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: $const140.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,246: on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2022-12-09 16:53:28,246: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,246: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: on stmt: branch $144pred, 146, 154
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 146
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,246: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2022-12-09 16:53:28,246: on stmt: jump 154
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 154
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2022-12-09 16:53:28,246: on stmt: $const156.1 = const(int, 1)
DEBUG    2022-12-09 16:53:28,246: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,246: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2022-12-09 16:53:28,246: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2022-12-09 16:53:28,246: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2022-12-09 16:53:28,246: on stmt: jump 130
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 172
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,246: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: find_def_from_top label 172
DEBUG    2022-12-09 16:53:28,246: idom 130 from label 172
DEBUG    2022-12-09 16:53:28,246: find_def_from_bottom label 130
DEBUG    2022-12-09 16:53:28,246: find_def_from_top label 130
DEBUG    2022-12-09 16:53:28,246: idom 106 from label 130
DEBUG    2022-12-09 16:53:28,246: find_def_from_bottom label 106
DEBUG    2022-12-09 16:53:28,246: find_def_from_top label 106
DEBUG    2022-12-09 16:53:28,246: insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG    2022-12-09 16:53:28,246: find_def_from_bottom label 48
DEBUG    2022-12-09 16:53:28,246: find_def_from_top label 48
DEBUG    2022-12-09 16:53:28,246: idom 26 from label 48
DEBUG    2022-12-09 16:53:28,246: find_def_from_bottom label 26
DEBUG    2022-12-09 16:53:28,246: incoming_def invert = const(bool, True)
DEBUG    2022-12-09 16:53:28,246: find_def_from_bottom label 98
DEBUG    2022-12-09 16:53:28,246: incoming_def invert.1 = const(bool, False)
DEBUG    2022-12-09 16:53:28,246: replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,246: on stmt: branch $174pred, 176, 184
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 176
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,246: on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2022-12-09 16:53:28,246: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2022-12-09 16:53:28,246: on stmt: return $182return_value.3
DEBUG    2022-12-09 16:53:28,246: ==== SSA block rewrite pass on 184
DEBUG    2022-12-09 16:53:28,246: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C637F70>
DEBUG    2022-12-09 16:53:28,246: on stmt: $186return_value.1 = cast(value=r.2)
DEBUG    2022-12-09 16:53:28,246: on stmt: return $186return_value.1
DEBUG    2022-12-09 16:53:28,347: bytecode dump:
>          0	NOP(arg=None, lineno=221)
           2	LOAD_CONST(arg=1, lineno=221)
           4	LOAD_CONST(arg=2, lineno=221)
           6	LOAD_FAST(arg=0, lineno=221)
           8	BINARY_MULTIPLY(arg=None, lineno=221)
          10	BINARY_SUBTRACT(arg=None, lineno=221)
          12	RETURN_VALUE(arg=None, lineno=221)
DEBUG    2022-12-09 16:53:28,347: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,347: stack: []
DEBUG    2022-12-09 16:53:28,347: dispatch pc=0, inst=NOP(arg=None, lineno=221)
DEBUG    2022-12-09 16:53:28,347: stack []
DEBUG    2022-12-09 16:53:28,347: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=221)
DEBUG    2022-12-09 16:53:28,347: stack []
DEBUG    2022-12-09 16:53:28,347: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG    2022-12-09 16:53:28,347: stack ['$const2.0']
DEBUG    2022-12-09 16:53:28,347: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=221)
DEBUG    2022-12-09 16:53:28,347: stack ['$const2.0', '$const4.1']
DEBUG    2022-12-09 16:53:28,347: dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=221)
DEBUG    2022-12-09 16:53:28,347: stack ['$const2.0', '$const4.1', '$TwaterK6.2']
DEBUG    2022-12-09 16:53:28,347: dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=221)
DEBUG    2022-12-09 16:53:28,347: stack ['$const2.0', '$8binary_multiply.3']
DEBUG    2022-12-09 16:53:28,347: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=221)
DEBUG    2022-12-09 16:53:28,347: stack ['$10binary_subtract.4']
DEBUG    2022-12-09 16:53:28,347: end state. edges=[]
DEBUG    2022-12-09 16:53:28,347: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,347: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,347: defmap: {}
DEBUG    2022-12-09 16:53:28,347: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,347: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,347: keep phismap: {}
DEBUG    2022-12-09 16:53:28,347: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,347: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,347: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$TwaterK6.2'}), (8, {'lhs': '$const4.1', 'rhs': '$TwaterK6.2', 'res': '$8binary_multiply.3'}), (10, {'lhs': '$const2.0', 'rhs': '$8binary_multiply.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,347: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    $const2.0 = const(int, 2499999)          ['$const2.0']
    $const4.1 = const(float, 2385.74)        ['$const4.1']
    $8binary_multiply.3 = $const4.1 * TwaterK ['$8binary_multiply.3', '$const4.1', 'TwaterK']
    $10binary_subtract.4 = $const2.0 - $8binary_multiply.3 ['$10binary_subtract.4', '$8binary_multiply.3', '$const2.0']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG    2022-12-09 16:53:28,355: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,355: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C67D880>
DEBUG    2022-12-09 16:53:28,355: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2022-12-09 16:53:28,355: on stmt: $const2.0 = const(int, 2499999)
DEBUG    2022-12-09 16:53:28,355: on stmt: $const4.1 = const(float, 2385.74)
DEBUG    2022-12-09 16:53:28,355: on stmt: $8binary_multiply.3 = $const4.1 * TwaterK
DEBUG    2022-12-09 16:53:28,355: on stmt: $10binary_subtract.4 = $const2.0 - $8binary_multiply.3
DEBUG    2022-12-09 16:53:28,355: on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
DEBUG    2022-12-09 16:53:28,355: on stmt: return $12return_value.5
DEBUG    2022-12-09 16:53:28,355: defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x0000024C8C67DCA0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000024C8C67DDF0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x0000024C8C67D070>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000024C8C67D340>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024C8C67D9D0>],
             'TwaterK': [<numba.core.ir.Assign object at 0x0000024C8C67D520>]})
DEBUG    2022-12-09 16:53:28,355: SSA violators set()
DEBUG    2022-12-09 16:53:28,422: bytecode dump:
>          0	NOP(arg=None, lineno=232)
           2	LOAD_CONST(arg=1, lineno=232)
           4	LOAD_CONST(arg=2, lineno=232)
           6	LOAD_FAST(arg=0, lineno=233)
           8	LOAD_CONST(arg=3, lineno=233)
          10	BINARY_SUBTRACT(arg=None, lineno=233)
          12	LOAD_FAST(arg=0, lineno=233)
          14	LOAD_CONST(arg=3, lineno=233)
          16	BINARY_SUBTRACT(arg=None, lineno=233)
          18	BINARY_MULTIPLY(arg=None, lineno=233)
          20	LOAD_FAST(arg=0, lineno=233)
          22	LOAD_CONST(arg=4, lineno=233)
          24	BINARY_ADD(arg=None, lineno=233)
          26	BINARY_MULTIPLY(arg=None, lineno=233)
          28	LOAD_CONST(arg=5, lineno=234)
          30	LOAD_FAST(arg=0, lineno=234)
          32	LOAD_CONST(arg=6, lineno=234)
          34	BINARY_ADD(arg=None, lineno=234)
          36	BINARY_MULTIPLY(arg=None, lineno=234)
          38	BINARY_TRUE_DIVIDE(arg=None, lineno=233)
          40	BINARY_SUBTRACT(arg=None, lineno=232)
          42	BINARY_MULTIPLY(arg=None, lineno=232)
          44	RETURN_VALUE(arg=None, lineno=232)
DEBUG    2022-12-09 16:53:28,422: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,422: stack: []
DEBUG    2022-12-09 16:53:28,422: dispatch pc=0, inst=NOP(arg=None, lineno=232)
DEBUG    2022-12-09 16:53:28,422: stack []
DEBUG    2022-12-09 16:53:28,422: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=232)
DEBUG    2022-12-09 16:53:28,423: stack []
DEBUG    2022-12-09 16:53:28,423: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=232)
DEBUG    2022-12-09 16:53:28,423: stack ['$const2.0']
DEBUG    2022-12-09 16:53:28,423: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG    2022-12-09 16:53:28,423: stack ['$const2.0', '$const4.1']
DEBUG    2022-12-09 16:53:28,423: dispatch pc=8, inst=LOAD_CONST(arg=3, lineno=233)
DEBUG    2022-12-09 16:53:28,423: stack ['$const2.0', '$const4.1', '$TwaterC6.2']
DEBUG    2022-12-09 16:53:28,423: dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=233)
DEBUG    2022-12-09 16:53:28,423: stack ['$const2.0', '$const4.1', '$TwaterC6.2', '$const8.3']
DEBUG    2022-12-09 16:53:28,423: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG    2022-12-09 16:53:28,423: stack ['$const2.0', '$const4.1', '$10binary_subtract.4']
DEBUG    2022-12-09 16:53:28,423: dispatch pc=14, inst=LOAD_CONST(arg=3, lineno=233)
DEBUG    2022-12-09 16:53:28,423: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$TwaterC12.5']
DEBUG    2022-12-09 16:53:28,423: dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=233)
DEBUG    2022-12-09 16:53:28,423: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$TwaterC12.5', '$const14.6']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=233)
DEBUG    2022-12-09 16:53:28,424: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$16binary_subtract.7']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG    2022-12-09 16:53:28,424: stack ['$const2.0', '$const4.1', '$18binary_multiply.8']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=22, inst=LOAD_CONST(arg=4, lineno=233)
DEBUG    2022-12-09 16:53:28,424: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$TwaterC20.9']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=233)
DEBUG    2022-12-09 16:53:28,424: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$TwaterC20.9', '$const22.10']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=233)
DEBUG    2022-12-09 16:53:28,424: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$24binary_add.11']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=28, inst=LOAD_CONST(arg=5, lineno=234)
DEBUG    2022-12-09 16:53:28,424: stack ['$const2.0', '$const4.1', '$26binary_multiply.12']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=234)
DEBUG    2022-12-09 16:53:28,424: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=32, inst=LOAD_CONST(arg=6, lineno=234)
DEBUG    2022-12-09 16:53:28,424: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$TwaterC30.14']
DEBUG    2022-12-09 16:53:28,424: dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=234)
DEBUG    2022-12-09 16:53:28,425: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$TwaterC30.14', '$const32.15']
DEBUG    2022-12-09 16:53:28,425: dispatch pc=36, inst=BINARY_MULTIPLY(arg=None, lineno=234)
DEBUG    2022-12-09 16:53:28,425: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$34binary_add.16']
DEBUG    2022-12-09 16:53:28,425: dispatch pc=38, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=233)
DEBUG    2022-12-09 16:53:28,425: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$36binary_multiply.17']
DEBUG    2022-12-09 16:53:28,425: dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=232)
DEBUG    2022-12-09 16:53:28,425: stack ['$const2.0', '$const4.1', '$38binary_true_divide.18']
DEBUG    2022-12-09 16:53:28,425: dispatch pc=42, inst=BINARY_MULTIPLY(arg=None, lineno=232)
DEBUG    2022-12-09 16:53:28,425: stack ['$const2.0', '$40binary_subtract.19']
DEBUG    2022-12-09 16:53:28,425: dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=232)
DEBUG    2022-12-09 16:53:28,425: stack ['$42binary_multiply.20']
DEBUG    2022-12-09 16:53:28,425: end state. edges=[]
DEBUG    2022-12-09 16:53:28,426: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,426: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,426: defmap: {}
DEBUG    2022-12-09 16:53:28,426: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,426: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,426: keep phismap: {}
DEBUG    2022-12-09 16:53:28,426: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,426: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,426: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$TwaterC6.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$TwaterC6.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'res': '$TwaterC12.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$TwaterC12.5', 'rhs': '$const14.6', 'res': '$16binary_subtract.7'}), (18, {'lhs': '$10binary_subtract.4', 'rhs': '$16binary_subtract.7', 'res': '$18binary_multiply.8'}), (20, {'res': '$TwaterC20.9'}), (22, {'res': '$const22.10'}), (24, {'lhs': '$TwaterC20.9', 'rhs': '$const22.10', 'res': '$24binary_add.11'}), (26, {'lhs': '$18binary_multiply.8', 'rhs': '$24binary_add.11', 'res': '$26binary_multiply.12'}), (28, {'res': '$const28.13'}), (30, {'res': '$TwaterC30.14'}), (32, {'res': '$const32.15'}), (34, {'lhs': '$TwaterC30.14', 'rhs': '$const32.15', 'res': '$34binary_add.16'}), (36, {'lhs': '$const28.13', 'rhs': '$34binary_add.16', 'res': '$36binary_multiply.17'}), (38, {'lhs': '$26binary_multiply.12', 'rhs': '$36binary_multiply.17', 'res': '$38binary_true_divide.18'}), (40, {'lhs': '$const4.1', 'rhs': '$38binary_true_divide.18', 'res': '$40binary_subtract.19'}), (42, {'lhs': '$const2.0', 'rhs': '$40binary_subtract.19', 'res': '$42binary_multiply.20'}), (44, {'retval': '$42binary_multiply.20', 'castval': '$44return_value.21'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,427: label 0:
    TwaterC = arg(0, name=TwaterC)           ['TwaterC']
    $const2.0 = const(float, 999.973)        ['$const2.0']
    $const4.1 = const(float, 1.0)            ['$const4.1']
    $const8.3 = const(float, 3.9863)         ['$const8.3']
    $10binary_subtract.4 = TwaterC - $const8.3 ['$10binary_subtract.4', '$const8.3', 'TwaterC']
    $const14.6 = const(float, 3.9863)        ['$const14.6']
    $16binary_subtract.7 = TwaterC - $const14.6 ['$16binary_subtract.7', '$const14.6', 'TwaterC']
    $18binary_multiply.8 = $10binary_subtract.4 * $16binary_subtract.7 ['$10binary_subtract.4', '$16binary_subtract.7', '$18binary_multiply.8']
    $const22.10 = const(float, 288.9414)     ['$const22.10']
    $24binary_add.11 = TwaterC + $const22.10 ['$24binary_add.11', '$const22.10', 'TwaterC']
    $26binary_multiply.12 = $18binary_multiply.8 * $24binary_add.11 ['$18binary_multiply.8', '$24binary_add.11', '$26binary_multiply.12']
    $const28.13 = const(float, 508929.2)     ['$const28.13']
    $const32.15 = const(float, 68.12963)     ['$const32.15']
    $34binary_add.16 = TwaterC + $const32.15 ['$34binary_add.16', '$const32.15', 'TwaterC']
    $36binary_multiply.17 = $const28.13 * $34binary_add.16 ['$34binary_add.16', '$36binary_multiply.17', '$const28.13']
    $38binary_true_divide.18 = $26binary_multiply.12 / $36binary_multiply.17 ['$26binary_multiply.12', '$36binary_multiply.17', '$38binary_true_divide.18']
    $40binary_subtract.19 = $const4.1 - $38binary_true_divide.18 ['$38binary_true_divide.18', '$40binary_subtract.19', '$const4.1']
    $42binary_multiply.20 = $const2.0 * $40binary_subtract.19 ['$40binary_subtract.19', '$42binary_multiply.20', '$const2.0']
    $44return_value.21 = cast(value=$42binary_multiply.20) ['$42binary_multiply.20', '$44return_value.21']
    return $44return_value.21                ['$44return_value.21']

DEBUG    2022-12-09 16:53:28,428: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,428: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C5103A0>
DEBUG    2022-12-09 16:53:28,428: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2022-12-09 16:53:28,428: on stmt: $const2.0 = const(float, 999.973)
DEBUG    2022-12-09 16:53:28,428: on stmt: $const4.1 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,428: on stmt: $const8.3 = const(float, 3.9863)
DEBUG    2022-12-09 16:53:28,428: on stmt: $10binary_subtract.4 = TwaterC - $const8.3
DEBUG    2022-12-09 16:53:28,428: on stmt: $const14.6 = const(float, 3.9863)
DEBUG    2022-12-09 16:53:28,428: on stmt: $16binary_subtract.7 = TwaterC - $const14.6
DEBUG    2022-12-09 16:53:28,428: on stmt: $18binary_multiply.8 = $10binary_subtract.4 * $16binary_subtract.7
DEBUG    2022-12-09 16:53:28,428: on stmt: $const22.10 = const(float, 288.9414)
DEBUG    2022-12-09 16:53:28,428: on stmt: $24binary_add.11 = TwaterC + $const22.10
DEBUG    2022-12-09 16:53:28,428: on stmt: $26binary_multiply.12 = $18binary_multiply.8 * $24binary_add.11
DEBUG    2022-12-09 16:53:28,428: on stmt: $const28.13 = const(float, 508929.2)
DEBUG    2022-12-09 16:53:28,428: on stmt: $const32.15 = const(float, 68.12963)
DEBUG    2022-12-09 16:53:28,428: on stmt: $34binary_add.16 = TwaterC + $const32.15
DEBUG    2022-12-09 16:53:28,428: on stmt: $36binary_multiply.17 = $const28.13 * $34binary_add.16
DEBUG    2022-12-09 16:53:28,428: on stmt: $38binary_true_divide.18 = $26binary_multiply.12 / $36binary_multiply.17
DEBUG    2022-12-09 16:53:28,428: on stmt: $40binary_subtract.19 = $const4.1 - $38binary_true_divide.18
DEBUG    2022-12-09 16:53:28,428: on stmt: $42binary_multiply.20 = $const2.0 * $40binary_subtract.19
DEBUG    2022-12-09 16:53:28,428: on stmt: $44return_value.21 = cast(value=$42binary_multiply.20)
DEBUG    2022-12-09 16:53:28,428: on stmt: return $44return_value.21
DEBUG    2022-12-09 16:53:28,428: defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x0000024C8C4F92E0>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x0000024C8C4E4100>],
             '$18binary_multiply.8': [<numba.core.ir.Assign object at 0x0000024C8C4E4B20>],
             '$24binary_add.11': [<numba.core.ir.Assign object at 0x0000024C8C4E45E0>],
             '$26binary_multiply.12': [<numba.core.ir.Assign object at 0x0000024C8C4E4520>],
             '$34binary_add.16': [<numba.core.ir.Assign object at 0x0000024C8C4E4370>],
             '$36binary_multiply.17': [<numba.core.ir.Assign object at 0x0000024C8C57BC40>],
             '$38binary_true_divide.18': [<numba.core.ir.Assign object at 0x0000024C8C57B8E0>],
             '$40binary_subtract.19': [<numba.core.ir.Assign object at 0x0000024C8C57BBE0>],
             '$42binary_multiply.20': [<numba.core.ir.Assign object at 0x0000024C8C57BAC0>],
             '$44return_value.21': [<numba.core.ir.Assign object at 0x0000024C8C57BDF0>],
             '$const14.6': [<numba.core.ir.Assign object at 0x0000024C8C4E4E80>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000024C8C5080D0>],
             '$const22.10': [<numba.core.ir.Assign object at 0x0000024C8C4E4C40>],
             '$const28.13': [<numba.core.ir.Assign object at 0x0000024C8C4E4130>],
             '$const32.15': [<numba.core.ir.Assign object at 0x0000024C8C4E4250>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024C8C4F9100>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000024C8C4F96A0>],
             'TwaterC': [<numba.core.ir.Assign object at 0x0000024C8C5086A0>]})
DEBUG    2022-12-09 16:53:28,428: SSA violators set()
DEBUG    2022-12-09 16:53:28,489: bytecode dump:
>          0	NOP(arg=None, lineno=266)
           2	LOAD_FAST(arg=0, lineno=266)
           4	LOAD_CONST(arg=1, lineno=266)
           6	COMPARE_OP(arg=1, lineno=266)
           8	POP_JUMP_IF_FALSE(arg=16, lineno=266)
          10	LOAD_CONST(arg=2, lineno=267)
          12	STORE_FAST(arg=1, lineno=267)
          14	JUMP_FORWARD(arg=74, lineno=267)
>         16	LOAD_FAST(arg=0, lineno=268)
          18	LOAD_CONST(arg=3, lineno=268)
          20	COMPARE_OP(arg=1, lineno=268)
          22	POP_JUMP_IF_FALSE(arg=30, lineno=268)
          24	LOAD_CONST(arg=4, lineno=269)
          26	STORE_FAST(arg=1, lineno=269)
          28	JUMP_FORWARD(arg=60, lineno=269)
>         30	LOAD_FAST(arg=0, lineno=270)
          32	LOAD_CONST(arg=5, lineno=270)
          34	COMPARE_OP(arg=1, lineno=270)
          36	POP_JUMP_IF_FALSE(arg=44, lineno=270)
          38	LOAD_CONST(arg=6, lineno=271)
          40	STORE_FAST(arg=1, lineno=271)
          42	JUMP_FORWARD(arg=46, lineno=271)
>         44	LOAD_FAST(arg=0, lineno=272)
          46	LOAD_CONST(arg=7, lineno=272)
          48	COMPARE_OP(arg=1, lineno=272)
          50	POP_JUMP_IF_FALSE(arg=58, lineno=272)
          52	LOAD_CONST(arg=8, lineno=273)
          54	STORE_FAST(arg=1, lineno=273)
          56	JUMP_FORWARD(arg=32, lineno=273)
>         58	LOAD_FAST(arg=0, lineno=274)
          60	LOAD_CONST(arg=9, lineno=274)
          62	COMPARE_OP(arg=1, lineno=274)
          64	POP_JUMP_IF_FALSE(arg=72, lineno=274)
          66	LOAD_CONST(arg=10, lineno=275)
          68	STORE_FAST(arg=1, lineno=275)
          70	JUMP_FORWARD(arg=18, lineno=275)
>         72	LOAD_FAST(arg=0, lineno=276)
          74	LOAD_CONST(arg=11, lineno=276)
          76	COMPARE_OP(arg=1, lineno=276)
          78	POP_JUMP_IF_FALSE(arg=86, lineno=276)
          80	LOAD_CONST(arg=12, lineno=277)
          82	STORE_FAST(arg=1, lineno=277)
          84	JUMP_FORWARD(arg=4, lineno=277)
>         86	LOAD_CONST(arg=13, lineno=279)
          88	STORE_FAST(arg=1, lineno=279)
>         90	LOAD_FAST(arg=1, lineno=280)
          92	RETURN_VALUE(arg=None, lineno=280)
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=0, inst=NOP(arg=None, lineno=266)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=266)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=266)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC2.0']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=266)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC2.0', '$const4.1']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=16, lineno=266)
DEBUG    2022-12-09 16:53:28,489: stack ['$6compare_op.2']
DEBUG    2022-12-09 16:53:28,489: end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=16 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=267)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=12, inst=STORE_FAST(arg=1, lineno=267)
DEBUG    2022-12-09 16:53:28,489: stack ['$const10.0']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=14, inst=JUMP_FORWARD(arg=74, lineno=267)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=268)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=18, inst=LOAD_CONST(arg=3, lineno=268)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC16.0']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=268)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC16.0', '$const18.1']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=30, lineno=268)
DEBUG    2022-12-09 16:53:28,489: stack ['$20compare_op.2']
DEBUG    2022-12-09 16:53:28,489: end state. edges=[Edge(pc=24, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG    2022-12-09 16:53:28,489: stack ['$Cp_water90.0']
DEBUG    2022-12-09 16:53:28,489: end state. edges=[]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=24, inst=LOAD_CONST(arg=4, lineno=269)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=26, inst=STORE_FAST(arg=1, lineno=269)
DEBUG    2022-12-09 16:53:28,489: stack ['$const24.0']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=28, inst=JUMP_FORWARD(arg=60, lineno=269)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=270)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=32, inst=LOAD_CONST(arg=5, lineno=270)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC30.0']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=34, inst=COMPARE_OP(arg=1, lineno=270)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC30.0', '$const32.1']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=44, lineno=270)
DEBUG    2022-12-09 16:53:28,489: stack ['$34compare_op.2']
DEBUG    2022-12-09 16:53:28,489: end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=38, inst=LOAD_CONST(arg=6, lineno=271)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=40, inst=STORE_FAST(arg=1, lineno=271)
DEBUG    2022-12-09 16:53:28,489: stack ['$const38.0']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=42, inst=JUMP_FORWARD(arg=46, lineno=271)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=272)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=46, inst=LOAD_CONST(arg=7, lineno=272)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC44.0']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=48, inst=COMPARE_OP(arg=1, lineno=272)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC44.0', '$const46.1']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=58, lineno=272)
DEBUG    2022-12-09 16:53:28,489: stack ['$48compare_op.2']
DEBUG    2022-12-09 16:53:28,489: end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=52, inst=LOAD_CONST(arg=8, lineno=273)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=54, inst=STORE_FAST(arg=1, lineno=273)
DEBUG    2022-12-09 16:53:28,489: stack ['$const52.0']
DEBUG    2022-12-09 16:53:28,489: dispatch pc=56, inst=JUMP_FORWARD(arg=32, lineno=273)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,489: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,489: stack: []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=58, inst=LOAD_FAST(arg=0, lineno=274)
DEBUG    2022-12-09 16:53:28,489: stack []
DEBUG    2022-12-09 16:53:28,489: dispatch pc=60, inst=LOAD_CONST(arg=9, lineno=274)
DEBUG    2022-12-09 16:53:28,489: stack ['$TwaterC58.0']
DEBUG    2022-12-09 16:53:28,497: dispatch pc=62, inst=COMPARE_OP(arg=1, lineno=274)
DEBUG    2022-12-09 16:53:28,497: stack ['$TwaterC58.0', '$const60.1']
DEBUG    2022-12-09 16:53:28,497: dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=72, lineno=274)
DEBUG    2022-12-09 16:53:28,497: stack ['$62compare_op.2']
DEBUG    2022-12-09 16:53:28,497: end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,497: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,497: pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,497: stack: []
DEBUG    2022-12-09 16:53:28,497: dispatch pc=66, inst=LOAD_CONST(arg=10, lineno=275)
DEBUG    2022-12-09 16:53:28,497: stack []
DEBUG    2022-12-09 16:53:28,497: dispatch pc=68, inst=STORE_FAST(arg=1, lineno=275)
DEBUG    2022-12-09 16:53:28,497: stack ['$const66.0']
DEBUG    2022-12-09 16:53:28,497: dispatch pc=70, inst=JUMP_FORWARD(arg=18, lineno=275)
DEBUG    2022-12-09 16:53:28,497: stack []
DEBUG    2022-12-09 16:53:28,497: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,497: pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,497: stack: []
DEBUG    2022-12-09 16:53:28,497: dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=276)
DEBUG    2022-12-09 16:53:28,497: stack []
DEBUG    2022-12-09 16:53:28,497: dispatch pc=74, inst=LOAD_CONST(arg=11, lineno=276)
DEBUG    2022-12-09 16:53:28,497: stack ['$TwaterC72.0']
DEBUG    2022-12-09 16:53:28,497: dispatch pc=76, inst=COMPARE_OP(arg=1, lineno=276)
DEBUG    2022-12-09 16:53:28,497: stack ['$TwaterC72.0', '$const74.1']
DEBUG    2022-12-09 16:53:28,497: dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=86, lineno=276)
DEBUG    2022-12-09 16:53:28,497: stack ['$76compare_op.2']
DEBUG    2022-12-09 16:53:28,497: end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,497: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,497: pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,499: stack: []
DEBUG    2022-12-09 16:53:28,499: dispatch pc=80, inst=LOAD_CONST(arg=12, lineno=277)
DEBUG    2022-12-09 16:53:28,499: stack []
DEBUG    2022-12-09 16:53:28,499: dispatch pc=82, inst=STORE_FAST(arg=1, lineno=277)
DEBUG    2022-12-09 16:53:28,499: stack ['$const80.0']
DEBUG    2022-12-09 16:53:28,499: dispatch pc=84, inst=JUMP_FORWARD(arg=4, lineno=277)
DEBUG    2022-12-09 16:53:28,499: stack []
DEBUG    2022-12-09 16:53:28,499: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,499: pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,499: stack: []
DEBUG    2022-12-09 16:53:28,499: dispatch pc=86, inst=LOAD_CONST(arg=13, lineno=279)
DEBUG    2022-12-09 16:53:28,499: stack []
DEBUG    2022-12-09 16:53:28,499: dispatch pc=88, inst=STORE_FAST(arg=1, lineno=279)
DEBUG    2022-12-09 16:53:28,499: stack ['$const86.0']
DEBUG    2022-12-09 16:53:28,499: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,499: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,499: pending: deque([State(pc_initial=90 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,499: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,499: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,499: defmap: {}
DEBUG    2022-12-09 16:53:28,499: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,499: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,499: keep phismap: {}
DEBUG    2022-12-09 16:53:28,499: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,499: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$TwaterC2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$TwaterC2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 16: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'value': '$const10.0'}), (14, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$TwaterC16.0'}), (18, {'res': '$const18.1'}), (20, {'lhs': '$TwaterC16.0', 'rhs': '$const18.1', 'res': '$20compare_op.2'}), (22, {'pred': '$20compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: (), 30: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$const24.0'}), (26, {'value': '$const24.0'}), (28, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$TwaterC30.0'}), (32, {'res': '$const32.1'}), (34, {'lhs': '$TwaterC30.0', 'rhs': '$const32.1', 'res': '$34compare_op.2'}), (36, {'pred': '$34compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 44: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$const38.0'}), (40, {'value': '$const38.0'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$TwaterC44.0'}), (46, {'res': '$const46.1'}), (48, {'lhs': '$TwaterC44.0', 'rhs': '$const46.1', 'res': '$48compare_op.2'}), (50, {'pred': '$48compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 58: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$const52.0'}), (54, {'value': '$const52.0'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$TwaterC58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$TwaterC58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 72: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$const66.0'}), (68, {'value': '$const66.0'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$TwaterC72.0'}), (74, {'res': '$const74.1'}), (76, {'lhs': '$TwaterC72.0', 'rhs': '$const74.1', 'res': '$76compare_op.2'}), (78, {'pred': '$76compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 86: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$const80.0'}), (82, {'value': '$const80.0'}), (84, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$const86.0'}), (88, {'value': '$const86.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2022-12-09 16:53:28,499: block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$Cp_water90.0'}), (92, {'retval': '$Cp_water90.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,499: label 0:
    TwaterC = arg(0, name=TwaterC)           ['TwaterC']
    $const4.1 = const(float, 0.0)            ['$const4.1']
    $6compare_op.2 = TwaterC <= $const4.1    ['$6compare_op.2', '$const4.1', 'TwaterC']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, water_quality_functions.py:266),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 16                    ['$8pred']
label 10:
    Cp_water = const(float, 4218.0)          ['Cp_water']
    jump 90                                  []
label 16:
    $const18.1 = const(float, 5.0)           ['$const18.1']
    $20compare_op.2 = TwaterC <= $const18.1  ['$20compare_op.2', '$const18.1', 'TwaterC']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, water_quality_functions.py:268),), kws=(), vararg=None, target=None) ['$20compare_op.2', '$22pred', 'bool22']
    branch $22pred, 24, 30                   ['$22pred']
label 24:
    Cp_water = const(float, 4202.0)          ['Cp_water']
    jump 90                                  []
label 30:
    $const32.1 = const(float, 10.0)          ['$const32.1']
    $34compare_op.2 = TwaterC <= $const32.1  ['$34compare_op.2', '$const32.1', 'TwaterC']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, water_quality_functions.py:270),), kws=(), vararg=None, target=None) ['$34compare_op.2', '$36pred', 'bool36']
    branch $36pred, 38, 44                   ['$36pred']
label 38:
    Cp_water = const(float, 4192.0)          ['Cp_water']
    jump 90                                  []
label 44:
    $const46.1 = const(float, 15.0)          ['$const46.1']
    $48compare_op.2 = TwaterC <= $const46.1  ['$48compare_op.2', '$const46.1', 'TwaterC']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, water_quality_functions.py:272),), kws=(), vararg=None, target=None) ['$48compare_op.2', '$50pred', 'bool50']
    branch $50pred, 52, 58                   ['$50pred']
label 52:
    Cp_water = const(float, 4186.0)          ['Cp_water']
    jump 90                                  []
label 58:
    $const60.1 = const(float, 20.0)          ['$const60.1']
    $62compare_op.2 = TwaterC <= $const60.1  ['$62compare_op.2', '$const60.1', 'TwaterC']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:274),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 72                   ['$64pred']
label 66:
    Cp_water = const(float, 4182.0)          ['Cp_water']
    jump 90                                  []
label 72:
    $const74.1 = const(float, 25.0)          ['$const74.1']
    $76compare_op.2 = TwaterC <= $const74.1  ['$76compare_op.2', '$const74.1', 'TwaterC']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, water_quality_functions.py:276),), kws=(), vararg=None, target=None) ['$76compare_op.2', '$78pred', 'bool78']
    branch $78pred, 80, 86                   ['$78pred']
label 80:
    Cp_water = const(float, 4180.0)          ['Cp_water']
    jump 90                                  []
label 86:
    Cp_water = const(float, 4178.0)          ['Cp_water']
    jump 90                                  []
label 90:
    $92return_value.1 = cast(value=Cp_water) ['$92return_value.1', 'Cp_water']
    return $92return_value.1                 ['$92return_value.1']

DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2022-12-09 16:53:28,509: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2022-12-09 16:53:28,509: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,509: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, water_quality_functions.py:266),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,509: on stmt: branch $8pred, 10, 16
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 10
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 16
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2022-12-09 16:53:28,509: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,509: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, water_quality_functions.py:268),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,509: on stmt: branch $22pred, 24, 30
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 24
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: Cp_water = const(float, 4202.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 30
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2022-12-09 16:53:28,509: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,509: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, water_quality_functions.py:270),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,509: on stmt: branch $36pred, 38, 44
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 38
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: Cp_water = const(float, 4192.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 44
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2022-12-09 16:53:28,509: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,509: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, water_quality_functions.py:272),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,509: on stmt: branch $50pred, 52, 58
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 52
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: Cp_water = const(float, 4186.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 58
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2022-12-09 16:53:28,509: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,509: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:274),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,509: on stmt: branch $64pred, 66, 72
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 66
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: Cp_water = const(float, 4182.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 72
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2022-12-09 16:53:28,509: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,509: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, water_quality_functions.py:276),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,509: on stmt: branch $78pred, 80, 86
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 80
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: Cp_water = const(float, 4180.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 86
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: Cp_water = const(float, 4178.0)
DEBUG    2022-12-09 16:53:28,509: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,509: ==== SSA block analysis pass on 90
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C4265B0>
DEBUG    2022-12-09 16:53:28,509: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2022-12-09 16:53:28,509: on stmt: return $92return_value.1
DEBUG    2022-12-09 16:53:28,509: defs defaultdict(<class 'list'>,
            {'$20compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C4AE220>],
             '$22pred': [<numba.core.ir.Assign object at 0x0000024C8C448340>],
             '$34compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C448DC0>],
             '$36pred': [<numba.core.ir.Assign object at 0x0000024C8C448910>],
             '$48compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C4CE790>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000024C8C4CEC70>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C4C2D00>],
             '$64pred': [<numba.core.ir.Assign object at 0x0000024C8C4C2520>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C485460>],
             '$76compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C4CB2E0>],
             '$78pred': [<numba.core.ir.Assign object at 0x0000024C8C4CB250>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000024C8C448760>],
             '$92return_value.1': [<numba.core.ir.Assign object at 0x0000024C8C4ADA00>],
             '$const18.1': [<numba.core.ir.Assign object at 0x0000024C8C4AE460>],
             '$const32.1': [<numba.core.ir.Assign object at 0x0000024C8C448430>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000024C8C485100>],
             '$const46.1': [<numba.core.ir.Assign object at 0x0000024C8C4CE250>],
             '$const60.1': [<numba.core.ir.Assign object at 0x0000024C8C4C2A60>],
             '$const74.1': [<numba.core.ir.Assign object at 0x0000024C8C4CB520>],
             'Cp_water': [<numba.core.ir.Assign object at 0x0000024C8C485850>,
                          <numba.core.ir.Assign object at 0x0000024C8C448490>,
                          <numba.core.ir.Assign object at 0x0000024C8C4CE6A0>,
                          <numba.core.ir.Assign object at 0x0000024C8C4CED00>,
                          <numba.core.ir.Assign object at 0x0000024C8C4C27F0>,
                          <numba.core.ir.Assign object at 0x0000024C8C4CBD00>,
                          <numba.core.ir.Assign object at 0x0000024C8C4CB220>],
             'TwaterC': [<numba.core.ir.Assign object at 0x0000024C8C4853A0>],
             'bool22': [<numba.core.ir.Assign object at 0x0000024C8C4481C0>],
             'bool36': [<numba.core.ir.Assign object at 0x0000024C8C448B50>],
             'bool50': [<numba.core.ir.Assign object at 0x0000024C8C4CEB20>],
             'bool64': [<numba.core.ir.Assign object at 0x0000024C8C4C26D0>],
             'bool78': [<numba.core.ir.Assign object at 0x0000024C8C4CB280>],
             'bool8': [<numba.core.ir.Assign object at 0x0000024C8C4852B0>]})
DEBUG    2022-12-09 16:53:28,509: SSA violators {'Cp_water'}
DEBUG    2022-12-09 16:53:28,509: Fix SSA violator on var Cp_water
DEBUG    2022-12-09 16:53:28,509: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,509: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,517: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2022-12-09 16:53:28,517: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,517: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2022-12-09 16:53:28,517: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,517: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, water_quality_functions.py:266),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,517: on stmt: branch $8pred, 10, 16
DEBUG    2022-12-09 16:53:28,517: ==== SSA block rewrite pass on 10
DEBUG    2022-12-09 16:53:28,517: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,517: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2022-12-09 16:53:28,517: first assign: Cp_water
DEBUG    2022-12-09 16:53:28,517: replaced with: Cp_water = const(float, 4218.0)
DEBUG    2022-12-09 16:53:28,517: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,517: ==== SSA block rewrite pass on 16
DEBUG    2022-12-09 16:53:28,517: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,517: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2022-12-09 16:53:28,517: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2022-12-09 16:53:28,517: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,517: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, water_quality_functions.py:268),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,517: on stmt: branch $22pred, 24, 30
DEBUG    2022-12-09 16:53:28,517: ==== SSA block rewrite pass on 24
DEBUG    2022-12-09 16:53:28,517: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,517: on stmt: Cp_water = const(float, 4202.0)
DEBUG    2022-12-09 16:53:28,517: replaced with: Cp_water.1 = const(float, 4202.0)
DEBUG    2022-12-09 16:53:28,517: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,517: ==== SSA block rewrite pass on 30
DEBUG    2022-12-09 16:53:28,517: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,517: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2022-12-09 16:53:28,517: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2022-12-09 16:53:28,517: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,517: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, water_quality_functions.py:270),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,517: on stmt: branch $36pred, 38, 44
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 38
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water = const(float, 4192.0)
DEBUG    2022-12-09 16:53:28,519: replaced with: Cp_water.2 = const(float, 4192.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, water_quality_functions.py:272),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $50pred, 52, 58
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 52
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water = const(float, 4186.0)
DEBUG    2022-12-09 16:53:28,519: replaced with: Cp_water.3 = const(float, 4186.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 58
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:274),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $64pred, 66, 72
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 66
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water = const(float, 4182.0)
DEBUG    2022-12-09 16:53:28,519: replaced with: Cp_water.4 = const(float, 4182.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 72
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, water_quality_functions.py:276),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $78pred, 80, 86
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 80
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water = const(float, 4180.0)
DEBUG    2022-12-09 16:53:28,519: replaced with: Cp_water.5 = const(float, 4180.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 86
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water = const(float, 4178.0)
DEBUG    2022-12-09 16:53:28,519: replaced with: Cp_water.6 = const(float, 4178.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 90
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2022-12-09 16:53:28,519: on stmt: return $92return_value.1
DEBUG    2022-12-09 16:53:28,519: Replaced assignments: defaultdict(<class 'list'>,
            {10: [<numba.core.ir.Assign object at 0x0000024C8C4C5F40>],
             24: [<numba.core.ir.Assign object at 0x0000024C8C4C5250>],
             38: [<numba.core.ir.Assign object at 0x0000024C8C4AEA90>],
             52: [<numba.core.ir.Assign object at 0x0000024C8C4ADA60>],
             66: [<numba.core.ir.Assign object at 0x0000024C8C4AD910>],
             80: [<numba.core.ir.Assign object at 0x0000024C8C4AD940>],
             86: [<numba.core.ir.Assign object at 0x0000024C8C416D60>]})
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2022-12-09 16:53:28,519: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, water_quality_functions.py:266),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $8pred, 10, 16
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 10
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 16
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, water_quality_functions.py:268),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $22pred, 24, 30
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 24
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water.1 = const(float, 4202.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 30
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, water_quality_functions.py:270),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $36pred, 38, 44
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 38
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water.2 = const(float, 4192.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 44
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, water_quality_functions.py:272),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $50pred, 52, 58
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 52
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water.3 = const(float, 4186.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 58
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:274),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $64pred, 66, 72
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 66
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water.4 = const(float, 4182.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 72
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2022-12-09 16:53:28,519: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,519: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, water_quality_functions.py:276),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,519: on stmt: branch $78pred, 80, 86
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 80
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water.5 = const(float, 4180.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 86
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: Cp_water.6 = const(float, 4178.0)
DEBUG    2022-12-09 16:53:28,519: on stmt: jump 90
DEBUG    2022-12-09 16:53:28,519: ==== SSA block rewrite pass on 90
DEBUG    2022-12-09 16:53:28,519: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C4C5460>
DEBUG    2022-12-09 16:53:28,519: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2022-12-09 16:53:28,519: find_def var='Cp_water' stmt=$92return_value.1 = cast(value=Cp_water)
DEBUG    2022-12-09 16:53:28,519: find_def_from_top label 90
DEBUG    2022-12-09 16:53:28,519: insert phi node Cp_water.7 = phi(incoming_values=[], incoming_blocks=[]) at 90
DEBUG    2022-12-09 16:53:28,519: find_def_from_bottom label 66
DEBUG    2022-12-09 16:53:28,519: incoming_def Cp_water.4 = const(float, 4182.0)
DEBUG    2022-12-09 16:53:28,519: find_def_from_bottom label 38
DEBUG    2022-12-09 16:53:28,519: incoming_def Cp_water.2 = const(float, 4192.0)
DEBUG    2022-12-09 16:53:28,519: find_def_from_bottom label 10
DEBUG    2022-12-09 16:53:28,519: incoming_def Cp_water = const(float, 4218.0)
DEBUG    2022-12-09 16:53:28,519: find_def_from_bottom label 80
DEBUG    2022-12-09 16:53:28,519: incoming_def Cp_water.5 = const(float, 4180.0)
DEBUG    2022-12-09 16:53:28,519: find_def_from_bottom label 52
DEBUG    2022-12-09 16:53:28,519: incoming_def Cp_water.3 = const(float, 4186.0)
DEBUG    2022-12-09 16:53:28,519: find_def_from_bottom label 86
DEBUG    2022-12-09 16:53:28,519: incoming_def Cp_water.6 = const(float, 4178.0)
DEBUG    2022-12-09 16:53:28,519: find_def_from_bottom label 24
DEBUG    2022-12-09 16:53:28,519: incoming_def Cp_water.1 = const(float, 4202.0)
DEBUG    2022-12-09 16:53:28,519: replaced with: $92return_value.1 = cast(value=Cp_water.7)
DEBUG    2022-12-09 16:53:28,519: on stmt: return $92return_value.1
DEBUG    2022-12-09 16:53:28,585: bytecode dump:
>          0	NOP(arg=None, lineno=149)
           2	LOAD_FAST(arg=1, lineno=149)
           4	LOAD_FAST(arg=0, lineno=149)
           6	LOAD_FAST(arg=2, lineno=149)
           8	LOAD_FAST(arg=0, lineno=149)
          10	LOAD_FAST(arg=3, lineno=149)
          12	LOAD_FAST(arg=0, lineno=149)
          14	LOAD_FAST(arg=4, lineno=149)
          16	LOAD_FAST(arg=0, lineno=149)
          18	LOAD_FAST(arg=5, lineno=149)
          20	LOAD_FAST(arg=0, lineno=149)
          22	LOAD_FAST(arg=6, lineno=149)
          24	LOAD_FAST(arg=0, lineno=149)
          26	LOAD_FAST(arg=7, lineno=149)
          28	BINARY_MULTIPLY(arg=None, lineno=149)
          30	BINARY_ADD(arg=None, lineno=149)
          32	BINARY_MULTIPLY(arg=None, lineno=149)
          34	BINARY_ADD(arg=None, lineno=149)
          36	BINARY_MULTIPLY(arg=None, lineno=149)
          38	BINARY_ADD(arg=None, lineno=149)
          40	BINARY_MULTIPLY(arg=None, lineno=149)
          42	BINARY_ADD(arg=None, lineno=149)
          44	BINARY_MULTIPLY(arg=None, lineno=149)
          46	BINARY_ADD(arg=None, lineno=149)
          48	BINARY_MULTIPLY(arg=None, lineno=149)
          50	BINARY_ADD(arg=None, lineno=149)
          52	RETURN_VALUE(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,585: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,585: stack: []
DEBUG    2022-12-09 16:53:28,585: dispatch pc=0, inst=NOP(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,585: stack []
DEBUG    2022-12-09 16:53:28,585: dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=149)
DEBUG    2022-12-09 16:53:28,585: stack []
DEBUG    2022-12-09 16:53:28,585: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2022-12-09 16:53:28,585: stack ['$a02.0']
DEBUG    2022-12-09 16:53:28,585: dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=149)
DEBUG    2022-12-09 16:53:28,585: stack ['$a02.0', '$TwaterK4.1']
DEBUG    2022-12-09 16:53:28,585: dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2022-12-09 16:53:28,585: stack ['$a02.0', '$TwaterK4.1', '$a16.2']
DEBUG    2022-12-09 16:53:28,585: dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=149)
DEBUG    2022-12-09 16:53:28,585: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=14, inst=LOAD_FAST(arg=4, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=18, inst=LOAD_FAST(arg=5, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=22, inst=LOAD_FAST(arg=6, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$a522.10']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$a522.10', '$TwaterK24.11']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$a522.10', '$TwaterK24.11', '$a626.12']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=30, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,586: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$a522.10', '$28binary_multiply.13']
DEBUG    2022-12-09 16:53:28,586: dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$30binary_add.14']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$32binary_multiply.15']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=36, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$34binary_add.16']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=38, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$36binary_multiply.17']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=40, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$38binary_add.18']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$40binary_multiply.19']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$42binary_add.20']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=46, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$44binary_multiply.21']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$TwaterK4.1', '$46binary_add.22']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=50, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$a02.0', '$48binary_multiply.23']
DEBUG    2022-12-09 16:53:28,587: dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=149)
DEBUG    2022-12-09 16:53:28,587: stack ['$50binary_add.24']
DEBUG    2022-12-09 16:53:28,588: end state. edges=[]
DEBUG    2022-12-09 16:53:28,588: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,588: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,588: defmap: {}
DEBUG    2022-12-09 16:53:28,588: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,588: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,588: keep phismap: {}
DEBUG    2022-12-09 16:53:28,588: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,588: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,588: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a02.0'}), (4, {'res': '$TwaterK4.1'}), (6, {'res': '$a16.2'}), (8, {'res': '$TwaterK8.3'}), (10, {'res': '$a210.4'}), (12, {'res': '$TwaterK12.5'}), (14, {'res': '$a314.6'}), (16, {'res': '$TwaterK16.7'}), (18, {'res': '$a418.8'}), (20, {'res': '$TwaterK20.9'}), (22, {'res': '$a522.10'}), (24, {'res': '$TwaterK24.11'}), (26, {'res': '$a626.12'}), (28, {'lhs': '$TwaterK24.11', 'rhs': '$a626.12', 'res': '$28binary_multiply.13'}), (30, {'lhs': '$a522.10', 'rhs': '$28binary_multiply.13', 'res': '$30binary_add.14'}), (32, {'lhs': '$TwaterK20.9', 'rhs': '$30binary_add.14', 'res': '$32binary_multiply.15'}), (34, {'lhs': '$a418.8', 'rhs': '$32binary_multiply.15', 'res': '$34binary_add.16'}), (36, {'lhs': '$TwaterK16.7', 'rhs': '$34binary_add.16', 'res': '$36binary_multiply.17'}), (38, {'lhs': '$a314.6', 'rhs': '$36binary_multiply.17', 'res': '$38binary_add.18'}), (40, {'lhs': '$TwaterK12.5', 'rhs': '$38binary_add.18', 'res': '$40binary_multiply.19'}), (42, {'lhs': '$a210.4', 'rhs': '$40binary_multiply.19', 'res': '$42binary_add.20'}), (44, {'lhs': '$TwaterK8.3', 'rhs': '$42binary_add.20', 'res': '$44binary_multiply.21'}), (46, {'lhs': '$a16.2', 'rhs': '$44binary_multiply.21', 'res': '$46binary_add.22'}), (48, {'lhs': '$TwaterK4.1', 'rhs': '$46binary_add.22', 'res': '$48binary_multiply.23'}), (50, {'lhs': '$a02.0', 'rhs': '$48binary_multiply.23', 'res': '$50binary_add.24'}), (52, {'retval': '$50binary_add.24', 'castval': '$52return_value.25'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,589: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    a0 = arg(1, name=a0)                     ['a0']
    a1 = arg(2, name=a1)                     ['a1']
    a2 = arg(3, name=a2)                     ['a2']
    a3 = arg(4, name=a3)                     ['a3']
    a4 = arg(5, name=a4)                     ['a4']
    a5 = arg(6, name=a5)                     ['a5']
    a6 = arg(7, name=a6)                     ['a6']
    $28binary_multiply.13 = TwaterK * a6     ['$28binary_multiply.13', 'TwaterK', 'a6']
    $30binary_add.14 = a5 + $28binary_multiply.13 ['$28binary_multiply.13', '$30binary_add.14', 'a5']
    $32binary_multiply.15 = TwaterK * $30binary_add.14 ['$30binary_add.14', '$32binary_multiply.15', 'TwaterK']
    $34binary_add.16 = a4 + $32binary_multiply.15 ['$32binary_multiply.15', '$34binary_add.16', 'a4']
    $36binary_multiply.17 = TwaterK * $34binary_add.16 ['$34binary_add.16', '$36binary_multiply.17', 'TwaterK']
    $38binary_add.18 = a3 + $36binary_multiply.17 ['$36binary_multiply.17', '$38binary_add.18', 'a3']
    $40binary_multiply.19 = TwaterK * $38binary_add.18 ['$38binary_add.18', '$40binary_multiply.19', 'TwaterK']
    $42binary_add.20 = a2 + $40binary_multiply.19 ['$40binary_multiply.19', '$42binary_add.20', 'a2']
    $44binary_multiply.21 = TwaterK * $42binary_add.20 ['$42binary_add.20', '$44binary_multiply.21', 'TwaterK']
    $46binary_add.22 = a1 + $44binary_multiply.21 ['$44binary_multiply.21', '$46binary_add.22', 'a1']
    $48binary_multiply.23 = TwaterK * $46binary_add.22 ['$46binary_add.22', '$48binary_multiply.23', 'TwaterK']
    $50binary_add.24 = a0 + $48binary_multiply.23 ['$48binary_multiply.23', '$50binary_add.24', 'a0']
    $52return_value.25 = cast(value=$50binary_add.24) ['$50binary_add.24', '$52return_value.25']
    return $52return_value.25                ['$52return_value.25']

DEBUG    2022-12-09 16:53:28,591: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,591: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C67FE20>
DEBUG    2022-12-09 16:53:28,591: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2022-12-09 16:53:28,591: on stmt: a0 = arg(1, name=a0)
DEBUG    2022-12-09 16:53:28,591: on stmt: a1 = arg(2, name=a1)
DEBUG    2022-12-09 16:53:28,591: on stmt: a2 = arg(3, name=a2)
DEBUG    2022-12-09 16:53:28,591: on stmt: a3 = arg(4, name=a3)
DEBUG    2022-12-09 16:53:28,591: on stmt: a4 = arg(5, name=a4)
DEBUG    2022-12-09 16:53:28,591: on stmt: a5 = arg(6, name=a5)
DEBUG    2022-12-09 16:53:28,591: on stmt: a6 = arg(7, name=a6)
DEBUG    2022-12-09 16:53:28,591: on stmt: $28binary_multiply.13 = TwaterK * a6
DEBUG    2022-12-09 16:53:28,591: on stmt: $30binary_add.14 = a5 + $28binary_multiply.13
DEBUG    2022-12-09 16:53:28,591: on stmt: $32binary_multiply.15 = TwaterK * $30binary_add.14
DEBUG    2022-12-09 16:53:28,591: on stmt: $34binary_add.16 = a4 + $32binary_multiply.15
DEBUG    2022-12-09 16:53:28,591: on stmt: $36binary_multiply.17 = TwaterK * $34binary_add.16
DEBUG    2022-12-09 16:53:28,592: on stmt: $38binary_add.18 = a3 + $36binary_multiply.17
DEBUG    2022-12-09 16:53:28,592: on stmt: $40binary_multiply.19 = TwaterK * $38binary_add.18
DEBUG    2022-12-09 16:53:28,592: on stmt: $42binary_add.20 = a2 + $40binary_multiply.19
DEBUG    2022-12-09 16:53:28,592: on stmt: $44binary_multiply.21 = TwaterK * $42binary_add.20
DEBUG    2022-12-09 16:53:28,592: on stmt: $46binary_add.22 = a1 + $44binary_multiply.21
DEBUG    2022-12-09 16:53:28,592: on stmt: $48binary_multiply.23 = TwaterK * $46binary_add.22
DEBUG    2022-12-09 16:53:28,592: on stmt: $50binary_add.24 = a0 + $48binary_multiply.23
DEBUG    2022-12-09 16:53:28,592: on stmt: $52return_value.25 = cast(value=$50binary_add.24)
DEBUG    2022-12-09 16:53:28,592: on stmt: return $52return_value.25
DEBUG    2022-12-09 16:53:28,592: defs defaultdict(<class 'list'>,
            {'$28binary_multiply.13': [<numba.core.ir.Assign object at 0x0000024C8C3E4520>],
             '$30binary_add.14': [<numba.core.ir.Assign object at 0x0000024C8C3E45E0>],
             '$32binary_multiply.15': [<numba.core.ir.Assign object at 0x0000024C8C3E4820>],
             '$34binary_add.16': [<numba.core.ir.Assign object at 0x0000024C8C3BF580>],
             '$36binary_multiply.17': [<numba.core.ir.Assign object at 0x0000024C8C3BFF10>],
             '$38binary_add.18': [<numba.core.ir.Assign object at 0x0000024C8C3BF370>],
             '$40binary_multiply.19': [<numba.core.ir.Assign object at 0x0000024C8C3BFEE0>],
             '$42binary_add.20': [<numba.core.ir.Assign object at 0x0000024C8C3BF640>],
             '$44binary_multiply.21': [<numba.core.ir.Assign object at 0x0000024C8C3BFDC0>],
             '$46binary_add.22': [<numba.core.ir.Assign object at 0x0000024C8C3BF670>],
             '$48binary_multiply.23': [<numba.core.ir.Assign object at 0x0000024C8C3BF7C0>],
             '$50binary_add.24': [<numba.core.ir.Assign object at 0x0000024C8C3BF940>],
             '$52return_value.25': [<numba.core.ir.Assign object at 0x0000024C8C3BFA90>],
             'TwaterK': [<numba.core.ir.Assign object at 0x0000024C8C4164F0>],
             'a0': [<numba.core.ir.Assign object at 0x0000024C8C4CED90>],
             'a1': [<numba.core.ir.Assign object at 0x0000024C8C485FA0>],
             'a2': [<numba.core.ir.Assign object at 0x0000024C8C599460>],
             'a3': [<numba.core.ir.Assign object at 0x0000024C8C67D6A0>],
             'a4': [<numba.core.ir.Assign object at 0x0000024C8C4C4FA0>],
             'a5': [<numba.core.ir.Assign object at 0x0000024C8C60EFA0>],
             'a6': [<numba.core.ir.Assign object at 0x0000024C8C437D60>]})
DEBUG    2022-12-09 16:53:28,592: SSA violators set()
DEBUG    2022-12-09 16:53:28,651: bytecode dump:
>          0	NOP(arg=None, lineno=135)
           2	LOAD_FAST(arg=1, lineno=135)
           4	LOAD_FAST(arg=2, lineno=135)
           6	BINARY_MULTIPLY(arg=None, lineno=135)
           8	LOAD_FAST(arg=0, lineno=135)
          10	LOAD_CONST(arg=1, lineno=135)
          12	BINARY_POWER(arg=None, lineno=135)
          14	BINARY_MULTIPLY(arg=None, lineno=135)
          16	RETURN_VALUE(arg=None, lineno=135)
DEBUG    2022-12-09 16:53:28,651: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,651: stack: []
DEBUG    2022-12-09 16:53:28,651: dispatch pc=0, inst=NOP(arg=None, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack []
DEBUG    2022-12-09 16:53:28,651: dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack []
DEBUG    2022-12-09 16:53:28,651: dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack ['$emissivity_water2.0']
DEBUG    2022-12-09 16:53:28,651: dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack ['$emissivity_water2.0', '$stefan_boltzmann4.1']
DEBUG    2022-12-09 16:53:28,651: dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack ['$6binary_multiply.2']
DEBUG    2022-12-09 16:53:28,651: dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack ['$6binary_multiply.2', '$TwaterK8.3']
DEBUG    2022-12-09 16:53:28,651: dispatch pc=12, inst=BINARY_POWER(arg=None, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack ['$6binary_multiply.2', '$TwaterK8.3', '$const10.4']
DEBUG    2022-12-09 16:53:28,651: dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack ['$6binary_multiply.2', '$12binary_power.5']
DEBUG    2022-12-09 16:53:28,651: dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=135)
DEBUG    2022-12-09 16:53:28,651: stack ['$14binary_multiply.6']
DEBUG    2022-12-09 16:53:28,651: end state. edges=[]
DEBUG    2022-12-09 16:53:28,651: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,651: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,651: defmap: {}
DEBUG    2022-12-09 16:53:28,651: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,651: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,651: keep phismap: {}
DEBUG    2022-12-09 16:53:28,651: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,651: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,651: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$emissivity_water2.0'}), (4, {'res': '$stefan_boltzmann4.1'}), (6, {'lhs': '$emissivity_water2.0', 'rhs': '$stefan_boltzmann4.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$TwaterK8.3'}), (10, {'res': '$const10.4'}), (12, {'lhs': '$TwaterK8.3', 'rhs': '$const10.4', 'res': '$12binary_power.5'}), (14, {'lhs': '$6binary_multiply.2', 'rhs': '$12binary_power.5', 'res': '$14binary_multiply.6'}), (16, {'retval': '$14binary_multiply.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,651: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    emissivity_water = arg(1, name=emissivity_water) ['emissivity_water']
    stefan_boltzmann = arg(2, name=stefan_boltzmann) ['stefan_boltzmann']
    $6binary_multiply.2 = emissivity_water * stefan_boltzmann ['$6binary_multiply.2', 'emissivity_water', 'stefan_boltzmann']
    $const10.4 = const(float, 4.0)           ['$const10.4']
    $12binary_power.5 = TwaterK ** $const10.4 ['$12binary_power.5', '$const10.4', 'TwaterK']
    $14binary_multiply.6 = $6binary_multiply.2 * $12binary_power.5 ['$12binary_power.5', '$14binary_multiply.6', '$6binary_multiply.2']
    $16return_value.7 = cast(value=$14binary_multiply.6) ['$14binary_multiply.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

DEBUG    2022-12-09 16:53:28,659: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,659: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C3524F0>
DEBUG    2022-12-09 16:53:28,659: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2022-12-09 16:53:28,659: on stmt: emissivity_water = arg(1, name=emissivity_water)
DEBUG    2022-12-09 16:53:28,659: on stmt: stefan_boltzmann = arg(2, name=stefan_boltzmann)
DEBUG    2022-12-09 16:53:28,659: on stmt: $6binary_multiply.2 = emissivity_water * stefan_boltzmann
DEBUG    2022-12-09 16:53:28,659: on stmt: $const10.4 = const(float, 4.0)
DEBUG    2022-12-09 16:53:28,659: on stmt: $12binary_power.5 = TwaterK ** $const10.4
DEBUG    2022-12-09 16:53:28,659: on stmt: $14binary_multiply.6 = $6binary_multiply.2 * $12binary_power.5
DEBUG    2022-12-09 16:53:28,659: on stmt: $16return_value.7 = cast(value=$14binary_multiply.6)
DEBUG    2022-12-09 16:53:28,659: on stmt: return $16return_value.7
DEBUG    2022-12-09 16:53:28,659: defs defaultdict(<class 'list'>,
            {'$12binary_power.5': [<numba.core.ir.Assign object at 0x0000024C8C2FCAC0>],
             '$14binary_multiply.6': [<numba.core.ir.Assign object at 0x0000024C8C2F56A0>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x0000024C8C2F5F70>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x0000024C8C2FC6D0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x0000024C8C2FCC70>],
             'TwaterK': [<numba.core.ir.Assign object at 0x0000024C8C40FBB0>],
             'emissivity_water': [<numba.core.ir.Assign object at 0x0000024C8C2FCA90>],
             'stefan_boltzmann': [<numba.core.ir.Assign object at 0x0000024C8C2FCFA0>]})
DEBUG    2022-12-09 16:53:28,661: SSA violators set()
DEBUG    2022-12-09 16:53:28,691: bytecode dump:
>          0	NOP(arg=None, lineno=253)
           2	LOAD_CONST(arg=1, lineno=253)
           4	LOAD_FAST(arg=1, lineno=253)
           6	BINARY_MULTIPLY(arg=None, lineno=253)
           8	LOAD_FAST(arg=2, lineno=253)
          10	LOAD_FAST(arg=1, lineno=253)
          12	BINARY_SUBTRACT(arg=None, lineno=253)
          14	BINARY_TRUE_DIVIDE(arg=None, lineno=253)
          16	STORE_FAST(arg=3, lineno=253)
          18	LOAD_CONST(arg=2, lineno=254)
          20	LOAD_FAST(arg=2, lineno=254)
          22	LOAD_FAST(arg=0, lineno=254)
          24	BINARY_TRUE_DIVIDE(arg=None, lineno=254)
          26	BINARY_MULTIPLY(arg=None, lineno=254)
          28	LOAD_CONST(arg=3, lineno=254)
          30	LOAD_FAST(arg=3, lineno=254)
          32	BINARY_ADD(arg=None, lineno=254)
          34	BINARY_MULTIPLY(arg=None, lineno=254)
          36	LOAD_CONST(arg=3, lineno=254)
          38	LOAD_CONST(arg=4, lineno=254)
          40	LOAD_FAST(arg=3, lineno=254)
          42	BINARY_MULTIPLY(arg=None, lineno=254)
          44	BINARY_ADD(arg=None, lineno=254)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=254)
          48	RETURN_VALUE(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,691: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,691: stack: []
DEBUG    2022-12-09 16:53:28,691: dispatch pc=0, inst=NOP(arg=None, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack []
DEBUG    2022-12-09 16:53:28,691: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack []
DEBUG    2022-12-09 16:53:28,691: dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack ['$const2.0']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack ['$const2.0', '$esat_mb4.1']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack ['$6binary_multiply.2']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack ['$6binary_multiply.2', '$pressure_mb8.3']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack ['$6binary_multiply.2', '$pressure_mb8.3', '$esat_mb10.4']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=14, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack ['$6binary_multiply.2', '$12binary_subtract.5']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=16, inst=STORE_FAST(arg=3, lineno=253)
DEBUG    2022-12-09 16:53:28,691: stack ['$14binary_true_divide.6']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack []
DEBUG    2022-12-09 16:53:28,691: dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$const18.7']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$const18.7', '$pressure_mb20.8']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=24, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$const18.7', '$pressure_mb20.8', '$TwaterK22.9']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$const18.7', '$24binary_true_divide.10']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$26binary_multiply.11']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$26binary_multiply.11', '$const28.12']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$26binary_multiply.11', '$const28.12', '$mixing_ratio_sat30.13']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=34, inst=BINARY_MULTIPLY(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$26binary_multiply.11', '$32binary_add.14']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$34binary_multiply.15']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=38, inst=LOAD_CONST(arg=4, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$34binary_multiply.15', '$const36.16']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=254)
DEBUG    2022-12-09 16:53:28,691: stack ['$34binary_multiply.15', '$const36.16', '$const38.17']
DEBUG    2022-12-09 16:53:28,691: dispatch pc=42, inst=BINARY_MULTIPLY(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,699: stack ['$34binary_multiply.15', '$const36.16', '$const38.17', '$mixing_ratio_sat40.18']
DEBUG    2022-12-09 16:53:28,699: dispatch pc=44, inst=BINARY_ADD(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,699: stack ['$34binary_multiply.15', '$const36.16', '$42binary_multiply.19']
DEBUG    2022-12-09 16:53:28,699: dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,699: stack ['$34binary_multiply.15', '$44binary_add.20']
DEBUG    2022-12-09 16:53:28,699: dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=254)
DEBUG    2022-12-09 16:53:28,699: stack ['$46binary_true_divide.21']
DEBUG    2022-12-09 16:53:28,699: end state. edges=[]
DEBUG    2022-12-09 16:53:28,699: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,699: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,699: defmap: {}
DEBUG    2022-12-09 16:53:28,699: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,699: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,699: keep phismap: {}
DEBUG    2022-12-09 16:53:28,699: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,699: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,699: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$esat_mb4.1'}), (6, {'lhs': '$const2.0', 'rhs': '$esat_mb4.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$pressure_mb8.3'}), (10, {'res': '$esat_mb10.4'}), (12, {'lhs': '$pressure_mb8.3', 'rhs': '$esat_mb10.4', 'res': '$12binary_subtract.5'}), (14, {'lhs': '$6binary_multiply.2', 'rhs': '$12binary_subtract.5', 'res': '$14binary_true_divide.6'}), (16, {'value': '$14binary_true_divide.6'}), (18, {'res': '$const18.7'}), (20, {'res': '$pressure_mb20.8'}), (22, {'res': '$TwaterK22.9'}), (24, {'lhs': '$pressure_mb20.8', 'rhs': '$TwaterK22.9', 'res': '$24binary_true_divide.10'}), (26, {'lhs': '$const18.7', 'rhs': '$24binary_true_divide.10', 'res': '$26binary_multiply.11'}), (28, {'res': '$const28.12'}), (30, {'res': '$mixing_ratio_sat30.13'}), (32, {'lhs': '$const28.12', 'rhs': '$mixing_ratio_sat30.13', 'res': '$32binary_add.14'}), (34, {'lhs': '$26binary_multiply.11', 'rhs': '$32binary_add.14', 'res': '$34binary_multiply.15'}), (36, {'res': '$const36.16'}), (38, {'res': '$const38.17'}), (40, {'res': '$mixing_ratio_sat40.18'}), (42, {'lhs': '$const38.17', 'rhs': '$mixing_ratio_sat40.18', 'res': '$42binary_multiply.19'}), (44, {'lhs': '$const36.16', 'rhs': '$42binary_multiply.19', 'res': '$44binary_add.20'}), (46, {'lhs': '$34binary_multiply.15', 'rhs': '$44binary_add.20', 'res': '$46binary_true_divide.21'}), (48, {'retval': '$46binary_true_divide.21', 'castval': '$48return_value.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,702: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    esat_mb = arg(1, name=esat_mb)           ['esat_mb']
    pressure_mb = arg(2, name=pressure_mb)   ['pressure_mb']
    $const2.0 = const(float, 0.622)          ['$const2.0']
    $6binary_multiply.2 = $const2.0 * esat_mb ['$6binary_multiply.2', '$const2.0', 'esat_mb']
    $12binary_subtract.5 = pressure_mb - esat_mb ['$12binary_subtract.5', 'esat_mb', 'pressure_mb']
    mixing_ratio_sat = $6binary_multiply.2 / $12binary_subtract.5 ['$12binary_subtract.5', '$6binary_multiply.2', 'mixing_ratio_sat']
    $const18.7 = const(float, 0.348)         ['$const18.7']
    $24binary_true_divide.10 = pressure_mb / TwaterK ['$24binary_true_divide.10', 'TwaterK', 'pressure_mb']
    $26binary_multiply.11 = $const18.7 * $24binary_true_divide.10 ['$24binary_true_divide.10', '$26binary_multiply.11', '$const18.7']
    $const28.12 = const(float, 1.0)          ['$const28.12']
    $32binary_add.14 = $const28.12 + mixing_ratio_sat ['$32binary_add.14', '$const28.12', 'mixing_ratio_sat']
    $34binary_multiply.15 = $26binary_multiply.11 * $32binary_add.14 ['$26binary_multiply.11', '$32binary_add.14', '$34binary_multiply.15']
    $const36.16 = const(float, 1.0)          ['$const36.16']
    $const38.17 = const(float, 1.61)         ['$const38.17']
    $42binary_multiply.19 = $const38.17 * mixing_ratio_sat ['$42binary_multiply.19', '$const38.17', 'mixing_ratio_sat']
    $44binary_add.20 = $const36.16 + $42binary_multiply.19 ['$42binary_multiply.19', '$44binary_add.20', '$const36.16']
    $46binary_true_divide.21 = $34binary_multiply.15 / $44binary_add.20 ['$34binary_multiply.15', '$44binary_add.20', '$46binary_true_divide.21']
    $48return_value.22 = cast(value=$46binary_true_divide.21) ['$46binary_true_divide.21', '$48return_value.22']
    return $48return_value.22                ['$48return_value.22']

DEBUG    2022-12-09 16:53:28,702: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,702: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C41EC70>
DEBUG    2022-12-09 16:53:28,702: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2022-12-09 16:53:28,702: on stmt: esat_mb = arg(1, name=esat_mb)
DEBUG    2022-12-09 16:53:28,702: on stmt: pressure_mb = arg(2, name=pressure_mb)
DEBUG    2022-12-09 16:53:28,702: on stmt: $const2.0 = const(float, 0.622)
DEBUG    2022-12-09 16:53:28,702: on stmt: $6binary_multiply.2 = $const2.0 * esat_mb
DEBUG    2022-12-09 16:53:28,702: on stmt: $12binary_subtract.5 = pressure_mb - esat_mb
DEBUG    2022-12-09 16:53:28,702: on stmt: mixing_ratio_sat = $6binary_multiply.2 / $12binary_subtract.5
DEBUG    2022-12-09 16:53:28,702: on stmt: $const18.7 = const(float, 0.348)
DEBUG    2022-12-09 16:53:28,702: on stmt: $24binary_true_divide.10 = pressure_mb / TwaterK
DEBUG    2022-12-09 16:53:28,702: on stmt: $26binary_multiply.11 = $const18.7 * $24binary_true_divide.10
DEBUG    2022-12-09 16:53:28,702: on stmt: $const28.12 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,702: on stmt: $32binary_add.14 = $const28.12 + mixing_ratio_sat
DEBUG    2022-12-09 16:53:28,702: on stmt: $34binary_multiply.15 = $26binary_multiply.11 * $32binary_add.14
DEBUG    2022-12-09 16:53:28,702: on stmt: $const36.16 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,702: on stmt: $const38.17 = const(float, 1.61)
DEBUG    2022-12-09 16:53:28,702: on stmt: $42binary_multiply.19 = $const38.17 * mixing_ratio_sat
DEBUG    2022-12-09 16:53:28,702: on stmt: $44binary_add.20 = $const36.16 + $42binary_multiply.19
DEBUG    2022-12-09 16:53:28,702: on stmt: $46binary_true_divide.21 = $34binary_multiply.15 / $44binary_add.20
DEBUG    2022-12-09 16:53:28,702: on stmt: $48return_value.22 = cast(value=$46binary_true_divide.21)
DEBUG    2022-12-09 16:53:28,702: on stmt: return $48return_value.22
DEBUG    2022-12-09 16:53:28,702: defs defaultdict(<class 'list'>,
            {'$12binary_subtract.5': [<numba.core.ir.Assign object at 0x0000024C8C27BB80>],
             '$24binary_true_divide.10': [<numba.core.ir.Assign object at 0x0000024C8C487BB0>],
             '$26binary_multiply.11': [<numba.core.ir.Assign object at 0x0000024C8C4870D0>],
             '$32binary_add.14': [<numba.core.ir.Assign object at 0x0000024C8C487400>],
             '$34binary_multiply.15': [<numba.core.ir.Assign object at 0x0000024C8C248460>],
             '$42binary_multiply.19': [<numba.core.ir.Assign object at 0x0000024C8C2B7FD0>],
             '$44binary_add.20': [<numba.core.ir.Assign object at 0x0000024C8C2B0BE0>],
             '$46binary_true_divide.21': [<numba.core.ir.Assign object at 0x0000024C8C277430>],
             '$48return_value.22': [<numba.core.ir.Assign object at 0x0000024C8C277580>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x0000024C8C27B100>],
             '$const18.7': [<numba.core.ir.Assign object at 0x0000024C8C487EB0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000024C8C27BDC0>],
             '$const28.12': [<numba.core.ir.Assign object at 0x0000024C8C487160>],
             '$const36.16': [<numba.core.ir.Assign object at 0x0000024C8C2488B0>],
             '$const38.17': [<numba.core.ir.Assign object at 0x0000024C8C248F70>],
             'TwaterK': [<numba.core.ir.Assign object at 0x0000024C8C416490>],
             'esat_mb': [<numba.core.ir.Assign object at 0x0000024C8C27BA30>],
             'mixing_ratio_sat': [<numba.core.ir.Assign object at 0x0000024C8C487910>],
             'pressure_mb': [<numba.core.ir.Assign object at 0x0000024C8C27BC40>]})
DEBUG    2022-12-09 16:53:28,702: SSA violators set()
DEBUG    2022-12-09 16:53:28,762: bytecode dump:
>          0	NOP(arg=None, lineno=186)
           2	LOAD_CONST(arg=1, lineno=186)
           4	STORE_FAST(arg=4, lineno=186)
           6	LOAD_FAST(arg=3, lineno=187)
           8	LOAD_FAST(arg=2, lineno=187)
          10	LOAD_FAST(arg=1, lineno=187)
          12	BINARY_SUBTRACT(arg=None, lineno=187)
          14	BINARY_MULTIPLY(arg=None, lineno=187)
          16	LOAD_CONST(arg=2, lineno=188)
          18	BINARY_MULTIPLY(arg=None, lineno=187)
          20	LOAD_FAST(arg=2, lineno=188)
          22	LOAD_FAST(arg=0, lineno=188)
          24	LOAD_CONST(arg=2, lineno=188)
          26	BINARY_POWER(arg=None, lineno=188)
          28	BINARY_MULTIPLY(arg=None, lineno=188)
          30	BINARY_TRUE_DIVIDE(arg=None, lineno=187)
          32	STORE_FAST(arg=5, lineno=187)
          34	LOAD_FAST(arg=5, lineno=191)
          36	LOAD_CONST(arg=2, lineno=191)
          38	COMPARE_OP(arg=4, lineno=191)
          40	POP_JUMP_IF_FALSE(arg=46, lineno=191)
          42	LOAD_CONST(arg=2, lineno=192)
          44	STORE_FAST(arg=5, lineno=192)
>         46	LOAD_FAST(arg=5, lineno=193)
          48	LOAD_CONST(arg=3, lineno=193)
          50	COMPARE_OP(arg=0, lineno=193)
          52	POP_JUMP_IF_FALSE(arg=58, lineno=193)
          54	LOAD_CONST(arg=3, lineno=194)
          56	STORE_FAST(arg=5, lineno=194)
>         58	LOAD_FAST(arg=5, lineno=196)
          60	LOAD_CONST(arg=1, lineno=196)
          62	COMPARE_OP(arg=0, lineno=196)
          64	POP_JUMP_IF_FALSE(arg=98, lineno=196)
          66	LOAD_FAST(arg=5, lineno=197)
          68	LOAD_CONST(arg=4, lineno=197)
          70	COMPARE_OP(arg=5, lineno=197)
          72	POP_JUMP_IF_FALSE(arg=80, lineno=197)
          74	LOAD_CONST(arg=5, lineno=199)
          76	STORE_FAST(arg=4, lineno=199)
          78	JUMP_ABSOLUTE(arg=128, lineno=199)
>         80	LOAD_CONST(arg=5, lineno=202)
          82	LOAD_CONST(arg=6, lineno=202)
          84	LOAD_FAST(arg=5, lineno=202)
          86	BINARY_MULTIPLY(arg=None, lineno=202)
          88	BINARY_SUBTRACT(arg=None, lineno=202)
          90	LOAD_CONST(arg=7, lineno=202)
          92	BINARY_POWER(arg=None, lineno=202)
          94	STORE_FAST(arg=4, lineno=202)
          96	JUMP_FORWARD(arg=30, lineno=202)
>         98	LOAD_FAST(arg=5, lineno=204)
         100	LOAD_CONST(arg=8, lineno=204)
         102	COMPARE_OP(arg=1, lineno=204)
         104	POP_JUMP_IF_FALSE(arg=112, lineno=204)
         106	LOAD_CONST(arg=5, lineno=206)
         108	STORE_FAST(arg=4, lineno=206)
         110	JUMP_FORWARD(arg=16, lineno=206)
>        112	LOAD_CONST(arg=5, lineno=209)
         114	LOAD_CONST(arg=9, lineno=209)
         116	LOAD_FAST(arg=5, lineno=209)
         118	BINARY_MULTIPLY(arg=None, lineno=209)
         120	BINARY_ADD(arg=None, lineno=209)
         122	LOAD_CONST(arg=10, lineno=209)
         124	BINARY_POWER(arg=None, lineno=209)
         126	STORE_FAST(arg=4, lineno=209)
>        128	LOAD_FAST(arg=5, lineno=210)
         130	LOAD_FAST(arg=4, lineno=210)
         132	BUILD_TUPLE(arg=2, lineno=210)
         134	RETURN_VALUE(arg=None, lineno=210)
DEBUG    2022-12-09 16:53:28,762: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,762: stack: []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=0, inst=NOP(arg=None, lineno=186)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=186)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=4, inst=STORE_FAST(arg=4, lineno=186)
DEBUG    2022-12-09 16:53:28,762: stack ['$const2.0']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=187)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=187)
DEBUG    2022-12-09 16:53:28,762: stack ['$gravity6.1']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=187)
DEBUG    2022-12-09 16:53:28,762: stack ['$gravity6.1', '$density_air8.2']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=187)
DEBUG    2022-12-09 16:53:28,762: stack ['$gravity6.1', '$density_air8.2', '$density_air_sat10.3']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=187)
DEBUG    2022-12-09 16:53:28,762: stack ['$gravity6.1', '$12binary_subtract.4']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=188)
DEBUG    2022-12-09 16:53:28,762: stack ['$14binary_multiply.5']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=187)
DEBUG    2022-12-09 16:53:28,762: stack ['$14binary_multiply.5', '$const16.6']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=188)
DEBUG    2022-12-09 16:53:28,762: stack ['$18binary_multiply.7']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=188)
DEBUG    2022-12-09 16:53:28,762: stack ['$18binary_multiply.7', '$density_air20.8']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=188)
DEBUG    2022-12-09 16:53:28,762: stack ['$18binary_multiply.7', '$density_air20.8', '$wind_speed22.9']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=26, inst=BINARY_POWER(arg=None, lineno=188)
DEBUG    2022-12-09 16:53:28,762: stack ['$18binary_multiply.7', '$density_air20.8', '$wind_speed22.9', '$const24.10']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=188)
DEBUG    2022-12-09 16:53:28,762: stack ['$18binary_multiply.7', '$density_air20.8', '$26binary_power.11']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=30, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=187)
DEBUG    2022-12-09 16:53:28,762: stack ['$18binary_multiply.7', '$28binary_multiply.12']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=32, inst=STORE_FAST(arg=5, lineno=187)
DEBUG    2022-12-09 16:53:28,762: stack ['$30binary_true_divide.13']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=34, inst=LOAD_FAST(arg=5, lineno=191)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=191)
DEBUG    2022-12-09 16:53:28,762: stack ['$Ri_No34.14']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=38, inst=COMPARE_OP(arg=4, lineno=191)
DEBUG    2022-12-09 16:53:28,762: stack ['$Ri_No34.14', '$const36.15']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=46, lineno=191)
DEBUG    2022-12-09 16:53:28,762: stack ['$38compare_op.16']
DEBUG    2022-12-09 16:53:28,762: end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,762: pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,762: stack: []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=192)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=44, inst=STORE_FAST(arg=5, lineno=192)
DEBUG    2022-12-09 16:53:28,762: stack ['$const42.0']
DEBUG    2022-12-09 16:53:28,762: end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,762: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,762: stack: []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=193)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=193)
DEBUG    2022-12-09 16:53:28,762: stack ['$Ri_No46.0']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=50, inst=COMPARE_OP(arg=0, lineno=193)
DEBUG    2022-12-09 16:53:28,762: stack ['$Ri_No46.0', '$const48.1']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=58, lineno=193)
DEBUG    2022-12-09 16:53:28,762: stack ['$50compare_op.2']
DEBUG    2022-12-09 16:53:28,762: end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,762: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,762: pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,762: stack: []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=194)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=56, inst=STORE_FAST(arg=5, lineno=194)
DEBUG    2022-12-09 16:53:28,762: stack ['$const54.0']
DEBUG    2022-12-09 16:53:28,762: end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,762: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,762: stack: []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=196)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=196)
DEBUG    2022-12-09 16:53:28,762: stack ['$Ri_No58.0']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=62, inst=COMPARE_OP(arg=0, lineno=196)
DEBUG    2022-12-09 16:53:28,762: stack ['$Ri_No58.0', '$const60.1']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=98, lineno=196)
DEBUG    2022-12-09 16:53:28,762: stack ['$62compare_op.2']
DEBUG    2022-12-09 16:53:28,762: end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,762: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,762: pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,762: stack: []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=197)
DEBUG    2022-12-09 16:53:28,762: stack []
DEBUG    2022-12-09 16:53:28,762: dispatch pc=68, inst=LOAD_CONST(arg=4, lineno=197)
DEBUG    2022-12-09 16:53:28,762: stack ['$Ri_No66.0']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=70, inst=COMPARE_OP(arg=5, lineno=197)
DEBUG    2022-12-09 16:53:28,762: stack ['$Ri_No66.0', '$const68.1']
DEBUG    2022-12-09 16:53:28,762: dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=80, lineno=197)
DEBUG    2022-12-09 16:53:28,770: stack ['$70compare_op.2']
DEBUG    2022-12-09 16:53:28,770: end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,770: pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,770: stack: []
DEBUG    2022-12-09 16:53:28,770: dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=204)
DEBUG    2022-12-09 16:53:28,770: stack []
DEBUG    2022-12-09 16:53:28,770: dispatch pc=100, inst=LOAD_CONST(arg=8, lineno=204)
DEBUG    2022-12-09 16:53:28,770: stack ['$Ri_No98.0']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=102, inst=COMPARE_OP(arg=1, lineno=204)
DEBUG    2022-12-09 16:53:28,770: stack ['$Ri_No98.0', '$const100.1']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=112, lineno=204)
DEBUG    2022-12-09 16:53:28,770: stack ['$102compare_op.2']
DEBUG    2022-12-09 16:53:28,770: end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,770: pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,770: stack: []
DEBUG    2022-12-09 16:53:28,770: dispatch pc=74, inst=LOAD_CONST(arg=5, lineno=199)
DEBUG    2022-12-09 16:53:28,770: stack []
DEBUG    2022-12-09 16:53:28,770: dispatch pc=76, inst=STORE_FAST(arg=4, lineno=199)
DEBUG    2022-12-09 16:53:28,770: stack ['$const74.0']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=78, inst=JUMP_ABSOLUTE(arg=128, lineno=199)
DEBUG    2022-12-09 16:53:28,770: stack []
DEBUG    2022-12-09 16:53:28,770: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,770: pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,770: stack: []
DEBUG    2022-12-09 16:53:28,770: dispatch pc=80, inst=LOAD_CONST(arg=5, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack []
DEBUG    2022-12-09 16:53:28,770: dispatch pc=82, inst=LOAD_CONST(arg=6, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack ['$const80.0']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=84, inst=LOAD_FAST(arg=5, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack ['$const80.0', '$const82.1']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack ['$const80.0', '$const82.1', '$Ri_No84.2']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=88, inst=BINARY_SUBTRACT(arg=None, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack ['$const80.0', '$86binary_multiply.3']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=90, inst=LOAD_CONST(arg=7, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack ['$88binary_subtract.4']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=92, inst=BINARY_POWER(arg=None, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack ['$88binary_subtract.4', '$const90.5']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=94, inst=STORE_FAST(arg=4, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack ['$92binary_power.6']
DEBUG    2022-12-09 16:53:28,770: dispatch pc=96, inst=JUMP_FORWARD(arg=30, lineno=202)
DEBUG    2022-12-09 16:53:28,770: stack []
DEBUG    2022-12-09 16:53:28,772: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,772: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,772: stack: []
DEBUG    2022-12-09 16:53:28,772: dispatch pc=106, inst=LOAD_CONST(arg=5, lineno=206)
DEBUG    2022-12-09 16:53:28,772: stack []
DEBUG    2022-12-09 16:53:28,772: dispatch pc=108, inst=STORE_FAST(arg=4, lineno=206)
DEBUG    2022-12-09 16:53:28,772: stack ['$const106.0']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=110, inst=JUMP_FORWARD(arg=16, lineno=206)
DEBUG    2022-12-09 16:53:28,772: stack []
DEBUG    2022-12-09 16:53:28,772: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,772: pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,772: stack: []
DEBUG    2022-12-09 16:53:28,772: dispatch pc=112, inst=LOAD_CONST(arg=5, lineno=209)
DEBUG    2022-12-09 16:53:28,772: stack []
DEBUG    2022-12-09 16:53:28,772: dispatch pc=114, inst=LOAD_CONST(arg=9, lineno=209)
DEBUG    2022-12-09 16:53:28,772: stack ['$const112.0']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=116, inst=LOAD_FAST(arg=5, lineno=209)
DEBUG    2022-12-09 16:53:28,772: stack ['$const112.0', '$const114.1']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=209)
DEBUG    2022-12-09 16:53:28,772: stack ['$const112.0', '$const114.1', '$Ri_No116.2']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=120, inst=BINARY_ADD(arg=None, lineno=209)
DEBUG    2022-12-09 16:53:28,772: stack ['$const112.0', '$118binary_multiply.3']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=122, inst=LOAD_CONST(arg=10, lineno=209)
DEBUG    2022-12-09 16:53:28,772: stack ['$120binary_add.4']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=124, inst=BINARY_POWER(arg=None, lineno=209)
DEBUG    2022-12-09 16:53:28,772: stack ['$120binary_add.4', '$const122.5']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=126, inst=STORE_FAST(arg=4, lineno=209)
DEBUG    2022-12-09 16:53:28,772: stack ['$124binary_power.6']
DEBUG    2022-12-09 16:53:28,772: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2022-12-09 16:53:28,772: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,772: stack: []
DEBUG    2022-12-09 16:53:28,772: dispatch pc=128, inst=LOAD_FAST(arg=5, lineno=210)
DEBUG    2022-12-09 16:53:28,772: stack []
DEBUG    2022-12-09 16:53:28,772: dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=210)
DEBUG    2022-12-09 16:53:28,772: stack ['$Ri_No128.0']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=132, inst=BUILD_TUPLE(arg=2, lineno=210)
DEBUG    2022-12-09 16:53:28,772: stack ['$Ri_No128.0', '$Ri_fxn130.1']
DEBUG    2022-12-09 16:53:28,772: dispatch pc=134, inst=RETURN_VALUE(arg=None, lineno=210)
DEBUG    2022-12-09 16:53:28,772: stack ['$132build_tuple.2']
DEBUG    2022-12-09 16:53:28,772: end state. edges=[]
DEBUG    2022-12-09 16:53:28,772: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,772: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,772: pending: deque([State(pc_initial=128 nstack_initial=0)])
DEBUG    2022-12-09 16:53:28,772: -------------------------Prune PHIs-------------------------
DEBUG    2022-12-09 16:53:28,772: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=128 nstack_initial=0): set()})
DEBUG    2022-12-09 16:53:28,772: defmap: {}
DEBUG    2022-12-09 16:53:28,772: phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,772: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2022-12-09 16:53:28,772: keep phismap: {}
DEBUG    2022-12-09 16:53:28,772: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2022-12-09 16:53:28,772: ----------------------DONE Prune PHIs-----------------------
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$gravity6.1'}), (8, {'res': '$density_air8.2'}), (10, {'res': '$density_air_sat10.3'}), (12, {'lhs': '$density_air8.2', 'rhs': '$density_air_sat10.3', 'res': '$12binary_subtract.4'}), (14, {'lhs': '$gravity6.1', 'rhs': '$12binary_subtract.4', 'res': '$14binary_multiply.5'}), (16, {'res': '$const16.6'}), (18, {'lhs': '$14binary_multiply.5', 'rhs': '$const16.6', 'res': '$18binary_multiply.7'}), (20, {'res': '$density_air20.8'}), (22, {'res': '$wind_speed22.9'}), (24, {'res': '$const24.10'}), (26, {'lhs': '$wind_speed22.9', 'rhs': '$const24.10', 'res': '$26binary_power.11'}), (28, {'lhs': '$density_air20.8', 'rhs': '$26binary_power.11', 'res': '$28binary_multiply.12'}), (30, {'lhs': '$18binary_multiply.7', 'rhs': '$28binary_multiply.12', 'res': '$30binary_true_divide.13'}), (32, {'value': '$30binary_true_divide.13'}), (34, {'res': '$Ri_No34.14'}), (36, {'res': '$const36.15'}), (38, {'lhs': '$Ri_No34.14', 'rhs': '$const36.15', 'res': '$38compare_op.16'}), (40, {'pred': '$38compare_op.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 46: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$const42.0'}), (44, {'value': '$const42.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$Ri_No46.0'}), (48, {'res': '$const48.1'}), (50, {'lhs': '$Ri_No46.0', 'rhs': '$const48.1', 'res': '$50compare_op.2'}), (52, {'pred': '$50compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 58: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'value': '$const54.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$Ri_No58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$Ri_No58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 98: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$Ri_No66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$Ri_No66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 80: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$const80.0'}), (82, {'res': '$const82.1'}), (84, {'res': '$Ri_No84.2'}), (86, {'lhs': '$const82.1', 'rhs': '$Ri_No84.2', 'res': '$86binary_multiply.3'}), (88, {'lhs': '$const80.0', 'rhs': '$86binary_multiply.3', 'res': '$88binary_subtract.4'}), (90, {'res': '$const90.5'}), (92, {'lhs': '$88binary_subtract.4', 'rhs': '$const90.5', 'res': '$92binary_power.6'}), (94, {'value': '$92binary_power.6'}), (96, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$Ri_No98.0'}), (100, {'res': '$const100.1'}), (102, {'lhs': '$Ri_No98.0', 'rhs': '$const100.1', 'res': '$102compare_op.2'}), (104, {'pred': '$102compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 112: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$const106.0'}), (108, {'value': '$const106.0'}), (110, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$const112.0'}), (114, {'res': '$const114.1'}), (116, {'res': '$Ri_No116.2'}), (118, {'lhs': '$const114.1', 'rhs': '$Ri_No116.2', 'res': '$118binary_multiply.3'}), (120, {'lhs': '$const112.0', 'rhs': '$118binary_multiply.3', 'res': '$120binary_add.4'}), (122, {'res': '$const122.5'}), (124, {'lhs': '$120binary_add.4', 'rhs': '$const122.5', 'res': '$124binary_power.6'}), (126, {'value': '$124binary_power.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2022-12-09 16:53:28,772: block_infos State(pc_initial=128 nstack_initial=0):
AdaptBlockInfo(insts=((128, {'res': '$Ri_No128.0'}), (130, {'res': '$Ri_fxn130.1'}), (132, {'items': ['$Ri_No128.0', '$Ri_fxn130.1'], 'res': '$132build_tuple.2'}), (134, {'retval': '$132build_tuple.2', 'castval': '$134return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2022-12-09 16:53:28,772: label 0:
    wind_speed = arg(0, name=wind_speed)     ['wind_speed']
    density_air_sat = arg(1, name=density_air_sat) ['density_air_sat']
    density_air = arg(2, name=density_air)   ['density_air']
    gravity = arg(3, name=gravity)           ['gravity']
    Ri_fxn = const(float, 0.0)               ['Ri_fxn']
    $12binary_subtract.4 = density_air - density_air_sat ['$12binary_subtract.4', 'density_air', 'density_air_sat']
    $14binary_multiply.5 = gravity * $12binary_subtract.4 ['$12binary_subtract.4', '$14binary_multiply.5', 'gravity']
    $const16.6 = const(float, 2.0)           ['$const16.6']
    $18binary_multiply.7 = $14binary_multiply.5 * $const16.6 ['$14binary_multiply.5', '$18binary_multiply.7', '$const16.6']
    $const24.10 = const(float, 2.0)          ['$const24.10']
    $26binary_power.11 = wind_speed ** $const24.10 ['$26binary_power.11', '$const24.10', 'wind_speed']
    $28binary_multiply.12 = density_air * $26binary_power.11 ['$26binary_power.11', '$28binary_multiply.12', 'density_air']
    Ri_No = $18binary_multiply.7 / $28binary_multiply.12 ['$18binary_multiply.7', '$28binary_multiply.12', 'Ri_No']
    $const36.15 = const(float, 2.0)          ['$const36.15']
    $38compare_op.16 = Ri_No > $const36.15   ['$38compare_op.16', '$const36.15', 'Ri_No']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None) ['$38compare_op.16', '$40pred', 'bool40']
    branch $40pred, 42, 46                   ['$40pred']
label 42:
    Ri_No = const(float, 2.0)                ['Ri_No']
    jump 46                                  []
label 46:
    $const48.1 = const(float, -1.0)          ['$const48.1']
    $50compare_op.2 = Ri_No < $const48.1     ['$50compare_op.2', '$const48.1', 'Ri_No']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None) ['$50compare_op.2', '$52pred', 'bool52']
    branch $52pred, 54, 58                   ['$52pred']
label 54:
    Ri_No = const(float, -1.0)               ['Ri_No']
    jump 58                                  []
label 58:
    $const60.1 = const(float, 0.0)           ['$const60.1']
    $62compare_op.2 = Ri_No < $const60.1     ['$62compare_op.2', '$const60.1', 'Ri_No']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 98                   ['$64pred']
label 66:
    $const68.1 = const(float, -0.01)         ['$const68.1']
    $70compare_op.2 = Ri_No >= $const68.1    ['$70compare_op.2', '$const68.1', 'Ri_No']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 80                   ['$72pred']
label 74:
    Ri_fxn = const(float, 1.0)               ['Ri_fxn']
    jump 128                                 []
label 80:
    $const80.0 = const(float, 1.0)           ['$const80.0']
    $const82.1 = const(float, 22.0)          ['$const82.1']
    $86binary_multiply.3 = $const82.1 * Ri_No ['$86binary_multiply.3', '$const82.1', 'Ri_No']
    $88binary_subtract.4 = $const80.0 - $86binary_multiply.3 ['$86binary_multiply.3', '$88binary_subtract.4', '$const80.0']
    $const90.5 = const(float, 0.8)           ['$const90.5']
    Ri_fxn = $88binary_subtract.4 ** $const90.5 ['$88binary_subtract.4', '$const90.5', 'Ri_fxn']
    jump 128                                 []
label 98:
    $const100.1 = const(float, 0.01)         ['$const100.1']
    $102compare_op.2 = Ri_No <= $const100.1  ['$102compare_op.2', '$const100.1', 'Ri_No']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None) ['$102compare_op.2', '$104pred', 'bool104']
    branch $104pred, 106, 112                ['$104pred']
label 106:
    Ri_fxn = const(float, 1.0)               ['Ri_fxn']
    jump 128                                 []
label 112:
    $const112.0 = const(float, 1.0)          ['$const112.0']
    $const114.1 = const(float, 34.0)         ['$const114.1']
    $118binary_multiply.3 = $const114.1 * Ri_No ['$118binary_multiply.3', '$const114.1', 'Ri_No']
    $120binary_add.4 = $const112.0 + $118binary_multiply.3 ['$118binary_multiply.3', '$120binary_add.4', '$const112.0']
    $const122.5 = const(float, -0.8)         ['$const122.5']
    Ri_fxn = $120binary_add.4 ** $const122.5 ['$120binary_add.4', '$const122.5', 'Ri_fxn']
    jump 128                                 []
label 128:
    $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)]) ['$132build_tuple.2', 'Ri_No', 'Ri_fxn']
    $134return_value.3 = cast(value=$132build_tuple.2) ['$132build_tuple.2', '$134return_value.3']
    return $134return_value.3                ['$134return_value.3']

DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 0
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2022-12-09 16:53:28,785: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2022-12-09 16:53:28,785: on stmt: density_air = arg(2, name=density_air)
DEBUG    2022-12-09 16:53:28,785: on stmt: gravity = arg(3, name=gravity)
DEBUG    2022-12-09 16:53:28,785: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2022-12-09 16:53:28,785: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2022-12-09 16:53:28,785: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2022-12-09 16:53:28,785: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2022-12-09 16:53:28,785: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2022-12-09 16:53:28,785: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2022-12-09 16:53:28,785: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2022-12-09 16:53:28,785: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,785: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,785: on stmt: branch $40pred, 42, 46
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 42
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: Ri_No = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: jump 46
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 46
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2022-12-09 16:53:28,785: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,785: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,785: on stmt: branch $52pred, 54, 58
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 54
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: Ri_No = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: jump 58
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 58
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2022-12-09 16:53:28,785: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,785: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,785: on stmt: branch $64pred, 66, 98
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 66
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2022-12-09 16:53:28,785: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2022-12-09 16:53:28,785: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,785: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,785: on stmt: branch $72pred, 74, 80
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 74
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 80
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2022-12-09 16:53:28,785: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2022-12-09 16:53:28,785: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2022-12-09 16:53:28,785: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2022-12-09 16:53:28,785: on stmt: Ri_fxn = $88binary_subtract.4 ** $const90.5
DEBUG    2022-12-09 16:53:28,785: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 98
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,785: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2022-12-09 16:53:28,785: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2022-12-09 16:53:28,785: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,785: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,785: on stmt: branch $104pred, 106, 112
DEBUG    2022-12-09 16:53:28,785: ==== SSA block analysis pass on 106
DEBUG    2022-12-09 16:53:28,785: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,791: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,791: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,791: ==== SSA block analysis pass on 112
DEBUG    2022-12-09 16:53:28,791: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,791: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,791: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2022-12-09 16:53:28,791: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2022-12-09 16:53:28,791: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2022-12-09 16:53:28,791: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2022-12-09 16:53:28,791: on stmt: Ri_fxn = $120binary_add.4 ** $const122.5
DEBUG    2022-12-09 16:53:28,791: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,791: ==== SSA block analysis pass on 128
DEBUG    2022-12-09 16:53:28,791: Running <numba.core.ssa._GatherDefsHandler object at 0x0000024C8C487670>
DEBUG    2022-12-09 16:53:28,791: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)])
DEBUG    2022-12-09 16:53:28,791: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2022-12-09 16:53:28,791: on stmt: return $134return_value.3
DEBUG    2022-12-09 16:53:28,791: defs defaultdict(<class 'list'>,
            {'$102compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C5EDCD0>],
             '$104pred': [<numba.core.ir.Assign object at 0x0000024C8C5EDD60>],
             '$118binary_multiply.3': [<numba.core.ir.Assign object at 0x0000024C8C5E8910>],
             '$120binary_add.4': [<numba.core.ir.Assign object at 0x0000024C8C5E83A0>],
             '$12binary_subtract.4': [<numba.core.ir.Assign object at 0x0000024C8C5887C0>],
             '$132build_tuple.2': [<numba.core.ir.Assign object at 0x0000024C8C592F70>],
             '$134return_value.3': [<numba.core.ir.Assign object at 0x0000024C8C592BB0>],
             '$14binary_multiply.5': [<numba.core.ir.Assign object at 0x0000024C8C5880A0>],
             '$18binary_multiply.7': [<numba.core.ir.Assign object at 0x0000024C8C58F220>],
             '$26binary_power.11': [<numba.core.ir.Assign object at 0x0000024C8C58F1C0>],
             '$28binary_multiply.12': [<numba.core.ir.Assign object at 0x0000024C8C58F3A0>],
             '$38compare_op.16': [<numba.core.ir.Assign object at 0x0000024C8C4C4250>],
             '$40pred': [<numba.core.ir.Assign object at 0x0000024C8C4C4400>],
             '$50compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C4C4D60>],
             '$52pred': [<numba.core.ir.Assign object at 0x0000024C8C4C4580>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C260FA0>],
             '$64pred': [<numba.core.ir.Assign object at 0x0000024C8C260F70>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x0000024C8C260370>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000024C8C1DAD30>],
             '$86binary_multiply.3': [<numba.core.ir.Assign object at 0x0000024C8C61B3A0>],
             '$88binary_subtract.4': [<numba.core.ir.Assign object at 0x0000024C8C5E9F40>],
             '$const100.1': [<numba.core.ir.Assign object at 0x0000024C8C5ED100>],
             '$const112.0': [<numba.core.ir.Assign object at 0x0000024C8C5E8A60>],
             '$const114.1': [<numba.core.ir.Assign object at 0x0000024C8C5E85E0>],
             '$const122.5': [<numba.core.ir.Assign object at 0x0000024C8C5E8550>],
             '$const16.6': [<numba.core.ir.Assign object at 0x0000024C8C588FA0>],
             '$const24.10': [<numba.core.ir.Assign object at 0x0000024C8C58FD30>],
             '$const36.15': [<numba.core.ir.Assign object at 0x0000024C8C4C4AC0>],
             '$const48.1': [<numba.core.ir.Assign object at 0x0000024C8C4C4430>],
             '$const60.1': [<numba.core.ir.Assign object at 0x0000024C8C4E2430>],
             '$const68.1': [<numba.core.ir.Assign object at 0x0000024C8C260B80>],
             '$const80.0': [<numba.core.ir.Assign object at 0x0000024C8C1DAF40>],
             '$const82.1': [<numba.core.ir.Assign object at 0x0000024C8C61B400>],
             '$const90.5': [<numba.core.ir.Assign object at 0x0000024C8C5E9EB0>],
             'Ri_No': [<numba.core.ir.Assign object at 0x0000024C8C58FC70>,
                       <numba.core.ir.Assign object at 0x0000024C8C58F5B0>,
                       <numba.core.ir.Assign object at 0x0000024C8C4E2790>],
             'Ri_fxn': [<numba.core.ir.Assign object at 0x0000024C8C602E20>,
                        <numba.core.ir.Assign object at 0x0000024C8C1DA700>,
                        <numba.core.ir.Assign object at 0x0000024C8C5ED6D0>,
                        <numba.core.ir.Assign object at 0x0000024C8C5E8130>,
                        <numba.core.ir.Assign object at 0x0000024C8C5E8EB0>],
             'bool104': [<numba.core.ir.Assign object at 0x0000024C8C5ED3D0>],
             'bool40': [<numba.core.ir.Assign object at 0x0000024C8C4C4820>],
             'bool52': [<numba.core.ir.Assign object at 0x0000024C8C4C4EE0>],
             'bool64': [<numba.core.ir.Assign object at 0x0000024C8C260DF0>],
             'bool72': [<numba.core.ir.Assign object at 0x0000024C8C1DADF0>],
             'density_air': [<numba.core.ir.Assign object at 0x0000024C8C3C7520>],
             'density_air_sat': [<numba.core.ir.Assign object at 0x0000024C8C3C76D0>],
             'gravity': [<numba.core.ir.Assign object at 0x0000024C8C27C040>],
             'wind_speed': [<numba.core.ir.Assign object at 0x0000024C8C352B20>]})
DEBUG    2022-12-09 16:53:28,791: SSA violators {'Ri_fxn', 'Ri_No'}
DEBUG    2022-12-09 16:53:28,791: Fix SSA violator on var Ri_fxn
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2022-12-09 16:53:28,793: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2022-12-09 16:53:28,793: on stmt: density_air = arg(2, name=density_air)
DEBUG    2022-12-09 16:53:28,793: on stmt: gravity = arg(3, name=gravity)
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,793: first assign: Ri_fxn
DEBUG    2022-12-09 16:53:28,793: replaced with: Ri_fxn = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2022-12-09 16:53:28,793: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2022-12-09 16:53:28,793: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2022-12-09 16:53:28,793: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2022-12-09 16:53:28,793: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2022-12-09 16:53:28,793: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2022-12-09 16:53:28,793: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,793: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,793: on stmt: branch $40pred, 42, 46
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 42
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_No = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: jump 46
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 46
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2022-12-09 16:53:28,793: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,793: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,793: on stmt: branch $52pred, 54, 58
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 54
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_No = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: jump 58
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 58
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2022-12-09 16:53:28,793: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,793: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,793: on stmt: branch $64pred, 66, 98
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 66
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2022-12-09 16:53:28,793: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2022-12-09 16:53:28,793: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,793: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,793: on stmt: branch $72pred, 74, 80
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 74
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,793: replaced with: Ri_fxn.1 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 80
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2022-12-09 16:53:28,793: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2022-12-09 16:53:28,793: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_fxn = $88binary_subtract.4 ** $const90.5
DEBUG    2022-12-09 16:53:28,793: replaced with: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2022-12-09 16:53:28,793: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2022-12-09 16:53:28,793: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2022-12-09 16:53:28,793: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,793: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,793: on stmt: branch $104pred, 106, 112
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,793: replaced with: Ri_fxn.3 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 112
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2022-12-09 16:53:28,793: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2022-12-09 16:53:28,793: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_fxn = $120binary_add.4 ** $const122.5
DEBUG    2022-12-09 16:53:28,793: replaced with: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2022-12-09 16:53:28,793: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 128
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)])
DEBUG    2022-12-09 16:53:28,793: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2022-12-09 16:53:28,793: on stmt: return $134return_value.3
DEBUG    2022-12-09 16:53:28,793: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024C8C60EDC0>],
             74: [<numba.core.ir.Assign object at 0x0000024C8C4AE760>],
             80: [<numba.core.ir.Assign object at 0x0000024C8C4AE370>],
             106: [<numba.core.ir.Assign object at 0x0000024C8C2F8100>],
             112: [<numba.core.ir.Assign object at 0x0000024C8C67D5E0>]})
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2022-12-09 16:53:28,793: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2022-12-09 16:53:28,793: on stmt: density_air = arg(2, name=density_air)
DEBUG    2022-12-09 16:53:28,793: on stmt: gravity = arg(3, name=gravity)
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2022-12-09 16:53:28,793: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2022-12-09 16:53:28,793: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2022-12-09 16:53:28,793: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2022-12-09 16:53:28,793: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2022-12-09 16:53:28,793: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2022-12-09 16:53:28,793: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,793: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,793: on stmt: branch $40pred, 42, 46
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 42
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: Ri_No = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: jump 46
DEBUG    2022-12-09 16:53:28,793: ==== SSA block rewrite pass on 46
DEBUG    2022-12-09 16:53:28,793: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,793: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,793: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2022-12-09 16:53:28,801: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,801: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,801: on stmt: branch $52pred, 54, 58
DEBUG    2022-12-09 16:53:28,801: ==== SSA block rewrite pass on 54
DEBUG    2022-12-09 16:53:28,801: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,801: on stmt: Ri_No = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,801: on stmt: jump 58
DEBUG    2022-12-09 16:53:28,801: ==== SSA block rewrite pass on 58
DEBUG    2022-12-09 16:53:28,801: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,801: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,801: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2022-12-09 16:53:28,801: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,801: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,801: on stmt: branch $64pred, 66, 98
DEBUG    2022-12-09 16:53:28,801: ==== SSA block rewrite pass on 66
DEBUG    2022-12-09 16:53:28,801: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,801: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2022-12-09 16:53:28,801: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2022-12-09 16:53:28,801: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,801: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,801: on stmt: branch $72pred, 74, 80
DEBUG    2022-12-09 16:53:28,801: ==== SSA block rewrite pass on 74
DEBUG    2022-12-09 16:53:28,801: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_fxn.1 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 80
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,803: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2022-12-09 16:53:28,803: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2022-12-09 16:53:28,803: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2022-12-09 16:53:28,803: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,803: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2022-12-09 16:53:28,803: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2022-12-09 16:53:28,803: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,803: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,803: on stmt: branch $104pred, 106, 112
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_fxn.3 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 112
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,803: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2022-12-09 16:53:28,803: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2022-12-09 16:53:28,803: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2022-12-09 16:53:28,803: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 128
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C436FD0>
DEBUG    2022-12-09 16:53:28,803: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)])
DEBUG    2022-12-09 16:53:28,803: find_def var='Ri_fxn' stmt=$132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)])
DEBUG    2022-12-09 16:53:28,803: find_def_from_top label 128
DEBUG    2022-12-09 16:53:28,803: insert phi node Ri_fxn.5 = phi(incoming_values=[], incoming_blocks=[]) at 128
DEBUG    2022-12-09 16:53:28,803: find_def_from_bottom label 80
DEBUG    2022-12-09 16:53:28,803: incoming_def Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2022-12-09 16:53:28,803: find_def_from_bottom label 74
DEBUG    2022-12-09 16:53:28,803: incoming_def Ri_fxn.1 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,803: find_def_from_bottom label 112
DEBUG    2022-12-09 16:53:28,803: incoming_def Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2022-12-09 16:53:28,803: find_def_from_bottom label 106
DEBUG    2022-12-09 16:53:28,803: incoming_def Ri_fxn.3 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,803: replaced with: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2022-12-09 16:53:28,803: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2022-12-09 16:53:28,803: on stmt: return $134return_value.3
DEBUG    2022-12-09 16:53:28,803: Fix SSA violator on var Ri_No
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,803: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2022-12-09 16:53:28,803: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2022-12-09 16:53:28,803: on stmt: density_air = arg(2, name=density_air)
DEBUG    2022-12-09 16:53:28,803: on stmt: gravity = arg(3, name=gravity)
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2022-12-09 16:53:28,803: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2022-12-09 16:53:28,803: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2022-12-09 16:53:28,803: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2022-12-09 16:53:28,803: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2022-12-09 16:53:28,803: first assign: Ri_No
DEBUG    2022-12-09 16:53:28,803: replaced with: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2022-12-09 16:53:28,803: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2022-12-09 16:53:28,803: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,803: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,803: on stmt: branch $40pred, 42, 46
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 42
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_No = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,803: replaced with: Ri_No.1 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: jump 46
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 46
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,803: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2022-12-09 16:53:28,803: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,803: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,803: on stmt: branch $52pred, 54, 58
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 54
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_No = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,803: replaced with: Ri_No.2 = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: jump 58
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 58
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,803: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2022-12-09 16:53:28,803: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,803: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,803: on stmt: branch $64pred, 66, 98
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 66
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,803: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2022-12-09 16:53:28,803: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2022-12-09 16:53:28,803: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,803: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,803: on stmt: branch $72pred, 74, 80
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 74
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_fxn.1 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 80
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,803: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2022-12-09 16:53:28,803: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2022-12-09 16:53:28,803: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2022-12-09 16:53:28,803: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2022-12-09 16:53:28,803: on stmt: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2022-12-09 16:53:28,803: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,803: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,803: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,811: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2022-12-09 16:53:28,811: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2022-12-09 16:53:28,811: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,811: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,811: on stmt: branch $104pred, 106, 112
DEBUG    2022-12-09 16:53:28,811: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,811: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,811: on stmt: Ri_fxn.3 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,811: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,811: ==== SSA block rewrite pass on 112
DEBUG    2022-12-09 16:53:28,811: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,811: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,811: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2022-12-09 16:53:28,811: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2022-12-09 16:53:28,811: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2022-12-09 16:53:28,811: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2022-12-09 16:53:28,811: on stmt: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2022-12-09 16:53:28,811: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,811: ==== SSA block rewrite pass on 128
DEBUG    2022-12-09 16:53:28,811: Running <numba.core.ssa._FreshVarHandler object at 0x0000024C8C2F8A30>
DEBUG    2022-12-09 16:53:28,811: on stmt: Ri_fxn.5 = phi(incoming_values=[Var(Ri_fxn.2, water_quality_functions.py:202), Var(Ri_fxn.1, water_quality_functions.py:199), Var(Ri_fxn.4, water_quality_functions.py:209), Var(Ri_fxn.3, water_quality_functions.py:206)], incoming_blocks=[80, 74, 112, 106])
DEBUG    2022-12-09 16:53:28,811: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2022-12-09 16:53:28,811: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2022-12-09 16:53:28,811: on stmt: return $134return_value.3
DEBUG    2022-12-09 16:53:28,811: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024C8C4AED90>],
             42: [<numba.core.ir.Assign object at 0x0000024C8C4AE4C0>],
             54: [<numba.core.ir.Assign object at 0x0000024C8C60EFD0>]})
DEBUG    2022-12-09 16:53:28,811: ==== SSA block rewrite pass on 0
DEBUG    2022-12-09 16:53:28,811: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,811: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2022-12-09 16:53:28,811: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2022-12-09 16:53:28,811: on stmt: density_air = arg(2, name=density_air)
DEBUG    2022-12-09 16:53:28,811: on stmt: gravity = arg(3, name=gravity)
DEBUG    2022-12-09 16:53:28,811: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,811: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2022-12-09 16:53:28,811: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2022-12-09 16:53:28,811: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,811: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2022-12-09 16:53:28,811: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,811: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2022-12-09 16:53:28,813: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2022-12-09 16:53:28,813: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2022-12-09 16:53:28,813: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2022-12-09 16:53:28,813: find_def var='Ri_No' stmt=$38compare_op.16 = Ri_No > $const36.15
DEBUG    2022-12-09 16:53:28,813: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,813: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,813: on stmt: branch $40pred, 42, 46
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 42
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: Ri_No.1 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: jump 46
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 46
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2022-12-09 16:53:28,813: find_def var='Ri_No' stmt=$50compare_op.2 = Ri_No < $const48.1
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 46
DEBUG    2022-12-09 16:53:28,813: insert phi node Ri_No.3 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 0
DEBUG    2022-12-09 16:53:28,813: incoming_def Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 42
DEBUG    2022-12-09 16:53:28,813: incoming_def Ri_No.1 = const(float, 2.0)
DEBUG    2022-12-09 16:53:28,813: replaced with: $50compare_op.2 = Ri_No.3 < $const48.1
DEBUG    2022-12-09 16:53:28,813: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,813: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,813: on stmt: branch $52pred, 54, 58
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 54
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: Ri_No.2 = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: jump 58
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 58
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2022-12-09 16:53:28,813: find_def var='Ri_No' stmt=$62compare_op.2 = Ri_No < $const60.1
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 58
DEBUG    2022-12-09 16:53:28,813: insert phi node Ri_No.4 = phi(incoming_values=[], incoming_blocks=[]) at 58
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 54
DEBUG    2022-12-09 16:53:28,813: incoming_def Ri_No.2 = const(float, -1.0)
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 46
DEBUG    2022-12-09 16:53:28,813: incoming_def Ri_No.3 = phi(incoming_values=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_No.1, water_quality_functions.py:192)], incoming_blocks=[0, 42])
DEBUG    2022-12-09 16:53:28,813: replaced with: $62compare_op.2 = Ri_No.4 < $const60.1
DEBUG    2022-12-09 16:53:28,813: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,813: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,813: on stmt: branch $64pred, 66, 98
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 66
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2022-12-09 16:53:28,813: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2022-12-09 16:53:28,813: find_def var='Ri_No' stmt=$70compare_op.2 = Ri_No >= $const68.1
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 66
DEBUG    2022-12-09 16:53:28,813: idom 58 from label 66
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 58
DEBUG    2022-12-09 16:53:28,813: replaced with: $70compare_op.2 = Ri_No.4 >= $const68.1
DEBUG    2022-12-09 16:53:28,813: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,813: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,813: on stmt: branch $72pred, 74, 80
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 74
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: Ri_fxn.1 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 80
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2022-12-09 16:53:28,813: find_def var='Ri_No' stmt=$86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 80
DEBUG    2022-12-09 16:53:28,813: idom 66 from label 80
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 66
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 66
DEBUG    2022-12-09 16:53:28,813: idom 58 from label 66
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 58
DEBUG    2022-12-09 16:53:28,813: replaced with: $86binary_multiply.3 = $const82.1 * Ri_No.4
DEBUG    2022-12-09 16:53:28,813: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2022-12-09 16:53:28,813: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2022-12-09 16:53:28,813: on stmt: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2022-12-09 16:53:28,813: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 98
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2022-12-09 16:53:28,813: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2022-12-09 16:53:28,813: find_def var='Ri_No' stmt=$102compare_op.2 = Ri_No <= $const100.1
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 98
DEBUG    2022-12-09 16:53:28,813: idom 58 from label 98
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 58
DEBUG    2022-12-09 16:53:28,813: replaced with: $102compare_op.2 = Ri_No.4 <= $const100.1
DEBUG    2022-12-09 16:53:28,813: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2022-12-09 16:53:28,813: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2022-12-09 16:53:28,813: on stmt: branch $104pred, 106, 112
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 106
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: Ri_fxn.3 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 112
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2022-12-09 16:53:28,813: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2022-12-09 16:53:28,813: find_def var='Ri_No' stmt=$118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 112
DEBUG    2022-12-09 16:53:28,813: idom 98 from label 112
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 98
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 98
DEBUG    2022-12-09 16:53:28,813: idom 58 from label 98
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 58
DEBUG    2022-12-09 16:53:28,813: replaced with: $118binary_multiply.3 = $const114.1 * Ri_No.4
DEBUG    2022-12-09 16:53:28,813: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2022-12-09 16:53:28,813: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2022-12-09 16:53:28,813: on stmt: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2022-12-09 16:53:28,813: on stmt: jump 128
DEBUG    2022-12-09 16:53:28,813: ==== SSA block rewrite pass on 128
DEBUG    2022-12-09 16:53:28,813: Running <numba.core.ssa._FixSSAVars object at 0x0000024C8C2F5520>
DEBUG    2022-12-09 16:53:28,813: on stmt: Ri_fxn.5 = phi(incoming_values=[Var(Ri_fxn.2, water_quality_functions.py:202), Var(Ri_fxn.1, water_quality_functions.py:199), Var(Ri_fxn.4, water_quality_functions.py:209), Var(Ri_fxn.3, water_quality_functions.py:206)], incoming_blocks=[80, 74, 112, 106])
DEBUG    2022-12-09 16:53:28,813: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2022-12-09 16:53:28,813: find_def var='Ri_No' stmt=$132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2022-12-09 16:53:28,813: find_def_from_top label 128
DEBUG    2022-12-09 16:53:28,813: idom 58 from label 128
DEBUG    2022-12-09 16:53:28,813: find_def_from_bottom label 58
DEBUG    2022-12-09 16:53:28,813: replaced with: $132build_tuple.2 = build_tuple(items=[Var(Ri_No.4, water_quality_functions.py:196), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2022-12-09 16:53:28,813: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2022-12-09 16:53:28,813: on stmt: return $134return_value.3
