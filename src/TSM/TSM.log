DEBUG    2023-08-19 15:20:58,184: bytecode dump:
>          0	NOP(arg=None, lineno=23)
           2	LOAD_GLOBAL(arg=0, lineno=23)
           4	LOAD_METHOD(arg=1, lineno=23)
           6	LOAD_GLOBAL(arg=0, lineno=23)
           8	LOAD_METHOD(arg=2, lineno=23)
          10	LOAD_FAST(arg=0, lineno=23)
          12	LOAD_FAST(arg=1, lineno=23)
          14	CALL_METHOD(arg=2, lineno=23)
          16	CALL_METHOD(arg=1, lineno=23)
          18	RETURN_VALUE(arg=None, lineno=23)
DEBUG    2023-08-19 15:20:58,184: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,184: stack: []
DEBUG    2023-08-19 15:20:58,185: dispatch pc=0, inst=NOP(arg=None, lineno=23)
DEBUG    2023-08-19 15:20:58,185: stack []
DEBUG    2023-08-19 15:20:58,185: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=23)
DEBUG    2023-08-19 15:20:58,185: stack []
DEBUG    2023-08-19 15:20:58,185: dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=23)
DEBUG    2023-08-19 15:20:58,185: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:58,185: dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=23)
DEBUG    2023-08-19 15:20:58,185: stack ['$4load_method.1']
DEBUG    2023-08-19 15:20:58,185: dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=23)
DEBUG    2023-08-19 15:20:58,185: stack ['$4load_method.1', '$6load_global.2']
DEBUG    2023-08-19 15:20:58,185: dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=23)
DEBUG    2023-08-19 15:20:58,185: stack ['$4load_method.1', '$8load_method.3']
DEBUG    2023-08-19 15:20:58,185: dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=23)
DEBUG    2023-08-19 15:20:58,186: stack ['$4load_method.1', '$8load_method.3', '$keyty10.4']
DEBUG    2023-08-19 15:20:58,186: dispatch pc=14, inst=CALL_METHOD(arg=2, lineno=23)
DEBUG    2023-08-19 15:20:58,186: stack ['$4load_method.1', '$8load_method.3', '$keyty10.4', '$valty12.5']
DEBUG    2023-08-19 15:20:58,186: dispatch pc=16, inst=CALL_METHOD(arg=1, lineno=23)
DEBUG    2023-08-19 15:20:58,186: stack ['$4load_method.1', '$14call_method.6']
DEBUG    2023-08-19 15:20:58,186: dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=23)
DEBUG    2023-08-19 15:20:58,186: stack ['$16call_method.7']
DEBUG    2023-08-19 15:20:58,186: end state. edges=[]
DEBUG    2023-08-19 15:20:58,186: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:58,186: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:58,186: defmap: {}
DEBUG    2023-08-19 15:20:58,186: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,187: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,187: keep phismap: {}
DEBUG    2023-08-19 15:20:58,187: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:58,187: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:58,187: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_method.3'}), (10, {'res': '$keyty10.4'}), (12, {'res': '$valty12.5'}), (14, {'func': '$8load_method.3', 'args': ['$keyty10.4', '$valty12.5'], 'res': '$14call_method.6'}), (16, {'func': '$4load_method.1', 'args': ['$14call_method.6'], 'res': '$16call_method.7'}), (18, {'retval': '$16call_method.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,187: label 0:
    keyty = arg(0, name=keyty)               ['keyty']
    valty = arg(1, name=valty)               ['valty']
    $2load_global.0 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=_as_meminfo) ['$2load_global.0', '$4load_method.1']
    $6load_global.2 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>) ['$6load_global.2']
    $8load_method.3 = getattr(value=$6load_global.2, attr=new_dict) ['$6load_global.2', '$8load_method.3']
    $14call_method.6 = call $8load_method.3(keyty, valty, func=$8load_method.3, args=[Var(keyty, typeddict.py:23), Var(valty, typeddict.py:23)], kws=(), vararg=None, target=None) ['$14call_method.6', '$8load_method.3', 'keyty', 'valty']
    $16call_method.7 = call $4load_method.1($14call_method.6, func=$4load_method.1, args=[Var($14call_method.6, typeddict.py:23)], kws=(), vararg=None, target=None) ['$14call_method.6', '$16call_method.7', '$4load_method.1']
    $18return_value.8 = cast(value=$16call_method.7) ['$16call_method.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

DEBUG    2023-08-19 15:20:58,194: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:58,194: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3307C610>
DEBUG    2023-08-19 15:20:58,194: on stmt: keyty = arg(0, name=keyty)
DEBUG    2023-08-19 15:20:58,194: on stmt: valty = arg(1, name=valty)
DEBUG    2023-08-19 15:20:58,194: on stmt: $2load_global.0 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>)
DEBUG    2023-08-19 15:20:58,195: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=_as_meminfo)
DEBUG    2023-08-19 15:20:58,195: on stmt: $6load_global.2 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>)
DEBUG    2023-08-19 15:20:58,195: on stmt: $8load_method.3 = getattr(value=$6load_global.2, attr=new_dict)
DEBUG    2023-08-19 15:20:58,195: on stmt: $14call_method.6 = call $8load_method.3(keyty, valty, func=$8load_method.3, args=[Var(keyty, typeddict.py:23), Var(valty, typeddict.py:23)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,195: on stmt: $16call_method.7 = call $4load_method.1($14call_method.6, func=$4load_method.1, args=[Var($14call_method.6, typeddict.py:23)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,195: on stmt: $18return_value.8 = cast(value=$16call_method.7)
DEBUG    2023-08-19 15:20:58,195: on stmt: return $18return_value.8
DEBUG    2023-08-19 15:20:58,195: defs defaultdict(<class 'list'>,
            {'$14call_method.6': [<numba.core.ir.Assign object at 0x0000025F33066940>],
             '$16call_method.7': [<numba.core.ir.Assign object at 0x0000025F33066AC0>],
             '$18return_value.8': [<numba.core.ir.Assign object at 0x0000025F33066BB0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F33066070>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000025F330661F0>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x0000025F33066370>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x0000025F330664F0>],
             'keyty': [<numba.core.ir.Assign object at 0x0000025F3304D130>],
             'valty': [<numba.core.ir.Assign object at 0x0000025F3304DEB0>]})
DEBUG    2023-08-19 15:20:58,195: SSA violators set()
DEBUG    2023-08-19 15:20:58,201: bytecode dump:
>          0	NOP(arg=None, lineno=653)
           2	LOAD_GLOBAL(arg=0, lineno=653)
           4	LOAD_DEREF(arg=0, lineno=653)
           6	LOAD_DEREF(arg=1, lineno=653)
           8	CALL_FUNCTION(arg=2, lineno=653)
          10	STORE_FAST(arg=2, lineno=653)
          12	LOAD_GLOBAL(arg=1, lineno=654)
          14	LOAD_FAST(arg=2, lineno=654)
          16	LOAD_DEREF(arg=0, lineno=654)
          18	LOAD_DEREF(arg=1, lineno=654)
          20	CALL_FUNCTION(arg=3, lineno=654)
          22	POP_TOP(arg=None, lineno=654)
          24	LOAD_GLOBAL(arg=2, lineno=655)
          26	LOAD_DEREF(arg=0, lineno=655)
          28	LOAD_DEREF(arg=1, lineno=655)
          30	LOAD_FAST(arg=2, lineno=655)
          32	CALL_FUNCTION(arg=3, lineno=655)
          34	STORE_FAST(arg=3, lineno=655)
          36	LOAD_FAST(arg=3, lineno=656)
          38	RETURN_VALUE(arg=None, lineno=656)
DEBUG    2023-08-19 15:20:58,201: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,201: stack: []
DEBUG    2023-08-19 15:20:58,201: dispatch pc=0, inst=NOP(arg=None, lineno=653)
DEBUG    2023-08-19 15:20:58,201: stack []
DEBUG    2023-08-19 15:20:58,201: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=653)
DEBUG    2023-08-19 15:20:58,201: stack []
DEBUG    2023-08-19 15:20:58,201: dispatch pc=4, inst=LOAD_DEREF(arg=0, lineno=653)
DEBUG    2023-08-19 15:20:58,201: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:58,201: dispatch pc=6, inst=LOAD_DEREF(arg=1, lineno=653)
DEBUG    2023-08-19 15:20:58,202: stack ['$2load_global.0', '$4load_deref.1']
DEBUG    2023-08-19 15:20:58,202: dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=653)
DEBUG    2023-08-19 15:20:58,202: stack ['$2load_global.0', '$4load_deref.1', '$6load_deref.2']
DEBUG    2023-08-19 15:20:58,202: dispatch pc=10, inst=STORE_FAST(arg=2, lineno=653)
DEBUG    2023-08-19 15:20:58,202: stack ['$8call_function.3']
DEBUG    2023-08-19 15:20:58,202: dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=654)
DEBUG    2023-08-19 15:20:58,202: stack []
DEBUG    2023-08-19 15:20:58,202: dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=654)
DEBUG    2023-08-19 15:20:58,202: stack ['$12load_global.4']
DEBUG    2023-08-19 15:20:58,202: dispatch pc=16, inst=LOAD_DEREF(arg=0, lineno=654)
DEBUG    2023-08-19 15:20:58,202: stack ['$12load_global.4', '$dp14.5']
DEBUG    2023-08-19 15:20:58,202: dispatch pc=18, inst=LOAD_DEREF(arg=1, lineno=654)
DEBUG    2023-08-19 15:20:58,202: stack ['$12load_global.4', '$dp14.5', '$16load_deref.6']
DEBUG    2023-08-19 15:20:58,203: dispatch pc=20, inst=CALL_FUNCTION(arg=3, lineno=654)
DEBUG    2023-08-19 15:20:58,203: stack ['$12load_global.4', '$dp14.5', '$16load_deref.6', '$18load_deref.7']
DEBUG    2023-08-19 15:20:58,203: dispatch pc=22, inst=POP_TOP(arg=None, lineno=654)
DEBUG    2023-08-19 15:20:58,203: stack ['$20call_function.8']
DEBUG    2023-08-19 15:20:58,203: dispatch pc=24, inst=LOAD_GLOBAL(arg=2, lineno=655)
DEBUG    2023-08-19 15:20:58,203: stack []
DEBUG    2023-08-19 15:20:58,203: dispatch pc=26, inst=LOAD_DEREF(arg=0, lineno=655)
DEBUG    2023-08-19 15:20:58,203: stack ['$24load_global.9']
DEBUG    2023-08-19 15:20:58,203: dispatch pc=28, inst=LOAD_DEREF(arg=1, lineno=655)
DEBUG    2023-08-19 15:20:58,203: stack ['$24load_global.9', '$26load_deref.10']
DEBUG    2023-08-19 15:20:58,203: dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=655)
DEBUG    2023-08-19 15:20:58,203: stack ['$24load_global.9', '$26load_deref.10', '$28load_deref.11']
DEBUG    2023-08-19 15:20:58,203: dispatch pc=32, inst=CALL_FUNCTION(arg=3, lineno=655)
DEBUG    2023-08-19 15:20:58,204: stack ['$24load_global.9', '$26load_deref.10', '$28load_deref.11', '$dp30.12']
DEBUG    2023-08-19 15:20:58,204: dispatch pc=34, inst=STORE_FAST(arg=3, lineno=655)
DEBUG    2023-08-19 15:20:58,204: stack ['$32call_function.13']
DEBUG    2023-08-19 15:20:58,204: dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=656)
DEBUG    2023-08-19 15:20:58,204: stack []
DEBUG    2023-08-19 15:20:58,204: dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=656)
DEBUG    2023-08-19 15:20:58,204: stack ['$d36.14']
DEBUG    2023-08-19 15:20:58,204: end state. edges=[]
DEBUG    2023-08-19 15:20:58,204: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:58,204: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:58,204: defmap: {}
DEBUG    2023-08-19 15:20:58,204: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,205: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,205: keep phismap: {}
DEBUG    2023-08-19 15:20:58,205: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:58,205: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:58,205: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_deref.1'}), (6, {'res': '$6load_deref.2'}), (8, {'func': '$2load_global.0', 'args': ['$4load_deref.1', '$6load_deref.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$dp14.5'}), (16, {'res': '$16load_deref.6'}), (18, {'res': '$18load_deref.7'}), (20, {'func': '$12load_global.4', 'args': ['$dp14.5', '$16load_deref.6', '$18load_deref.7'], 'res': '$20call_function.8'}), (24, {'res': '$24load_global.9'}), (26, {'res': '$26load_deref.10'}), (28, {'res': '$28load_deref.11'}), (30, {'res': '$dp30.12'}), (32, {'func': '$24load_global.9', 'args': ['$26load_deref.10', '$28load_deref.11', '$dp30.12'], 'res': '$32call_function.13'}), (34, {'value': '$32call_function.13'}), (36, {'res': '$d36.14'}), (38, {'retval': '$d36.14', 'castval': '$38return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,206: label 0:
    key = arg(0, name=key)                   ['key']
    value = arg(1, name=value)               ['value']
    $2load_global.0 = global(_dict_new_minsize: <intrinsic _dict_new_minsize>) ['$2load_global.0']
    $4load_deref.1 = freevar(keyty: typeref[unicode_type]) ['$4load_deref.1']
    $6load_deref.2 = freevar(valty: class(float64)) ['$6load_deref.2']
    dp = call $2load_global.0($4load_deref.1, $6load_deref.2, func=$2load_global.0, args=[Var($4load_deref.1, dictobject.py:653), Var($6load_deref.2, dictobject.py:653)], kws=(), vararg=None, target=None) ['$2load_global.0', '$4load_deref.1', '$6load_deref.2', 'dp']
    $12load_global.4 = global(_dict_set_method_table: <intrinsic _dict_set_method_table>) ['$12load_global.4']
    $16load_deref.6 = freevar(keyty: typeref[unicode_type]) ['$16load_deref.6']
    $18load_deref.7 = freevar(valty: class(float64)) ['$18load_deref.7']
    $20call_function.8 = call $12load_global.4(dp, $16load_deref.6, $18load_deref.7, func=$12load_global.4, args=[Var(dp, dictobject.py:653), Var($16load_deref.6, dictobject.py:654), Var($18load_deref.7, dictobject.py:654)], kws=(), vararg=None, target=None) ['$12load_global.4', '$16load_deref.6', '$18load_deref.7', '$20call_function.8', 'dp']
    $24load_global.9 = global(_make_dict: <intrinsic _make_dict>) ['$24load_global.9']
    $26load_deref.10 = freevar(keyty: typeref[unicode_type]) ['$26load_deref.10']
    $28load_deref.11 = freevar(valty: class(float64)) ['$28load_deref.11']
    d = call $24load_global.9($26load_deref.10, $28load_deref.11, dp, func=$24load_global.9, args=[Var($26load_deref.10, dictobject.py:655), Var($28load_deref.11, dictobject.py:655), Var(dp, dictobject.py:653)], kws=(), vararg=None, target=None) ['$24load_global.9', '$26load_deref.10', '$28load_deref.11', 'd', 'dp']
    $38return_value.15 = cast(value=d)       ['$38return_value.15', 'd']
    return $38return_value.15                ['$38return_value.15']

DEBUG    2023-08-19 15:20:58,208: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:58,208: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F330E9760>
DEBUG    2023-08-19 15:20:58,208: on stmt: key = arg(0, name=key)
DEBUG    2023-08-19 15:20:58,208: on stmt: value = arg(1, name=value)
DEBUG    2023-08-19 15:20:58,208: on stmt: $2load_global.0 = global(_dict_new_minsize: <intrinsic _dict_new_minsize>)
DEBUG    2023-08-19 15:20:58,208: on stmt: $4load_deref.1 = freevar(keyty: typeref[unicode_type])
DEBUG    2023-08-19 15:20:58,208: on stmt: $6load_deref.2 = freevar(valty: class(float64))
DEBUG    2023-08-19 15:20:58,208: on stmt: dp = call $2load_global.0($4load_deref.1, $6load_deref.2, func=$2load_global.0, args=[Var($4load_deref.1, dictobject.py:653), Var($6load_deref.2, dictobject.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,208: on stmt: $12load_global.4 = global(_dict_set_method_table: <intrinsic _dict_set_method_table>)
DEBUG    2023-08-19 15:20:58,208: on stmt: $16load_deref.6 = freevar(keyty: typeref[unicode_type])
DEBUG    2023-08-19 15:20:58,208: on stmt: $18load_deref.7 = freevar(valty: class(float64))
DEBUG    2023-08-19 15:20:58,208: on stmt: $20call_function.8 = call $12load_global.4(dp, $16load_deref.6, $18load_deref.7, func=$12load_global.4, args=[Var(dp, dictobject.py:653), Var($16load_deref.6, dictobject.py:654), Var($18load_deref.7, dictobject.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,208: on stmt: $24load_global.9 = global(_make_dict: <intrinsic _make_dict>)
DEBUG    2023-08-19 15:20:58,208: on stmt: $26load_deref.10 = freevar(keyty: typeref[unicode_type])
DEBUG    2023-08-19 15:20:58,208: on stmt: $28load_deref.11 = freevar(valty: class(float64))
DEBUG    2023-08-19 15:20:58,210: on stmt: d = call $24load_global.9($26load_deref.10, $28load_deref.11, dp, func=$24load_global.9, args=[Var($26load_deref.10, dictobject.py:655), Var($28load_deref.11, dictobject.py:655), Var(dp, dictobject.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,210: on stmt: $38return_value.15 = cast(value=d)
DEBUG    2023-08-19 15:20:58,210: on stmt: return $38return_value.15
DEBUG    2023-08-19 15:20:58,230: defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x0000025F330F0A90>],
             '$16load_deref.6': [<numba.core.ir.Assign object at 0x0000025F330F0D30>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x0000025F330F0EB0>],
             '$20call_function.8': [<numba.core.ir.Assign object at 0x0000025F330F50D0>],
             '$24load_global.9': [<numba.core.ir.Assign object at 0x0000025F330F51F0>],
             '$26load_deref.10': [<numba.core.ir.Assign object at 0x0000025F330F5370>],
             '$28load_deref.11': [<numba.core.ir.Assign object at 0x0000025F330F54F0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F330F0370>],
             '$38return_value.15': [<numba.core.ir.Assign object at 0x0000025F330F5B50>],
             '$4load_deref.1': [<numba.core.ir.Assign object at 0x0000025F330F04F0>],
             '$6load_deref.2': [<numba.core.ir.Assign object at 0x0000025F330F0670>],
             'd': [<numba.core.ir.Assign object at 0x0000025F330F57F0>],
             'dp': [<numba.core.ir.Assign object at 0x0000025F330F0850>],
             'key': [<numba.core.ir.Assign object at 0x0000025F330A6F10>],
             'value': [<numba.core.ir.Assign object at 0x0000025F330F01F0>]})
DEBUG    2023-08-19 15:20:58,230: SSA violators set()
DEBUG    2023-08-19 15:20:58,253: bytecode dump:
>          0	NOP(arg=None, lineno=468)
           2	LOAD_FAST(arg=0, lineno=468)
           4	LOAD_CONST(arg=0, lineno=468)
           6	IS_OP(arg=0, lineno=468)
           8	STORE_FAST(arg=2, lineno=468)
          10	LOAD_FAST(arg=1, lineno=469)
          12	LOAD_CONST(arg=0, lineno=469)
          14	IS_OP(arg=0, lineno=469)
          16	STORE_FAST(arg=3, lineno=469)
          18	LOAD_FAST(arg=2, lineno=470)
          20	POP_JUMP_IF_TRUE(arg=26, lineno=470)
          22	LOAD_FAST(arg=3, lineno=470)
          24	POP_JUMP_IF_FALSE(arg=42, lineno=470)
>         26	LOAD_FAST(arg=2, lineno=471)
          28	POP_JUMP_IF_FALSE(arg=38, lineno=471)
          30	LOAD_FAST(arg=3, lineno=471)
          32	POP_JUMP_IF_FALSE(arg=38, lineno=471)
          34	LOAD_CONST(arg=1, lineno=472)
          36	RETURN_VALUE(arg=None, lineno=472)
>         38	LOAD_CONST(arg=2, lineno=474)
          40	RETURN_VALUE(arg=None, lineno=474)
>         42	LOAD_GLOBAL(arg=0, lineno=476)
          44	LOAD_FAST(arg=0, lineno=476)
          46	CALL_FUNCTION(arg=1, lineno=476)
          48	STORE_FAST(arg=0, lineno=476)
          50	LOAD_GLOBAL(arg=0, lineno=477)
          52	LOAD_FAST(arg=1, lineno=477)
          54	CALL_FUNCTION(arg=1, lineno=477)
          56	STORE_FAST(arg=1, lineno=477)
          58	LOAD_GLOBAL(arg=1, lineno=478)
          60	LOAD_FAST(arg=0, lineno=478)
          62	CALL_FUNCTION(arg=1, lineno=478)
          64	LOAD_GLOBAL(arg=1, lineno=478)
          66	LOAD_FAST(arg=1, lineno=478)
          68	CALL_FUNCTION(arg=1, lineno=478)
          70	COMPARE_OP(arg=3, lineno=478)
          72	POP_JUMP_IF_FALSE(arg=78, lineno=478)
          74	LOAD_CONST(arg=2, lineno=479)
          76	RETURN_VALUE(arg=None, lineno=479)
>         78	LOAD_GLOBAL(arg=2, lineno=480)
          80	LOAD_FAST(arg=0, lineno=480)
          82	LOAD_CONST(arg=3, lineno=480)
          84	LOAD_FAST(arg=1, lineno=480)
          86	LOAD_CONST(arg=3, lineno=480)
          88	LOAD_GLOBAL(arg=1, lineno=480)
          90	LOAD_FAST(arg=0, lineno=480)
          92	CALL_FUNCTION(arg=1, lineno=480)
          94	CALL_FUNCTION(arg=5, lineno=480)
          96	LOAD_CONST(arg=3, lineno=480)
          98	COMPARE_OP(arg=2, lineno=480)
         100	RETURN_VALUE(arg=None, lineno=480)
DEBUG    2023-08-19 15:20:58,254: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,254: stack: []
DEBUG    2023-08-19 15:20:58,254: dispatch pc=0, inst=NOP(arg=None, lineno=468)
DEBUG    2023-08-19 15:20:58,254: stack []
DEBUG    2023-08-19 15:20:58,254: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=468)
DEBUG    2023-08-19 15:20:58,254: stack []
DEBUG    2023-08-19 15:20:58,254: dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=468)
DEBUG    2023-08-19 15:20:58,254: stack ['$a2.0']
DEBUG    2023-08-19 15:20:58,254: dispatch pc=6, inst=IS_OP(arg=0, lineno=468)
DEBUG    2023-08-19 15:20:58,254: stack ['$a2.0', '$const4.1']
DEBUG    2023-08-19 15:20:58,255: dispatch pc=8, inst=STORE_FAST(arg=2, lineno=468)
DEBUG    2023-08-19 15:20:58,255: stack ['$6is_op.2']
DEBUG    2023-08-19 15:20:58,255: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=469)
DEBUG    2023-08-19 15:20:58,255: stack []
DEBUG    2023-08-19 15:20:58,255: dispatch pc=12, inst=LOAD_CONST(arg=0, lineno=469)
DEBUG    2023-08-19 15:20:58,255: stack ['$b10.3']
DEBUG    2023-08-19 15:20:58,255: dispatch pc=14, inst=IS_OP(arg=0, lineno=469)
DEBUG    2023-08-19 15:20:58,255: stack ['$b10.3', '$const12.4']
DEBUG    2023-08-19 15:20:58,255: dispatch pc=16, inst=STORE_FAST(arg=3, lineno=469)
DEBUG    2023-08-19 15:20:58,255: stack ['$14is_op.5']
DEBUG    2023-08-19 15:20:58,255: dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=470)
DEBUG    2023-08-19 15:20:58,256: stack []
DEBUG    2023-08-19 15:20:58,256: dispatch pc=20, inst=POP_JUMP_IF_TRUE(arg=26, lineno=470)
DEBUG    2023-08-19 15:20:58,256: stack ['$a_none18.6']
DEBUG    2023-08-19 15:20:58,256: end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,256: pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,256: stack: []
DEBUG    2023-08-19 15:20:58,256: dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=470)
DEBUG    2023-08-19 15:20:58,256: stack []
DEBUG    2023-08-19 15:20:58,256: dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=42, lineno=470)
DEBUG    2023-08-19 15:20:58,256: stack ['$b_none22.0']
DEBUG    2023-08-19 15:20:58,257: end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,257: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,257: stack: []
DEBUG    2023-08-19 15:20:58,257: dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=471)
DEBUG    2023-08-19 15:20:58,257: stack []
DEBUG    2023-08-19 15:20:58,257: dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=38, lineno=471)
DEBUG    2023-08-19 15:20:58,257: stack ['$a_none26.0']
DEBUG    2023-08-19 15:20:58,257: end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,257: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,257: pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,258: stack: []
DEBUG    2023-08-19 15:20:58,258: dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=476)
DEBUG    2023-08-19 15:20:58,258: stack []
DEBUG    2023-08-19 15:20:58,258: dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=476)
DEBUG    2023-08-19 15:20:58,258: stack ['$42load_global.0']
DEBUG    2023-08-19 15:20:58,258: dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=476)
DEBUG    2023-08-19 15:20:58,258: stack ['$42load_global.0', '$a44.1']
DEBUG    2023-08-19 15:20:58,258: dispatch pc=48, inst=STORE_FAST(arg=0, lineno=476)
DEBUG    2023-08-19 15:20:58,258: stack ['$46call_function.2']
DEBUG    2023-08-19 15:20:58,258: dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=477)
DEBUG    2023-08-19 15:20:58,258: stack []
DEBUG    2023-08-19 15:20:58,259: dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=477)
DEBUG    2023-08-19 15:20:58,259: stack ['$50load_global.3']
DEBUG    2023-08-19 15:20:58,259: dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=477)
DEBUG    2023-08-19 15:20:58,259: stack ['$50load_global.3', '$b52.4']
DEBUG    2023-08-19 15:20:58,259: dispatch pc=56, inst=STORE_FAST(arg=1, lineno=477)
DEBUG    2023-08-19 15:20:58,259: stack ['$54call_function.5']
DEBUG    2023-08-19 15:20:58,259: dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=478)
DEBUG    2023-08-19 15:20:58,259: stack []
DEBUG    2023-08-19 15:20:58,259: dispatch pc=60, inst=LOAD_FAST(arg=0, lineno=478)
DEBUG    2023-08-19 15:20:58,259: stack ['$58load_global.6']
DEBUG    2023-08-19 15:20:58,259: dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=478)
DEBUG    2023-08-19 15:20:58,260: stack ['$58load_global.6', '$a60.7']
DEBUG    2023-08-19 15:20:58,260: dispatch pc=64, inst=LOAD_GLOBAL(arg=1, lineno=478)
DEBUG    2023-08-19 15:20:58,260: stack ['$62call_function.8']
DEBUG    2023-08-19 15:20:58,260: dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=478)
DEBUG    2023-08-19 15:20:58,260: stack ['$62call_function.8', '$64load_global.9']
DEBUG    2023-08-19 15:20:58,260: dispatch pc=68, inst=CALL_FUNCTION(arg=1, lineno=478)
DEBUG    2023-08-19 15:20:58,260: stack ['$62call_function.8', '$64load_global.9', '$b66.10']
DEBUG    2023-08-19 15:20:58,260: dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=478)
DEBUG    2023-08-19 15:20:58,260: stack ['$62call_function.8', '$68call_function.11']
DEBUG    2023-08-19 15:20:58,260: dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=78, lineno=478)
DEBUG    2023-08-19 15:20:58,261: stack ['$70compare_op.12']
DEBUG    2023-08-19 15:20:58,261: end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,261: pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,261: stack: []
DEBUG    2023-08-19 15:20:58,261: dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=471)
DEBUG    2023-08-19 15:20:58,261: stack []
DEBUG    2023-08-19 15:20:58,261: dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=38, lineno=471)
DEBUG    2023-08-19 15:20:58,261: stack ['$b_none30.0']
DEBUG    2023-08-19 15:20:58,261: end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,261: pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,262: stack: []
DEBUG    2023-08-19 15:20:58,262: dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=474)
DEBUG    2023-08-19 15:20:58,262: stack []
DEBUG    2023-08-19 15:20:58,262: dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=474)
DEBUG    2023-08-19 15:20:58,262: stack ['$const38.0']
DEBUG    2023-08-19 15:20:58,262: end state. edges=[]
DEBUG    2023-08-19 15:20:58,262: pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,262: stack: []
DEBUG    2023-08-19 15:20:58,262: dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=479)
DEBUG    2023-08-19 15:20:58,262: stack []
DEBUG    2023-08-19 15:20:58,262: dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=479)
DEBUG    2023-08-19 15:20:58,263: stack ['$const74.0']
DEBUG    2023-08-19 15:20:58,263: end state. edges=[]
DEBUG    2023-08-19 15:20:58,263: pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,263: stack: []
DEBUG    2023-08-19 15:20:58,263: dispatch pc=78, inst=LOAD_GLOBAL(arg=2, lineno=480)
DEBUG    2023-08-19 15:20:58,263: stack []
DEBUG    2023-08-19 15:20:58,263: dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=480)
DEBUG    2023-08-19 15:20:58,263: stack ['$78load_global.0']
DEBUG    2023-08-19 15:20:58,263: dispatch pc=82, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG    2023-08-19 15:20:58,263: stack ['$78load_global.0', '$a80.1']
DEBUG    2023-08-19 15:20:58,263: dispatch pc=84, inst=LOAD_FAST(arg=1, lineno=480)
DEBUG    2023-08-19 15:20:58,264: stack ['$78load_global.0', '$a80.1', '$const82.2']
DEBUG    2023-08-19 15:20:58,264: dispatch pc=86, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG    2023-08-19 15:20:58,264: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3']
DEBUG    2023-08-19 15:20:58,264: dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=480)
DEBUG    2023-08-19 15:20:58,264: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4']
DEBUG    2023-08-19 15:20:58,264: dispatch pc=90, inst=LOAD_FAST(arg=0, lineno=480)
DEBUG    2023-08-19 15:20:58,264: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$88load_global.5']
DEBUG    2023-08-19 15:20:58,264: dispatch pc=92, inst=CALL_FUNCTION(arg=1, lineno=480)
DEBUG    2023-08-19 15:20:58,264: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$88load_global.5', '$a90.6']
DEBUG    2023-08-19 15:20:58,264: dispatch pc=94, inst=CALL_FUNCTION(arg=5, lineno=480)
DEBUG    2023-08-19 15:20:58,264: stack ['$78load_global.0', '$a80.1', '$const82.2', '$b84.3', '$const86.4', '$92call_function.7']
DEBUG    2023-08-19 15:20:58,265: dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=480)
DEBUG    2023-08-19 15:20:58,265: stack ['$94call_function.8']
DEBUG    2023-08-19 15:20:58,265: dispatch pc=98, inst=COMPARE_OP(arg=2, lineno=480)
DEBUG    2023-08-19 15:20:58,265: stack ['$94call_function.8', '$const96.9']
DEBUG    2023-08-19 15:20:58,265: dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=480)
DEBUG    2023-08-19 15:20:58,265: stack ['$98compare_op.10']
DEBUG    2023-08-19 15:20:58,265: end state. edges=[]
DEBUG    2023-08-19 15:20:58,265: pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,265: stack: []
DEBUG    2023-08-19 15:20:58,265: dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=472)
DEBUG    2023-08-19 15:20:58,265: stack []
DEBUG    2023-08-19 15:20:58,266: dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=472)
DEBUG    2023-08-19 15:20:58,266: stack ['$const34.0']
DEBUG    2023-08-19 15:20:58,266: end state. edges=[]
DEBUG    2023-08-19 15:20:58,266: pending: deque([State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,266: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:58,266: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:58,267: defmap: {}
DEBUG    2023-08-19 15:20:58,267: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,267: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,267: keep phismap: {}
DEBUG    2023-08-19 15:20:58,267: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:58,267: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:58,267: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$const4.1', 'res': '$6is_op.2'}), (8, {'value': '$6is_op.2'}), (10, {'res': '$b10.3'}), (12, {'res': '$const12.4'}), (14, {'lhs': '$b10.3', 'rhs': '$const12.4', 'res': '$14is_op.5'}), (16, {'value': '$14is_op.5'}), (18, {'res': '$a_none18.6'}), (20, {'pred': '$a_none18.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
DEBUG    2023-08-19 15:20:58,267: block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$b_none22.0'}), (24, {'pred': '$b_none22.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 42: ()})
DEBUG    2023-08-19 15:20:58,268: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$a_none26.0'}), (28, {'pred': '$a_none26.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 38: ()})
DEBUG    2023-08-19 15:20:58,268: block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$b_none30.0'}), (32, {'pred': '$b_none30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
DEBUG    2023-08-19 15:20:58,268: block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,268: block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$const38.0'}), (40, {'retval': '$const38.0', 'castval': '$40return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,268: block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$a44.1'}), (46, {'func': '$42load_global.0', 'args': ['$a44.1'], 'res': '$46call_function.2'}), (48, {'value': '$46call_function.2'}), (50, {'res': '$50load_global.3'}), (52, {'res': '$b52.4'}), (54, {'func': '$50load_global.3', 'args': ['$b52.4'], 'res': '$54call_function.5'}), (56, {'value': '$54call_function.5'}), (58, {'res': '$58load_global.6'}), (60, {'res': '$a60.7'}), (62, {'func': '$58load_global.6', 'args': ['$a60.7'], 'res': '$62call_function.8'}), (64, {'res': '$64load_global.9'}), (66, {'res': '$b66.10'}), (68, {'func': '$64load_global.9', 'args': ['$b66.10'], 'res': '$68call_function.11'}), (70, {'lhs': '$62call_function.8', 'rhs': '$68call_function.11', 'res': '$70compare_op.12'}), (72, {'pred': '$70compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 78: ()})
DEBUG    2023-08-19 15:20:58,268: block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'retval': '$const74.0', 'castval': '$76return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,268: block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$a80.1'}), (82, {'res': '$const82.2'}), (84, {'res': '$b84.3'}), (86, {'res': '$const86.4'}), (88, {'res': '$88load_global.5'}), (90, {'res': '$a90.6'}), (92, {'func': '$88load_global.5', 'args': ['$a90.6'], 'res': '$92call_function.7'}), (94, {'func': '$78load_global.0', 'args': ['$a80.1', '$const82.2', '$b84.3', '$const86.4', '$92call_function.7'], 'res': '$94call_function.8'}), (96, {'res': '$const96.9'}), (98, {'lhs': '$94call_function.8', 'rhs': '$const96.9', 'res': '$98compare_op.10'}), (100, {'retval': '$98compare_op.10', 'castval': '$100return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,271: label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    a_none = a is $const4.1                  ['$const4.1', 'a', 'a_none']
    $const12.4 = const(NoneType, None)       ['$const12.4']
    b_none = b is $const12.4                 ['$const12.4', 'b', 'b_none']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None) ['$20pred', 'a_none', 'bool20']
    branch $20pred, 26, 22                   ['$20pred']
label 22:
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None) ['$24pred', 'b_none', 'bool24']
    branch $24pred, 26, 42                   ['$24pred']
label 26:
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None) ['$28pred', 'a_none', 'bool28']
    branch $28pred, 30, 38                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None) ['$32pred', 'b_none', 'bool32']
    branch $32pred, 34, 38                   ['$32pred']
label 34:
    $const34.0 = const(bool, True)           ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']
label 38:
    $const38.0 = const(bool, False)          ['$const38.0']
    $40return_value.1 = cast(value=$const38.0) ['$40return_value.1', '$const38.0']
    return $40return_value.1                 ['$40return_value.1']
label 42:
    $42load_global.0 = global(str: <class 'str'>) ['$42load_global.0']
    a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$42load_global.0', 'a', 'a']
    $50load_global.3 = global(str: <class 'str'>) ['$50load_global.3']
    b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None) ['$50load_global.3', 'b', 'b']
    $58load_global.6 = global(len: <built-in function len>) ['$58load_global.6']
    $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$58load_global.6', '$62call_function.8', 'a']
    $64load_global.9 = global(len: <built-in function len>) ['$64load_global.9']
    $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None) ['$64load_global.9', '$68call_function.11', 'b']
    $70compare_op.12 = $62call_function.8 != $68call_function.11 ['$62call_function.8', '$68call_function.11', '$70compare_op.12']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None) ['$70compare_op.12', '$72pred', 'bool72']
    branch $72pred, 74, 78                   ['$72pred']
label 74:
    $const74.0 = const(bool, False)          ['$const74.0']
    $76return_value.1 = cast(value=$const74.0) ['$76return_value.1', '$const74.0']
    return $76return_value.1                 ['$76return_value.1']
label 78:
    $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000025F319C7CA0>) ['$78load_global.0']
    $const82.2 = const(int, 0)               ['$const82.2']
    $const86.4 = const(int, 0)               ['$const86.4']
    $88load_global.5 = global(len: <built-in function len>) ['$88load_global.5']
    $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None) ['$88load_global.5', '$92call_function.7', 'a']
    $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None) ['$78load_global.0', '$92call_function.7', '$94call_function.8', '$const82.2', '$const86.4', 'a', 'b']
    $const96.9 = const(int, 0)               ['$const96.9']
    $98compare_op.10 = $94call_function.8 == $const96.9 ['$94call_function.8', '$98compare_op.10', '$const96.9']
    $100return_value.11 = cast(value=$98compare_op.10) ['$100return_value.11', '$98compare_op.10']
    return $100return_value.11               ['$100return_value.11']

DEBUG    2023-08-19 15:20:58,279: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:58,279: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,279: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:20:58,279: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:20:58,279: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,279: on stmt: a_none = a is $const4.1
DEBUG    2023-08-19 15:20:58,279: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,279: on stmt: b_none = b is $const12.4
DEBUG    2023-08-19 15:20:58,279: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,279: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,279: on stmt: branch $20pred, 26, 22
DEBUG    2023-08-19 15:20:58,279: ==== SSA block analysis pass on 22
DEBUG    2023-08-19 15:20:58,279: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,279: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,279: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,279: on stmt: branch $24pred, 26, 42
DEBUG    2023-08-19 15:20:58,279: ==== SSA block analysis pass on 26
DEBUG    2023-08-19 15:20:58,279: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,279: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,279: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,279: on stmt: branch $28pred, 30, 38
DEBUG    2023-08-19 15:20:58,279: ==== SSA block analysis pass on 30
DEBUG    2023-08-19 15:20:58,279: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,279: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,279: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: branch $32pred, 34, 38
DEBUG    2023-08-19 15:20:58,281: ==== SSA block analysis pass on 34
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,281: on stmt: $const34.0 = const(bool, True)
DEBUG    2023-08-19 15:20:58,281: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2023-08-19 15:20:58,281: on stmt: return $36return_value.1
DEBUG    2023-08-19 15:20:58,281: ==== SSA block analysis pass on 38
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,281: on stmt: $const38.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,281: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2023-08-19 15:20:58,281: on stmt: return $40return_value.1
DEBUG    2023-08-19 15:20:58,281: ==== SSA block analysis pass on 42
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,281: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2023-08-19 15:20:58,281: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: branch $72pred, 74, 78
DEBUG    2023-08-19 15:20:58,281: ==== SSA block analysis pass on 74
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,281: on stmt: $const74.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,281: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2023-08-19 15:20:58,281: on stmt: return $76return_value.1
DEBUG    2023-08-19 15:20:58,281: ==== SSA block analysis pass on 78
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3316ABE0>
DEBUG    2023-08-19 15:20:58,281: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000025F319C7CA0>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $const82.2 = const(int, 0)
DEBUG    2023-08-19 15:20:58,281: on stmt: $const86.4 = const(int, 0)
DEBUG    2023-08-19 15:20:58,281: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $const96.9 = const(int, 0)
DEBUG    2023-08-19 15:20:58,281: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2023-08-19 15:20:58,281: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2023-08-19 15:20:58,281: on stmt: return $100return_value.11
DEBUG    2023-08-19 15:20:58,281: defs defaultdict(<class 'list'>,
            {'$100return_value.11': [<numba.core.ir.Assign object at 0x0000025F3316AA60>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000025F3315AB20>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000025F3315AE20>],
             '$28pred': [<numba.core.ir.Assign object at 0x0000025F331642E0>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000025F33164760>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x0000025F33164B20>],
             '$40return_value.1': [<numba.core.ir.Assign object at 0x0000025F33164F40>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x0000025F33166220>],
             '$50load_global.3': [<numba.core.ir.Assign object at 0x0000025F33166700>],
             '$58load_global.6': [<numba.core.ir.Assign object at 0x0000025F33166BE0>],
             '$62call_function.8': [<numba.core.ir.Assign object at 0x0000025F33166EE0>],
             '$64load_global.9': [<numba.core.ir.Assign object at 0x0000025F33168040>],
             '$68call_function.11': [<numba.core.ir.Assign object at 0x0000025F33168340>],
             '$70compare_op.12': [<numba.core.ir.Assign object at 0x0000025F33168490>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000025F33168700>],
             '$76return_value.1': [<numba.core.ir.Assign object at 0x0000025F33168820>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x0000025F33168AC0>],
             '$88load_global.5': [<numba.core.ir.Assign object at 0x0000025F3316A1C0>],
             '$92call_function.7': [<numba.core.ir.Assign object at 0x0000025F3316A4C0>],
             '$94call_function.8': [<numba.core.ir.Assign object at 0x0000025F3316A640>],
             '$98compare_op.10': [<numba.core.ir.Assign object at 0x0000025F3316A910>],
             '$const12.4': [<numba.core.ir.Assign object at 0x0000025F3315A4C0>],
             '$const34.0': [<numba.core.ir.Assign object at 0x0000025F331649A0>],
             '$const38.0': [<numba.core.ir.Assign object at 0x0000025F33164DC0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F33145FD0>],
             '$const74.0': [<numba.core.ir.Assign object at 0x0000025F33166910>],
             '$const82.2': [<numba.core.ir.Assign object at 0x0000025F33168D60>],
             '$const86.4': [<numba.core.ir.Assign object at 0x0000025F3316A040>],
             '$const96.9': [<numba.core.ir.Assign object at 0x0000025F3316A760>],
             'a': [<numba.core.ir.Assign object at 0x0000025F33154CD0>,
                   <numba.core.ir.Assign object at 0x0000025F33166520>],
             'a_none': [<numba.core.ir.Assign object at 0x0000025F33145EE0>],
             'b': [<numba.core.ir.Assign object at 0x0000025F331540A0>,
                   <numba.core.ir.Assign object at 0x0000025F33166A00>],
             'b_none': [<numba.core.ir.Assign object at 0x0000025F3315A670>],
             'bool20': [<numba.core.ir.Assign object at 0x0000025F3315AA00>],
             'bool24': [<numba.core.ir.Assign object at 0x0000025F3315AD00>],
             'bool28': [<numba.core.ir.Assign object at 0x0000025F331641C0>],
             'bool32': [<numba.core.ir.Assign object at 0x0000025F33164640>],
             'bool72': [<numba.core.ir.Assign object at 0x0000025F331685E0>]})
DEBUG    2023-08-19 15:20:58,281: SSA violators {'a', 'b'}
DEBUG    2023-08-19 15:20:58,281: Fix SSA violator on var a
DEBUG    2023-08-19 15:20:58,281: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,281: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:20:58,281: first assign: a
DEBUG    2023-08-19 15:20:58,281: replaced with: a = arg(0, name=a)
DEBUG    2023-08-19 15:20:58,281: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:20:58,281: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,281: on stmt: a_none = a is $const4.1
DEBUG    2023-08-19 15:20:58,281: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,281: on stmt: b_none = b is $const12.4
DEBUG    2023-08-19 15:20:58,281: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: branch $20pred, 26, 22
DEBUG    2023-08-19 15:20:58,281: ==== SSA block rewrite pass on 22
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,281: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: branch $24pred, 26, 42
DEBUG    2023-08-19 15:20:58,281: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,281: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: branch $28pred, 30, 38
DEBUG    2023-08-19 15:20:58,281: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,281: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: branch $32pred, 34, 38
DEBUG    2023-08-19 15:20:58,281: ==== SSA block rewrite pass on 34
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,281: on stmt: $const34.0 = const(bool, True)
DEBUG    2023-08-19 15:20:58,281: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2023-08-19 15:20:58,281: on stmt: return $36return_value.1
DEBUG    2023-08-19 15:20:58,281: ==== SSA block rewrite pass on 38
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,281: on stmt: $const38.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,281: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2023-08-19 15:20:58,281: on stmt: return $40return_value.1
DEBUG    2023-08-19 15:20:58,281: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,281: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: a = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: replaced with: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2023-08-19 15:20:58,281: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,281: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,281: on stmt: branch $72pred, 74, 78
DEBUG    2023-08-19 15:20:58,281: ==== SSA block rewrite pass on 74
DEBUG    2023-08-19 15:20:58,281: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,281: on stmt: $const74.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,281: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2023-08-19 15:20:58,281: on stmt: return $76return_value.1
DEBUG    2023-08-19 15:20:58,289: ==== SSA block rewrite pass on 78
DEBUG    2023-08-19 15:20:58,289: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,289: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000025F319C7CA0>)
DEBUG    2023-08-19 15:20:58,289: on stmt: $const82.2 = const(int, 0)
DEBUG    2023-08-19 15:20:58,289: on stmt: $const86.4 = const(int, 0)
DEBUG    2023-08-19 15:20:58,289: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,289: on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,289: on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,289: on stmt: $const96.9 = const(int, 0)
DEBUG    2023-08-19 15:20:58,289: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2023-08-19 15:20:58,289: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2023-08-19 15:20:58,289: on stmt: return $100return_value.11
DEBUG    2023-08-19 15:20:58,289: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F3316AF10>],
             42: [<numba.core.ir.Assign object at 0x0000025F33154910>]})
DEBUG    2023-08-19 15:20:58,289: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:58,289: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,289: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:20:58,289: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:20:58,289: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,289: on stmt: a_none = a is $const4.1
DEBUG    2023-08-19 15:20:58,289: find_def var='a' stmt=a_none = a is $const4.1
DEBUG    2023-08-19 15:20:58,289: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,289: on stmt: b_none = b is $const12.4
DEBUG    2023-08-19 15:20:58,289: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,289: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,289: on stmt: branch $20pred, 26, 22
DEBUG    2023-08-19 15:20:58,289: ==== SSA block rewrite pass on 22
DEBUG    2023-08-19 15:20:58,289: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,289: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: branch $24pred, 26, 42
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,291: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: branch $28pred, 30, 38
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,291: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: branch $32pred, 34, 38
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 34
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,291: on stmt: $const34.0 = const(bool, True)
DEBUG    2023-08-19 15:20:58,291: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2023-08-19 15:20:58,291: on stmt: return $36return_value.1
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 38
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,291: on stmt: $const38.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,291: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2023-08-19 15:20:58,291: on stmt: return $40return_value.1
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,291: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: find_def var='a' stmt=a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: find_def_from_top label 42
DEBUG    2023-08-19 15:20:58,291: idom 22 from label 42
DEBUG    2023-08-19 15:20:58,291: find_def_from_bottom label 22
DEBUG    2023-08-19 15:20:58,291: find_def_from_top label 22
DEBUG    2023-08-19 15:20:58,291: idom 0 from label 22
DEBUG    2023-08-19 15:20:58,291: find_def_from_bottom label 0
DEBUG    2023-08-19 15:20:58,291: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: find_def var='a' stmt=$62call_function.8 = call $58load_global.6(a, func=$58load_global.6, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: replaced with: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2023-08-19 15:20:58,291: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: branch $72pred, 74, 78
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 74
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,291: on stmt: $const74.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,291: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2023-08-19 15:20:58,291: on stmt: return $76return_value.1
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 78
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3316AD30>
DEBUG    2023-08-19 15:20:58,291: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000025F319C7CA0>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $const82.2 = const(int, 0)
DEBUG    2023-08-19 15:20:58,291: on stmt: $const86.4 = const(int, 0)
DEBUG    2023-08-19 15:20:58,291: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: find_def var='a' stmt=$92call_function.7 = call $88load_global.5(a, func=$88load_global.5, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: find_def_from_top label 78
DEBUG    2023-08-19 15:20:58,291: idom 42 from label 78
DEBUG    2023-08-19 15:20:58,291: find_def_from_bottom label 42
DEBUG    2023-08-19 15:20:58,291: replaced with: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: $94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: find_def var='a' stmt=$94call_function.8 = call $78load_global.0(a, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a, unicode.py:468), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: find_def_from_top label 78
DEBUG    2023-08-19 15:20:58,291: idom 42 from label 78
DEBUG    2023-08-19 15:20:58,291: find_def_from_bottom label 42
DEBUG    2023-08-19 15:20:58,291: replaced with: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: $const96.9 = const(int, 0)
DEBUG    2023-08-19 15:20:58,291: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2023-08-19 15:20:58,291: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2023-08-19 15:20:58,291: on stmt: return $100return_value.11
DEBUG    2023-08-19 15:20:58,291: Fix SSA violator on var b
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,291: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:20:58,291: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:20:58,291: first assign: b
DEBUG    2023-08-19 15:20:58,291: replaced with: b = arg(1, name=b)
DEBUG    2023-08-19 15:20:58,291: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,291: on stmt: a_none = a is $const4.1
DEBUG    2023-08-19 15:20:58,291: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,291: on stmt: b_none = b is $const12.4
DEBUG    2023-08-19 15:20:58,291: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: branch $20pred, 26, 22
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 22
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,291: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: branch $24pred, 26, 42
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,291: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: branch $28pred, 30, 38
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,291: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: branch $32pred, 34, 38
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 34
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,291: on stmt: $const34.0 = const(bool, True)
DEBUG    2023-08-19 15:20:58,291: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2023-08-19 15:20:58,291: on stmt: return $36return_value.1
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 38
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,291: on stmt: $const38.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,291: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2023-08-19 15:20:58,291: on stmt: return $40return_value.1
DEBUG    2023-08-19 15:20:58,291: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:20:58,291: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,291: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,291: on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,291: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,299: on stmt: b = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,299: replaced with: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,299: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,299: on stmt: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,299: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,299: on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,299: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2023-08-19 15:20:58,299: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,299: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,299: on stmt: branch $72pred, 74, 78
DEBUG    2023-08-19 15:20:58,299: ==== SSA block rewrite pass on 74
DEBUG    2023-08-19 15:20:58,299: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,299: on stmt: $const74.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,299: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2023-08-19 15:20:58,299: on stmt: return $76return_value.1
DEBUG    2023-08-19 15:20:58,299: ==== SSA block rewrite pass on 78
DEBUG    2023-08-19 15:20:58,299: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33168F10>
DEBUG    2023-08-19 15:20:58,299: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000025F319C7CA0>)
DEBUG    2023-08-19 15:20:58,299: on stmt: $const82.2 = const(int, 0)
DEBUG    2023-08-19 15:20:58,299: on stmt: $const86.4 = const(int, 0)
DEBUG    2023-08-19 15:20:58,299: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,299: on stmt: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,299: on stmt: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,299: on stmt: $const96.9 = const(int, 0)
DEBUG    2023-08-19 15:20:58,299: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2023-08-19 15:20:58,299: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2023-08-19 15:20:58,299: on stmt: return $100return_value.11
DEBUG    2023-08-19 15:20:58,299: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F33166430>],
             42: [<numba.core.ir.Assign object at 0x0000025F33154FD0>]})
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:20:58,301: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:20:58,301: on stmt: $const4.1 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,301: on stmt: a_none = a is $const4.1
DEBUG    2023-08-19 15:20:58,301: on stmt: $const12.4 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,301: on stmt: b_none = b is $const12.4
DEBUG    2023-08-19 15:20:58,301: find_def var='b' stmt=b_none = b is $const12.4
DEBUG    2023-08-19 15:20:58,301: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $20pred = call bool20(a_none, func=bool20, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: branch $20pred, 26, 22
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 22
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $24pred = call bool24(b_none, func=bool24, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: branch $24pred, 26, 42
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $28pred = call bool28(a_none, func=bool28, args=(Var(a_none, unicode.py:468),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: branch $28pred, 30, 38
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $32pred = call bool32(b_none, func=bool32, args=(Var(b_none, unicode.py:469),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: branch $32pred, 34, 38
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 34
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: $const34.0 = const(bool, True)
DEBUG    2023-08-19 15:20:58,301: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2023-08-19 15:20:58,301: on stmt: return $36return_value.1
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 38
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: $const38.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,301: on stmt: $40return_value.1 = cast(value=$const38.0)
DEBUG    2023-08-19 15:20:58,301: on stmt: return $40return_value.1
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: $42load_global.0 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,301: on stmt: a.1 = call $42load_global.0(a, func=$42load_global.0, args=[Var(a, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: $50load_global.3 = global(str: <class 'str'>)
DEBUG    2023-08-19 15:20:58,301: on stmt: b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: find_def var='b' stmt=b.1 = call $50load_global.3(b, func=$50load_global.3, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: find_def_from_top label 42
DEBUG    2023-08-19 15:20:58,301: idom 22 from label 42
DEBUG    2023-08-19 15:20:58,301: find_def_from_bottom label 22
DEBUG    2023-08-19 15:20:58,301: find_def_from_top label 22
DEBUG    2023-08-19 15:20:58,301: idom 0 from label 22
DEBUG    2023-08-19 15:20:58,301: find_def_from_bottom label 0
DEBUG    2023-08-19 15:20:58,301: on stmt: $58load_global.6 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $62call_function.8 = call $58load_global.6(a.1, func=$58load_global.6, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: $64load_global.9 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: find_def var='b' stmt=$68call_function.11 = call $64load_global.9(b, func=$64load_global.9, args=[Var(b, unicode.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: replaced with: $68call_function.11 = call $64load_global.9(b.1, func=$64load_global.9, args=[Var(b.1, unicode.py:477)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: $70compare_op.12 = $62call_function.8 != $68call_function.11
DEBUG    2023-08-19 15:20:58,301: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $72pred = call bool72($70compare_op.12, func=bool72, args=(Var($70compare_op.12, unicode.py:478),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: branch $72pred, 74, 78
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 74
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: $const74.0 = const(bool, False)
DEBUG    2023-08-19 15:20:58,301: on stmt: $76return_value.1 = cast(value=$const74.0)
DEBUG    2023-08-19 15:20:58,301: on stmt: return $76return_value.1
DEBUG    2023-08-19 15:20:58,301: ==== SSA block rewrite pass on 78
DEBUG    2023-08-19 15:20:58,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33154370>
DEBUG    2023-08-19 15:20:58,301: on stmt: $78load_global.0 = global(_cmp_region: <function _cmp_region at 0x0000025F319C7CA0>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $const82.2 = const(int, 0)
DEBUG    2023-08-19 15:20:58,301: on stmt: $const86.4 = const(int, 0)
DEBUG    2023-08-19 15:20:58,301: on stmt: $88load_global.5 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:58,301: on stmt: $92call_function.7 = call $88load_global.5(a.1, func=$88load_global.5, args=[Var(a.1, unicode.py:476)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: find_def var='b' stmt=$94call_function.8 = call $78load_global.0(a.1, $const82.2, b, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b, unicode.py:468), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: find_def_from_top label 78
DEBUG    2023-08-19 15:20:58,301: idom 42 from label 78
DEBUG    2023-08-19 15:20:58,301: find_def_from_bottom label 42
DEBUG    2023-08-19 15:20:58,301: replaced with: $94call_function.8 = call $78load_global.0(a.1, $const82.2, b.1, $const86.4, $92call_function.7, func=$78load_global.0, args=[Var(a.1, unicode.py:476), Var($const82.2, unicode.py:480), Var(b.1, unicode.py:477), Var($const86.4, unicode.py:480), Var($92call_function.7, unicode.py:480)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,301: on stmt: $const96.9 = const(int, 0)
DEBUG    2023-08-19 15:20:58,301: on stmt: $98compare_op.10 = $94call_function.8 == $const96.9
DEBUG    2023-08-19 15:20:58,301: on stmt: $100return_value.11 = cast(value=$98compare_op.10)
DEBUG    2023-08-19 15:20:58,301: on stmt: return $100return_value.11
DEBUG    2023-08-19 15:20:58,311: bytecode dump:
>          0	NOP(arg=None, lineno=439)
           2	LOAD_FAST(arg=0, lineno=439)
           4	RETURN_VALUE(arg=None, lineno=439)
DEBUG    2023-08-19 15:20:58,311: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,311: stack: []
DEBUG    2023-08-19 15:20:58,311: dispatch pc=0, inst=NOP(arg=None, lineno=439)
DEBUG    2023-08-19 15:20:58,311: stack []
DEBUG    2023-08-19 15:20:58,311: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=439)
DEBUG    2023-08-19 15:20:58,311: stack []
DEBUG    2023-08-19 15:20:58,311: dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=439)
DEBUG    2023-08-19 15:20:58,311: stack ['$s2.0']
DEBUG    2023-08-19 15:20:58,311: end state. edges=[]
DEBUG    2023-08-19 15:20:58,311: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:58,311: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:58,311: defmap: {}
DEBUG    2023-08-19 15:20:58,311: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,311: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,311: keep phismap: {}
DEBUG    2023-08-19 15:20:58,311: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:58,319: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:58,319: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$s2.0'}), (4, {'retval': '$s2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,319: label 0:
    s = arg(0, name=s)                       ['s']
    $4return_value.1 = cast(value=s)         ['$4return_value.1', 's']
    return $4return_value.1                  ['$4return_value.1']

DEBUG    2023-08-19 15:20:58,319: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:58,319: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331A27C0>
DEBUG    2023-08-19 15:20:58,319: on stmt: s = arg(0, name=s)
DEBUG    2023-08-19 15:20:58,321: on stmt: $4return_value.1 = cast(value=s)
DEBUG    2023-08-19 15:20:58,321: on stmt: return $4return_value.1
DEBUG    2023-08-19 15:20:58,321: defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x0000025F331A81C0>],
             's': [<numba.core.ir.Assign object at 0x0000025F331A2220>]})
DEBUG    2023-08-19 15:20:58,321: SSA violators set()
DEBUG    2023-08-19 15:20:58,351: bytecode dump:
>          0	NOP(arg=None, lineno=446)
           2	LOAD_FAST(arg=0, lineno=446)
           4	LOAD_ATTR(arg=0, lineno=446)
           6	RETURN_VALUE(arg=None, lineno=446)
DEBUG    2023-08-19 15:20:58,351: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,351: stack: []
DEBUG    2023-08-19 15:20:58,351: dispatch pc=0, inst=NOP(arg=None, lineno=446)
DEBUG    2023-08-19 15:20:58,351: stack []
DEBUG    2023-08-19 15:20:58,351: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=446)
DEBUG    2023-08-19 15:20:58,351: stack []
DEBUG    2023-08-19 15:20:58,351: dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=446)
DEBUG    2023-08-19 15:20:58,351: stack ['$s2.0']
DEBUG    2023-08-19 15:20:58,351: dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=446)
DEBUG    2023-08-19 15:20:58,351: stack ['$4load_attr.1']
DEBUG    2023-08-19 15:20:58,351: end state. edges=[]
DEBUG    2023-08-19 15:20:58,351: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:58,351: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:58,351: defmap: {}
DEBUG    2023-08-19 15:20:58,351: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,351: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,351: keep phismap: {}
DEBUG    2023-08-19 15:20:58,351: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:58,351: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:58,351: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$s2.0'}), (4, {'item': '$s2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,351: label 0:
    s = arg(0, name=s)                       ['s']
    $4load_attr.1 = getattr(value=s, attr=_length) ['$4load_attr.1', 's']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG    2023-08-19 15:20:58,351: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:58,351: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331BD4F0>
DEBUG    2023-08-19 15:20:58,351: on stmt: s = arg(0, name=s)
DEBUG    2023-08-19 15:20:58,351: on stmt: $4load_attr.1 = getattr(value=s, attr=_length)
DEBUG    2023-08-19 15:20:58,351: on stmt: $6return_value.2 = cast(value=$4load_attr.1)
DEBUG    2023-08-19 15:20:58,351: on stmt: return $6return_value.2
DEBUG    2023-08-19 15:20:58,351: defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x0000025F331E94C0>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x0000025F331E9640>],
             's': [<numba.core.ir.Assign object at 0x0000025F331BD1F0>]})
DEBUG    2023-08-19 15:20:58,351: SSA violators set()
DEBUG    2023-08-19 15:20:58,380: bytecode dump:
>          0	NOP(arg=None, lineno=389)
           2	LOAD_FAST(arg=4, lineno=389)
           4	LOAD_CONST(arg=1, lineno=389)
           6	COMPARE_OP(arg=2, lineno=389)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=389)
          10	LOAD_CONST(arg=1, lineno=390)
          12	RETURN_VALUE(arg=None, lineno=390)
>         14	LOAD_FAST(arg=1, lineno=391)
          16	LOAD_FAST(arg=4, lineno=391)
          18	BINARY_ADD(arg=None, lineno=391)
          20	LOAD_FAST(arg=0, lineno=391)
          22	LOAD_ATTR(arg=0, lineno=391)
          24	COMPARE_OP(arg=4, lineno=391)
          26	POP_JUMP_IF_FALSE(arg=32, lineno=391)
          28	LOAD_CONST(arg=2, lineno=392)
          30	RETURN_VALUE(arg=None, lineno=392)
>         32	LOAD_FAST(arg=3, lineno=393)
          34	LOAD_FAST(arg=4, lineno=393)
          36	BINARY_ADD(arg=None, lineno=393)
          38	LOAD_FAST(arg=2, lineno=393)
          40	LOAD_ATTR(arg=0, lineno=393)
          42	COMPARE_OP(arg=4, lineno=393)
          44	POP_JUMP_IF_FALSE(arg=50, lineno=393)
          46	LOAD_CONST(arg=3, lineno=394)
          48	RETURN_VALUE(arg=None, lineno=394)
>         50	LOAD_GLOBAL(arg=1, lineno=396)
          52	LOAD_FAST(arg=4, lineno=396)
          54	CALL_FUNCTION(arg=1, lineno=396)
          56	GET_ITER(arg=None, lineno=396)
>         58	FOR_ITER(arg=60, lineno=396)
          60	STORE_FAST(arg=5, lineno=396)
          62	LOAD_GLOBAL(arg=2, lineno=397)
          64	LOAD_FAST(arg=0, lineno=397)
          66	LOAD_FAST(arg=1, lineno=397)
          68	LOAD_FAST(arg=5, lineno=397)
          70	BINARY_ADD(arg=None, lineno=397)
          72	CALL_FUNCTION(arg=2, lineno=397)
          74	STORE_FAST(arg=6, lineno=397)
          76	LOAD_GLOBAL(arg=2, lineno=398)
          78	LOAD_FAST(arg=2, lineno=398)
          80	LOAD_FAST(arg=3, lineno=398)
          82	LOAD_FAST(arg=5, lineno=398)
          84	BINARY_ADD(arg=None, lineno=398)
          86	CALL_FUNCTION(arg=2, lineno=398)
          88	STORE_FAST(arg=7, lineno=398)
          90	LOAD_FAST(arg=6, lineno=399)
          92	LOAD_FAST(arg=7, lineno=399)
          94	COMPARE_OP(arg=0, lineno=399)
          96	POP_JUMP_IF_FALSE(arg=104, lineno=399)
          98	POP_TOP(arg=None, lineno=400)
         100	LOAD_CONST(arg=2, lineno=400)
         102	RETURN_VALUE(arg=None, lineno=400)
>        104	LOAD_FAST(arg=6, lineno=401)
         106	LOAD_FAST(arg=7, lineno=401)
         108	COMPARE_OP(arg=4, lineno=401)
         110	POP_JUMP_IF_FALSE(arg=58, lineno=401)
         112	POP_TOP(arg=None, lineno=402)
         114	LOAD_CONST(arg=3, lineno=402)
         116	RETURN_VALUE(arg=None, lineno=402)
         118	JUMP_ABSOLUTE(arg=58, lineno=402)
>        120	LOAD_CONST(arg=1, lineno=404)
         122	RETURN_VALUE(arg=None, lineno=404)
DEBUG    2023-08-19 15:20:58,380: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,380: stack: []
DEBUG    2023-08-19 15:20:58,380: dispatch pc=0, inst=NOP(arg=None, lineno=389)
DEBUG    2023-08-19 15:20:58,380: stack []
DEBUG    2023-08-19 15:20:58,380: dispatch pc=2, inst=LOAD_FAST(arg=4, lineno=389)
DEBUG    2023-08-19 15:20:58,380: stack []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=389)
DEBUG    2023-08-19 15:20:58,382: stack ['$n2.0']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=389)
DEBUG    2023-08-19 15:20:58,382: stack ['$n2.0', '$const4.1']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=389)
DEBUG    2023-08-19 15:20:58,382: stack ['$6compare_op.2']
DEBUG    2023-08-19 15:20:58,382: end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,382: pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,382: stack: []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=390)
DEBUG    2023-08-19 15:20:58,382: stack []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=390)
DEBUG    2023-08-19 15:20:58,382: stack ['$const10.0']
DEBUG    2023-08-19 15:20:58,382: end state. edges=[]
DEBUG    2023-08-19 15:20:58,382: pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,382: stack: []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=391)
DEBUG    2023-08-19 15:20:58,382: stack []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=16, inst=LOAD_FAST(arg=4, lineno=391)
DEBUG    2023-08-19 15:20:58,382: stack ['$a_offset14.0']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=391)
DEBUG    2023-08-19 15:20:58,382: stack ['$a_offset14.0', '$n16.1']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=391)
DEBUG    2023-08-19 15:20:58,382: stack ['$18binary_add.2']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=22, inst=LOAD_ATTR(arg=0, lineno=391)
DEBUG    2023-08-19 15:20:58,382: stack ['$18binary_add.2', '$a20.3']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=391)
DEBUG    2023-08-19 15:20:58,382: stack ['$18binary_add.2', '$22load_attr.4']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=32, lineno=391)
DEBUG    2023-08-19 15:20:58,382: stack ['$24compare_op.5']
DEBUG    2023-08-19 15:20:58,382: end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,382: pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,382: stack: []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=392)
DEBUG    2023-08-19 15:20:58,382: stack []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=392)
DEBUG    2023-08-19 15:20:58,382: stack ['$const28.0']
DEBUG    2023-08-19 15:20:58,382: end state. edges=[]
DEBUG    2023-08-19 15:20:58,382: pending: deque([State(pc_initial=32 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,382: stack: []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=393)
DEBUG    2023-08-19 15:20:58,382: stack []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=393)
DEBUG    2023-08-19 15:20:58,382: stack ['$b_offset32.0']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=36, inst=BINARY_ADD(arg=None, lineno=393)
DEBUG    2023-08-19 15:20:58,382: stack ['$b_offset32.0', '$n34.1']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=393)
DEBUG    2023-08-19 15:20:58,382: stack ['$36binary_add.2']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=40, inst=LOAD_ATTR(arg=0, lineno=393)
DEBUG    2023-08-19 15:20:58,382: stack ['$36binary_add.2', '$b38.3']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=42, inst=COMPARE_OP(arg=4, lineno=393)
DEBUG    2023-08-19 15:20:58,382: stack ['$36binary_add.2', '$40load_attr.4']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=44, inst=POP_JUMP_IF_FALSE(arg=50, lineno=393)
DEBUG    2023-08-19 15:20:58,382: stack ['$42compare_op.5']
DEBUG    2023-08-19 15:20:58,382: end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,382: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,382: stack: []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=46, inst=LOAD_CONST(arg=3, lineno=394)
DEBUG    2023-08-19 15:20:58,382: stack []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=394)
DEBUG    2023-08-19 15:20:58,382: stack ['$const46.0']
DEBUG    2023-08-19 15:20:58,382: end state. edges=[]
DEBUG    2023-08-19 15:20:58,382: pending: deque([State(pc_initial=50 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,382: stack: []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=50, inst=LOAD_GLOBAL(arg=1, lineno=396)
DEBUG    2023-08-19 15:20:58,382: stack []
DEBUG    2023-08-19 15:20:58,382: dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=396)
DEBUG    2023-08-19 15:20:58,382: stack ['$50load_global.0']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=396)
DEBUG    2023-08-19 15:20:58,382: stack ['$50load_global.0', '$n52.1']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=56, inst=GET_ITER(arg=None, lineno=396)
DEBUG    2023-08-19 15:20:58,382: stack ['$54call_function.2']
DEBUG    2023-08-19 15:20:58,382: end state. edges=[Edge(pc=58, stack=('$56get_iter.3',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,382: pending: deque([State(pc_initial=58 nstack_initial=1)])
DEBUG    2023-08-19 15:20:58,382: stack: ['$phi58.0']
DEBUG    2023-08-19 15:20:58,382: dispatch pc=58, inst=FOR_ITER(arg=60, lineno=396)
DEBUG    2023-08-19 15:20:58,382: stack ['$phi58.0']
DEBUG    2023-08-19 15:20:58,382: end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0), Edge(pc=60, stack=('$phi58.0', '$58for_iter.2'), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,382: pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=60 nstack_initial=2)])
DEBUG    2023-08-19 15:20:58,382: stack: []
DEBUG    2023-08-19 15:20:58,390: dispatch pc=120, inst=LOAD_CONST(arg=1, lineno=404)
DEBUG    2023-08-19 15:20:58,390: stack []
DEBUG    2023-08-19 15:20:58,390: dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=404)
DEBUG    2023-08-19 15:20:58,390: stack ['$const120.0']
DEBUG    2023-08-19 15:20:58,390: end state. edges=[]
DEBUG    2023-08-19 15:20:58,390: pending: deque([State(pc_initial=60 nstack_initial=2)])
DEBUG    2023-08-19 15:20:58,390: stack: ['$phi60.0', '$phi60.1']
DEBUG    2023-08-19 15:20:58,390: dispatch pc=60, inst=STORE_FAST(arg=5, lineno=396)
DEBUG    2023-08-19 15:20:58,390: stack ['$phi60.0', '$phi60.1']
DEBUG    2023-08-19 15:20:58,390: dispatch pc=62, inst=LOAD_GLOBAL(arg=2, lineno=397)
DEBUG    2023-08-19 15:20:58,390: stack ['$phi60.0']
DEBUG    2023-08-19 15:20:58,390: dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=397)
DEBUG    2023-08-19 15:20:58,390: stack ['$phi60.0', '$62load_global.2']
DEBUG    2023-08-19 15:20:58,390: dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=397)
DEBUG    2023-08-19 15:20:58,390: stack ['$phi60.0', '$62load_global.2', '$a64.3']
DEBUG    2023-08-19 15:20:58,390: dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=397)
DEBUG    2023-08-19 15:20:58,390: stack ['$phi60.0', '$62load_global.2', '$a64.3', '$a_offset66.4']
DEBUG    2023-08-19 15:20:58,390: dispatch pc=70, inst=BINARY_ADD(arg=None, lineno=397)
DEBUG    2023-08-19 15:20:58,390: stack ['$phi60.0', '$62load_global.2', '$a64.3', '$a_offset66.4', '$i68.5']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=397)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$62load_global.2', '$a64.3', '$70binary_add.6']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=74, inst=STORE_FAST(arg=6, lineno=397)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$72call_function.7']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=76, inst=LOAD_GLOBAL(arg=2, lineno=398)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=398)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$76load_global.8']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=398)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$76load_global.8', '$b78.9']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=398)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$76load_global.8', '$b78.9', '$b_offset80.10']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=84, inst=BINARY_ADD(arg=None, lineno=398)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$76load_global.8', '$b78.9', '$b_offset80.10', '$i82.11']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=86, inst=CALL_FUNCTION(arg=2, lineno=398)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$76load_global.8', '$b78.9', '$84binary_add.12']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=88, inst=STORE_FAST(arg=7, lineno=398)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$86call_function.13']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=399)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=92, inst=LOAD_FAST(arg=7, lineno=399)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$a_chr90.14']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=94, inst=COMPARE_OP(arg=0, lineno=399)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$a_chr90.14', '$b_chr92.15']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=104, lineno=399)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi60.0', '$94compare_op.16']
DEBUG    2023-08-19 15:20:58,392: end state. edges=[Edge(pc=98, stack=('$phi60.0',), blockstack=(), npush=0), Edge(pc=104, stack=('$phi60.0',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,392: pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=104 nstack_initial=1)])
DEBUG    2023-08-19 15:20:58,392: stack: ['$phi98.0']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=98, inst=POP_TOP(arg=None, lineno=400)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi98.0']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=100, inst=LOAD_CONST(arg=2, lineno=400)
DEBUG    2023-08-19 15:20:58,392: stack []
DEBUG    2023-08-19 15:20:58,392: dispatch pc=102, inst=RETURN_VALUE(arg=None, lineno=400)
DEBUG    2023-08-19 15:20:58,392: stack ['$const100.1']
DEBUG    2023-08-19 15:20:58,392: end state. edges=[]
DEBUG    2023-08-19 15:20:58,392: pending: deque([State(pc_initial=104 nstack_initial=1)])
DEBUG    2023-08-19 15:20:58,392: stack: ['$phi104.0']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=104, inst=LOAD_FAST(arg=6, lineno=401)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi104.0']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=106, inst=LOAD_FAST(arg=7, lineno=401)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi104.0', '$a_chr104.1']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=108, inst=COMPARE_OP(arg=4, lineno=401)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi104.0', '$a_chr104.1', '$b_chr106.2']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=110, inst=POP_JUMP_IF_FALSE(arg=58, lineno=401)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi104.0', '$108compare_op.3']
DEBUG    2023-08-19 15:20:58,392: end state. edges=[Edge(pc=112, stack=('$phi104.0',), blockstack=(), npush=0), Edge(pc=58, stack=('$phi104.0',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,392: pending: deque([State(pc_initial=112 nstack_initial=1), State(pc_initial=58 nstack_initial=1)])
DEBUG    2023-08-19 15:20:58,392: stack: ['$phi112.0']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=112, inst=POP_TOP(arg=None, lineno=402)
DEBUG    2023-08-19 15:20:58,392: stack ['$phi112.0']
DEBUG    2023-08-19 15:20:58,392: dispatch pc=114, inst=LOAD_CONST(arg=3, lineno=402)
DEBUG    2023-08-19 15:20:58,392: stack []
DEBUG    2023-08-19 15:20:58,392: dispatch pc=116, inst=RETURN_VALUE(arg=None, lineno=402)
DEBUG    2023-08-19 15:20:58,392: stack ['$const114.1']
DEBUG    2023-08-19 15:20:58,392: end state. edges=[]
DEBUG    2023-08-19 15:20:58,392: pending: deque([State(pc_initial=58 nstack_initial=1)])
DEBUG    2023-08-19 15:20:58,392: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:58,392: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=1): {'$phi58.0'},
             State(pc_initial=60 nstack_initial=2): {'$phi60.1'},
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=1): set(),
             State(pc_initial=112 nstack_initial=1): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:58,392: defmap: {'$phi58.0': State(pc_initial=50 nstack_initial=0),
 '$phi60.1': State(pc_initial=58 nstack_initial=1)}
DEBUG    2023-08-19 15:20:58,392: phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi60.0', State(pc_initial=60 nstack_initial=2))},
             '$phi112.0': {('$phi104.0',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0)),
                          ('$phi104.0',
                           State(pc_initial=104 nstack_initial=1))},
             '$phi60.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$phi60.0', State(pc_initial=60 nstack_initial=2))}})
DEBUG    2023-08-19 15:20:58,392: changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi112.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0)),
                          ('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG    2023-08-19 15:20:58,392: changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi112.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG    2023-08-19 15:20:58,392: changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi112.0': {('$56get_iter.3',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi58.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))},
             '$phi98.0': {('$56get_iter.3',
                           State(pc_initial=50 nstack_initial=0))}})
DEBUG    2023-08-19 15:20:58,392: keep phismap: {'$phi58.0': {('$56get_iter.3', State(pc_initial=50 nstack_initial=0))},
 '$phi60.1': {('$58for_iter.2', State(pc_initial=58 nstack_initial=1))}}
DEBUG    2023-08-19 15:20:58,392: new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=50 nstack_initial=0): {'$phi58.0': '$56get_iter.3'},
             State(pc_initial=58 nstack_initial=1): {'$phi60.1': '$58for_iter.2'}})
DEBUG    2023-08-19 15:20:58,400: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$n2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$n2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$a_offset14.0'}), (16, {'res': '$n16.1'}), (18, {'lhs': '$a_offset14.0', 'rhs': '$n16.1', 'res': '$18binary_add.2'}), (20, {'res': '$a20.3'}), (22, {'item': '$a20.3', 'res': '$22load_attr.4'}), (24, {'lhs': '$18binary_add.2', 'rhs': '$22load_attr.4', 'res': '$24compare_op.5'}), (26, {'pred': '$24compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 32: ()})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$const28.0'}), (30, {'retval': '$const28.0', 'castval': '$30return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$b_offset32.0'}), (34, {'res': '$n34.1'}), (36, {'lhs': '$b_offset32.0', 'rhs': '$n34.1', 'res': '$36binary_add.2'}), (38, {'res': '$b38.3'}), (40, {'item': '$b38.3', 'res': '$40load_attr.4'}), (42, {'lhs': '$36binary_add.2', 'rhs': '$40load_attr.4', 'res': '$42compare_op.5'}), (44, {'pred': '$42compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: (), 50: ()})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$const46.0'}), (48, {'retval': '$const46.0', 'castval': '$48return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.0'}), (52, {'res': '$n52.1'}), (54, {'func': '$50load_global.0', 'args': ['$n52.1'], 'res': '$54call_function.2'}), (56, {'value': '$54call_function.2', 'res': '$56get_iter.3'})), outgoing_phis={'$phi58.0': '$56get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ('$56get_iter.3',)})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=58 nstack_initial=1):
AdaptBlockInfo(insts=((58, {'iterator': '$phi58.0', 'pair': '$58for_iter.1', 'indval': '$58for_iter.2', 'pred': '$58for_iter.3'}),), outgoing_phis={'$phi60.1': '$58for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: (), 60: ('$phi58.0', '$58for_iter.2')})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=60 nstack_initial=2):
AdaptBlockInfo(insts=((60, {'value': '$phi60.1'}), (62, {'res': '$62load_global.2'}), (64, {'res': '$a64.3'}), (66, {'res': '$a_offset66.4'}), (68, {'res': '$i68.5'}), (70, {'lhs': '$a_offset66.4', 'rhs': '$i68.5', 'res': '$70binary_add.6'}), (72, {'func': '$62load_global.2', 'args': ['$a64.3', '$70binary_add.6'], 'res': '$72call_function.7'}), (74, {'value': '$72call_function.7'}), (76, {'res': '$76load_global.8'}), (78, {'res': '$b78.9'}), (80, {'res': '$b_offset80.10'}), (82, {'res': '$i82.11'}), (84, {'lhs': '$b_offset80.10', 'rhs': '$i82.11', 'res': '$84binary_add.12'}), (86, {'func': '$76load_global.8', 'args': ['$b78.9', '$84binary_add.12'], 'res': '$86call_function.13'}), (88, {'value': '$86call_function.13'}), (90, {'res': '$a_chr90.14'}), (92, {'res': '$b_chr92.15'}), (94, {'lhs': '$a_chr90.14', 'rhs': '$b_chr92.15', 'res': '$94compare_op.16'}), (96, {'pred': '$94compare_op.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi60.0',), 104: ('$phi60.0',)})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((100, {'res': '$const100.1'}), (102, {'retval': '$const100.1', 'castval': '$102return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=104 nstack_initial=1):
AdaptBlockInfo(insts=((104, {'res': '$a_chr104.1'}), (106, {'res': '$b_chr106.2'}), (108, {'lhs': '$a_chr104.1', 'rhs': '$b_chr106.2', 'res': '$108compare_op.3'}), (110, {'pred': '$108compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: ('$phi104.0',), 58: ('$phi104.0',)})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=112 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'res': '$const114.1'}), (116, {'retval': '$const114.1', 'castval': '$116return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,400: block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$const120.0'}), (122, {'retval': '$const120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,402: label 0:
    a = arg(0, name=a)                       ['a']
    a_offset = arg(1, name=a_offset)         ['a_offset']
    b = arg(2, name=b)                       ['b']
    b_offset = arg(3, name=b_offset)         ['b_offset']
    n = arg(4, name=n)                       ['n']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = n == $const4.1          ['$6compare_op.2', '$const4.1', 'n']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, unicode.py:389),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $18binary_add.2 = a_offset + n           ['$18binary_add.2', 'a_offset', 'n']
    $22load_attr.4 = getattr(value=a, attr=_length) ['$22load_attr.4', 'a']
    $24compare_op.5 = $18binary_add.2 > $22load_attr.4 ['$18binary_add.2', '$22load_attr.4', '$24compare_op.5']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.5, func=bool26, args=(Var($24compare_op.5, unicode.py:391),), kws=(), vararg=None, target=None) ['$24compare_op.5', '$26pred', 'bool26']
    branch $26pred, 28, 32                   ['$26pred']
label 28:
    $const28.0 = const(int, -1)              ['$const28.0']
    $30return_value.1 = cast(value=$const28.0) ['$30return_value.1', '$const28.0']
    return $30return_value.1                 ['$30return_value.1']
label 32:
    $36binary_add.2 = b_offset + n           ['$36binary_add.2', 'b_offset', 'n']
    $40load_attr.4 = getattr(value=b, attr=_length) ['$40load_attr.4', 'b']
    $42compare_op.5 = $36binary_add.2 > $40load_attr.4 ['$36binary_add.2', '$40load_attr.4', '$42compare_op.5']
    bool44 = global(bool: <class 'bool'>)    ['bool44']
    $44pred = call bool44($42compare_op.5, func=bool44, args=(Var($42compare_op.5, unicode.py:393),), kws=(), vararg=None, target=None) ['$42compare_op.5', '$44pred', 'bool44']
    branch $44pred, 46, 50                   ['$44pred']
label 46:
    $const46.0 = const(int, 1)               ['$const46.0']
    $48return_value.1 = cast(value=$const46.0) ['$48return_value.1', '$const46.0']
    return $48return_value.1                 ['$48return_value.1']
label 50:
    $50load_global.0 = global(range: <class 'range'>) ['$50load_global.0']
    $54call_function.2 = call $50load_global.0(n, func=$50load_global.0, args=[Var(n, unicode.py:389)], kws=(), vararg=None, target=None) ['$50load_global.0', '$54call_function.2', 'n']
    $56get_iter.3 = getiter(value=$54call_function.2) ['$54call_function.2', '$56get_iter.3']
    $phi58.0 = $56get_iter.3                 ['$56get_iter.3', '$phi58.0']
    jump 58                                  []
label 58:
    $58for_iter.1 = iternext(value=$phi58.0) ['$58for_iter.1', '$phi58.0']
    $58for_iter.2 = pair_first(value=$58for_iter.1) ['$58for_iter.1', '$58for_iter.2']
    $58for_iter.3 = pair_second(value=$58for_iter.1) ['$58for_iter.1', '$58for_iter.3']
    $phi60.1 = $58for_iter.2                 ['$58for_iter.2', '$phi60.1']
    branch $58for_iter.3, 60, 120            ['$58for_iter.3']
label 60:
    i = $phi60.1                             ['$phi60.1', 'i']
    $62load_global.2 = global(_get_code_point: <function _get_code_point at 0x0000025F319C74C0>) ['$62load_global.2']
    $70binary_add.6 = a_offset + i           ['$70binary_add.6', 'a_offset', 'i']
    a_chr = call $62load_global.2(a, $70binary_add.6, func=$62load_global.2, args=[Var(a, unicode.py:389), Var($70binary_add.6, unicode.py:397)], kws=(), vararg=None, target=None) ['$62load_global.2', '$70binary_add.6', 'a', 'a_chr']
    $76load_global.8 = global(_get_code_point: <function _get_code_point at 0x0000025F319C74C0>) ['$76load_global.8']
    $84binary_add.12 = b_offset + i          ['$84binary_add.12', 'b_offset', 'i']
    b_chr = call $76load_global.8(b, $84binary_add.12, func=$76load_global.8, args=[Var(b, unicode.py:389), Var($84binary_add.12, unicode.py:398)], kws=(), vararg=None, target=None) ['$76load_global.8', '$84binary_add.12', 'b', 'b_chr']
    $94compare_op.16 = a_chr < b_chr         ['$94compare_op.16', 'a_chr', 'b_chr']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94compare_op.16, func=bool96, args=(Var($94compare_op.16, unicode.py:399),), kws=(), vararg=None, target=None) ['$94compare_op.16', '$96pred', 'bool96']
    branch $96pred, 98, 104                  ['$96pred']
label 98:
    $const100.1 = const(int, -1)             ['$const100.1']
    $102return_value.2 = cast(value=$const100.1) ['$102return_value.2', '$const100.1']
    return $102return_value.2                ['$102return_value.2']
label 104:
    $108compare_op.3 = a_chr > b_chr         ['$108compare_op.3', 'a_chr', 'b_chr']
    bool110 = global(bool: <class 'bool'>)   ['bool110']
    $110pred = call bool110($108compare_op.3, func=bool110, args=(Var($108compare_op.3, unicode.py:401),), kws=(), vararg=None, target=None) ['$108compare_op.3', '$110pred', 'bool110']
    branch $110pred, 112, 58                 ['$110pred']
label 112:
    $const114.1 = const(int, 1)              ['$const114.1']
    $116return_value.2 = cast(value=$const114.1) ['$116return_value.2', '$const114.1']
    return $116return_value.2                ['$116return_value.2']
label 120:
    $const120.0 = const(int, 0)              ['$const120.0']
    $122return_value.1 = cast(value=$const120.0) ['$122return_value.1', '$const120.0']
    return $122return_value.1                ['$122return_value.1']

DEBUG    2023-08-19 15:20:58,412: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:58,412: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,412: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:20:58,412: on stmt: a_offset = arg(1, name=a_offset)
DEBUG    2023-08-19 15:20:58,412: on stmt: b = arg(2, name=b)
DEBUG    2023-08-19 15:20:58,412: on stmt: b_offset = arg(3, name=b_offset)
DEBUG    2023-08-19 15:20:58,412: on stmt: n = arg(4, name=n)
DEBUG    2023-08-19 15:20:58,412: on stmt: $const4.1 = const(int, 0)
DEBUG    2023-08-19 15:20:58,412: on stmt: $6compare_op.2 = n == $const4.1
DEBUG    2023-08-19 15:20:58,412: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,412: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, unicode.py:389),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,412: on stmt: branch $8pred, 10, 14
DEBUG    2023-08-19 15:20:58,412: ==== SSA block analysis pass on 10
DEBUG    2023-08-19 15:20:58,412: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,412: on stmt: $const10.0 = const(int, 0)
DEBUG    2023-08-19 15:20:58,412: on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG    2023-08-19 15:20:58,412: on stmt: return $12return_value.1
DEBUG    2023-08-19 15:20:58,412: ==== SSA block analysis pass on 14
DEBUG    2023-08-19 15:20:58,412: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,412: on stmt: $18binary_add.2 = a_offset + n
DEBUG    2023-08-19 15:20:58,412: on stmt: $22load_attr.4 = getattr(value=a, attr=_length)
DEBUG    2023-08-19 15:20:58,412: on stmt: $24compare_op.5 = $18binary_add.2 > $22load_attr.4
DEBUG    2023-08-19 15:20:58,412: on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,412: on stmt: $26pred = call bool26($24compare_op.5, func=bool26, args=(Var($24compare_op.5, unicode.py:391),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,412: on stmt: branch $26pred, 28, 32
DEBUG    2023-08-19 15:20:58,412: ==== SSA block analysis pass on 28
DEBUG    2023-08-19 15:20:58,412: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,412: on stmt: $const28.0 = const(int, -1)
DEBUG    2023-08-19 15:20:58,412: on stmt: $30return_value.1 = cast(value=$const28.0)
DEBUG    2023-08-19 15:20:58,412: on stmt: return $30return_value.1
DEBUG    2023-08-19 15:20:58,412: ==== SSA block analysis pass on 32
DEBUG    2023-08-19 15:20:58,412: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,412: on stmt: $36binary_add.2 = b_offset + n
DEBUG    2023-08-19 15:20:58,412: on stmt: $40load_attr.4 = getattr(value=b, attr=_length)
DEBUG    2023-08-19 15:20:58,412: on stmt: $42compare_op.5 = $36binary_add.2 > $40load_attr.4
DEBUG    2023-08-19 15:20:58,412: on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,412: on stmt: $44pred = call bool44($42compare_op.5, func=bool44, args=(Var($42compare_op.5, unicode.py:393),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,412: on stmt: branch $44pred, 46, 50
DEBUG    2023-08-19 15:20:58,412: ==== SSA block analysis pass on 46
DEBUG    2023-08-19 15:20:58,412: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,412: on stmt: $const46.0 = const(int, 1)
DEBUG    2023-08-19 15:20:58,412: on stmt: $48return_value.1 = cast(value=$const46.0)
DEBUG    2023-08-19 15:20:58,412: on stmt: return $48return_value.1
DEBUG    2023-08-19 15:20:58,412: ==== SSA block analysis pass on 50
DEBUG    2023-08-19 15:20:58,420: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,420: on stmt: $50load_global.0 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:58,420: on stmt: $54call_function.2 = call $50load_global.0(n, func=$50load_global.0, args=[Var(n, unicode.py:389)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,420: on stmt: $56get_iter.3 = getiter(value=$54call_function.2)
DEBUG    2023-08-19 15:20:58,420: on stmt: $phi58.0 = $56get_iter.3
DEBUG    2023-08-19 15:20:58,420: on stmt: jump 58
DEBUG    2023-08-19 15:20:58,420: ==== SSA block analysis pass on 58
DEBUG    2023-08-19 15:20:58,420: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,420: on stmt: $58for_iter.1 = iternext(value=$phi58.0)
DEBUG    2023-08-19 15:20:58,420: on stmt: $58for_iter.2 = pair_first(value=$58for_iter.1)
DEBUG    2023-08-19 15:20:58,420: on stmt: $58for_iter.3 = pair_second(value=$58for_iter.1)
DEBUG    2023-08-19 15:20:58,420: on stmt: $phi60.1 = $58for_iter.2
DEBUG    2023-08-19 15:20:58,420: on stmt: branch $58for_iter.3, 60, 120
DEBUG    2023-08-19 15:20:58,420: ==== SSA block analysis pass on 60
DEBUG    2023-08-19 15:20:58,420: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,420: on stmt: i = $phi60.1
DEBUG    2023-08-19 15:20:58,420: on stmt: $62load_global.2 = global(_get_code_point: <function _get_code_point at 0x0000025F319C74C0>)
DEBUG    2023-08-19 15:20:58,420: on stmt: $70binary_add.6 = a_offset + i
DEBUG    2023-08-19 15:20:58,420: on stmt: a_chr = call $62load_global.2(a, $70binary_add.6, func=$62load_global.2, args=[Var(a, unicode.py:389), Var($70binary_add.6, unicode.py:397)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,420: on stmt: $76load_global.8 = global(_get_code_point: <function _get_code_point at 0x0000025F319C74C0>)
DEBUG    2023-08-19 15:20:58,420: on stmt: $84binary_add.12 = b_offset + i
DEBUG    2023-08-19 15:20:58,420: on stmt: b_chr = call $76load_global.8(b, $84binary_add.12, func=$76load_global.8, args=[Var(b, unicode.py:389), Var($84binary_add.12, unicode.py:398)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,420: on stmt: $94compare_op.16 = a_chr < b_chr
DEBUG    2023-08-19 15:20:58,420: on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,420: on stmt: $96pred = call bool96($94compare_op.16, func=bool96, args=(Var($94compare_op.16, unicode.py:399),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,422: on stmt: branch $96pred, 98, 104
DEBUG    2023-08-19 15:20:58,422: ==== SSA block analysis pass on 98
DEBUG    2023-08-19 15:20:58,422: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,422: on stmt: $const100.1 = const(int, -1)
DEBUG    2023-08-19 15:20:58,422: on stmt: $102return_value.2 = cast(value=$const100.1)
DEBUG    2023-08-19 15:20:58,422: on stmt: return $102return_value.2
DEBUG    2023-08-19 15:20:58,422: ==== SSA block analysis pass on 104
DEBUG    2023-08-19 15:20:58,422: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,422: on stmt: $108compare_op.3 = a_chr > b_chr
DEBUG    2023-08-19 15:20:58,422: on stmt: bool110 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,423: on stmt: $110pred = call bool110($108compare_op.3, func=bool110, args=(Var($108compare_op.3, unicode.py:401),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,423: on stmt: branch $110pred, 112, 58
DEBUG    2023-08-19 15:20:58,423: ==== SSA block analysis pass on 112
DEBUG    2023-08-19 15:20:58,423: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,423: on stmt: $const114.1 = const(int, 1)
DEBUG    2023-08-19 15:20:58,423: on stmt: $116return_value.2 = cast(value=$const114.1)
DEBUG    2023-08-19 15:20:58,423: on stmt: return $116return_value.2
DEBUG    2023-08-19 15:20:58,423: ==== SSA block analysis pass on 120
DEBUG    2023-08-19 15:20:58,423: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33249CA0>
DEBUG    2023-08-19 15:20:58,423: on stmt: $const120.0 = const(int, 0)
DEBUG    2023-08-19 15:20:58,423: on stmt: $122return_value.1 = cast(value=$const120.0)
DEBUG    2023-08-19 15:20:58,423: on stmt: return $122return_value.1
DEBUG    2023-08-19 15:20:58,425: defs defaultdict(<class 'list'>,
            {'$102return_value.2': [<numba.core.ir.Assign object at 0x0000025F33242F10>],
             '$108compare_op.3': [<numba.core.ir.Assign object at 0x0000025F33247910>],
             '$110pred': [<numba.core.ir.Assign object at 0x0000025F33247B80>],
             '$116return_value.2': [<numba.core.ir.Assign object at 0x0000025F33247EE0>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x0000025F33249340>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x0000025F3322FDC0>],
             '$18binary_add.2': [<numba.core.ir.Assign object at 0x0000025F3323A310>],
             '$22load_attr.4': [<numba.core.ir.Assign object at 0x0000025F3323A580>],
             '$24compare_op.5': [<numba.core.ir.Assign object at 0x0000025F3323A730>],
             '$26pred': [<numba.core.ir.Assign object at 0x0000025F3323A9A0>],
             '$30return_value.1': [<numba.core.ir.Assign object at 0x0000025F3323ACA0>],
             '$36binary_add.2': [<numba.core.ir.Assign object at 0x0000025F332401F0>],
             '$40load_attr.4': [<numba.core.ir.Assign object at 0x0000025F33240460>],
             '$42compare_op.5': [<numba.core.ir.Assign object at 0x0000025F33240610>],
             '$44pred': [<numba.core.ir.Assign object at 0x0000025F33240880>],
             '$48return_value.1': [<numba.core.ir.Assign object at 0x0000025F33240B80>],
             '$50load_global.0': [<numba.core.ir.Assign object at 0x0000025F33240E20>],
             '$54call_function.2': [<numba.core.ir.Assign object at 0x0000025F33242160>],
             '$56get_iter.3': [<numba.core.ir.Assign object at 0x0000025F33242280>],
             '$58for_iter.1': [<numba.core.ir.Assign object at 0x0000025F332425B0>],
             '$58for_iter.2': [<numba.core.ir.Assign object at 0x0000025F332426D0>],
             '$58for_iter.3': [<numba.core.ir.Assign object at 0x0000025F332427F0>],
             '$62load_global.2': [<numba.core.ir.Assign object at 0x0000025F33242C40>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000025F3322F790>],
             '$70binary_add.6': [<numba.core.ir.Assign object at 0x0000025F33244190>],
             '$76load_global.8': [<numba.core.ir.Assign object at 0x0000025F33244580>],
             '$84binary_add.12': [<numba.core.ir.Assign object at 0x0000025F33244A90>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000025F3322FA00>],
             '$94compare_op.16': [<numba.core.ir.Assign object at 0x0000025F33247130>],
             '$96pred': [<numba.core.ir.Assign object at 0x0000025F332473A0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x0000025F3322FC40>],
             '$const100.1': [<numba.core.ir.Assign object at 0x0000025F33244EB0>],
             '$const114.1': [<numba.core.ir.Assign object at 0x0000025F33247D60>],
             '$const120.0': [<numba.core.ir.Assign object at 0x0000025F332491C0>],
             '$const28.0': [<numba.core.ir.Assign object at 0x0000025F3323AB20>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F3322F5E0>],
             '$const46.0': [<numba.core.ir.Assign object at 0x0000025F33240A00>],
             '$phi58.0': [<numba.core.ir.Assign object at 0x0000025F33240FD0>],
             '$phi60.1': [<numba.core.ir.Assign object at 0x0000025F332424F0>],
             'a': [<numba.core.ir.Assign object at 0x0000025F3320E430>],
             'a_chr': [<numba.core.ir.Assign object at 0x0000025F33244340>],
             'a_offset': [<numba.core.ir.Assign object at 0x0000025F3320E640>],
             'b': [<numba.core.ir.Assign object at 0x0000025F3322F100>],
             'b_chr': [<numba.core.ir.Assign object at 0x0000025F33244C40>],
             'b_offset': [<numba.core.ir.Assign object at 0x0000025F3322F220>],
             'bool110': [<numba.core.ir.Assign object at 0x0000025F33247A60>],
             'bool26': [<numba.core.ir.Assign object at 0x0000025F3323A880>],
             'bool44': [<numba.core.ir.Assign object at 0x0000025F33240760>],
             'bool8': [<numba.core.ir.Assign object at 0x0000025F3322F8E0>],
             'bool96': [<numba.core.ir.Assign object at 0x0000025F33247280>],
             'i': [<numba.core.ir.Assign object at 0x0000025F33242AC0>],
             'n': [<numba.core.ir.Assign object at 0x0000025F3322F340>]})
DEBUG    2023-08-19 15:20:58,425: SSA violators set()
DEBUG    2023-08-19 15:20:58,447: bytecode dump:
>          0	NOP(arg=None, lineno=285)
           2	LOAD_FAST(arg=0, lineno=285)
           4	LOAD_ATTR(arg=0, lineno=285)
           6	LOAD_GLOBAL(arg=1, lineno=285)
           8	COMPARE_OP(arg=2, lineno=285)
          10	POP_JUMP_IF_FALSE(arg=24, lineno=285)
          12	LOAD_GLOBAL(arg=2, lineno=286)
          14	LOAD_FAST(arg=0, lineno=286)
          16	LOAD_ATTR(arg=3, lineno=286)
          18	LOAD_FAST(arg=1, lineno=286)
          20	CALL_FUNCTION(arg=2, lineno=286)
          22	RETURN_VALUE(arg=None, lineno=286)
>         24	LOAD_FAST(arg=0, lineno=287)
          26	LOAD_ATTR(arg=0, lineno=287)
          28	LOAD_GLOBAL(arg=4, lineno=287)
          30	COMPARE_OP(arg=2, lineno=287)
          32	POP_JUMP_IF_FALSE(arg=46, lineno=287)
          34	LOAD_GLOBAL(arg=5, lineno=288)
          36	LOAD_FAST(arg=0, lineno=288)
          38	LOAD_ATTR(arg=3, lineno=288)
          40	LOAD_FAST(arg=1, lineno=288)
          42	CALL_FUNCTION(arg=2, lineno=288)
          44	RETURN_VALUE(arg=None, lineno=288)
>         46	LOAD_FAST(arg=0, lineno=289)
          48	LOAD_ATTR(arg=0, lineno=289)
          50	LOAD_GLOBAL(arg=6, lineno=289)
          52	COMPARE_OP(arg=2, lineno=289)
          54	POP_JUMP_IF_FALSE(arg=68, lineno=289)
          56	LOAD_GLOBAL(arg=7, lineno=290)
          58	LOAD_FAST(arg=0, lineno=290)
          60	LOAD_ATTR(arg=3, lineno=290)
          62	LOAD_FAST(arg=1, lineno=290)
          64	CALL_FUNCTION(arg=2, lineno=290)
          66	RETURN_VALUE(arg=None, lineno=290)
>         68	LOAD_CONST(arg=1, lineno=294)
          70	RETURN_VALUE(arg=None, lineno=294)
          72	LOAD_CONST(arg=0, lineno=294)
          74	RETURN_VALUE(arg=None, lineno=294)
DEBUG    2023-08-19 15:20:58,447: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,447: stack: []
DEBUG    2023-08-19 15:20:58,447: dispatch pc=0, inst=NOP(arg=None, lineno=285)
DEBUG    2023-08-19 15:20:58,447: stack []
DEBUG    2023-08-19 15:20:58,447: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=285)
DEBUG    2023-08-19 15:20:58,447: stack []
DEBUG    2023-08-19 15:20:58,448: dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=285)
DEBUG    2023-08-19 15:20:58,448: stack ['$a2.0']
DEBUG    2023-08-19 15:20:58,448: dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=285)
DEBUG    2023-08-19 15:20:58,448: stack ['$4load_attr.1']
DEBUG    2023-08-19 15:20:58,448: dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=285)
DEBUG    2023-08-19 15:20:58,448: stack ['$4load_attr.1', '$6load_global.2']
DEBUG    2023-08-19 15:20:58,448: dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=24, lineno=285)
DEBUG    2023-08-19 15:20:58,448: stack ['$8compare_op.3']
DEBUG    2023-08-19 15:20:58,448: end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,449: pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,449: stack: []
DEBUG    2023-08-19 15:20:58,449: dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=286)
DEBUG    2023-08-19 15:20:58,449: stack []
DEBUG    2023-08-19 15:20:58,449: dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=286)
DEBUG    2023-08-19 15:20:58,449: stack ['$12load_global.0']
DEBUG    2023-08-19 15:20:58,449: dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=286)
DEBUG    2023-08-19 15:20:58,449: stack ['$12load_global.0', '$a14.1']
DEBUG    2023-08-19 15:20:58,449: dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=286)
DEBUG    2023-08-19 15:20:58,450: stack ['$12load_global.0', '$16load_attr.2']
DEBUG    2023-08-19 15:20:58,450: dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=286)
DEBUG    2023-08-19 15:20:58,450: stack ['$12load_global.0', '$16load_attr.2', '$i18.3']
DEBUG    2023-08-19 15:20:58,450: dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=286)
DEBUG    2023-08-19 15:20:58,450: stack ['$20call_function.4']
DEBUG    2023-08-19 15:20:58,450: end state. edges=[]
DEBUG    2023-08-19 15:20:58,450: pending: deque([State(pc_initial=24 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,450: stack: []
DEBUG    2023-08-19 15:20:58,450: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=287)
DEBUG    2023-08-19 15:20:58,450: stack []
DEBUG    2023-08-19 15:20:58,451: dispatch pc=26, inst=LOAD_ATTR(arg=0, lineno=287)
DEBUG    2023-08-19 15:20:58,451: stack ['$a24.0']
DEBUG    2023-08-19 15:20:58,451: dispatch pc=28, inst=LOAD_GLOBAL(arg=4, lineno=287)
DEBUG    2023-08-19 15:20:58,451: stack ['$26load_attr.1']
DEBUG    2023-08-19 15:20:58,451: dispatch pc=30, inst=COMPARE_OP(arg=2, lineno=287)
DEBUG    2023-08-19 15:20:58,451: stack ['$26load_attr.1', '$28load_global.2']
DEBUG    2023-08-19 15:20:58,451: dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=46, lineno=287)
DEBUG    2023-08-19 15:20:58,451: stack ['$30compare_op.3']
DEBUG    2023-08-19 15:20:58,451: end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,452: pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,452: stack: []
DEBUG    2023-08-19 15:20:58,452: dispatch pc=34, inst=LOAD_GLOBAL(arg=5, lineno=288)
DEBUG    2023-08-19 15:20:58,452: stack []
DEBUG    2023-08-19 15:20:58,452: dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=288)
DEBUG    2023-08-19 15:20:58,452: stack ['$34load_global.0']
DEBUG    2023-08-19 15:20:58,452: dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=288)
DEBUG    2023-08-19 15:20:58,452: stack ['$34load_global.0', '$a36.1']
DEBUG    2023-08-19 15:20:58,452: dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=288)
DEBUG    2023-08-19 15:20:58,452: stack ['$34load_global.0', '$38load_attr.2']
DEBUG    2023-08-19 15:20:58,452: dispatch pc=42, inst=CALL_FUNCTION(arg=2, lineno=288)
DEBUG    2023-08-19 15:20:58,453: stack ['$34load_global.0', '$38load_attr.2', '$i40.3']
DEBUG    2023-08-19 15:20:58,453: dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=288)
DEBUG    2023-08-19 15:20:58,453: stack ['$42call_function.4']
DEBUG    2023-08-19 15:20:58,453: end state. edges=[]
DEBUG    2023-08-19 15:20:58,453: pending: deque([State(pc_initial=46 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,453: stack: []
DEBUG    2023-08-19 15:20:58,453: dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=289)
DEBUG    2023-08-19 15:20:58,453: stack []
DEBUG    2023-08-19 15:20:58,453: dispatch pc=48, inst=LOAD_ATTR(arg=0, lineno=289)
DEBUG    2023-08-19 15:20:58,453: stack ['$a46.0']
DEBUG    2023-08-19 15:20:58,453: dispatch pc=50, inst=LOAD_GLOBAL(arg=6, lineno=289)
DEBUG    2023-08-19 15:20:58,453: stack ['$48load_attr.1']
DEBUG    2023-08-19 15:20:58,454: dispatch pc=52, inst=COMPARE_OP(arg=2, lineno=289)
DEBUG    2023-08-19 15:20:58,454: stack ['$48load_attr.1', '$50load_global.2']
DEBUG    2023-08-19 15:20:58,454: dispatch pc=54, inst=POP_JUMP_IF_FALSE(arg=68, lineno=289)
DEBUG    2023-08-19 15:20:58,454: stack ['$52compare_op.3']
DEBUG    2023-08-19 15:20:58,454: end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:58,454: pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,454: stack: []
DEBUG    2023-08-19 15:20:58,454: dispatch pc=56, inst=LOAD_GLOBAL(arg=7, lineno=290)
DEBUG    2023-08-19 15:20:58,454: stack []
DEBUG    2023-08-19 15:20:58,454: dispatch pc=58, inst=LOAD_FAST(arg=0, lineno=290)
DEBUG    2023-08-19 15:20:58,454: stack ['$56load_global.0']
DEBUG    2023-08-19 15:20:58,455: dispatch pc=60, inst=LOAD_ATTR(arg=3, lineno=290)
DEBUG    2023-08-19 15:20:58,455: stack ['$56load_global.0', '$a58.1']
DEBUG    2023-08-19 15:20:58,455: dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=290)
DEBUG    2023-08-19 15:20:58,455: stack ['$56load_global.0', '$60load_attr.2']
DEBUG    2023-08-19 15:20:58,455: dispatch pc=64, inst=CALL_FUNCTION(arg=2, lineno=290)
DEBUG    2023-08-19 15:20:58,455: stack ['$56load_global.0', '$60load_attr.2', '$i62.3']
DEBUG    2023-08-19 15:20:58,455: dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=290)
DEBUG    2023-08-19 15:20:58,455: stack ['$64call_function.4']
DEBUG    2023-08-19 15:20:58,455: end state. edges=[]
DEBUG    2023-08-19 15:20:58,455: pending: deque([State(pc_initial=68 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,455: stack: []
DEBUG    2023-08-19 15:20:58,455: dispatch pc=68, inst=LOAD_CONST(arg=1, lineno=294)
DEBUG    2023-08-19 15:20:58,456: stack []
DEBUG    2023-08-19 15:20:58,456: dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=294)
DEBUG    2023-08-19 15:20:58,456: stack ['$const68.0']
DEBUG    2023-08-19 15:20:58,456: end state. edges=[]
DEBUG    2023-08-19 15:20:58,456: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:58,456: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:58,456: defmap: {}
DEBUG    2023-08-19 15:20:58,456: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,456: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,456: keep phismap: {}
DEBUG    2023-08-19 15:20:58,456: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:58,456: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:58,456: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$6load_global.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$6load_global.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 24: ()})
DEBUG    2023-08-19 15:20:58,456: block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$a14.1'}), (16, {'item': '$a14.1', 'res': '$16load_attr.2'}), (18, {'res': '$i18.3'}), (20, {'func': '$12load_global.0', 'args': ['$16load_attr.2', '$i18.3'], 'res': '$20call_function.4'}), (22, {'retval': '$20call_function.4', 'castval': '$22return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,456: block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$a24.0'}), (26, {'item': '$a24.0', 'res': '$26load_attr.1'}), (28, {'res': '$28load_global.2'}), (30, {'lhs': '$26load_attr.1', 'rhs': '$28load_global.2', 'res': '$30compare_op.3'}), (32, {'pred': '$30compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 46: ()})
DEBUG    2023-08-19 15:20:58,456: block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'res': '$i40.3'}), (42, {'func': '$34load_global.0', 'args': ['$38load_attr.2', '$i40.3'], 'res': '$42call_function.4'}), (44, {'retval': '$42call_function.4', 'castval': '$44return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,456: block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$a46.0'}), (48, {'item': '$a46.0', 'res': '$48load_attr.1'}), (50, {'res': '$50load_global.2'}), (52, {'lhs': '$48load_attr.1', 'rhs': '$50load_global.2', 'res': '$52compare_op.3'}), (54, {'pred': '$52compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 68: ()})
DEBUG    2023-08-19 15:20:58,456: block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$56load_global.0'}), (58, {'res': '$a58.1'}), (60, {'item': '$a58.1', 'res': '$60load_attr.2'}), (62, {'res': '$i62.3'}), (64, {'func': '$56load_global.0', 'args': ['$60load_attr.2', '$i62.3'], 'res': '$64call_function.4'}), (66, {'retval': '$64call_function.4', 'castval': '$66return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,456: block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$const68.0'}), (70, {'retval': '$const68.0', 'castval': '$70return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,456: label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $4load_attr.1 = getattr(value=a, attr=_kind) ['$4load_attr.1', 'a']
    $6load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1) ['$6load_global.2']
    $8compare_op.3 = $4load_attr.1 == $6load_global.2 ['$4load_attr.1', '$6load_global.2', '$8compare_op.3']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, unicode.py:285),), kws=(), vararg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 24                   ['$10pred']
label 12:
    $12load_global.0 = global(deref_uint8: <intrinsic deref_uint8>) ['$12load_global.0']
    $16load_attr.2 = getattr(value=a, attr=_data) ['$16load_attr.2', 'a']
    $20call_function.4 = call $12load_global.0($16load_attr.2, i, func=$12load_global.0, args=[Var($16load_attr.2, unicode.py:286), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16load_attr.2', '$20call_function.4', 'i']
    $22return_value.5 = cast(value=$20call_function.4) ['$20call_function.4', '$22return_value.5']
    return $22return_value.5                 ['$22return_value.5']
label 24:
    $26load_attr.1 = getattr(value=a, attr=_kind) ['$26load_attr.1', 'a']
    $28load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2) ['$28load_global.2']
    $30compare_op.3 = $26load_attr.1 == $28load_global.2 ['$26load_attr.1', '$28load_global.2', '$30compare_op.3']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.3, func=bool32, args=(Var($30compare_op.3, unicode.py:287),), kws=(), vararg=None, target=None) ['$30compare_op.3', '$32pred', 'bool32']
    branch $32pred, 34, 46                   ['$32pred']
label 34:
    $34load_global.0 = global(deref_uint16: <intrinsic deref_uint16>) ['$34load_global.0']
    $38load_attr.2 = getattr(value=a, attr=_data) ['$38load_attr.2', 'a']
    $42call_function.4 = call $34load_global.0($38load_attr.2, i, func=$34load_global.0, args=[Var($38load_attr.2, unicode.py:288), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$34load_global.0', '$38load_attr.2', '$42call_function.4', 'i']
    $44return_value.5 = cast(value=$42call_function.4) ['$42call_function.4', '$44return_value.5']
    return $44return_value.5                 ['$44return_value.5']
label 46:
    $48load_attr.1 = getattr(value=a, attr=_kind) ['$48load_attr.1', 'a']
    $50load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4) ['$50load_global.2']
    $52compare_op.3 = $48load_attr.1 == $50load_global.2 ['$48load_attr.1', '$50load_global.2', '$52compare_op.3']
    bool54 = global(bool: <class 'bool'>)    ['bool54']
    $54pred = call bool54($52compare_op.3, func=bool54, args=(Var($52compare_op.3, unicode.py:289),), kws=(), vararg=None, target=None) ['$52compare_op.3', '$54pred', 'bool54']
    branch $54pred, 56, 68                   ['$54pred']
label 56:
    $56load_global.0 = global(deref_uint32: <intrinsic deref_uint32>) ['$56load_global.0']
    $60load_attr.2 = getattr(value=a, attr=_data) ['$60load_attr.2', 'a']
    $64call_function.4 = call $56load_global.0($60load_attr.2, i, func=$56load_global.0, args=[Var($60load_attr.2, unicode.py:290), Var(i, unicode.py:285)], kws=(), vararg=None, target=None) ['$56load_global.0', '$60load_attr.2', '$64call_function.4', 'i']
    $66return_value.5 = cast(value=$64call_function.4) ['$64call_function.4', '$66return_value.5']
    return $66return_value.5                 ['$66return_value.5']
label 68:
    $const68.0 = const(int, 0)               ['$const68.0']
    $70return_value.1 = cast(value=$const68.0) ['$70return_value.1', '$const68.0']
    return $70return_value.1                 ['$70return_value.1']

DEBUG    2023-08-19 15:20:58,463: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:58,463: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331E9310>
DEBUG    2023-08-19 15:20:58,463: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:20:58,463: on stmt: i = arg(1, name=i)
DEBUG    2023-08-19 15:20:58,463: on stmt: $4load_attr.1 = getattr(value=a, attr=_kind)
DEBUG    2023-08-19 15:20:58,463: on stmt: $6load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1)
DEBUG    2023-08-19 15:20:58,463: on stmt: $8compare_op.3 = $4load_attr.1 == $6load_global.2
DEBUG    2023-08-19 15:20:58,463: on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,463: on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, unicode.py:285),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,463: on stmt: branch $10pred, 12, 24
DEBUG    2023-08-19 15:20:58,463: ==== SSA block analysis pass on 12
DEBUG    2023-08-19 15:20:58,463: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331E9310>
DEBUG    2023-08-19 15:20:58,463: on stmt: $12load_global.0 = global(deref_uint8: <intrinsic deref_uint8>)
DEBUG    2023-08-19 15:20:58,463: on stmt: $16load_attr.2 = getattr(value=a, attr=_data)
DEBUG    2023-08-19 15:20:58,463: on stmt: $20call_function.4 = call $12load_global.0($16load_attr.2, i, func=$12load_global.0, args=[Var($16load_attr.2, unicode.py:286), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,463: on stmt: $22return_value.5 = cast(value=$20call_function.4)
DEBUG    2023-08-19 15:20:58,463: on stmt: return $22return_value.5
DEBUG    2023-08-19 15:20:58,463: ==== SSA block analysis pass on 24
DEBUG    2023-08-19 15:20:58,463: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331E9310>
DEBUG    2023-08-19 15:20:58,463: on stmt: $26load_attr.1 = getattr(value=a, attr=_kind)
DEBUG    2023-08-19 15:20:58,463: on stmt: $28load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2)
DEBUG    2023-08-19 15:20:58,463: on stmt: $30compare_op.3 = $26load_attr.1 == $28load_global.2
DEBUG    2023-08-19 15:20:58,463: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,463: on stmt: $32pred = call bool32($30compare_op.3, func=bool32, args=(Var($30compare_op.3, unicode.py:287),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,463: on stmt: branch $32pred, 34, 46
DEBUG    2023-08-19 15:20:58,463: ==== SSA block analysis pass on 34
DEBUG    2023-08-19 15:20:58,463: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331E9310>
DEBUG    2023-08-19 15:20:58,463: on stmt: $34load_global.0 = global(deref_uint16: <intrinsic deref_uint16>)
DEBUG    2023-08-19 15:20:58,463: on stmt: $38load_attr.2 = getattr(value=a, attr=_data)
DEBUG    2023-08-19 15:20:58,463: on stmt: $42call_function.4 = call $34load_global.0($38load_attr.2, i, func=$34load_global.0, args=[Var($38load_attr.2, unicode.py:288), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,463: on stmt: $44return_value.5 = cast(value=$42call_function.4)
DEBUG    2023-08-19 15:20:58,463: on stmt: return $44return_value.5
DEBUG    2023-08-19 15:20:58,463: ==== SSA block analysis pass on 46
DEBUG    2023-08-19 15:20:58,463: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331E9310>
DEBUG    2023-08-19 15:20:58,463: on stmt: $48load_attr.1 = getattr(value=a, attr=_kind)
DEBUG    2023-08-19 15:20:58,463: on stmt: $50load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4)
DEBUG    2023-08-19 15:20:58,463: on stmt: $52compare_op.3 = $48load_attr.1 == $50load_global.2
DEBUG    2023-08-19 15:20:58,463: on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:58,463: on stmt: $54pred = call bool54($52compare_op.3, func=bool54, args=(Var($52compare_op.3, unicode.py:289),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,463: on stmt: branch $54pred, 56, 68
DEBUG    2023-08-19 15:20:58,463: ==== SSA block analysis pass on 56
DEBUG    2023-08-19 15:20:58,463: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331E9310>
DEBUG    2023-08-19 15:20:58,463: on stmt: $56load_global.0 = global(deref_uint32: <intrinsic deref_uint32>)
DEBUG    2023-08-19 15:20:58,463: on stmt: $60load_attr.2 = getattr(value=a, attr=_data)
DEBUG    2023-08-19 15:20:58,463: on stmt: $64call_function.4 = call $56load_global.0($60load_attr.2, i, func=$56load_global.0, args=[Var($60load_attr.2, unicode.py:290), Var(i, unicode.py:285)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:58,463: on stmt: $66return_value.5 = cast(value=$64call_function.4)
DEBUG    2023-08-19 15:20:58,463: on stmt: return $66return_value.5
DEBUG    2023-08-19 15:20:58,463: ==== SSA block analysis pass on 68
DEBUG    2023-08-19 15:20:58,463: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F331E9310>
DEBUG    2023-08-19 15:20:58,463: on stmt: $const68.0 = const(int, 0)
DEBUG    2023-08-19 15:20:58,463: on stmt: $70return_value.1 = cast(value=$const68.0)
DEBUG    2023-08-19 15:20:58,463: on stmt: return $70return_value.1
DEBUG    2023-08-19 15:20:58,463: defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x0000025F331BBF40>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x0000025F331BB790>],
             '$16load_attr.2': [<numba.core.ir.Assign object at 0x0000025F331BB7F0>],
             '$20call_function.4': [<numba.core.ir.Assign object at 0x0000025F331BBA30>],
             '$22return_value.5': [<numba.core.ir.Assign object at 0x0000025F331BBB80>],
             '$26load_attr.1': [<numba.core.ir.Assign object at 0x0000025F331BB040>],
             '$28load_global.2': [<numba.core.ir.Assign object at 0x0000025F331C9C40>],
             '$30compare_op.3': [<numba.core.ir.Assign object at 0x0000025F331C9AF0>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000025F331C9790>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x0000025F331C95B0>],
             '$38load_attr.2': [<numba.core.ir.Assign object at 0x0000025F331C92B0>],
             '$42call_function.4': [<numba.core.ir.Assign object at 0x0000025F331C9520>],
             '$44return_value.5': [<numba.core.ir.Assign object at 0x0000025F331C9040>],
             '$48load_attr.1': [<numba.core.ir.Assign object at 0x0000025F331ABC40>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000025F331BD0D0>],
             '$50load_global.2': [<numba.core.ir.Assign object at 0x0000025F331ABA90>],
             '$52compare_op.3': [<numba.core.ir.Assign object at 0x0000025F331ABA30>],
             '$54pred': [<numba.core.ir.Assign object at 0x0000025F331ABEE0>],
             '$56load_global.0': [<numba.core.ir.Assign object at 0x0000025F331E9850>],
             '$60load_attr.2': [<numba.core.ir.Assign object at 0x0000025F331ED460>],
             '$64call_function.4': [<numba.core.ir.Assign object at 0x0000025F331EDE50>],
             '$66return_value.5': [<numba.core.ir.Assign object at 0x0000025F331ED370>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x0000025F331A2160>],
             '$70return_value.1': [<numba.core.ir.Assign object at 0x0000025F331AB130>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x0000025F331A2880>],
             '$const68.0': [<numba.core.ir.Assign object at 0x0000025F331AB580>],
             'a': [<numba.core.ir.Assign object at 0x0000025F331ED220>],
             'bool10': [<numba.core.ir.Assign object at 0x0000025F331BBDC0>],
             'bool32': [<numba.core.ir.Assign object at 0x0000025F331C98B0>],
             'bool54': [<numba.core.ir.Assign object at 0x0000025F331ABDF0>],
             'i': [<numba.core.ir.Assign object at 0x0000025F331BDE20>]})
DEBUG    2023-08-19 15:20:58,463: SSA violators set()
DEBUG    2023-08-19 15:20:58,989: bytecode dump:
>          0	NOP(arg=None, lineno=33)
           2	LOAD_FAST(arg=2, lineno=33)
           4	LOAD_FAST(arg=0, lineno=33)
           6	LOAD_FAST(arg=1, lineno=33)
           8	STORE_SUBSCR(arg=None, lineno=33)
          10	LOAD_CONST(arg=0, lineno=33)
          12	RETURN_VALUE(arg=None, lineno=33)
DEBUG    2023-08-19 15:20:58,989: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,989: stack: []
DEBUG    2023-08-19 15:20:58,989: dispatch pc=0, inst=NOP(arg=None, lineno=33)
DEBUG    2023-08-19 15:20:58,989: stack []
DEBUG    2023-08-19 15:20:58,989: dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=33)
DEBUG    2023-08-19 15:20:58,989: stack []
DEBUG    2023-08-19 15:20:58,989: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=33)
DEBUG    2023-08-19 15:20:58,989: stack ['$value2.0']
DEBUG    2023-08-19 15:20:58,989: dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=33)
DEBUG    2023-08-19 15:20:58,989: stack ['$value2.0', '$d4.1']
DEBUG    2023-08-19 15:20:58,989: dispatch pc=8, inst=STORE_SUBSCR(arg=None, lineno=33)
DEBUG    2023-08-19 15:20:58,989: stack ['$value2.0', '$d4.1', '$key6.2']
DEBUG    2023-08-19 15:20:58,989: dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=33)
DEBUG    2023-08-19 15:20:58,989: stack []
DEBUG    2023-08-19 15:20:58,989: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=33)
DEBUG    2023-08-19 15:20:58,989: stack ['$const10.3']
DEBUG    2023-08-19 15:20:58,989: end state. edges=[]
DEBUG    2023-08-19 15:20:58,989: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:58,989: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:58,989: defmap: {}
DEBUG    2023-08-19 15:20:58,989: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,989: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:58,989: keep phismap: {}
DEBUG    2023-08-19 15:20:58,989: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:58,989: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:58,989: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$d4.1'}), (6, {'res': '$key6.2'}), (8, {'target': '$d4.1', 'index': '$key6.2', 'value': '$value2.0'}), (10, {'res': '$const10.3'}), (12, {'retval': '$const10.3', 'castval': '$12return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:58,989: label 0:
    d = arg(0, name=d)                       ['d']
    key = arg(1, name=key)                   ['key']
    value = arg(2, name=value)               ['value']
    d[key] = value                           ['d', 'key', 'value']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12return_value.4 = cast(value=$const10.3) ['$12return_value.4', '$const10.3']
    return $12return_value.4                 ['$12return_value.4']

DEBUG    2023-08-19 15:20:58,997: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:58,997: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3304D8B0>
DEBUG    2023-08-19 15:20:58,997: on stmt: d = arg(0, name=d)
DEBUG    2023-08-19 15:20:58,997: on stmt: key = arg(1, name=key)
DEBUG    2023-08-19 15:20:58,997: on stmt: value = arg(2, name=value)
DEBUG    2023-08-19 15:20:58,997: on stmt: d[key] = value
DEBUG    2023-08-19 15:20:58,997: on stmt: $const10.3 = const(NoneType, None)
DEBUG    2023-08-19 15:20:58,997: on stmt: $12return_value.4 = cast(value=$const10.3)
DEBUG    2023-08-19 15:20:58,997: on stmt: return $12return_value.4
DEBUG    2023-08-19 15:20:58,997: defs defaultdict(<class 'list'>,
            {'$12return_value.4': [<numba.core.ir.Assign object at 0x0000025F3332A4C0>],
             '$const10.3': [<numba.core.ir.Assign object at 0x0000025F3332A340>],
             'd': [<numba.core.ir.Assign object at 0x0000025F33322280>],
             'key': [<numba.core.ir.Assign object at 0x0000025F33322310>],
             'value': [<numba.core.ir.Assign object at 0x0000025F33322D60>]})
DEBUG    2023-08-19 15:20:58,997: SSA violators set()
DEBUG    2023-08-19 15:20:58,999: bytecode dump:
>          0	NOP(arg=None, lineno=683)
           2	LOAD_GLOBAL(arg=0, lineno=683)
           4	LOAD_FAST(arg=1, lineno=683)
           6	LOAD_DEREF(arg=0, lineno=683)
           8	CALL_FUNCTION(arg=2, lineno=683)
          10	STORE_FAST(arg=3, lineno=683)
          12	LOAD_GLOBAL(arg=0, lineno=684)
          14	LOAD_FAST(arg=2, lineno=684)
          16	LOAD_DEREF(arg=1, lineno=684)
          18	CALL_FUNCTION(arg=2, lineno=684)
          20	STORE_FAST(arg=4, lineno=684)
          22	LOAD_GLOBAL(arg=1, lineno=685)
          24	LOAD_FAST(arg=0, lineno=685)
          26	LOAD_FAST(arg=3, lineno=685)
          28	LOAD_GLOBAL(arg=2, lineno=685)
          30	LOAD_FAST(arg=3, lineno=685)
          32	CALL_FUNCTION(arg=1, lineno=685)
          34	LOAD_FAST(arg=4, lineno=685)
          36	CALL_FUNCTION(arg=4, lineno=685)
          38	STORE_FAST(arg=5, lineno=685)
          40	LOAD_FAST(arg=5, lineno=686)
          42	LOAD_GLOBAL(arg=3, lineno=686)
          44	LOAD_ATTR(arg=4, lineno=686)
          46	COMPARE_OP(arg=2, lineno=686)
          48	POP_JUMP_IF_FALSE(arg=54, lineno=686)
          50	LOAD_CONST(arg=0, lineno=687)
          52	RETURN_VALUE(arg=None, lineno=687)
>         54	LOAD_FAST(arg=5, lineno=688)
          56	LOAD_GLOBAL(arg=3, lineno=688)
          58	LOAD_ATTR(arg=5, lineno=688)
          60	COMPARE_OP(arg=2, lineno=688)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=688)
          64	LOAD_CONST(arg=0, lineno=691)
          66	RETURN_VALUE(arg=None, lineno=691)
>         68	LOAD_FAST(arg=5, lineno=692)
          70	LOAD_GLOBAL(arg=3, lineno=692)
          72	LOAD_ATTR(arg=6, lineno=692)
          74	COMPARE_OP(arg=2, lineno=692)
          76	POP_JUMP_IF_FALSE(arg=88, lineno=692)
          78	LOAD_GLOBAL(arg=7, lineno=693)
          80	LOAD_CONST(arg=1, lineno=693)
          82	CALL_FUNCTION(arg=1, lineno=693)
          84	RAISE_VARARGS(arg=1, lineno=693)
          86	JUMP_FORWARD(arg=8, lineno=693)
>         88	LOAD_GLOBAL(arg=8, lineno=695)
          90	LOAD_CONST(arg=2, lineno=695)
          92	CALL_FUNCTION(arg=1, lineno=695)
          94	RAISE_VARARGS(arg=1, lineno=695)
>         96	LOAD_CONST(arg=0, lineno=695)
          98	RETURN_VALUE(arg=None, lineno=695)
DEBUG    2023-08-19 15:20:58,999: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:58,999: stack: []
DEBUG    2023-08-19 15:20:58,999: dispatch pc=0, inst=NOP(arg=None, lineno=683)
DEBUG    2023-08-19 15:20:58,999: stack []
DEBUG    2023-08-19 15:20:58,999: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=683)
DEBUG    2023-08-19 15:20:58,999: stack []
DEBUG    2023-08-19 15:20:58,999: dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=683)
DEBUG    2023-08-19 15:20:58,999: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=6, inst=LOAD_DEREF(arg=0, lineno=683)
DEBUG    2023-08-19 15:20:58,999: stack ['$2load_global.0', '$key4.1']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=683)
DEBUG    2023-08-19 15:20:58,999: stack ['$2load_global.0', '$key4.1', '$6load_deref.2']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=10, inst=STORE_FAST(arg=3, lineno=683)
DEBUG    2023-08-19 15:20:58,999: stack ['$8call_function.3']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=684)
DEBUG    2023-08-19 15:20:58,999: stack []
DEBUG    2023-08-19 15:20:58,999: dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=684)
DEBUG    2023-08-19 15:20:58,999: stack ['$12load_global.4']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=16, inst=LOAD_DEREF(arg=1, lineno=684)
DEBUG    2023-08-19 15:20:58,999: stack ['$12load_global.4', '$value14.5']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=18, inst=CALL_FUNCTION(arg=2, lineno=684)
DEBUG    2023-08-19 15:20:58,999: stack ['$12load_global.4', '$value14.5', '$16load_deref.6']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=20, inst=STORE_FAST(arg=4, lineno=684)
DEBUG    2023-08-19 15:20:58,999: stack ['$18call_function.7']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack []
DEBUG    2023-08-19 15:20:58,999: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack ['$22load_global.8']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack ['$22load_global.8', '$d24.9']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=28, inst=LOAD_GLOBAL(arg=2, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack ['$22load_global.8', '$d24.9', '$castedkey26.10']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack ['$22load_global.8', '$d24.9', '$castedkey26.10', '$28load_global.11']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack ['$22load_global.8', '$d24.9', '$castedkey26.10', '$28load_global.11', '$castedkey30.12']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack ['$22load_global.8', '$d24.9', '$castedkey26.10', '$32call_function.13']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=36, inst=CALL_FUNCTION(arg=4, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack ['$22load_global.8', '$d24.9', '$castedkey26.10', '$32call_function.13', '$castedval34.14']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=38, inst=STORE_FAST(arg=5, lineno=685)
DEBUG    2023-08-19 15:20:58,999: stack ['$36call_function.15']
DEBUG    2023-08-19 15:20:58,999: dispatch pc=40, inst=LOAD_FAST(arg=5, lineno=686)
DEBUG    2023-08-19 15:20:58,999: stack []
DEBUG    2023-08-19 15:20:59,005: dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=686)
DEBUG    2023-08-19 15:20:59,005: stack ['$status40.16']
DEBUG    2023-08-19 15:20:59,005: dispatch pc=44, inst=LOAD_ATTR(arg=4, lineno=686)
DEBUG    2023-08-19 15:20:59,005: stack ['$status40.16', '$42load_global.17']
DEBUG    2023-08-19 15:20:59,005: dispatch pc=46, inst=COMPARE_OP(arg=2, lineno=686)
DEBUG    2023-08-19 15:20:59,005: stack ['$status40.16', '$44load_attr.18']
DEBUG    2023-08-19 15:20:59,005: dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=54, lineno=686)
DEBUG    2023-08-19 15:20:59,005: stack ['$46compare_op.19']
DEBUG    2023-08-19 15:20:59,006: end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,006: pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,006: stack: []
DEBUG    2023-08-19 15:20:59,006: dispatch pc=50, inst=LOAD_CONST(arg=0, lineno=687)
DEBUG    2023-08-19 15:20:59,006: stack []
DEBUG    2023-08-19 15:20:59,006: dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=687)
DEBUG    2023-08-19 15:20:59,006: stack ['$const50.0']
DEBUG    2023-08-19 15:20:59,006: end state. edges=[]
DEBUG    2023-08-19 15:20:59,006: pending: deque([State(pc_initial=54 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,007: stack: []
DEBUG    2023-08-19 15:20:59,007: dispatch pc=54, inst=LOAD_FAST(arg=5, lineno=688)
DEBUG    2023-08-19 15:20:59,007: stack []
DEBUG    2023-08-19 15:20:59,007: dispatch pc=56, inst=LOAD_GLOBAL(arg=3, lineno=688)
DEBUG    2023-08-19 15:20:59,007: stack ['$status54.0']
DEBUG    2023-08-19 15:20:59,007: dispatch pc=58, inst=LOAD_ATTR(arg=5, lineno=688)
DEBUG    2023-08-19 15:20:59,007: stack ['$status54.0', '$56load_global.1']
DEBUG    2023-08-19 15:20:59,007: dispatch pc=60, inst=COMPARE_OP(arg=2, lineno=688)
DEBUG    2023-08-19 15:20:59,007: stack ['$status54.0', '$58load_attr.2']
DEBUG    2023-08-19 15:20:59,008: dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=688)
DEBUG    2023-08-19 15:20:59,008: stack ['$60compare_op.3']
DEBUG    2023-08-19 15:20:59,008: end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,008: pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,008: stack: []
DEBUG    2023-08-19 15:20:59,008: dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=691)
DEBUG    2023-08-19 15:20:59,008: stack []
DEBUG    2023-08-19 15:20:59,008: dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=691)
DEBUG    2023-08-19 15:20:59,008: stack ['$const64.0']
DEBUG    2023-08-19 15:20:59,008: end state. edges=[]
DEBUG    2023-08-19 15:20:59,009: pending: deque([State(pc_initial=68 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,009: stack: []
DEBUG    2023-08-19 15:20:59,009: dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=692)
DEBUG    2023-08-19 15:20:59,009: stack []
DEBUG    2023-08-19 15:20:59,009: dispatch pc=70, inst=LOAD_GLOBAL(arg=3, lineno=692)
DEBUG    2023-08-19 15:20:59,009: stack ['$status68.0']
DEBUG    2023-08-19 15:20:59,009: dispatch pc=72, inst=LOAD_ATTR(arg=6, lineno=692)
DEBUG    2023-08-19 15:20:59,009: stack ['$status68.0', '$70load_global.1']
DEBUG    2023-08-19 15:20:59,009: dispatch pc=74, inst=COMPARE_OP(arg=2, lineno=692)
DEBUG    2023-08-19 15:20:59,009: stack ['$status68.0', '$72load_attr.2']
DEBUG    2023-08-19 15:20:59,009: dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=88, lineno=692)
DEBUG    2023-08-19 15:20:59,009: stack ['$74compare_op.3']
DEBUG    2023-08-19 15:20:59,010: end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,010: pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,010: stack: []
DEBUG    2023-08-19 15:20:59,010: dispatch pc=78, inst=LOAD_GLOBAL(arg=7, lineno=693)
DEBUG    2023-08-19 15:20:59,010: stack []
DEBUG    2023-08-19 15:20:59,010: dispatch pc=80, inst=LOAD_CONST(arg=1, lineno=693)
DEBUG    2023-08-19 15:20:59,010: stack ['$78load_global.0']
DEBUG    2023-08-19 15:20:59,010: dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=693)
DEBUG    2023-08-19 15:20:59,010: stack ['$78load_global.0', '$const80.1']
DEBUG    2023-08-19 15:20:59,010: dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=693)
DEBUG    2023-08-19 15:20:59,010: stack ['$82call_function.2']
DEBUG    2023-08-19 15:20:59,011: end state. edges=[]
DEBUG    2023-08-19 15:20:59,011: pending: deque([State(pc_initial=88 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,011: stack: []
DEBUG    2023-08-19 15:20:59,011: dispatch pc=88, inst=LOAD_GLOBAL(arg=8, lineno=695)
DEBUG    2023-08-19 15:20:59,011: stack []
DEBUG    2023-08-19 15:20:59,011: dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=695)
DEBUG    2023-08-19 15:20:59,011: stack ['$88load_global.0']
DEBUG    2023-08-19 15:20:59,011: dispatch pc=92, inst=CALL_FUNCTION(arg=1, lineno=695)
DEBUG    2023-08-19 15:20:59,011: stack ['$88load_global.0', '$const90.1']
DEBUG    2023-08-19 15:20:59,011: dispatch pc=94, inst=RAISE_VARARGS(arg=1, lineno=695)
DEBUG    2023-08-19 15:20:59,011: stack ['$92call_function.2']
DEBUG    2023-08-19 15:20:59,011: end state. edges=[]
DEBUG    2023-08-19 15:20:59,012: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,012: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,012: defmap: {}
DEBUG    2023-08-19 15:20:59,012: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,012: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,012: keep phismap: {}
DEBUG    2023-08-19 15:20:59,012: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,012: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,012: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$key4.1'}), (6, {'res': '$6load_deref.2'}), (8, {'func': '$2load_global.0', 'args': ['$key4.1', '$6load_deref.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$value14.5'}), (16, {'res': '$16load_deref.6'}), (18, {'func': '$12load_global.4', 'args': ['$value14.5', '$16load_deref.6'], 'res': '$18call_function.7'}), (20, {'value': '$18call_function.7'}), (22, {'res': '$22load_global.8'}), (24, {'res': '$d24.9'}), (26, {'res': '$castedkey26.10'}), (28, {'res': '$28load_global.11'}), (30, {'res': '$castedkey30.12'}), (32, {'func': '$28load_global.11', 'args': ['$castedkey30.12'], 'res': '$32call_function.13'}), (34, {'res': '$castedval34.14'}), (36, {'func': '$22load_global.8', 'args': ['$d24.9', '$castedkey26.10', '$32call_function.13', '$castedval34.14'], 'res': '$36call_function.15'}), (38, {'value': '$36call_function.15'}), (40, {'res': '$status40.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'lhs': '$status40.16', 'rhs': '$44load_attr.18', 'res': '$46compare_op.19'}), (48, {'pred': '$46compare_op.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 54: ()})
DEBUG    2023-08-19 15:20:59,013: block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}), (52, {'retval': '$const50.0', 'castval': '$52return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,013: block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$status54.0'}), (56, {'res': '$56load_global.1'}), (58, {'item': '$56load_global.1', 'res': '$58load_attr.2'}), (60, {'lhs': '$status54.0', 'rhs': '$58load_attr.2', 'res': '$60compare_op.3'}), (62, {'pred': '$60compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG    2023-08-19 15:20:59,013: block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$const64.0'}), (66, {'retval': '$const64.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,013: block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$status68.0'}), (70, {'res': '$70load_global.1'}), (72, {'item': '$70load_global.1', 'res': '$72load_attr.2'}), (74, {'lhs': '$status68.0', 'rhs': '$72load_attr.2', 'res': '$74compare_op.3'}), (76, {'pred': '$74compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 88: ()})
DEBUG    2023-08-19 15:20:59,013: block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,013: block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$88load_global.0'}), (90, {'res': '$const90.1'}), (92, {'func': '$88load_global.0', 'args': ['$const90.1'], 'res': '$92call_function.2'}), (94, {'exc': '$92call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,015: label 0:
    d = arg(0, name=d)                       ['d']
    key = arg(1, name=key)                   ['key']
    value = arg(2, name=value)               ['value']
    $2load_global.0 = global(_cast: <intrinsic _cast>) ['$2load_global.0']
    $6load_deref.2 = freevar(keyty: unicode_type) ['$6load_deref.2']
    castedkey = call $2load_global.0(key, $6load_deref.2, func=$2load_global.0, args=[Var(key, dictobject.py:683), Var($6load_deref.2, dictobject.py:683)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6load_deref.2', 'castedkey', 'key']
    $12load_global.4 = global(_cast: <intrinsic _cast>) ['$12load_global.4']
    $16load_deref.6 = freevar(valty: float64) ['$16load_deref.6']
    castedval = call $12load_global.4(value, $16load_deref.6, func=$12load_global.4, args=[Var(value, dictobject.py:683), Var($16load_deref.6, dictobject.py:684)], kws=(), vararg=None, target=None) ['$12load_global.4', '$16load_deref.6', 'castedval', 'value']
    $22load_global.8 = global(_dict_insert: <intrinsic _dict_insert>) ['$22load_global.8']
    $28load_global.11 = global(hash: <built-in function hash>) ['$28load_global.11']
    $32call_function.13 = call $28load_global.11(castedkey, func=$28load_global.11, args=[Var(castedkey, dictobject.py:683)], kws=(), vararg=None, target=None) ['$28load_global.11', '$32call_function.13', 'castedkey']
    status = call $22load_global.8(d, castedkey, $32call_function.13, castedval, func=$22load_global.8, args=[Var(d, dictobject.py:683), Var(castedkey, dictobject.py:683), Var($32call_function.13, dictobject.py:685), Var(castedval, dictobject.py:684)], kws=(), vararg=None, target=None) ['$22load_global.8', '$32call_function.13', 'castedkey', 'castedval', 'd', 'status']
    $42load_global.17 = global(Status: <enum 'Status'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=OK) ['$42load_global.17', '$44load_attr.18']
    $46compare_op.19 = status == $44load_attr.18 ['$44load_attr.18', '$46compare_op.19', 'status']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.19, func=bool48, args=(Var($46compare_op.19, dictobject.py:686),), kws=(), vararg=None, target=None) ['$46compare_op.19', '$48pred', 'bool48']
    branch $48pred, 50, 54                   ['$48pred']
label 50:
    $const50.0 = const(NoneType, None)       ['$const50.0']
    $52return_value.1 = cast(value=$const50.0) ['$52return_value.1', '$const50.0']
    return $52return_value.1                 ['$52return_value.1']
label 54:
    $56load_global.1 = global(Status: <enum 'Status'>) ['$56load_global.1']
    $58load_attr.2 = getattr(value=$56load_global.1, attr=OK_REPLACED) ['$56load_global.1', '$58load_attr.2']
    $60compare_op.3 = status == $58load_attr.2 ['$58load_attr.2', '$60compare_op.3', 'status']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60compare_op.3, func=bool62, args=(Var($60compare_op.3, dictobject.py:688),), kws=(), vararg=None, target=None) ['$60compare_op.3', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $70load_global.1 = global(Status: <enum 'Status'>) ['$70load_global.1']
    $72load_attr.2 = getattr(value=$70load_global.1, attr=ERR_CMP_FAILED) ['$70load_global.1', '$72load_attr.2']
    $74compare_op.3 = status == $72load_attr.2 ['$72load_attr.2', '$74compare_op.3', 'status']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.3, func=bool76, args=(Var($74compare_op.3, dictobject.py:692),), kws=(), vararg=None, target=None) ['$74compare_op.3', '$76pred', 'bool76']
    branch $76pred, 78, 88                   ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, key comparison failed) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, dictobject.py:693)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $88load_global.0 = global(RuntimeError: <class 'RuntimeError'>) ['$88load_global.0']
    $const90.1 = const(str, dict.__setitem__ failed unexpectedly) ['$const90.1']
    $92call_function.2 = call $88load_global.0($const90.1, func=$88load_global.0, args=[Var($const90.1, dictobject.py:695)], kws=(), vararg=None, target=None) ['$88load_global.0', '$92call_function.2', '$const90.1']
    raise $92call_function.2                 ['$92call_function.2']

DEBUG    2023-08-19 15:20:59,026: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,026: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3336D430>
DEBUG    2023-08-19 15:20:59,026: on stmt: d = arg(0, name=d)
DEBUG    2023-08-19 15:20:59,026: on stmt: key = arg(1, name=key)
DEBUG    2023-08-19 15:20:59,026: on stmt: value = arg(2, name=value)
DEBUG    2023-08-19 15:20:59,026: on stmt: $2load_global.0 = global(_cast: <intrinsic _cast>)
DEBUG    2023-08-19 15:20:59,026: on stmt: $6load_deref.2 = freevar(keyty: unicode_type)
DEBUG    2023-08-19 15:20:59,027: on stmt: castedkey = call $2load_global.0(key, $6load_deref.2, func=$2load_global.0, args=[Var(key, dictobject.py:683), Var($6load_deref.2, dictobject.py:683)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,027: on stmt: $12load_global.4 = global(_cast: <intrinsic _cast>)
DEBUG    2023-08-19 15:20:59,027: on stmt: $16load_deref.6 = freevar(valty: float64)
DEBUG    2023-08-19 15:20:59,027: on stmt: castedval = call $12load_global.4(value, $16load_deref.6, func=$12load_global.4, args=[Var(value, dictobject.py:683), Var($16load_deref.6, dictobject.py:684)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,027: on stmt: $22load_global.8 = global(_dict_insert: <intrinsic _dict_insert>)
DEBUG    2023-08-19 15:20:59,027: on stmt: $28load_global.11 = global(hash: <built-in function hash>)
DEBUG    2023-08-19 15:20:59,027: on stmt: $32call_function.13 = call $28load_global.11(castedkey, func=$28load_global.11, args=[Var(castedkey, dictobject.py:683)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,027: on stmt: status = call $22load_global.8(d, castedkey, $32call_function.13, castedval, func=$22load_global.8, args=[Var(d, dictobject.py:683), Var(castedkey, dictobject.py:683), Var($32call_function.13, dictobject.py:685), Var(castedval, dictobject.py:684)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,027: on stmt: $42load_global.17 = global(Status: <enum 'Status'>)
DEBUG    2023-08-19 15:20:59,027: on stmt: $44load_attr.18 = getattr(value=$42load_global.17, attr=OK)
DEBUG    2023-08-19 15:20:59,027: on stmt: $46compare_op.19 = status == $44load_attr.18
DEBUG    2023-08-19 15:20:59,027: on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,027: on stmt: $48pred = call bool48($46compare_op.19, func=bool48, args=(Var($46compare_op.19, dictobject.py:686),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,028: on stmt: branch $48pred, 50, 54
DEBUG    2023-08-19 15:20:59,028: ==== SSA block analysis pass on 50
DEBUG    2023-08-19 15:20:59,028: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3336D430>
DEBUG    2023-08-19 15:20:59,028: on stmt: $const50.0 = const(NoneType, None)
DEBUG    2023-08-19 15:20:59,028: on stmt: $52return_value.1 = cast(value=$const50.0)
DEBUG    2023-08-19 15:20:59,028: on stmt: return $52return_value.1
DEBUG    2023-08-19 15:20:59,028: ==== SSA block analysis pass on 54
DEBUG    2023-08-19 15:20:59,028: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3336D430>
DEBUG    2023-08-19 15:20:59,028: on stmt: $56load_global.1 = global(Status: <enum 'Status'>)
DEBUG    2023-08-19 15:20:59,028: on stmt: $58load_attr.2 = getattr(value=$56load_global.1, attr=OK_REPLACED)
DEBUG    2023-08-19 15:20:59,028: on stmt: $60compare_op.3 = status == $58load_attr.2
DEBUG    2023-08-19 15:20:59,028: on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,028: on stmt: $62pred = call bool62($60compare_op.3, func=bool62, args=(Var($60compare_op.3, dictobject.py:688),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,028: on stmt: branch $62pred, 64, 68
DEBUG    2023-08-19 15:20:59,029: ==== SSA block analysis pass on 64
DEBUG    2023-08-19 15:20:59,029: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3336D430>
DEBUG    2023-08-19 15:20:59,029: on stmt: $const64.0 = const(NoneType, None)
DEBUG    2023-08-19 15:20:59,029: on stmt: $66return_value.1 = cast(value=$const64.0)
DEBUG    2023-08-19 15:20:59,029: on stmt: return $66return_value.1
DEBUG    2023-08-19 15:20:59,029: ==== SSA block analysis pass on 68
DEBUG    2023-08-19 15:20:59,029: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3336D430>
DEBUG    2023-08-19 15:20:59,029: on stmt: $70load_global.1 = global(Status: <enum 'Status'>)
DEBUG    2023-08-19 15:20:59,029: on stmt: $72load_attr.2 = getattr(value=$70load_global.1, attr=ERR_CMP_FAILED)
DEBUG    2023-08-19 15:20:59,029: on stmt: $74compare_op.3 = status == $72load_attr.2
DEBUG    2023-08-19 15:20:59,029: on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,029: on stmt: $76pred = call bool76($74compare_op.3, func=bool76, args=(Var($74compare_op.3, dictobject.py:692),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,029: on stmt: branch $76pred, 78, 88
DEBUG    2023-08-19 15:20:59,029: ==== SSA block analysis pass on 78
DEBUG    2023-08-19 15:20:59,029: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3336D430>
DEBUG    2023-08-19 15:20:59,030: on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG    2023-08-19 15:20:59,030: on stmt: $const80.1 = const(str, key comparison failed)
DEBUG    2023-08-19 15:20:59,030: on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, dictobject.py:693)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,030: on stmt: <static> raise <class 'ValueError'>('key comparison failed')
DEBUG    2023-08-19 15:20:59,030: ==== SSA block analysis pass on 88
DEBUG    2023-08-19 15:20:59,030: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3336D430>
DEBUG    2023-08-19 15:20:59,030: on stmt: $88load_global.0 = global(RuntimeError: <class 'RuntimeError'>)
DEBUG    2023-08-19 15:20:59,030: on stmt: $const90.1 = const(str, dict.__setitem__ failed unexpectedly)
DEBUG    2023-08-19 15:20:59,030: on stmt: $92call_function.2 = call $88load_global.0($const90.1, func=$88load_global.0, args=[Var($const90.1, dictobject.py:695)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,030: on stmt: <static> raise <class 'RuntimeError'>('dict.__setitem__ failed unexpectedly')
DEBUG    2023-08-19 15:20:59,031: defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x0000025F3336D760>],
             '$16load_deref.6': [<numba.core.ir.Assign object at 0x0000025F3336D4C0>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x0000025F33376130>],
             '$28load_global.11': [<numba.core.ir.Assign object at 0x0000025F333764F0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F33328790>],
             '$32call_function.13': [<numba.core.ir.Assign object at 0x0000025F333767F0>],
             '$42load_global.17': [<numba.core.ir.Assign object at 0x0000025F33376DF0>],
             '$44load_attr.18': [<numba.core.ir.Assign object at 0x0000025F33376F70>],
             '$46compare_op.19': [<numba.core.ir.Assign object at 0x0000025F33378160>],
             '$48pred': [<numba.core.ir.Assign object at 0x0000025F333783D0>],
             '$52return_value.1': [<numba.core.ir.Assign object at 0x0000025F3336D5B0>],
             '$56load_global.1': [<numba.core.ir.Assign object at 0x0000025F333787F0>],
             '$58load_attr.2': [<numba.core.ir.Assign object at 0x0000025F33378970>],
             '$60compare_op.3': [<numba.core.ir.Assign object at 0x0000025F33378B20>],
             '$62pred': [<numba.core.ir.Assign object at 0x0000025F33378D90>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x0000025F3337A190>],
             '$6load_deref.2': [<numba.core.ir.Assign object at 0x0000025F33328D60>],
             '$70load_global.1': [<numba.core.ir.Assign object at 0x0000025F3337A550>],
             '$72load_attr.2': [<numba.core.ir.Assign object at 0x0000025F3337A6D0>],
             '$74compare_op.3': [<numba.core.ir.Assign object at 0x0000025F3337A880>],
             '$76pred': [<numba.core.ir.Assign object at 0x0000025F3337AAF0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x0000025F3337AD30>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x0000025F3337C0D0>],
             '$88load_global.0': [<numba.core.ir.Assign object at 0x0000025F3337C370>],
             '$92call_function.2': [<numba.core.ir.Assign object at 0x0000025F3337C6D0>],
             '$const50.0': [<numba.core.ir.Assign object at 0x0000025F33376BE0>],
             '$const64.0': [<numba.core.ir.Assign object at 0x0000025F33378FD0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x0000025F3337AEB0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x0000025F3337C4F0>],
             'bool48': [<numba.core.ir.Assign object at 0x0000025F333782B0>],
             'bool62': [<numba.core.ir.Assign object at 0x0000025F33378C70>],
             'bool76': [<numba.core.ir.Assign object at 0x0000025F3337A9D0>],
             'castedkey': [<numba.core.ir.Assign object at 0x0000025F3304DC70>],
             'castedval': [<numba.core.ir.Assign object at 0x0000025F3336DEB0>],
             'd': [<numba.core.ir.Assign object at 0x0000025F3336D940>],
             'key': [<numba.core.ir.Assign object at 0x0000025F3336DA60>],
             'status': [<numba.core.ir.Assign object at 0x0000025F33376A90>],
             'value': [<numba.core.ir.Assign object at 0x0000025F3336DB80>]})
DEBUG    2023-08-19 15:20:59,031: SSA violators set()
DEBUG    2023-08-19 15:20:59,041: bytecode dump:
>          0	NOP(arg=None, lineno=52)
           2	LOAD_FAST(arg=0, lineno=52)
           4	LOAD_METHOD(arg=0, lineno=52)
           6	CALL_METHOD(arg=0, lineno=52)
           8	RETURN_VALUE(arg=None, lineno=52)
DEBUG    2023-08-19 15:20:59,042: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,042: stack: []
DEBUG    2023-08-19 15:20:59,042: dispatch pc=0, inst=NOP(arg=None, lineno=52)
DEBUG    2023-08-19 15:20:59,042: stack []
DEBUG    2023-08-19 15:20:59,042: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=52)
DEBUG    2023-08-19 15:20:59,042: stack []
DEBUG    2023-08-19 15:20:59,042: dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=52)
DEBUG    2023-08-19 15:20:59,042: stack ['$obj2.0']
DEBUG    2023-08-19 15:20:59,042: dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=52)
DEBUG    2023-08-19 15:20:59,042: stack ['$4load_method.1']
DEBUG    2023-08-19 15:20:59,042: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=52)
DEBUG    2023-08-19 15:20:59,043: stack ['$6call_method.2']
DEBUG    2023-08-19 15:20:59,043: end state. edges=[]
DEBUG    2023-08-19 15:20:59,043: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,043: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,043: defmap: {}
DEBUG    2023-08-19 15:20:59,043: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,043: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,043: keep phismap: {}
DEBUG    2023-08-19 15:20:59,043: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,043: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,043: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$obj2.0'}), (4, {'item': '$obj2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'retval': '$6call_method.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,044: label 0:
    obj = arg(0, name=obj)                   ['obj']
    $4load_method.1 = getattr(value=obj, attr=__hash__) ['$4load_method.1', 'obj']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', '$6call_method.2']
    $8return_value.3 = cast(value=$6call_method.2) ['$6call_method.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:20:59,051: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,051: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332FEBB0>
DEBUG    2023-08-19 15:20:59,051: on stmt: obj = arg(0, name=obj)
DEBUG    2023-08-19 15:20:59,052: on stmt: $4load_method.1 = getattr(value=obj, attr=__hash__)
DEBUG    2023-08-19 15:20:59,052: on stmt: $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,052: on stmt: $8return_value.3 = cast(value=$6call_method.2)
DEBUG    2023-08-19 15:20:59,052: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:20:59,052: defs defaultdict(<class 'list'>,
            {'$4load_method.1': [<numba.core.ir.Assign object at 0x0000025F332FED60>],
             '$6call_method.2': [<numba.core.ir.Assign object at 0x0000025F332FED90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F332FEB80>],
             'obj': [<numba.core.ir.Assign object at 0x0000025F332F5C10>]})
DEBUG    2023-08-19 15:20:59,052: SSA violators set()
DEBUG    2023-08-19 15:20:59,055: bytecode dump:
>          0	NOP(arg=None, lineno=749)
           2	LOAD_DEREF(arg=0, lineno=749)
           4	LOAD_FAST(arg=0, lineno=749)
           6	LOAD_ATTR(arg=0, lineno=749)
           8	CALL_FUNCTION(arg=1, lineno=749)
          10	STORE_FAST(arg=1, lineno=749)
          12	LOAD_GLOBAL(arg=1, lineno=750)
          14	LOAD_FAST(arg=0, lineno=750)
          16	CALL_FUNCTION(arg=1, lineno=750)
          18	STORE_FAST(arg=2, lineno=750)
          20	LOAD_FAST(arg=0, lineno=752)
          22	LOAD_ATTR(arg=2, lineno=752)
          24	STORE_FAST(arg=3, lineno=752)
          26	LOAD_FAST(arg=3, lineno=753)
          28	LOAD_CONST(arg=1, lineno=753)
          30	COMPARE_OP(arg=3, lineno=753)
          32	POP_JUMP_IF_FALSE(arg=38, lineno=753)
          34	LOAD_FAST(arg=3, lineno=754)
          36	RETURN_VALUE(arg=None, lineno=754)
>         38	LOAD_GLOBAL(arg=3, lineno=758)
          40	LOAD_FAST(arg=0, lineno=758)
          42	LOAD_ATTR(arg=4, lineno=758)
          44	LOAD_FAST(arg=1, lineno=758)
          46	LOAD_FAST(arg=2, lineno=758)
          48	BINARY_MULTIPLY(arg=None, lineno=758)
          50	CALL_FUNCTION(arg=2, lineno=758)
          52	RETURN_VALUE(arg=None, lineno=758)
          54	LOAD_CONST(arg=0, lineno=758)
          56	RETURN_VALUE(arg=None, lineno=758)
DEBUG    2023-08-19 15:20:59,055: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,055: stack: []
DEBUG    2023-08-19 15:20:59,055: dispatch pc=0, inst=NOP(arg=None, lineno=749)
DEBUG    2023-08-19 15:20:59,055: stack []
DEBUG    2023-08-19 15:20:59,055: dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=749)
DEBUG    2023-08-19 15:20:59,055: stack []
DEBUG    2023-08-19 15:20:59,055: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=749)
DEBUG    2023-08-19 15:20:59,055: stack ['$2load_deref.0']
DEBUG    2023-08-19 15:20:59,055: dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=749)
DEBUG    2023-08-19 15:20:59,055: stack ['$2load_deref.0', '$val4.1']
DEBUG    2023-08-19 15:20:59,055: dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=749)
DEBUG    2023-08-19 15:20:59,055: stack ['$2load_deref.0', '$6load_attr.2']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=10, inst=STORE_FAST(arg=1, lineno=749)
DEBUG    2023-08-19 15:20:59,057: stack ['$8call_function.3']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=750)
DEBUG    2023-08-19 15:20:59,057: stack []
DEBUG    2023-08-19 15:20:59,057: dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=750)
DEBUG    2023-08-19 15:20:59,057: stack ['$12load_global.4']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=750)
DEBUG    2023-08-19 15:20:59,057: stack ['$12load_global.4', '$val14.5']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=18, inst=STORE_FAST(arg=2, lineno=750)
DEBUG    2023-08-19 15:20:59,057: stack ['$16call_function.6']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=752)
DEBUG    2023-08-19 15:20:59,057: stack []
DEBUG    2023-08-19 15:20:59,057: dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=752)
DEBUG    2023-08-19 15:20:59,057: stack ['$val20.7']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=24, inst=STORE_FAST(arg=3, lineno=752)
DEBUG    2023-08-19 15:20:59,057: stack ['$22load_attr.8']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=753)
DEBUG    2023-08-19 15:20:59,057: stack []
DEBUG    2023-08-19 15:20:59,057: dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=753)
DEBUG    2023-08-19 15:20:59,057: stack ['$current_hash26.9']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=30, inst=COMPARE_OP(arg=3, lineno=753)
DEBUG    2023-08-19 15:20:59,057: stack ['$current_hash26.9', '$const28.10']
DEBUG    2023-08-19 15:20:59,057: dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=38, lineno=753)
DEBUG    2023-08-19 15:20:59,060: stack ['$30compare_op.11']
DEBUG    2023-08-19 15:20:59,060: end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,060: pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,060: stack: []
DEBUG    2023-08-19 15:20:59,060: dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=754)
DEBUG    2023-08-19 15:20:59,060: stack []
DEBUG    2023-08-19 15:20:59,060: dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=754)
DEBUG    2023-08-19 15:20:59,060: stack ['$current_hash34.0']
DEBUG    2023-08-19 15:20:59,060: end state. edges=[]
DEBUG    2023-08-19 15:20:59,060: pending: deque([State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,060: stack: []
DEBUG    2023-08-19 15:20:59,060: dispatch pc=38, inst=LOAD_GLOBAL(arg=3, lineno=758)
DEBUG    2023-08-19 15:20:59,060: stack []
DEBUG    2023-08-19 15:20:59,060: dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=758)
DEBUG    2023-08-19 15:20:59,060: stack ['$38load_global.0']
DEBUG    2023-08-19 15:20:59,060: dispatch pc=42, inst=LOAD_ATTR(arg=4, lineno=758)
DEBUG    2023-08-19 15:20:59,060: stack ['$38load_global.0', '$val40.1']
DEBUG    2023-08-19 15:20:59,060: dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=758)
DEBUG    2023-08-19 15:20:59,060: stack ['$38load_global.0', '$42load_attr.2']
DEBUG    2023-08-19 15:20:59,060: dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=758)
DEBUG    2023-08-19 15:20:59,060: stack ['$38load_global.0', '$42load_attr.2', '$kindwidth44.3']
DEBUG    2023-08-19 15:20:59,060: dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=758)
DEBUG    2023-08-19 15:20:59,060: stack ['$38load_global.0', '$42load_attr.2', '$kindwidth44.3', '$_len46.4']
DEBUG    2023-08-19 15:20:59,060: dispatch pc=50, inst=CALL_FUNCTION(arg=2, lineno=758)
DEBUG    2023-08-19 15:20:59,060: stack ['$38load_global.0', '$42load_attr.2', '$48binary_multiply.5']
DEBUG    2023-08-19 15:20:59,060: dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=758)
DEBUG    2023-08-19 15:20:59,060: stack ['$50call_function.6']
DEBUG    2023-08-19 15:20:59,060: end state. edges=[]
DEBUG    2023-08-19 15:20:59,060: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,060: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,060: defmap: {}
DEBUG    2023-08-19 15:20:59,060: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,060: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,060: keep phismap: {}
DEBUG    2023-08-19 15:20:59,060: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,060: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,060: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$val4.1'}), (6, {'item': '$val4.1', 'res': '$6load_attr.2'}), (8, {'func': '$2load_deref.0', 'args': ['$6load_attr.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$val14.5'}), (16, {'func': '$12load_global.4', 'args': ['$val14.5'], 'res': '$16call_function.6'}), (18, {'value': '$16call_function.6'}), (20, {'res': '$val20.7'}), (22, {'item': '$val20.7', 'res': '$22load_attr.8'}), (24, {'value': '$22load_attr.8'}), (26, {'res': '$current_hash26.9'}), (28, {'res': '$const28.10'}), (30, {'lhs': '$current_hash26.9', 'rhs': '$const28.10', 'res': '$30compare_op.11'}), (32, {'pred': '$30compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
DEBUG    2023-08-19 15:20:59,060: block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$current_hash34.0'}), (36, {'retval': '$current_hash34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,060: block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$38load_global.0'}), (40, {'res': '$val40.1'}), (42, {'item': '$val40.1', 'res': '$42load_attr.2'}), (44, {'res': '$kindwidth44.3'}), (46, {'res': '$_len46.4'}), (48, {'lhs': '$kindwidth44.3', 'rhs': '$_len46.4', 'res': '$48binary_multiply.5'}), (50, {'func': '$38load_global.0', 'args': ['$42load_attr.2', '$48binary_multiply.5'], 'res': '$50call_function.6'}), (52, {'retval': '$50call_function.6', 'castval': '$52return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,060: label 0:
    val = arg(0, name=val)                   ['val']
    $2load_deref.0 = freevar(_kind_to_byte_width: <function _kind_to_byte_width at 0x0000025F319C7A60>) ['$2load_deref.0']
    $6load_attr.2 = getattr(value=val, attr=_kind) ['$6load_attr.2', 'val']
    kindwidth = call $2load_deref.0($6load_attr.2, func=$2load_deref.0, args=[Var($6load_attr.2, hashing.py:749)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$6load_attr.2', 'kindwidth']
    $12load_global.4 = global(len: <built-in function len>) ['$12load_global.4']
    _len = call $12load_global.4(val, func=$12load_global.4, args=[Var(val, hashing.py:749)], kws=(), vararg=None, target=None) ['$12load_global.4', '_len', 'val']
    current_hash = getattr(value=val, attr=_hash) ['current_hash', 'val']
    $const28.10 = const(int, -1)             ['$const28.10']
    $30compare_op.11 = current_hash != $const28.10 ['$30compare_op.11', '$const28.10', 'current_hash']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.11, func=bool32, args=(Var($30compare_op.11, hashing.py:753),), kws=(), vararg=None, target=None) ['$30compare_op.11', '$32pred', 'bool32']
    branch $32pred, 34, 38                   ['$32pred']
label 34:
    $36return_value.1 = cast(value=current_hash) ['$36return_value.1', 'current_hash']
    return $36return_value.1                 ['$36return_value.1']
label 38:
    $38load_global.0 = global(_Py_HashBytes: <function _Py_HashBytes at 0x0000025F3199D160>) ['$38load_global.0']
    $42load_attr.2 = getattr(value=val, attr=_data) ['$42load_attr.2', 'val']
    $48binary_multiply.5 = kindwidth * _len  ['$48binary_multiply.5', '_len', 'kindwidth']
    $50call_function.6 = call $38load_global.0($42load_attr.2, $48binary_multiply.5, func=$38load_global.0, args=[Var($42load_attr.2, hashing.py:758), Var($48binary_multiply.5, hashing.py:758)], kws=(), vararg=None, target=None) ['$38load_global.0', '$42load_attr.2', '$48binary_multiply.5', '$50call_function.6']
    $52return_value.7 = cast(value=$50call_function.6) ['$50call_function.6', '$52return_value.7']
    return $52return_value.7                 ['$52return_value.7']

DEBUG    2023-08-19 15:20:59,068: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,068: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332C5CD0>
DEBUG    2023-08-19 15:20:59,068: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:20:59,068: on stmt: $2load_deref.0 = freevar(_kind_to_byte_width: <function _kind_to_byte_width at 0x0000025F319C7A60>)
DEBUG    2023-08-19 15:20:59,068: on stmt: $6load_attr.2 = getattr(value=val, attr=_kind)
DEBUG    2023-08-19 15:20:59,068: on stmt: kindwidth = call $2load_deref.0($6load_attr.2, func=$2load_deref.0, args=[Var($6load_attr.2, hashing.py:749)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,068: on stmt: $12load_global.4 = global(len: <built-in function len>)
DEBUG    2023-08-19 15:20:59,068: on stmt: _len = call $12load_global.4(val, func=$12load_global.4, args=[Var(val, hashing.py:749)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,070: on stmt: current_hash = getattr(value=val, attr=_hash)
DEBUG    2023-08-19 15:20:59,070: on stmt: $const28.10 = const(int, -1)
DEBUG    2023-08-19 15:20:59,070: on stmt: $30compare_op.11 = current_hash != $const28.10
DEBUG    2023-08-19 15:20:59,070: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,070: on stmt: $32pred = call bool32($30compare_op.11, func=bool32, args=(Var($30compare_op.11, hashing.py:753),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,070: on stmt: branch $32pred, 34, 38
DEBUG    2023-08-19 15:20:59,070: ==== SSA block analysis pass on 34
DEBUG    2023-08-19 15:20:59,070: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332C5CD0>
DEBUG    2023-08-19 15:20:59,070: on stmt: $36return_value.1 = cast(value=current_hash)
DEBUG    2023-08-19 15:20:59,070: on stmt: return $36return_value.1
DEBUG    2023-08-19 15:20:59,070: ==== SSA block analysis pass on 38
DEBUG    2023-08-19 15:20:59,070: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332C5CD0>
DEBUG    2023-08-19 15:20:59,070: on stmt: $38load_global.0 = global(_Py_HashBytes: <function _Py_HashBytes at 0x0000025F3199D160>)
DEBUG    2023-08-19 15:20:59,070: on stmt: $42load_attr.2 = getattr(value=val, attr=_data)
DEBUG    2023-08-19 15:20:59,070: on stmt: $48binary_multiply.5 = kindwidth * _len
DEBUG    2023-08-19 15:20:59,070: on stmt: $50call_function.6 = call $38load_global.0($42load_attr.2, $48binary_multiply.5, func=$38load_global.0, args=[Var($42load_attr.2, hashing.py:758), Var($48binary_multiply.5, hashing.py:758)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,070: on stmt: $52return_value.7 = cast(value=$50call_function.6)
DEBUG    2023-08-19 15:20:59,070: on stmt: return $52return_value.7
DEBUG    2023-08-19 15:20:59,070: defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x0000025F33306580>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000025F33306790>],
             '$30compare_op.11': [<numba.core.ir.Assign object at 0x0000025F332C7400>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000025F331FF940>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x0000025F332C5B20>],
             '$38load_global.0': [<numba.core.ir.Assign object at 0x0000025F332C5DF0>],
             '$42load_attr.2': [<numba.core.ir.Assign object at 0x0000025F333608B0>],
             '$48binary_multiply.5': [<numba.core.ir.Assign object at 0x0000025F332C77C0>],
             '$50call_function.6': [<numba.core.ir.Assign object at 0x0000025F332C7E50>],
             '$52return_value.7': [<numba.core.ir.Assign object at 0x0000025F332C7490>],
             '$6load_attr.2': [<numba.core.ir.Assign object at 0x0000025F333066D0>],
             '$const28.10': [<numba.core.ir.Assign object at 0x0000025F332C7310>],
             '_len': [<numba.core.ir.Assign object at 0x0000025F33306490>],
             'bool32': [<numba.core.ir.Assign object at 0x0000025F333065B0>],
             'current_hash': [<numba.core.ir.Assign object at 0x0000025F331C5C70>],
             'kindwidth': [<numba.core.ir.Assign object at 0x0000025F33306C70>],
             'val': [<numba.core.ir.Assign object at 0x0000025F33360DC0>]})
DEBUG    2023-08-19 15:20:59,070: SSA violators set()
DEBUG    2023-08-19 15:20:59,070: bytecode dump:
>          0	NOP(arg=None, lineno=375)
           2	LOAD_FAST(arg=0, lineno=375)
           4	LOAD_GLOBAL(arg=0, lineno=375)
           6	COMPARE_OP(arg=2, lineno=375)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=375)
          10	LOAD_CONST(arg=1, lineno=376)
          12	RETURN_VALUE(arg=None, lineno=376)
>         14	LOAD_FAST(arg=0, lineno=377)
          16	LOAD_GLOBAL(arg=1, lineno=377)
          18	COMPARE_OP(arg=2, lineno=377)
          20	POP_JUMP_IF_FALSE(arg=26, lineno=377)
          22	LOAD_CONST(arg=2, lineno=378)
          24	RETURN_VALUE(arg=None, lineno=378)
>         26	LOAD_FAST(arg=0, lineno=379)
          28	LOAD_GLOBAL(arg=2, lineno=379)
          30	COMPARE_OP(arg=2, lineno=379)
          32	POP_JUMP_IF_FALSE(arg=38, lineno=379)
          34	LOAD_CONST(arg=3, lineno=380)
          36	RETURN_VALUE(arg=None, lineno=380)
>         38	LOAD_FAST(arg=0, lineno=381)
          40	LOAD_GLOBAL(arg=3, lineno=381)
          42	COMPARE_OP(arg=2, lineno=381)
          44	POP_JUMP_IF_FALSE(arg=56, lineno=381)
          46	LOAD_GLOBAL(arg=4, lineno=382)
          48	LOAD_CONST(arg=4, lineno=382)
          50	CALL_FUNCTION(arg=1, lineno=382)
          52	RAISE_VARARGS(arg=1, lineno=382)
          54	JUMP_FORWARD(arg=8, lineno=382)
>         56	LOAD_GLOBAL(arg=4, lineno=384)
          58	LOAD_CONST(arg=5, lineno=384)
          60	CALL_FUNCTION(arg=1, lineno=384)
          62	RAISE_VARARGS(arg=1, lineno=384)
>         64	LOAD_CONST(arg=0, lineno=384)
          66	RETURN_VALUE(arg=None, lineno=384)
DEBUG    2023-08-19 15:20:59,070: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,070: stack: []
DEBUG    2023-08-19 15:20:59,070: dispatch pc=0, inst=NOP(arg=None, lineno=375)
DEBUG    2023-08-19 15:20:59,070: stack []
DEBUG    2023-08-19 15:20:59,070: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=375)
DEBUG    2023-08-19 15:20:59,078: stack []
DEBUG    2023-08-19 15:20:59,078: dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=375)
DEBUG    2023-08-19 15:20:59,078: stack ['$kind2.0']
DEBUG    2023-08-19 15:20:59,078: dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=375)
DEBUG    2023-08-19 15:20:59,078: stack ['$kind2.0', '$4load_global.1']
DEBUG    2023-08-19 15:20:59,078: dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=375)
DEBUG    2023-08-19 15:20:59,078: stack ['$6compare_op.2']
DEBUG    2023-08-19 15:20:59,078: end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,078: pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,078: stack: []
DEBUG    2023-08-19 15:20:59,078: dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=376)
DEBUG    2023-08-19 15:20:59,078: stack []
DEBUG    2023-08-19 15:20:59,078: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=376)
DEBUG    2023-08-19 15:20:59,078: stack ['$const10.0']
DEBUG    2023-08-19 15:20:59,078: end state. edges=[]
DEBUG    2023-08-19 15:20:59,078: pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,078: stack: []
DEBUG    2023-08-19 15:20:59,078: dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=377)
DEBUG    2023-08-19 15:20:59,078: stack []
DEBUG    2023-08-19 15:20:59,078: dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=377)
DEBUG    2023-08-19 15:20:59,078: stack ['$kind14.0']
DEBUG    2023-08-19 15:20:59,078: dispatch pc=18, inst=COMPARE_OP(arg=2, lineno=377)
DEBUG    2023-08-19 15:20:59,080: stack ['$kind14.0', '$16load_global.1']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=26, lineno=377)
DEBUG    2023-08-19 15:20:59,080: stack ['$18compare_op.2']
DEBUG    2023-08-19 15:20:59,080: end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,080: pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,080: stack: []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=378)
DEBUG    2023-08-19 15:20:59,080: stack []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=378)
DEBUG    2023-08-19 15:20:59,080: stack ['$const22.0']
DEBUG    2023-08-19 15:20:59,080: end state. edges=[]
DEBUG    2023-08-19 15:20:59,080: pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,080: stack: []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=379)
DEBUG    2023-08-19 15:20:59,080: stack []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=28, inst=LOAD_GLOBAL(arg=2, lineno=379)
DEBUG    2023-08-19 15:20:59,080: stack ['$kind26.0']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=30, inst=COMPARE_OP(arg=2, lineno=379)
DEBUG    2023-08-19 15:20:59,080: stack ['$kind26.0', '$28load_global.1']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=38, lineno=379)
DEBUG    2023-08-19 15:20:59,080: stack ['$30compare_op.2']
DEBUG    2023-08-19 15:20:59,080: end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,080: pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,080: stack: []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=34, inst=LOAD_CONST(arg=3, lineno=380)
DEBUG    2023-08-19 15:20:59,080: stack []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=380)
DEBUG    2023-08-19 15:20:59,080: stack ['$const34.0']
DEBUG    2023-08-19 15:20:59,080: end state. edges=[]
DEBUG    2023-08-19 15:20:59,080: pending: deque([State(pc_initial=38 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,080: stack: []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=381)
DEBUG    2023-08-19 15:20:59,080: stack []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=40, inst=LOAD_GLOBAL(arg=3, lineno=381)
DEBUG    2023-08-19 15:20:59,080: stack ['$kind38.0']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=42, inst=COMPARE_OP(arg=2, lineno=381)
DEBUG    2023-08-19 15:20:59,080: stack ['$kind38.0', '$40load_global.1']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=44, inst=POP_JUMP_IF_FALSE(arg=56, lineno=381)
DEBUG    2023-08-19 15:20:59,080: stack ['$42compare_op.2']
DEBUG    2023-08-19 15:20:59,080: end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,080: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,080: stack: []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=382)
DEBUG    2023-08-19 15:20:59,080: stack []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=382)
DEBUG    2023-08-19 15:20:59,080: stack ['$46load_global.0']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=50, inst=CALL_FUNCTION(arg=1, lineno=382)
DEBUG    2023-08-19 15:20:59,080: stack ['$46load_global.0', '$const48.1']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=52, inst=RAISE_VARARGS(arg=1, lineno=382)
DEBUG    2023-08-19 15:20:59,080: stack ['$50call_function.2']
DEBUG    2023-08-19 15:20:59,080: end state. edges=[]
DEBUG    2023-08-19 15:20:59,080: pending: deque([State(pc_initial=56 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,080: stack: []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=56, inst=LOAD_GLOBAL(arg=4, lineno=384)
DEBUG    2023-08-19 15:20:59,080: stack []
DEBUG    2023-08-19 15:20:59,080: dispatch pc=58, inst=LOAD_CONST(arg=5, lineno=384)
DEBUG    2023-08-19 15:20:59,080: stack ['$56load_global.0']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=384)
DEBUG    2023-08-19 15:20:59,080: stack ['$56load_global.0', '$const58.1']
DEBUG    2023-08-19 15:20:59,080: dispatch pc=62, inst=RAISE_VARARGS(arg=1, lineno=384)
DEBUG    2023-08-19 15:20:59,080: stack ['$60call_function.2']
DEBUG    2023-08-19 15:20:59,080: end state. edges=[]
DEBUG    2023-08-19 15:20:59,080: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,080: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,080: defmap: {}
DEBUG    2023-08-19 15:20:59,080: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,080: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,080: keep phismap: {}
DEBUG    2023-08-19 15:20:59,080: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,080: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$kind2.0'}), (4, {'res': '$4load_global.1'}), (6, {'lhs': '$kind2.0', 'rhs': '$4load_global.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$kind14.0'}), (16, {'res': '$16load_global.1'}), (18, {'lhs': '$kind14.0', 'rhs': '$16load_global.1', 'res': '$18compare_op.2'}), (20, {'pred': '$18compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$const22.0'}), (24, {'retval': '$const22.0', 'castval': '$24return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$kind26.0'}), (28, {'res': '$28load_global.1'}), (30, {'lhs': '$kind26.0', 'rhs': '$28load_global.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$kind38.0'}), (40, {'res': '$40load_global.1'}), (42, {'lhs': '$kind38.0', 'rhs': '$40load_global.1', 'res': '$42compare_op.2'}), (44, {'pred': '$42compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: (), 56: ()})
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$46load_global.0'}), (48, {'res': '$const48.1'}), (50, {'func': '$46load_global.0', 'args': ['$const48.1'], 'res': '$50call_function.2'}), (52, {'exc': '$50call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,080: block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$56load_global.0'}), (58, {'res': '$const58.1'}), (60, {'func': '$56load_global.0', 'args': ['$const58.1'], 'res': '$60call_function.2'}), (62, {'exc': '$60call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,088: label 0:
    kind = arg(0, name=kind)                 ['kind']
    $4load_global.1 = global(PY_UNICODE_1BYTE_KIND: 1) ['$4load_global.1']
    $6compare_op.2 = kind == $4load_global.1 ['$4load_global.1', '$6compare_op.2', 'kind']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, unicode.py:375),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 1)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    $16load_global.1 = global(PY_UNICODE_2BYTE_KIND: 2) ['$16load_global.1']
    $18compare_op.2 = kind == $16load_global.1 ['$16load_global.1', '$18compare_op.2', 'kind']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, unicode.py:377),), kws=(), vararg=None, target=None) ['$18compare_op.2', '$20pred', 'bool20']
    branch $20pred, 22, 26                   ['$20pred']
label 22:
    $const22.0 = const(int, 2)               ['$const22.0']
    $24return_value.1 = cast(value=$const22.0) ['$24return_value.1', '$const22.0']
    return $24return_value.1                 ['$24return_value.1']
label 26:
    $28load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4) ['$28load_global.1']
    $30compare_op.2 = kind == $28load_global.1 ['$28load_global.1', '$30compare_op.2', 'kind']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, unicode.py:379),), kws=(), vararg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 38                   ['$32pred']
label 34:
    $const34.0 = const(int, 4)               ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']
label 38:
    $40load_global.1 = global(PY_UNICODE_WCHAR_KIND: 0) ['$40load_global.1']
    $42compare_op.2 = kind == $40load_global.1 ['$40load_global.1', '$42compare_op.2', 'kind']
    bool44 = global(bool: <class 'bool'>)    ['bool44']
    $44pred = call bool44($42compare_op.2, func=bool44, args=(Var($42compare_op.2, unicode.py:381),), kws=(), vararg=None, target=None) ['$42compare_op.2', '$44pred', 'bool44']
    branch $44pred, 46, 56                   ['$44pred']
label 46:
    $46load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$46load_global.0']
    $const48.1 = const(str, PY_UNICODE_WCHAR_KIND unsupported) ['$const48.1']
    $50call_function.2 = call $46load_global.0($const48.1, func=$46load_global.0, args=[Var($const48.1, unicode.py:382)], kws=(), vararg=None, target=None) ['$46load_global.0', '$50call_function.2', '$const48.1']
    raise $50call_function.2                 ['$50call_function.2']
label 56:
    $56load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$56load_global.0']
    $const58.1 = const(str, Unexpected unicode encoding encountered) ['$const58.1']
    $60call_function.2 = call $56load_global.0($const58.1, func=$56load_global.0, args=[Var($const58.1, unicode.py:384)], kws=(), vararg=None, target=None) ['$56load_global.0', '$60call_function.2', '$const58.1']
    raise $60call_function.2                 ['$60call_function.2']

DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: kind = arg(0, name=kind)
DEBUG    2023-08-19 15:20:59,100: on stmt: $4load_global.1 = global(PY_UNICODE_1BYTE_KIND: 1)
DEBUG    2023-08-19 15:20:59,100: on stmt: $6compare_op.2 = kind == $4load_global.1
DEBUG    2023-08-19 15:20:59,100: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,100: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, unicode.py:375),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,100: on stmt: branch $8pred, 10, 14
DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 10
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: $const10.0 = const(int, 1)
DEBUG    2023-08-19 15:20:59,100: on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG    2023-08-19 15:20:59,100: on stmt: return $12return_value.1
DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 14
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: $16load_global.1 = global(PY_UNICODE_2BYTE_KIND: 2)
DEBUG    2023-08-19 15:20:59,100: on stmt: $18compare_op.2 = kind == $16load_global.1
DEBUG    2023-08-19 15:20:59,100: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,100: on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, unicode.py:377),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,100: on stmt: branch $20pred, 22, 26
DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 22
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: $const22.0 = const(int, 2)
DEBUG    2023-08-19 15:20:59,100: on stmt: $24return_value.1 = cast(value=$const22.0)
DEBUG    2023-08-19 15:20:59,100: on stmt: return $24return_value.1
DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 26
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: $28load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4)
DEBUG    2023-08-19 15:20:59,100: on stmt: $30compare_op.2 = kind == $28load_global.1
DEBUG    2023-08-19 15:20:59,100: on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,100: on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, unicode.py:379),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,100: on stmt: branch $32pred, 34, 38
DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 34
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: $const34.0 = const(int, 4)
DEBUG    2023-08-19 15:20:59,100: on stmt: $36return_value.1 = cast(value=$const34.0)
DEBUG    2023-08-19 15:20:59,100: on stmt: return $36return_value.1
DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 38
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: $40load_global.1 = global(PY_UNICODE_WCHAR_KIND: 0)
DEBUG    2023-08-19 15:20:59,100: on stmt: $42compare_op.2 = kind == $40load_global.1
DEBUG    2023-08-19 15:20:59,100: on stmt: bool44 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,100: on stmt: $44pred = call bool44($42compare_op.2, func=bool44, args=(Var($42compare_op.2, unicode.py:381),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,100: on stmt: branch $44pred, 46, 56
DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 46
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: $46load_global.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG    2023-08-19 15:20:59,100: on stmt: $const48.1 = const(str, PY_UNICODE_WCHAR_KIND unsupported)
DEBUG    2023-08-19 15:20:59,100: on stmt: $50call_function.2 = call $46load_global.0($const48.1, func=$46load_global.0, args=[Var($const48.1, unicode.py:382)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,100: on stmt: <static> raise <class 'AssertionError'>('PY_UNICODE_WCHAR_KIND unsupported')
DEBUG    2023-08-19 15:20:59,100: ==== SSA block analysis pass on 56
DEBUG    2023-08-19 15:20:59,100: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332D1550>
DEBUG    2023-08-19 15:20:59,100: on stmt: $56load_global.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG    2023-08-19 15:20:59,100: on stmt: $const58.1 = const(str, Unexpected unicode encoding encountered)
DEBUG    2023-08-19 15:20:59,100: on stmt: $60call_function.2 = call $56load_global.0($const58.1, func=$56load_global.0, args=[Var($const58.1, unicode.py:384)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,100: on stmt: <static> raise <class 'AssertionError'>('Unexpected unicode encoding encountered')
DEBUG    2023-08-19 15:20:59,100: defs defaultdict(<class 'list'>,
            {'$12return_value.1': [<numba.core.ir.Assign object at 0x0000025F332EC250>],
             '$16load_global.1': [<numba.core.ir.Assign object at 0x0000025F332ECCA0>],
             '$18compare_op.2': [<numba.core.ir.Assign object at 0x0000025F332EC580>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000025F332EC790>],
             '$24return_value.1': [<numba.core.ir.Assign object at 0x0000025F332EC3D0>],
             '$28load_global.1': [<numba.core.ir.Assign object at 0x0000025F331B2DC0>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x0000025F331B2940>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000025F332CA520>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x0000025F332CA610>],
             '$40load_global.1': [<numba.core.ir.Assign object at 0x0000025F332CA7F0>],
             '$42compare_op.2': [<numba.core.ir.Assign object at 0x0000025F332CADC0>],
             '$44pred': [<numba.core.ir.Assign object at 0x0000025F332CA8E0>],
             '$46load_global.0': [<numba.core.ir.Assign object at 0x0000025F332D1790>],
             '$4load_global.1': [<numba.core.ir.Assign object at 0x0000025F332E0EB0>],
             '$50call_function.2': [<numba.core.ir.Assign object at 0x0000025F332D1E80>],
             '$56load_global.0': [<numba.core.ir.Assign object at 0x0000025F332D1400>],
             '$60call_function.2': [<numba.core.ir.Assign object at 0x0000025F332D14C0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000025F332E06D0>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000025F330A66D0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x0000025F332ECFA0>],
             '$const22.0': [<numba.core.ir.Assign object at 0x0000025F332EC400>],
             '$const34.0': [<numba.core.ir.Assign object at 0x0000025F332CA0D0>],
             '$const48.1': [<numba.core.ir.Assign object at 0x0000025F332D1AC0>],
             '$const58.1': [<numba.core.ir.Assign object at 0x0000025F332D1820>],
             'bool20': [<numba.core.ir.Assign object at 0x0000025F332ECA90>],
             'bool32': [<numba.core.ir.Assign object at 0x0000025F33208E80>],
             'bool44': [<numba.core.ir.Assign object at 0x0000025F332CAA00>],
             'bool8': [<numba.core.ir.Assign object at 0x0000025F330A6640>],
             'kind': [<numba.core.ir.Assign object at 0x0000025F332E0F40>]})
DEBUG    2023-08-19 15:20:59,100: SSA violators set()
DEBUG    2023-08-19 15:20:59,174: bytecode dump:
>          0	NOP(arg=None, lineno=721)
           2	LOAD_FAST(arg=1, lineno=721)
           4	LOAD_CONST(arg=1, lineno=721)
           6	COMPARE_OP(arg=2, lineno=721)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=721)
          10	LOAD_GLOBAL(arg=0, lineno=722)
          12	LOAD_CONST(arg=1, lineno=722)
          14	CALL_FUNCTION(arg=1, lineno=722)
          16	RETURN_VALUE(arg=None, lineno=722)
>         18	LOAD_FAST(arg=1, lineno=724)
          20	LOAD_GLOBAL(arg=1, lineno=724)
          22	COMPARE_OP(arg=0, lineno=724)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=724)
          26	LOAD_GLOBAL(arg=2, lineno=727)
          28	LOAD_CONST(arg=2, lineno=727)
          30	CALL_FUNCTION(arg=1, lineno=727)
          32	STORE_FAST(arg=2, lineno=727)
          34	LOAD_GLOBAL(arg=3, lineno=728)
          36	LOAD_FAST(arg=1, lineno=728)
          38	CALL_FUNCTION(arg=1, lineno=728)
          40	GET_ITER(arg=None, lineno=728)
>         42	FOR_ITER(arg=32, lineno=728)
          44	STORE_FAST(arg=3, lineno=728)
          46	LOAD_FAST(arg=2, lineno=729)
          48	LOAD_CONST(arg=3, lineno=729)
          50	BINARY_LSHIFT(arg=None, lineno=729)
          52	LOAD_FAST(arg=2, lineno=729)
          54	BINARY_ADD(arg=None, lineno=729)
          56	LOAD_GLOBAL(arg=4, lineno=729)
          58	LOAD_METHOD(arg=5, lineno=729)
          60	LOAD_GLOBAL(arg=6, lineno=729)
          62	LOAD_FAST(arg=0, lineno=729)
          64	LOAD_FAST(arg=3, lineno=729)
          66	CALL_FUNCTION(arg=2, lineno=729)
          68	CALL_METHOD(arg=1, lineno=729)
          70	BINARY_ADD(arg=None, lineno=729)
          72	STORE_FAST(arg=2, lineno=729)
          74	JUMP_ABSOLUTE(arg=42, lineno=729)
>         76	LOAD_FAST(arg=2, lineno=731)
          78	LOAD_FAST(arg=1, lineno=731)
          80	INPLACE_XOR(arg=None, lineno=731)
          82	STORE_FAST(arg=2, lineno=731)
          84	LOAD_FAST(arg=2, lineno=732)
          86	LOAD_GLOBAL(arg=7, lineno=732)
          88	LOAD_CONST(arg=4, lineno=732)
          90	CALL_FUNCTION(arg=1, lineno=732)
          92	INPLACE_XOR(arg=None, lineno=732)
          94	STORE_FAST(arg=2, lineno=732)
          96	JUMP_FORWARD(arg=42, lineno=732)
>         98	LOAD_GLOBAL(arg=8, lineno=734)
         100	LOAD_GLOBAL(arg=9, lineno=734)
         102	LOAD_METHOD(arg=10, lineno=734)
         104	LOAD_GLOBAL(arg=7, lineno=734)
         106	LOAD_CONST(arg=5, lineno=734)
         108	CALL_FUNCTION(arg=1, lineno=734)
         110	CALL_METHOD(arg=1, lineno=734)
         112	LOAD_GLOBAL(arg=9, lineno=735)
         114	LOAD_METHOD(arg=10, lineno=735)
         116	LOAD_GLOBAL(arg=7, lineno=735)
         118	LOAD_CONST(arg=6, lineno=735)
         120	CALL_FUNCTION(arg=1, lineno=735)
         122	CALL_METHOD(arg=1, lineno=735)
         124	LOAD_FAST(arg=0, lineno=736)
         126	LOAD_FAST(arg=1, lineno=736)
         128	CALL_FUNCTION(arg=4, lineno=734)
         130	STORE_FAST(arg=4, lineno=734)
         132	LOAD_GLOBAL(arg=0, lineno=737)
         134	LOAD_FAST(arg=4, lineno=737)
         136	CALL_FUNCTION(arg=1, lineno=737)
         138	STORE_FAST(arg=2, lineno=737)
>        140	LOAD_GLOBAL(arg=0, lineno=738)
         142	LOAD_FAST(arg=2, lineno=738)
         144	CALL_FUNCTION(arg=1, lineno=738)
         146	RETURN_VALUE(arg=None, lineno=738)
DEBUG    2023-08-19 15:20:59,174: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,174: stack: []
DEBUG    2023-08-19 15:20:59,174: dispatch pc=0, inst=NOP(arg=None, lineno=721)
DEBUG    2023-08-19 15:20:59,174: stack []
DEBUG    2023-08-19 15:20:59,174: dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=721)
DEBUG    2023-08-19 15:20:59,175: stack []
DEBUG    2023-08-19 15:20:59,175: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=721)
DEBUG    2023-08-19 15:20:59,175: stack ['$_len2.0']
DEBUG    2023-08-19 15:20:59,175: dispatch pc=6, inst=COMPARE_OP(arg=2, lineno=721)
DEBUG    2023-08-19 15:20:59,175: stack ['$_len2.0', '$const4.1']
DEBUG    2023-08-19 15:20:59,175: dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=721)
DEBUG    2023-08-19 15:20:59,175: stack ['$6compare_op.2']
DEBUG    2023-08-19 15:20:59,175: end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,175: pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,175: stack: []
DEBUG    2023-08-19 15:20:59,175: dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=722)
DEBUG    2023-08-19 15:20:59,175: stack []
DEBUG    2023-08-19 15:20:59,175: dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=722)
DEBUG    2023-08-19 15:20:59,175: stack ['$10load_global.0']
DEBUG    2023-08-19 15:20:59,176: dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=722)
DEBUG    2023-08-19 15:20:59,176: stack ['$10load_global.0', '$const12.1']
DEBUG    2023-08-19 15:20:59,176: dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=722)
DEBUG    2023-08-19 15:20:59,176: stack ['$14call_function.2']
DEBUG    2023-08-19 15:20:59,176: end state. edges=[]
DEBUG    2023-08-19 15:20:59,176: pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,176: stack: []
DEBUG    2023-08-19 15:20:59,176: dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=724)
DEBUG    2023-08-19 15:20:59,176: stack []
DEBUG    2023-08-19 15:20:59,176: dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=724)
DEBUG    2023-08-19 15:20:59,176: stack ['$_len18.0']
DEBUG    2023-08-19 15:20:59,176: dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=724)
DEBUG    2023-08-19 15:20:59,176: stack ['$_len18.0', '$20load_global.1']
DEBUG    2023-08-19 15:20:59,176: dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=724)
DEBUG    2023-08-19 15:20:59,176: stack ['$22compare_op.2']
DEBUG    2023-08-19 15:20:59,177: end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,177: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,177: stack: []
DEBUG    2023-08-19 15:20:59,177: dispatch pc=26, inst=LOAD_GLOBAL(arg=2, lineno=727)
DEBUG    2023-08-19 15:20:59,177: stack []
DEBUG    2023-08-19 15:20:59,177: dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=727)
DEBUG    2023-08-19 15:20:59,177: stack ['$26load_global.0']
DEBUG    2023-08-19 15:20:59,177: dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=727)
DEBUG    2023-08-19 15:20:59,177: stack ['$26load_global.0', '$const28.1']
DEBUG    2023-08-19 15:20:59,177: dispatch pc=32, inst=STORE_FAST(arg=2, lineno=727)
DEBUG    2023-08-19 15:20:59,177: stack ['$30call_function.2']
DEBUG    2023-08-19 15:20:59,177: dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=728)
DEBUG    2023-08-19 15:20:59,177: stack []
DEBUG    2023-08-19 15:20:59,177: dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=728)
DEBUG    2023-08-19 15:20:59,177: stack ['$34load_global.3']
DEBUG    2023-08-19 15:20:59,178: dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=728)
DEBUG    2023-08-19 15:20:59,178: stack ['$34load_global.3', '$_len36.4']
DEBUG    2023-08-19 15:20:59,178: dispatch pc=40, inst=GET_ITER(arg=None, lineno=728)
DEBUG    2023-08-19 15:20:59,178: stack ['$38call_function.5']
DEBUG    2023-08-19 15:20:59,178: end state. edges=[Edge(pc=42, stack=('$40get_iter.6',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,178: pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=42 nstack_initial=1)])
DEBUG    2023-08-19 15:20:59,178: stack: []
DEBUG    2023-08-19 15:20:59,178: dispatch pc=98, inst=LOAD_GLOBAL(arg=8, lineno=734)
DEBUG    2023-08-19 15:20:59,178: stack []
DEBUG    2023-08-19 15:20:59,178: dispatch pc=100, inst=LOAD_GLOBAL(arg=9, lineno=734)
DEBUG    2023-08-19 15:20:59,178: stack ['$98load_global.0']
DEBUG    2023-08-19 15:20:59,178: dispatch pc=102, inst=LOAD_METHOD(arg=10, lineno=734)
DEBUG    2023-08-19 15:20:59,178: stack ['$98load_global.0', '$100load_global.1']
DEBUG    2023-08-19 15:20:59,178: dispatch pc=104, inst=LOAD_GLOBAL(arg=7, lineno=734)
DEBUG    2023-08-19 15:20:59,179: stack ['$98load_global.0', '$102load_method.2']
DEBUG    2023-08-19 15:20:59,179: dispatch pc=106, inst=LOAD_CONST(arg=5, lineno=734)
DEBUG    2023-08-19 15:20:59,179: stack ['$98load_global.0', '$102load_method.2', '$104load_global.3']
DEBUG    2023-08-19 15:20:59,179: dispatch pc=108, inst=CALL_FUNCTION(arg=1, lineno=734)
DEBUG    2023-08-19 15:20:59,179: stack ['$98load_global.0', '$102load_method.2', '$104load_global.3', '$const106.4']
DEBUG    2023-08-19 15:20:59,179: dispatch pc=110, inst=CALL_METHOD(arg=1, lineno=734)
DEBUG    2023-08-19 15:20:59,179: stack ['$98load_global.0', '$102load_method.2', '$108call_function.5']
DEBUG    2023-08-19 15:20:59,179: dispatch pc=112, inst=LOAD_GLOBAL(arg=9, lineno=735)
DEBUG    2023-08-19 15:20:59,179: stack ['$98load_global.0', '$110call_method.6']
DEBUG    2023-08-19 15:20:59,179: dispatch pc=114, inst=LOAD_METHOD(arg=10, lineno=735)
DEBUG    2023-08-19 15:20:59,179: stack ['$98load_global.0', '$110call_method.6', '$112load_global.7']
DEBUG    2023-08-19 15:20:59,179: dispatch pc=116, inst=LOAD_GLOBAL(arg=7, lineno=735)
DEBUG    2023-08-19 15:20:59,179: stack ['$98load_global.0', '$110call_method.6', '$114load_method.8']
DEBUG    2023-08-19 15:20:59,179: dispatch pc=118, inst=LOAD_CONST(arg=6, lineno=735)
DEBUG    2023-08-19 15:20:59,179: stack ['$98load_global.0', '$110call_method.6', '$114load_method.8', '$116load_global.9']
DEBUG    2023-08-19 15:20:59,180: dispatch pc=120, inst=CALL_FUNCTION(arg=1, lineno=735)
DEBUG    2023-08-19 15:20:59,180: stack ['$98load_global.0', '$110call_method.6', '$114load_method.8', '$116load_global.9', '$const118.10']
DEBUG    2023-08-19 15:20:59,180: dispatch pc=122, inst=CALL_METHOD(arg=1, lineno=735)
DEBUG    2023-08-19 15:20:59,180: stack ['$98load_global.0', '$110call_method.6', '$114load_method.8', '$120call_function.11']
DEBUG    2023-08-19 15:20:59,180: dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=736)
DEBUG    2023-08-19 15:20:59,180: stack ['$98load_global.0', '$110call_method.6', '$122call_method.12']
DEBUG    2023-08-19 15:20:59,180: dispatch pc=126, inst=LOAD_FAST(arg=1, lineno=736)
DEBUG    2023-08-19 15:20:59,180: stack ['$98load_global.0', '$110call_method.6', '$122call_method.12', '$val124.13']
DEBUG    2023-08-19 15:20:59,180: dispatch pc=128, inst=CALL_FUNCTION(arg=4, lineno=734)
DEBUG    2023-08-19 15:20:59,180: stack ['$98load_global.0', '$110call_method.6', '$122call_method.12', '$val124.13', '$_len126.14']
DEBUG    2023-08-19 15:20:59,180: dispatch pc=130, inst=STORE_FAST(arg=4, lineno=734)
DEBUG    2023-08-19 15:20:59,180: stack ['$128call_function.15']
DEBUG    2023-08-19 15:20:59,180: dispatch pc=132, inst=LOAD_GLOBAL(arg=0, lineno=737)
DEBUG    2023-08-19 15:20:59,180: stack []
DEBUG    2023-08-19 15:20:59,181: dispatch pc=134, inst=LOAD_FAST(arg=4, lineno=737)
DEBUG    2023-08-19 15:20:59,181: stack ['$132load_global.16']
DEBUG    2023-08-19 15:20:59,181: dispatch pc=136, inst=CALL_FUNCTION(arg=1, lineno=737)
DEBUG    2023-08-19 15:20:59,181: stack ['$132load_global.16', '$tmp134.17']
DEBUG    2023-08-19 15:20:59,181: dispatch pc=138, inst=STORE_FAST(arg=2, lineno=737)
DEBUG    2023-08-19 15:20:59,181: stack ['$136call_function.18']
DEBUG    2023-08-19 15:20:59,181: end state. edges=[Edge(pc=140, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,181: pending: deque([State(pc_initial=42 nstack_initial=1), State(pc_initial=140 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,181: stack: ['$phi42.0']
DEBUG    2023-08-19 15:20:59,181: dispatch pc=42, inst=FOR_ITER(arg=32, lineno=728)
DEBUG    2023-08-19 15:20:59,181: stack ['$phi42.0']
DEBUG    2023-08-19 15:20:59,181: end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=('$phi42.0', '$42for_iter.2'), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,181: pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=44 nstack_initial=2)])
DEBUG    2023-08-19 15:20:59,181: stack: []
DEBUG    2023-08-19 15:20:59,182: dispatch pc=140, inst=LOAD_GLOBAL(arg=0, lineno=738)
DEBUG    2023-08-19 15:20:59,182: stack []
DEBUG    2023-08-19 15:20:59,182: dispatch pc=142, inst=LOAD_FAST(arg=2, lineno=738)
DEBUG    2023-08-19 15:20:59,182: stack ['$140load_global.0']
DEBUG    2023-08-19 15:20:59,182: dispatch pc=144, inst=CALL_FUNCTION(arg=1, lineno=738)
DEBUG    2023-08-19 15:20:59,182: stack ['$140load_global.0', '$_hash142.1']
DEBUG    2023-08-19 15:20:59,182: dispatch pc=146, inst=RETURN_VALUE(arg=None, lineno=738)
DEBUG    2023-08-19 15:20:59,182: stack ['$144call_function.2']
DEBUG    2023-08-19 15:20:59,182: end state. edges=[]
DEBUG    2023-08-19 15:20:59,182: pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=44 nstack_initial=2)])
DEBUG    2023-08-19 15:20:59,182: stack: []
DEBUG    2023-08-19 15:20:59,182: dispatch pc=76, inst=LOAD_FAST(arg=2, lineno=731)
DEBUG    2023-08-19 15:20:59,182: stack []
DEBUG    2023-08-19 15:20:59,182: dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=731)
DEBUG    2023-08-19 15:20:59,182: stack ['$_hash76.0']
DEBUG    2023-08-19 15:20:59,183: dispatch pc=80, inst=INPLACE_XOR(arg=None, lineno=731)
DEBUG    2023-08-19 15:20:59,183: stack ['$_hash76.0', '$_len78.1']
DEBUG    2023-08-19 15:20:59,183: dispatch pc=82, inst=STORE_FAST(arg=2, lineno=731)
DEBUG    2023-08-19 15:20:59,183: stack ['$80inplace_xor.2']
DEBUG    2023-08-19 15:20:59,183: dispatch pc=84, inst=LOAD_FAST(arg=2, lineno=732)
DEBUG    2023-08-19 15:20:59,183: stack []
DEBUG    2023-08-19 15:20:59,183: dispatch pc=86, inst=LOAD_GLOBAL(arg=7, lineno=732)
DEBUG    2023-08-19 15:20:59,183: stack ['$_hash84.3']
DEBUG    2023-08-19 15:20:59,183: dispatch pc=88, inst=LOAD_CONST(arg=4, lineno=732)
DEBUG    2023-08-19 15:20:59,183: stack ['$_hash84.3', '$86load_global.4']
DEBUG    2023-08-19 15:20:59,183: dispatch pc=90, inst=CALL_FUNCTION(arg=1, lineno=732)
DEBUG    2023-08-19 15:20:59,183: stack ['$_hash84.3', '$86load_global.4', '$const88.5']
DEBUG    2023-08-19 15:20:59,183: dispatch pc=92, inst=INPLACE_XOR(arg=None, lineno=732)
DEBUG    2023-08-19 15:20:59,183: stack ['$_hash84.3', '$90call_function.6']
DEBUG    2023-08-19 15:20:59,184: dispatch pc=94, inst=STORE_FAST(arg=2, lineno=732)
DEBUG    2023-08-19 15:20:59,184: stack ['$92inplace_xor.7']
DEBUG    2023-08-19 15:20:59,184: dispatch pc=96, inst=JUMP_FORWARD(arg=42, lineno=732)
DEBUG    2023-08-19 15:20:59,184: stack []
DEBUG    2023-08-19 15:20:59,184: end state. edges=[Edge(pc=140, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,184: pending: deque([State(pc_initial=44 nstack_initial=2), State(pc_initial=140 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,184: stack: ['$phi44.0', '$phi44.1']
DEBUG    2023-08-19 15:20:59,184: dispatch pc=44, inst=STORE_FAST(arg=3, lineno=728)
DEBUG    2023-08-19 15:20:59,184: stack ['$phi44.0', '$phi44.1']
DEBUG    2023-08-19 15:20:59,184: dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=729)
DEBUG    2023-08-19 15:20:59,184: stack ['$phi44.0']
DEBUG    2023-08-19 15:20:59,184: dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=729)
DEBUG    2023-08-19 15:20:59,184: stack ['$phi44.0', '$_hash46.2']
DEBUG    2023-08-19 15:20:59,184: dispatch pc=50, inst=BINARY_LSHIFT(arg=None, lineno=729)
DEBUG    2023-08-19 15:20:59,184: stack ['$phi44.0', '$_hash46.2', '$const48.3']
DEBUG    2023-08-19 15:20:59,184: dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=729)
DEBUG    2023-08-19 15:20:59,185: stack ['$phi44.0', '$50binary_lshift.4']
DEBUG    2023-08-19 15:20:59,185: dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=729)
DEBUG    2023-08-19 15:20:59,185: stack ['$phi44.0', '$50binary_lshift.4', '$_hash52.5']
DEBUG    2023-08-19 15:20:59,185: dispatch pc=56, inst=LOAD_GLOBAL(arg=4, lineno=729)
DEBUG    2023-08-19 15:20:59,185: stack ['$phi44.0', '$54binary_add.6']
DEBUG    2023-08-19 15:20:59,185: dispatch pc=58, inst=LOAD_METHOD(arg=5, lineno=729)
DEBUG    2023-08-19 15:20:59,185: stack ['$phi44.0', '$54binary_add.6', '$56load_global.7']
DEBUG    2023-08-19 15:20:59,185: dispatch pc=60, inst=LOAD_GLOBAL(arg=6, lineno=729)
DEBUG    2023-08-19 15:20:59,185: stack ['$phi44.0', '$54binary_add.6', '$58load_method.8']
DEBUG    2023-08-19 15:20:59,185: dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=729)
DEBUG    2023-08-19 15:20:59,185: stack ['$phi44.0', '$54binary_add.6', '$58load_method.8', '$60load_global.9']
DEBUG    2023-08-19 15:20:59,186: dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=729)
DEBUG    2023-08-19 15:20:59,186: stack ['$phi44.0', '$54binary_add.6', '$58load_method.8', '$60load_global.9', '$val62.10']
DEBUG    2023-08-19 15:20:59,186: dispatch pc=66, inst=CALL_FUNCTION(arg=2, lineno=729)
DEBUG    2023-08-19 15:20:59,186: stack ['$phi44.0', '$54binary_add.6', '$58load_method.8', '$60load_global.9', '$val62.10', '$idx64.11']
DEBUG    2023-08-19 15:20:59,186: dispatch pc=68, inst=CALL_METHOD(arg=1, lineno=729)
DEBUG    2023-08-19 15:20:59,186: stack ['$phi44.0', '$54binary_add.6', '$58load_method.8', '$66call_function.12']
DEBUG    2023-08-19 15:20:59,186: dispatch pc=70, inst=BINARY_ADD(arg=None, lineno=729)
DEBUG    2023-08-19 15:20:59,186: stack ['$phi44.0', '$54binary_add.6', '$68call_method.13']
DEBUG    2023-08-19 15:20:59,186: dispatch pc=72, inst=STORE_FAST(arg=2, lineno=729)
DEBUG    2023-08-19 15:20:59,187: stack ['$phi44.0', '$70binary_add.14']
DEBUG    2023-08-19 15:20:59,187: dispatch pc=74, inst=JUMP_ABSOLUTE(arg=42, lineno=729)
DEBUG    2023-08-19 15:20:59,187: stack ['$phi44.0']
DEBUG    2023-08-19 15:20:59,187: end state. edges=[Edge(pc=42, stack=('$phi44.0',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,187: pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=42 nstack_initial=1)])
DEBUG    2023-08-19 15:20:59,187: pending: deque([State(pc_initial=42 nstack_initial=1)])
DEBUG    2023-08-19 15:20:59,187: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,187: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=1): {'$phi42.0'},
             State(pc_initial=44 nstack_initial=2): {'$phi44.1'},
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,188: defmap: {'$phi42.0': State(pc_initial=26 nstack_initial=0),
 '$phi44.1': State(pc_initial=42 nstack_initial=1)}
DEBUG    2023-08-19 15:20:59,188: phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi44.0': {('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))}})
DEBUG    2023-08-19 15:20:59,188: changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))}})
DEBUG    2023-08-19 15:20:59,188: changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))}})
DEBUG    2023-08-19 15:20:59,188: changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))}})
DEBUG    2023-08-19 15:20:59,189: keep phismap: {'$phi42.0': {('$40get_iter.6', State(pc_initial=26 nstack_initial=0))},
 '$phi44.1': {('$42for_iter.2', State(pc_initial=42 nstack_initial=1))}}
DEBUG    2023-08-19 15:20:59,189: new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=26 nstack_initial=0): {'$phi42.0': '$40get_iter.6'},
             State(pc_initial=42 nstack_initial=1): {'$phi44.1': '$42for_iter.2'}})
DEBUG    2023-08-19 15:20:59,189: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,189: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_len2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$_len2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG    2023-08-19 15:20:59,189: block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'retval': '$14call_function.2', 'castval': '$16return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,189: block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$_len18.0'}), (20, {'res': '$20load_global.1'}), (22, {'lhs': '$_len18.0', 'rhs': '$20load_global.1', 'res': '$22compare_op.2'}), (24, {'pred': '$22compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG    2023-08-19 15:20:59,189: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_global.0'}), (28, {'res': '$const28.1'}), (30, {'func': '$26load_global.0', 'args': ['$const28.1'], 'res': '$30call_function.2'}), (32, {'value': '$30call_function.2'}), (34, {'res': '$34load_global.3'}), (36, {'res': '$_len36.4'}), (38, {'func': '$34load_global.3', 'args': ['$_len36.4'], 'res': '$38call_function.5'}), (40, {'value': '$38call_function.5', 'res': '$40get_iter.6'})), outgoing_phis={'$phi42.0': '$40get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$40get_iter.6',)})
DEBUG    2023-08-19 15:20:59,190: block_infos State(pc_initial=42 nstack_initial=1):
AdaptBlockInfo(insts=((42, {'iterator': '$phi42.0', 'pair': '$42for_iter.1', 'indval': '$42for_iter.2', 'pred': '$42for_iter.3'}),), outgoing_phis={'$phi44.1': '$42for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: (), 44: ('$phi42.0', '$42for_iter.2')})
DEBUG    2023-08-19 15:20:59,190: block_infos State(pc_initial=44 nstack_initial=2):
AdaptBlockInfo(insts=((44, {'value': '$phi44.1'}), (46, {'res': '$_hash46.2'}), (48, {'res': '$const48.3'}), (50, {'lhs': '$_hash46.2', 'rhs': '$const48.3', 'res': '$50binary_lshift.4'}), (52, {'res': '$_hash52.5'}), (54, {'lhs': '$50binary_lshift.4', 'rhs': '$_hash52.5', 'res': '$54binary_add.6'}), (56, {'res': '$56load_global.7'}), (58, {'item': '$56load_global.7', 'res': '$58load_method.8'}), (60, {'res': '$60load_global.9'}), (62, {'res': '$val62.10'}), (64, {'res': '$idx64.11'}), (66, {'func': '$60load_global.9', 'args': ['$val62.10', '$idx64.11'], 'res': '$66call_function.12'}), (68, {'func': '$58load_method.8', 'args': ['$66call_function.12'], 'res': '$68call_method.13'}), (70, {'lhs': '$54binary_add.6', 'rhs': '$68call_method.13', 'res': '$70binary_add.14'}), (72, {'value': '$70binary_add.14'}), (74, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$phi44.0',)})
DEBUG    2023-08-19 15:20:59,190: block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$_hash76.0'}), (78, {'res': '$_len78.1'}), (80, {'lhs': '$_hash76.0', 'rhs': '$_len78.1', 'res': '$80inplace_xor.2'}), (82, {'value': '$80inplace_xor.2'}), (84, {'res': '$_hash84.3'}), (86, {'res': '$86load_global.4'}), (88, {'res': '$const88.5'}), (90, {'func': '$86load_global.4', 'args': ['$const88.5'], 'res': '$90call_function.6'}), (92, {'lhs': '$_hash84.3', 'rhs': '$90call_function.6', 'res': '$92inplace_xor.7'}), (94, {'value': '$92inplace_xor.7'}), (96, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ()})
DEBUG    2023-08-19 15:20:59,190: block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$98load_global.0'}), (100, {'res': '$100load_global.1'}), (102, {'item': '$100load_global.1', 'res': '$102load_method.2'}), (104, {'res': '$104load_global.3'}), (106, {'res': '$const106.4'}), (108, {'func': '$104load_global.3', 'args': ['$const106.4'], 'res': '$108call_function.5'}), (110, {'func': '$102load_method.2', 'args': ['$108call_function.5'], 'res': '$110call_method.6'}), (112, {'res': '$112load_global.7'}), (114, {'item': '$112load_global.7', 'res': '$114load_method.8'}), (116, {'res': '$116load_global.9'}), (118, {'res': '$const118.10'}), (120, {'func': '$116load_global.9', 'args': ['$const118.10'], 'res': '$120call_function.11'}), (122, {'func': '$114load_method.8', 'args': ['$120call_function.11'], 'res': '$122call_method.12'}), (124, {'res': '$val124.13'}), (126, {'res': '$_len126.14'}), (128, {'func': '$98load_global.0', 'args': ['$110call_method.6', '$122call_method.12', '$val124.13', '$_len126.14'], 'res': '$128call_function.15'}), (130, {'value': '$128call_function.15'}), (132, {'res': '$132load_global.16'}), (134, {'res': '$tmp134.17'}), (136, {'func': '$132load_global.16', 'args': ['$tmp134.17'], 'res': '$136call_function.18'}), (138, {'value': '$136call_function.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ()})
DEBUG    2023-08-19 15:20:59,190: block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$140load_global.0'}), (142, {'res': '$_hash142.1'}), (144, {'func': '$140load_global.0', 'args': ['$_hash142.1'], 'res': '$144call_function.2'}), (146, {'retval': '$144call_function.2', 'castval': '$146return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,193: label 0:
    val = arg(0, name=val)                   ['val']
    _len = arg(1, name=_len)                 ['_len']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = _len == $const4.1       ['$6compare_op.2', '$const4.1', '_len']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, hashing.py:721),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(process_return: <function process_return at 0x0000025F318BF430>) ['$10load_global.0']
    $const12.1 = const(int, 0)               ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, hashing.py:722)], kws=(), vararg=None, target=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    $16return_value.3 = cast(value=$14call_function.2) ['$14call_function.2', '$16return_value.3']
    return $16return_value.3                 ['$16return_value.3']
label 18:
    $20load_global.1 = global(_Py_HASH_CUTOFF: 0) ['$20load_global.1']
    $22compare_op.2 = _len < $20load_global.1 ['$20load_global.1', '$22compare_op.2', '_len']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, hashing.py:724),), kws=(), vararg=None, target=None) ['$22compare_op.2', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    $26load_global.0 = global(_Py_uhash_t: uint64) ['$26load_global.0']
    $const28.1 = const(int, 5381)            ['$const28.1']
    _hash = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, hashing.py:727)], kws=(), vararg=None, target=None) ['$26load_global.0', '$const28.1', '_hash']
    $34load_global.3 = global(range: <class 'range'>) ['$34load_global.3']
    $38call_function.5 = call $34load_global.3(_len, func=$34load_global.3, args=[Var(_len, hashing.py:721)], kws=(), vararg=None, target=None) ['$34load_global.3', '$38call_function.5', '_len']
    $40get_iter.6 = getiter(value=$38call_function.5) ['$38call_function.5', '$40get_iter.6']
    $phi42.0 = $40get_iter.6                 ['$40get_iter.6', '$phi42.0']
    jump 42                                  []
label 42:
    $42for_iter.1 = iternext(value=$phi42.0) ['$42for_iter.1', '$phi42.0']
    $42for_iter.2 = pair_first(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.2']
    $42for_iter.3 = pair_second(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.3']
    $phi44.1 = $42for_iter.2                 ['$42for_iter.2', '$phi44.1']
    branch $42for_iter.3, 44, 76             ['$42for_iter.3']
label 44:
    idx = $phi44.1                           ['$phi44.1', 'idx']
    $const48.3 = const(int, 5)               ['$const48.3']
    $50binary_lshift.4 = _hash << $const48.3 ['$50binary_lshift.4', '$const48.3', '_hash']
    $54binary_add.6 = $50binary_lshift.4 + _hash ['$50binary_lshift.4', '$54binary_add.6', '_hash']
    $56load_global.7 = global(np: <module 'numpy' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numpy\\__init__.py'>) ['$56load_global.7']
    $58load_method.8 = getattr(value=$56load_global.7, attr=uint8) ['$56load_global.7', '$58load_method.8']
    $60load_global.9 = global(grab_byte: <intrinsic grab_byte>) ['$60load_global.9']
    $66call_function.12 = call $60load_global.9(val, idx, func=$60load_global.9, args=[Var(val, hashing.py:721), Var(idx, hashing.py:728)], kws=(), vararg=None, target=None) ['$60load_global.9', '$66call_function.12', 'idx', 'val']
    $68call_method.13 = call $58load_method.8($66call_function.12, func=$58load_method.8, args=[Var($66call_function.12, hashing.py:729)], kws=(), vararg=None, target=None) ['$58load_method.8', '$66call_function.12', '$68call_method.13']
    _hash = $54binary_add.6 + $68call_method.13 ['$54binary_add.6', '$68call_method.13', '_hash']
    jump 42                                  []
label 76:
    $80inplace_xor.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=_len, static_lhs=Undefined, static_rhs=Undefined) ['$80inplace_xor.2', '_hash', '_len']
    _hash = $80inplace_xor.2                 ['$80inplace_xor.2', '_hash']
    $86load_global.4 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>) ['$86load_global.4']
    $const88.5 = const(str, djbx33a_suffix)  ['$const88.5']
    $90call_function.6 = call $86load_global.4($const88.5, func=$86load_global.4, args=[Var($const88.5, hashing.py:732)], kws=(), vararg=None, target=None) ['$86load_global.4', '$90call_function.6', '$const88.5']
    $92inplace_xor.7 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=$90call_function.6, static_lhs=Undefined, static_rhs=Undefined) ['$90call_function.6', '$92inplace_xor.7', '_hash']
    _hash = $92inplace_xor.7                 ['$92inplace_xor.7', '_hash']
    jump 140                                 []
label 98:
    $98load_global.0 = global(_siphash24: <function _siphash24 at 0x0000025F3198DDC0>) ['$98load_global.0']
    $100load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$100load_global.1']
    $102load_method.2 = getattr(value=$100load_global.1, attr=uint64) ['$100load_global.1', '$102load_method.2']
    $104load_global.3 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>) ['$104load_global.3']
    $const106.4 = const(str, siphash_k0)     ['$const106.4']
    $108call_function.5 = call $104load_global.3($const106.4, func=$104load_global.3, args=[Var($const106.4, hashing.py:734)], kws=(), vararg=None, target=None) ['$104load_global.3', '$108call_function.5', '$const106.4']
    $110call_method.6 = call $102load_method.2($108call_function.5, func=$102load_method.2, args=[Var($108call_function.5, hashing.py:734)], kws=(), vararg=None, target=None) ['$102load_method.2', '$108call_function.5', '$110call_method.6']
    $112load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$112load_global.7']
    $114load_method.8 = getattr(value=$112load_global.7, attr=uint64) ['$112load_global.7', '$114load_method.8']
    $116load_global.9 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>) ['$116load_global.9']
    $const118.10 = const(str, siphash_k1)    ['$const118.10']
    $120call_function.11 = call $116load_global.9($const118.10, func=$116load_global.9, args=[Var($const118.10, hashing.py:735)], kws=(), vararg=None, target=None) ['$116load_global.9', '$120call_function.11', '$const118.10']
    $122call_method.12 = call $114load_method.8($120call_function.11, func=$114load_method.8, args=[Var($120call_function.11, hashing.py:735)], kws=(), vararg=None, target=None) ['$114load_method.8', '$120call_function.11', '$122call_method.12']
    tmp = call $98load_global.0($110call_method.6, $122call_method.12, val, _len, func=$98load_global.0, args=[Var($110call_method.6, hashing.py:734), Var($122call_method.12, hashing.py:735), Var(val, hashing.py:721), Var(_len, hashing.py:721)], kws=(), vararg=None, target=None) ['$110call_method.6', '$122call_method.12', '$98load_global.0', '_len', 'tmp', 'val']
    $132load_global.16 = global(process_return: <function process_return at 0x0000025F318BF430>) ['$132load_global.16']
    _hash = call $132load_global.16(tmp, func=$132load_global.16, args=[Var(tmp, hashing.py:734)], kws=(), vararg=None, target=None) ['$132load_global.16', '_hash', 'tmp']
    jump 140                                 []
label 140:
    $140load_global.0 = global(process_return: <function process_return at 0x0000025F318BF430>) ['$140load_global.0']
    $144call_function.2 = call $140load_global.0(_hash, func=$140load_global.0, args=[Var(_hash, hashing.py:727)], kws=(), vararg=None, target=None) ['$140load_global.0', '$144call_function.2', '_hash']
    $146return_value.3 = cast(value=$144call_function.2) ['$144call_function.2', '$146return_value.3']
    return $146return_value.3                ['$146return_value.3']

DEBUG    2023-08-19 15:20:59,205: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,205: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,205: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:20:59,205: on stmt: _len = arg(1, name=_len)
DEBUG    2023-08-19 15:20:59,205: on stmt: $const4.1 = const(int, 0)
DEBUG    2023-08-19 15:20:59,205: on stmt: $6compare_op.2 = _len == $const4.1
DEBUG    2023-08-19 15:20:59,205: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,205: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, hashing.py:721),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,205: on stmt: branch $8pred, 10, 18
DEBUG    2023-08-19 15:20:59,205: ==== SSA block analysis pass on 10
DEBUG    2023-08-19 15:20:59,205: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,205: on stmt: $10load_global.0 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,205: on stmt: $const12.1 = const(int, 0)
DEBUG    2023-08-19 15:20:59,205: on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, hashing.py:722)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,205: on stmt: $16return_value.3 = cast(value=$14call_function.2)
DEBUG    2023-08-19 15:20:59,205: on stmt: return $16return_value.3
DEBUG    2023-08-19 15:20:59,205: ==== SSA block analysis pass on 18
DEBUG    2023-08-19 15:20:59,205: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,205: on stmt: $20load_global.1 = global(_Py_HASH_CUTOFF: 0)
DEBUG    2023-08-19 15:20:59,205: on stmt: $22compare_op.2 = _len < $20load_global.1
DEBUG    2023-08-19 15:20:59,205: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,205: on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, hashing.py:724),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,205: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:20:59,205: ==== SSA block analysis pass on 26
DEBUG    2023-08-19 15:20:59,205: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,205: on stmt: $26load_global.0 = global(_Py_uhash_t: uint64)
DEBUG    2023-08-19 15:20:59,205: on stmt: $const28.1 = const(int, 5381)
DEBUG    2023-08-19 15:20:59,205: on stmt: _hash = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,205: on stmt: $34load_global.3 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,205: on stmt: $38call_function.5 = call $34load_global.3(_len, func=$34load_global.3, args=[Var(_len, hashing.py:721)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,205: on stmt: $40get_iter.6 = getiter(value=$38call_function.5)
DEBUG    2023-08-19 15:20:59,205: on stmt: $phi42.0 = $40get_iter.6
DEBUG    2023-08-19 15:20:59,209: on stmt: jump 42
DEBUG    2023-08-19 15:20:59,209: ==== SSA block analysis pass on 42
DEBUG    2023-08-19 15:20:59,209: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,209: on stmt: $42for_iter.1 = iternext(value=$phi42.0)
DEBUG    2023-08-19 15:20:59,209: on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
DEBUG    2023-08-19 15:20:59,209: on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
DEBUG    2023-08-19 15:20:59,209: on stmt: $phi44.1 = $42for_iter.2
DEBUG    2023-08-19 15:20:59,209: on stmt: branch $42for_iter.3, 44, 76
DEBUG    2023-08-19 15:20:59,209: ==== SSA block analysis pass on 44
DEBUG    2023-08-19 15:20:59,209: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,209: on stmt: idx = $phi44.1
DEBUG    2023-08-19 15:20:59,209: on stmt: $const48.3 = const(int, 5)
DEBUG    2023-08-19 15:20:59,209: on stmt: $50binary_lshift.4 = _hash << $const48.3
DEBUG    2023-08-19 15:20:59,209: on stmt: $54binary_add.6 = $50binary_lshift.4 + _hash
DEBUG    2023-08-19 15:20:59,209: on stmt: $56load_global.7 = global(np: <module 'numpy' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,209: on stmt: $58load_method.8 = getattr(value=$56load_global.7, attr=uint8)
DEBUG    2023-08-19 15:20:59,209: on stmt: $60load_global.9 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,209: on stmt: $66call_function.12 = call $60load_global.9(val, idx, func=$60load_global.9, args=[Var(val, hashing.py:721), Var(idx, hashing.py:728)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,209: on stmt: $68call_method.13 = call $58load_method.8($66call_function.12, func=$58load_method.8, args=[Var($66call_function.12, hashing.py:729)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,209: on stmt: _hash = $54binary_add.6 + $68call_method.13
DEBUG    2023-08-19 15:20:59,209: on stmt: jump 42
DEBUG    2023-08-19 15:20:59,209: ==== SSA block analysis pass on 76
DEBUG    2023-08-19 15:20:59,209: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,209: on stmt: $80inplace_xor.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=_len, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,209: on stmt: _hash = $80inplace_xor.2
DEBUG    2023-08-19 15:20:59,209: on stmt: $86load_global.4 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,209: on stmt: $const88.5 = const(str, djbx33a_suffix)
DEBUG    2023-08-19 15:20:59,209: on stmt: $90call_function.6 = call $86load_global.4($const88.5, func=$86load_global.4, args=[Var($const88.5, hashing.py:732)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,209: on stmt: $92inplace_xor.7 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=$90call_function.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,211: on stmt: _hash = $92inplace_xor.7
DEBUG    2023-08-19 15:20:59,211: on stmt: jump 140
DEBUG    2023-08-19 15:20:59,211: ==== SSA block analysis pass on 98
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,211: on stmt: $98load_global.0 = global(_siphash24: <function _siphash24 at 0x0000025F3198DDC0>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $100load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $102load_method.2 = getattr(value=$100load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,211: on stmt: $104load_global.3 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $const106.4 = const(str, siphash_k0)
DEBUG    2023-08-19 15:20:59,211: on stmt: $108call_function.5 = call $104load_global.3($const106.4, func=$104load_global.3, args=[Var($const106.4, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $110call_method.6 = call $102load_method.2($108call_function.5, func=$102load_method.2, args=[Var($108call_function.5, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $112load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $114load_method.8 = getattr(value=$112load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,211: on stmt: $116load_global.9 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $const118.10 = const(str, siphash_k1)
DEBUG    2023-08-19 15:20:59,211: on stmt: $120call_function.11 = call $116load_global.9($const118.10, func=$116load_global.9, args=[Var($const118.10, hashing.py:735)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $122call_method.12 = call $114load_method.8($120call_function.11, func=$114load_method.8, args=[Var($120call_function.11, hashing.py:735)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: tmp = call $98load_global.0($110call_method.6, $122call_method.12, val, _len, func=$98load_global.0, args=[Var($110call_method.6, hashing.py:734), Var($122call_method.12, hashing.py:735), Var(val, hashing.py:721), Var(_len, hashing.py:721)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $132load_global.16 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,211: on stmt: _hash = call $132load_global.16(tmp, func=$132load_global.16, args=[Var(tmp, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: jump 140
DEBUG    2023-08-19 15:20:59,211: ==== SSA block analysis pass on 140
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418640>
DEBUG    2023-08-19 15:20:59,211: on stmt: $140load_global.0 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $144call_function.2 = call $140load_global.0(_hash, func=$140load_global.0, args=[Var(_hash, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $146return_value.3 = cast(value=$144call_function.2)
DEBUG    2023-08-19 15:20:59,211: on stmt: return $146return_value.3
DEBUG    2023-08-19 15:20:59,211: defs defaultdict(<class 'list'>,
            {'$100load_global.1': [<numba.core.ir.Assign object at 0x0000025F33414520>],
             '$102load_method.2': [<numba.core.ir.Assign object at 0x0000025F334146A0>],
             '$104load_global.3': [<numba.core.ir.Assign object at 0x0000025F33414820>],
             '$108call_function.5': [<numba.core.ir.Assign object at 0x0000025F33414B80>],
             '$10load_global.0': [<numba.core.ir.Assign object at 0x0000025F3340D220>],
             '$110call_method.6': [<numba.core.ir.Assign object at 0x0000025F33414D30>],
             '$112load_global.7': [<numba.core.ir.Assign object at 0x0000025F33414E20>],
             '$114load_method.8': [<numba.core.ir.Assign object at 0x0000025F33414FA0>],
             '$116load_global.9': [<numba.core.ir.Assign object at 0x0000025F33416160>],
             '$120call_function.11': [<numba.core.ir.Assign object at 0x0000025F334164C0>],
             '$122call_method.12': [<numba.core.ir.Assign object at 0x0000025F33416670>],
             '$132load_global.16': [<numba.core.ir.Assign object at 0x0000025F33416C40>],
             '$140load_global.0': [<numba.core.ir.Assign object at 0x0000025F33418040>],
             '$144call_function.2': [<numba.core.ir.Assign object at 0x0000025F33418340>],
             '$146return_value.3': [<numba.core.ir.Assign object at 0x0000025F33418460>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x0000025F3340D580>],
             '$16return_value.3': [<numba.core.ir.Assign object at 0x0000025F3340D6A0>],
             '$20load_global.1': [<numba.core.ir.Assign object at 0x0000025F3340DA60>],
             '$22compare_op.2': [<numba.core.ir.Assign object at 0x0000025F3340DC10>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000025F3340DE80>],
             '$26load_global.0': [<numba.core.ir.Assign object at 0x0000025F3340E100>],
             '$34load_global.3': [<numba.core.ir.Assign object at 0x0000025F3340E6A0>],
             '$38call_function.5': [<numba.core.ir.Assign object at 0x0000025F3340E9A0>],
             '$40get_iter.6': [<numba.core.ir.Assign object at 0x0000025F3340EAC0>],
             '$42for_iter.1': [<numba.core.ir.Assign object at 0x0000025F3340ED90>],
             '$42for_iter.2': [<numba.core.ir.Assign object at 0x0000025F3340EEB0>],
             '$42for_iter.3': [<numba.core.ir.Assign object at 0x0000025F3340EFD0>],
             '$50binary_lshift.4': [<numba.core.ir.Assign object at 0x0000025F33410730>],
             '$54binary_add.6': [<numba.core.ir.Assign object at 0x0000025F334109D0>],
             '$56load_global.7': [<numba.core.ir.Assign object at 0x0000025F33410B20>],
             '$58load_method.8': [<numba.core.ir.Assign object at 0x0000025F33410CA0>],
             '$60load_global.9': [<numba.core.ir.Assign object at 0x0000025F33410E20>],
             '$66call_function.12': [<numba.core.ir.Assign object at 0x0000025F33412280>],
             '$68call_method.13': [<numba.core.ir.Assign object at 0x0000025F33412430>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000025F333E6460>],
             '$80inplace_xor.2': [<numba.core.ir.Assign object at 0x0000025F33412910>],
             '$86load_global.4': [<numba.core.ir.Assign object at 0x0000025F33412C40>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000025F333ECDF0>],
             '$90call_function.6': [<numba.core.ir.Assign object at 0x0000025F33412FA0>],
             '$92inplace_xor.7': [<numba.core.ir.Assign object at 0x0000025F33414130>],
             '$98load_global.0': [<numba.core.ir.Assign object at 0x0000025F334143A0>],
             '$const106.4': [<numba.core.ir.Assign object at 0x0000025F334149A0>],
             '$const118.10': [<numba.core.ir.Assign object at 0x0000025F334162E0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x0000025F3340D3A0>],
             '$const28.1': [<numba.core.ir.Assign object at 0x0000025F3340E280>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F333E6760>],
             '$const48.3': [<numba.core.ir.Assign object at 0x0000025F33410580>],
             '$const88.5': [<numba.core.ir.Assign object at 0x0000025F33412DC0>],
             '$phi42.0': [<numba.core.ir.Assign object at 0x0000025F3340E520>],
             '$phi44.1': [<numba.core.ir.Assign object at 0x0000025F3340ECD0>],
             '_hash': [<numba.core.ir.Assign object at 0x0000025F3340E460>,
                       <numba.core.ir.Assign object at 0x0000025F33412550>,
                       <numba.core.ir.Assign object at 0x0000025F334129D0>,
                       <numba.core.ir.Assign object at 0x0000025F334141F0>,
                       <numba.core.ir.Assign object at 0x0000025F33416F40>],
             '_len': [<numba.core.ir.Assign object at 0x0000025F33316D00>],
             'bool24': [<numba.core.ir.Assign object at 0x0000025F3340DD60>],
             'bool8': [<numba.core.ir.Assign object at 0x0000025F333ECFA0>],
             'idx': [<numba.core.ir.Assign object at 0x0000025F334102E0>],
             'tmp': [<numba.core.ir.Assign object at 0x0000025F33416A00>],
             'val': [<numba.core.ir.Assign object at 0x0000025F332C5670>]})
DEBUG    2023-08-19 15:20:59,211: SSA violators {'_hash'}
DEBUG    2023-08-19 15:20:59,211: Fix SSA violator on var _hash
DEBUG    2023-08-19 15:20:59,211: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,211: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:20:59,211: on stmt: _len = arg(1, name=_len)
DEBUG    2023-08-19 15:20:59,211: on stmt: $const4.1 = const(int, 0)
DEBUG    2023-08-19 15:20:59,211: on stmt: $6compare_op.2 = _len == $const4.1
DEBUG    2023-08-19 15:20:59,211: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, hashing.py:721),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: branch $8pred, 10, 18
DEBUG    2023-08-19 15:20:59,211: ==== SSA block rewrite pass on 10
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,211: on stmt: $10load_global.0 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $const12.1 = const(int, 0)
DEBUG    2023-08-19 15:20:59,211: on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, hashing.py:722)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $16return_value.3 = cast(value=$14call_function.2)
DEBUG    2023-08-19 15:20:59,211: on stmt: return $16return_value.3
DEBUG    2023-08-19 15:20:59,211: ==== SSA block rewrite pass on 18
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,211: on stmt: $20load_global.1 = global(_Py_HASH_CUTOFF: 0)
DEBUG    2023-08-19 15:20:59,211: on stmt: $22compare_op.2 = _len < $20load_global.1
DEBUG    2023-08-19 15:20:59,211: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, hashing.py:724),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:20:59,211: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,211: on stmt: $26load_global.0 = global(_Py_uhash_t: uint64)
DEBUG    2023-08-19 15:20:59,211: on stmt: $const28.1 = const(int, 5381)
DEBUG    2023-08-19 15:20:59,211: on stmt: _hash = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: first assign: _hash
DEBUG    2023-08-19 15:20:59,211: replaced with: _hash = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $34load_global.3 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $38call_function.5 = call $34load_global.3(_len, func=$34load_global.3, args=[Var(_len, hashing.py:721)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $40get_iter.6 = getiter(value=$38call_function.5)
DEBUG    2023-08-19 15:20:59,211: on stmt: $phi42.0 = $40get_iter.6
DEBUG    2023-08-19 15:20:59,211: on stmt: jump 42
DEBUG    2023-08-19 15:20:59,211: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,211: on stmt: $42for_iter.1 = iternext(value=$phi42.0)
DEBUG    2023-08-19 15:20:59,211: on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
DEBUG    2023-08-19 15:20:59,211: on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
DEBUG    2023-08-19 15:20:59,211: on stmt: $phi44.1 = $42for_iter.2
DEBUG    2023-08-19 15:20:59,211: on stmt: branch $42for_iter.3, 44, 76
DEBUG    2023-08-19 15:20:59,211: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,211: on stmt: idx = $phi44.1
DEBUG    2023-08-19 15:20:59,211: on stmt: $const48.3 = const(int, 5)
DEBUG    2023-08-19 15:20:59,211: on stmt: $50binary_lshift.4 = _hash << $const48.3
DEBUG    2023-08-19 15:20:59,211: on stmt: $54binary_add.6 = $50binary_lshift.4 + _hash
DEBUG    2023-08-19 15:20:59,211: on stmt: $56load_global.7 = global(np: <module 'numpy' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $58load_method.8 = getattr(value=$56load_global.7, attr=uint8)
DEBUG    2023-08-19 15:20:59,211: on stmt: $60load_global.9 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $66call_function.12 = call $60load_global.9(val, idx, func=$60load_global.9, args=[Var(val, hashing.py:721), Var(idx, hashing.py:728)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $68call_method.13 = call $58load_method.8($66call_function.12, func=$58load_method.8, args=[Var($66call_function.12, hashing.py:729)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: _hash = $54binary_add.6 + $68call_method.13
DEBUG    2023-08-19 15:20:59,211: replaced with: _hash.1 = $54binary_add.6 + $68call_method.13
DEBUG    2023-08-19 15:20:59,211: on stmt: jump 42
DEBUG    2023-08-19 15:20:59,211: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,211: on stmt: $80inplace_xor.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=_len, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,211: on stmt: _hash = $80inplace_xor.2
DEBUG    2023-08-19 15:20:59,211: replaced with: _hash.2 = $80inplace_xor.2
DEBUG    2023-08-19 15:20:59,211: on stmt: $86load_global.4 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $const88.5 = const(str, djbx33a_suffix)
DEBUG    2023-08-19 15:20:59,211: on stmt: $90call_function.6 = call $86load_global.4($const88.5, func=$86load_global.4, args=[Var($const88.5, hashing.py:732)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,211: on stmt: $92inplace_xor.7 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=$90call_function.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,211: on stmt: _hash = $92inplace_xor.7
DEBUG    2023-08-19 15:20:59,211: replaced with: _hash.3 = $92inplace_xor.7
DEBUG    2023-08-19 15:20:59,211: on stmt: jump 140
DEBUG    2023-08-19 15:20:59,211: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:20:59,211: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,211: on stmt: $98load_global.0 = global(_siphash24: <function _siphash24 at 0x0000025F3198DDC0>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $100load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,211: on stmt: $102load_method.2 = getattr(value=$100load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,211: on stmt: $104load_global.3 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,219: on stmt: $const106.4 = const(str, siphash_k0)
DEBUG    2023-08-19 15:20:59,219: on stmt: $108call_function.5 = call $104load_global.3($const106.4, func=$104load_global.3, args=[Var($const106.4, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,219: on stmt: $110call_method.6 = call $102load_method.2($108call_function.5, func=$102load_method.2, args=[Var($108call_function.5, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,219: on stmt: $112load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,219: on stmt: $114load_method.8 = getattr(value=$112load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,219: on stmt: $116load_global.9 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,219: on stmt: $const118.10 = const(str, siphash_k1)
DEBUG    2023-08-19 15:20:59,219: on stmt: $120call_function.11 = call $116load_global.9($const118.10, func=$116load_global.9, args=[Var($const118.10, hashing.py:735)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,219: on stmt: $122call_method.12 = call $114load_method.8($120call_function.11, func=$114load_method.8, args=[Var($120call_function.11, hashing.py:735)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,219: on stmt: tmp = call $98load_global.0($110call_method.6, $122call_method.12, val, _len, func=$98load_global.0, args=[Var($110call_method.6, hashing.py:734), Var($122call_method.12, hashing.py:735), Var(val, hashing.py:721), Var(_len, hashing.py:721)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,219: on stmt: $132load_global.16 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,219: on stmt: _hash = call $132load_global.16(tmp, func=$132load_global.16, args=[Var(tmp, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,219: replaced with: _hash.4 = call $132load_global.16(tmp, func=$132load_global.16, args=[Var(tmp, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,219: on stmt: jump 140
DEBUG    2023-08-19 15:20:59,219: ==== SSA block rewrite pass on 140
DEBUG    2023-08-19 15:20:59,219: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,219: on stmt: $140load_global.0 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,219: on stmt: $144call_function.2 = call $140load_global.0(_hash, func=$140load_global.0, args=[Var(_hash, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,219: on stmt: $146return_value.3 = cast(value=$144call_function.2)
DEBUG    2023-08-19 15:20:59,219: on stmt: return $146return_value.3
DEBUG    2023-08-19 15:20:59,219: Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000025F333FBB80>],
             44: [<numba.core.ir.Assign object at 0x0000025F33418C40>],
             76: [<numba.core.ir.Assign object at 0x0000025F33418C10>,
                  <numba.core.ir.Assign object at 0x0000025F33418C70>],
             98: [<numba.core.ir.Assign object at 0x0000025F33418A00>]})
DEBUG    2023-08-19 15:20:59,219: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,219: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,219: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:20:59,221: on stmt: _len = arg(1, name=_len)
DEBUG    2023-08-19 15:20:59,221: on stmt: $const4.1 = const(int, 0)
DEBUG    2023-08-19 15:20:59,221: on stmt: $6compare_op.2 = _len == $const4.1
DEBUG    2023-08-19 15:20:59,221: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, hashing.py:721),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: on stmt: branch $8pred, 10, 18
DEBUG    2023-08-19 15:20:59,221: ==== SSA block rewrite pass on 10
DEBUG    2023-08-19 15:20:59,221: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,221: on stmt: $10load_global.0 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $const12.1 = const(int, 0)
DEBUG    2023-08-19 15:20:59,221: on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, hashing.py:722)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: on stmt: $16return_value.3 = cast(value=$14call_function.2)
DEBUG    2023-08-19 15:20:59,221: on stmt: return $16return_value.3
DEBUG    2023-08-19 15:20:59,221: ==== SSA block rewrite pass on 18
DEBUG    2023-08-19 15:20:59,221: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,221: on stmt: $20load_global.1 = global(_Py_HASH_CUTOFF: 0)
DEBUG    2023-08-19 15:20:59,221: on stmt: $22compare_op.2 = _len < $20load_global.1
DEBUG    2023-08-19 15:20:59,221: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $24pred = call bool24($22compare_op.2, func=bool24, args=(Var($22compare_op.2, hashing.py:724),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:20:59,221: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:20:59,221: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,221: on stmt: $26load_global.0 = global(_Py_uhash_t: uint64)
DEBUG    2023-08-19 15:20:59,221: on stmt: $const28.1 = const(int, 5381)
DEBUG    2023-08-19 15:20:59,221: on stmt: _hash = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: on stmt: $34load_global.3 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $38call_function.5 = call $34load_global.3(_len, func=$34load_global.3, args=[Var(_len, hashing.py:721)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: on stmt: $40get_iter.6 = getiter(value=$38call_function.5)
DEBUG    2023-08-19 15:20:59,221: on stmt: $phi42.0 = $40get_iter.6
DEBUG    2023-08-19 15:20:59,221: on stmt: jump 42
DEBUG    2023-08-19 15:20:59,221: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:20:59,221: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,221: on stmt: $42for_iter.1 = iternext(value=$phi42.0)
DEBUG    2023-08-19 15:20:59,221: on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
DEBUG    2023-08-19 15:20:59,221: on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
DEBUG    2023-08-19 15:20:59,221: on stmt: $phi44.1 = $42for_iter.2
DEBUG    2023-08-19 15:20:59,221: on stmt: branch $42for_iter.3, 44, 76
DEBUG    2023-08-19 15:20:59,221: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:20:59,221: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,221: on stmt: idx = $phi44.1
DEBUG    2023-08-19 15:20:59,221: on stmt: $const48.3 = const(int, 5)
DEBUG    2023-08-19 15:20:59,221: on stmt: $50binary_lshift.4 = _hash << $const48.3
DEBUG    2023-08-19 15:20:59,221: find_def var='_hash' stmt=$50binary_lshift.4 = _hash << $const48.3
DEBUG    2023-08-19 15:20:59,221: find_def_from_top label 44
DEBUG    2023-08-19 15:20:59,221: idom 42 from label 44
DEBUG    2023-08-19 15:20:59,221: find_def_from_bottom label 42
DEBUG    2023-08-19 15:20:59,221: find_def_from_top label 42
DEBUG    2023-08-19 15:20:59,221: insert phi node _hash.5 = phi(incoming_values=[], incoming_blocks=[]) at 42
DEBUG    2023-08-19 15:20:59,221: find_def_from_bottom label 26
DEBUG    2023-08-19 15:20:59,221: incoming_def _hash = call $26load_global.0($const28.1, func=$26load_global.0, args=[Var($const28.1, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: find_def_from_bottom label 44
DEBUG    2023-08-19 15:20:59,221: incoming_def _hash.1 = $54binary_add.6 + $68call_method.13
DEBUG    2023-08-19 15:20:59,221: replaced with: $50binary_lshift.4 = _hash.5 << $const48.3
DEBUG    2023-08-19 15:20:59,221: on stmt: $54binary_add.6 = $50binary_lshift.4 + _hash
DEBUG    2023-08-19 15:20:59,221: find_def var='_hash' stmt=$54binary_add.6 = $50binary_lshift.4 + _hash
DEBUG    2023-08-19 15:20:59,221: find_def_from_top label 44
DEBUG    2023-08-19 15:20:59,221: idom 42 from label 44
DEBUG    2023-08-19 15:20:59,221: find_def_from_bottom label 42
DEBUG    2023-08-19 15:20:59,221: replaced with: $54binary_add.6 = $50binary_lshift.4 + _hash.5
DEBUG    2023-08-19 15:20:59,221: on stmt: $56load_global.7 = global(np: <module 'numpy' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $58load_method.8 = getattr(value=$56load_global.7, attr=uint8)
DEBUG    2023-08-19 15:20:59,221: on stmt: $60load_global.9 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $66call_function.12 = call $60load_global.9(val, idx, func=$60load_global.9, args=[Var(val, hashing.py:721), Var(idx, hashing.py:728)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: on stmt: $68call_method.13 = call $58load_method.8($66call_function.12, func=$58load_method.8, args=[Var($66call_function.12, hashing.py:729)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: on stmt: _hash.1 = $54binary_add.6 + $68call_method.13
DEBUG    2023-08-19 15:20:59,221: on stmt: jump 42
DEBUG    2023-08-19 15:20:59,221: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,221: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,221: on stmt: $80inplace_xor.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=_len, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,221: find_def var='_hash' stmt=$80inplace_xor.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=_len, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,221: find_def_from_top label 76
DEBUG    2023-08-19 15:20:59,221: idom 42 from label 76
DEBUG    2023-08-19 15:20:59,221: find_def_from_bottom label 42
DEBUG    2023-08-19 15:20:59,221: replaced with: $80inplace_xor.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash.5, rhs=_len, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,221: on stmt: _hash.2 = $80inplace_xor.2
DEBUG    2023-08-19 15:20:59,221: on stmt: $86load_global.4 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $const88.5 = const(str, djbx33a_suffix)
DEBUG    2023-08-19 15:20:59,221: on stmt: $90call_function.6 = call $86load_global.4($const88.5, func=$86load_global.4, args=[Var($const88.5, hashing.py:732)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,221: on stmt: $92inplace_xor.7 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=$90call_function.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,221: find_def var='_hash' stmt=$92inplace_xor.7 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash, rhs=$90call_function.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,221: replaced with: $92inplace_xor.7 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=_hash.2, rhs=$90call_function.6, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,221: on stmt: _hash.3 = $92inplace_xor.7
DEBUG    2023-08-19 15:20:59,221: on stmt: jump 140
DEBUG    2023-08-19 15:20:59,221: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:20:59,221: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,221: on stmt: $98load_global.0 = global(_siphash24: <function _siphash24 at 0x0000025F3198DDC0>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $100load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $102load_method.2 = getattr(value=$100load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,221: on stmt: $104load_global.3 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,221: on stmt: $const106.4 = const(str, siphash_k0)
DEBUG    2023-08-19 15:20:59,229: on stmt: $108call_function.5 = call $104load_global.3($const106.4, func=$104load_global.3, args=[Var($const106.4, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,229: on stmt: $110call_method.6 = call $102load_method.2($108call_function.5, func=$102load_method.2, args=[Var($108call_function.5, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,229: on stmt: $112load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,229: on stmt: $114load_method.8 = getattr(value=$112load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,229: on stmt: $116load_global.9 = global(_load_hashsecret: <function _load_hashsecret at 0x0000025F3198DEE0>)
DEBUG    2023-08-19 15:20:59,229: on stmt: $const118.10 = const(str, siphash_k1)
DEBUG    2023-08-19 15:20:59,229: on stmt: $120call_function.11 = call $116load_global.9($const118.10, func=$116load_global.9, args=[Var($const118.10, hashing.py:735)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,229: on stmt: $122call_method.12 = call $114load_method.8($120call_function.11, func=$114load_method.8, args=[Var($120call_function.11, hashing.py:735)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,229: on stmt: tmp = call $98load_global.0($110call_method.6, $122call_method.12, val, _len, func=$98load_global.0, args=[Var($110call_method.6, hashing.py:734), Var($122call_method.12, hashing.py:735), Var(val, hashing.py:721), Var(_len, hashing.py:721)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,229: on stmt: $132load_global.16 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,229: on stmt: _hash.4 = call $132load_global.16(tmp, func=$132load_global.16, args=[Var(tmp, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,229: on stmt: jump 140
DEBUG    2023-08-19 15:20:59,229: ==== SSA block rewrite pass on 140
DEBUG    2023-08-19 15:20:59,229: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333FBAF0>
DEBUG    2023-08-19 15:20:59,229: on stmt: $140load_global.0 = global(process_return: <function process_return at 0x0000025F318BF430>)
DEBUG    2023-08-19 15:20:59,229: on stmt: $144call_function.2 = call $140load_global.0(_hash, func=$140load_global.0, args=[Var(_hash, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,229: find_def var='_hash' stmt=$144call_function.2 = call $140load_global.0(_hash, func=$140load_global.0, args=[Var(_hash, hashing.py:727)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,229: find_def_from_top label 140
DEBUG    2023-08-19 15:20:59,229: insert phi node _hash.6 = phi(incoming_values=[], incoming_blocks=[]) at 140
DEBUG    2023-08-19 15:20:59,229: find_def_from_bottom label 98
DEBUG    2023-08-19 15:20:59,231: incoming_def _hash.4 = call $132load_global.16(tmp, func=$132load_global.16, args=[Var(tmp, hashing.py:734)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,231: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,231: incoming_def _hash.3 = $92inplace_xor.7
DEBUG    2023-08-19 15:20:59,231: replaced with: $144call_function.2 = call $140load_global.0(_hash.6, func=$140load_global.0, args=[Var(_hash.6, hashing.py:738)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,231: on stmt: $146return_value.3 = cast(value=$144call_function.2)
DEBUG    2023-08-19 15:20:59,231: on stmt: return $146return_value.3
DEBUG    2023-08-19 15:20:59,241: bytecode dump:
>          0	NOP(arg=None, lineno=58)
           2	LOAD_GLOBAL(arg=0, lineno=58)
           4	LOAD_FAST(arg=0, lineno=58)
           6	CALL_FUNCTION(arg=1, lineno=58)
           8	STORE_FAST(arg=1, lineno=58)
          10	LOAD_FAST(arg=1, lineno=59)
          12	LOAD_GLOBAL(arg=1, lineno=59)
          14	LOAD_CONST(arg=1, lineno=59)
          16	CALL_FUNCTION(arg=1, lineno=59)
          18	COMPARE_OP(arg=2, lineno=59)
          20	POP_JUMP_IF_FALSE(arg=30, lineno=59)
          22	LOAD_GLOBAL(arg=1, lineno=60)
          24	LOAD_CONST(arg=2, lineno=60)
          26	CALL_FUNCTION(arg=1, lineno=60)
          28	STORE_FAST(arg=1, lineno=60)
>         30	LOAD_FAST(arg=1, lineno=61)
          32	RETURN_VALUE(arg=None, lineno=61)
DEBUG    2023-08-19 15:20:59,241: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,241: stack: []
DEBUG    2023-08-19 15:20:59,241: dispatch pc=0, inst=NOP(arg=None, lineno=58)
DEBUG    2023-08-19 15:20:59,241: stack []
DEBUG    2023-08-19 15:20:59,241: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=58)
DEBUG    2023-08-19 15:20:59,241: stack []
DEBUG    2023-08-19 15:20:59,241: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=58)
DEBUG    2023-08-19 15:20:59,241: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=58)
DEBUG    2023-08-19 15:20:59,241: stack ['$2load_global.0', '$val4.1']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=8, inst=STORE_FAST(arg=1, lineno=58)
DEBUG    2023-08-19 15:20:59,241: stack ['$6call_function.2']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=59)
DEBUG    2023-08-19 15:20:59,241: stack []
DEBUG    2023-08-19 15:20:59,241: dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=59)
DEBUG    2023-08-19 15:20:59,241: stack ['$asint10.3']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=59)
DEBUG    2023-08-19 15:20:59,241: stack ['$asint10.3', '$12load_global.4']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=59)
DEBUG    2023-08-19 15:20:59,241: stack ['$asint10.3', '$12load_global.4', '$const14.5']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=18, inst=COMPARE_OP(arg=2, lineno=59)
DEBUG    2023-08-19 15:20:59,241: stack ['$asint10.3', '$16call_function.6']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=30, lineno=59)
DEBUG    2023-08-19 15:20:59,241: stack ['$18compare_op.7']
DEBUG    2023-08-19 15:20:59,241: end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,241: pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,241: stack: []
DEBUG    2023-08-19 15:20:59,241: dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=60)
DEBUG    2023-08-19 15:20:59,241: stack []
DEBUG    2023-08-19 15:20:59,241: dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=60)
DEBUG    2023-08-19 15:20:59,241: stack ['$22load_global.0']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=60)
DEBUG    2023-08-19 15:20:59,241: stack ['$22load_global.0', '$const24.1']
DEBUG    2023-08-19 15:20:59,241: dispatch pc=28, inst=STORE_FAST(arg=1, lineno=60)
DEBUG    2023-08-19 15:20:59,241: stack ['$26call_function.2']
DEBUG    2023-08-19 15:20:59,241: end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,241: pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,241: stack: []
DEBUG    2023-08-19 15:20:59,241: dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=61)
DEBUG    2023-08-19 15:20:59,241: stack []
DEBUG    2023-08-19 15:20:59,241: dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=61)
DEBUG    2023-08-19 15:20:59,241: stack ['$asint30.0']
DEBUG    2023-08-19 15:20:59,241: end state. edges=[]
DEBUG    2023-08-19 15:20:59,241: pending: deque([State(pc_initial=30 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,241: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,241: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,241: defmap: {}
DEBUG    2023-08-19 15:20:59,241: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,241: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,241: keep phismap: {}
DEBUG    2023-08-19 15:20:59,241: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,241: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,241: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$val4.1'}), (6, {'func': '$2load_global.0', 'args': ['$val4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$asint10.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$const14.5'}), (16, {'func': '$12load_global.4', 'args': ['$const14.5'], 'res': '$16call_function.6'}), (18, {'lhs': '$asint10.3', 'rhs': '$16call_function.6', 'res': '$18compare_op.7'}), (20, {'pred': '$18compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 30: ()})
DEBUG    2023-08-19 15:20:59,241: block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$22load_global.0'}), (24, {'res': '$const24.1'}), (26, {'func': '$22load_global.0', 'args': ['$const24.1'], 'res': '$26call_function.2'}), (28, {'value': '$26call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
DEBUG    2023-08-19 15:20:59,241: block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$asint30.0'}), (32, {'retval': '$asint30.0', 'castval': '$32return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,241: label 0:
    val = arg(0, name=val)                   ['val']
    $2load_global.0 = global(_Py_hash_t: int64) ['$2load_global.0']
    asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None) ['$2load_global.0', 'asint', 'val']
    $12load_global.4 = global(int: <class 'int'>) ['$12load_global.4']
    $const14.5 = const(int, -1)              ['$const14.5']
    $16call_function.6 = call $12load_global.4($const14.5, func=$12load_global.4, args=[Var($const14.5, hashing.py:59)], kws=(), vararg=None, target=None) ['$12load_global.4', '$16call_function.6', '$const14.5']
    $18compare_op.7 = asint == $16call_function.6 ['$16call_function.6', '$18compare_op.7', 'asint']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, hashing.py:59),), kws=(), vararg=None, target=None) ['$18compare_op.7', '$20pred', 'bool20']
    branch $20pred, 22, 30                   ['$20pred']
label 22:
    $22load_global.0 = global(int: <class 'int'>) ['$22load_global.0']
    $const24.1 = const(int, -2)              ['$const24.1']
    asint = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None) ['$22load_global.0', '$const24.1', 'asint']
    jump 30                                  []
label 30:
    $32return_value.1 = cast(value=asint)    ['$32return_value.1', 'asint']
    return $32return_value.1                 ['$32return_value.1']

DEBUG    2023-08-19 15:20:59,252: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,252: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333EF280>
DEBUG    2023-08-19 15:20:59,252: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:20:59,252: on stmt: $2load_global.0 = global(_Py_hash_t: int64)
DEBUG    2023-08-19 15:20:59,252: on stmt: asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: $12load_global.4 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $const14.5 = const(int, -1)
DEBUG    2023-08-19 15:20:59,252: on stmt: $16call_function.6 = call $12load_global.4($const14.5, func=$12load_global.4, args=[Var($const14.5, hashing.py:59)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: $18compare_op.7 = asint == $16call_function.6
DEBUG    2023-08-19 15:20:59,252: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, hashing.py:59),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: branch $20pred, 22, 30
DEBUG    2023-08-19 15:20:59,252: ==== SSA block analysis pass on 22
DEBUG    2023-08-19 15:20:59,252: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333EF280>
DEBUG    2023-08-19 15:20:59,252: on stmt: $22load_global.0 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $const24.1 = const(int, -2)
DEBUG    2023-08-19 15:20:59,252: on stmt: asint = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: jump 30
DEBUG    2023-08-19 15:20:59,252: ==== SSA block analysis pass on 30
DEBUG    2023-08-19 15:20:59,252: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333EF280>
DEBUG    2023-08-19 15:20:59,252: on stmt: $32return_value.1 = cast(value=asint)
DEBUG    2023-08-19 15:20:59,252: on stmt: return $32return_value.1
DEBUG    2023-08-19 15:20:59,252: defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x0000025F33316AF0>],
             '$16call_function.6': [<numba.core.ir.Assign object at 0x0000025F33316820>],
             '$18compare_op.7': [<numba.core.ir.Assign object at 0x0000025F33316100>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000025F333ECCD0>],
             '$22load_global.0': [<numba.core.ir.Assign object at 0x0000025F333ECA60>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F333EF1C0>],
             '$32return_value.1': [<numba.core.ir.Assign object at 0x0000025F333EC2E0>],
             '$const14.5': [<numba.core.ir.Assign object at 0x0000025F333161C0>],
             '$const24.1': [<numba.core.ir.Assign object at 0x0000025F333EC5B0>],
             'asint': [<numba.core.ir.Assign object at 0x0000025F332E0AF0>,
                       <numba.core.ir.Assign object at 0x0000025F333EC6D0>],
             'bool20': [<numba.core.ir.Assign object at 0x0000025F333161F0>],
             'val': [<numba.core.ir.Assign object at 0x0000025F333EFCA0>]})
DEBUG    2023-08-19 15:20:59,252: SSA violators {'asint'}
DEBUG    2023-08-19 15:20:59,252: Fix SSA violator on var asint
DEBUG    2023-08-19 15:20:59,252: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,252: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EFD60>
DEBUG    2023-08-19 15:20:59,252: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:20:59,252: on stmt: $2load_global.0 = global(_Py_hash_t: int64)
DEBUG    2023-08-19 15:20:59,252: on stmt: asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: first assign: asint
DEBUG    2023-08-19 15:20:59,252: replaced with: asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: $12load_global.4 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $const14.5 = const(int, -1)
DEBUG    2023-08-19 15:20:59,252: on stmt: $16call_function.6 = call $12load_global.4($const14.5, func=$12load_global.4, args=[Var($const14.5, hashing.py:59)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: $18compare_op.7 = asint == $16call_function.6
DEBUG    2023-08-19 15:20:59,252: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, hashing.py:59),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: branch $20pred, 22, 30
DEBUG    2023-08-19 15:20:59,252: ==== SSA block rewrite pass on 22
DEBUG    2023-08-19 15:20:59,252: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EFD60>
DEBUG    2023-08-19 15:20:59,252: on stmt: $22load_global.0 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $const24.1 = const(int, -2)
DEBUG    2023-08-19 15:20:59,252: on stmt: asint = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: replaced with: asint.1 = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: jump 30
DEBUG    2023-08-19 15:20:59,252: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:20:59,252: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EFD60>
DEBUG    2023-08-19 15:20:59,252: on stmt: $32return_value.1 = cast(value=asint)
DEBUG    2023-08-19 15:20:59,252: on stmt: return $32return_value.1
DEBUG    2023-08-19 15:20:59,252: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F333EF3D0>],
             22: [<numba.core.ir.Assign object at 0x0000025F333EFFD0>]})
DEBUG    2023-08-19 15:20:59,252: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,252: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333EFD60>
DEBUG    2023-08-19 15:20:59,252: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:20:59,252: on stmt: $2load_global.0 = global(_Py_hash_t: int64)
DEBUG    2023-08-19 15:20:59,252: on stmt: asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: $12load_global.4 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $const14.5 = const(int, -1)
DEBUG    2023-08-19 15:20:59,252: on stmt: $16call_function.6 = call $12load_global.4($const14.5, func=$12load_global.4, args=[Var($const14.5, hashing.py:59)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: $18compare_op.7 = asint == $16call_function.6
DEBUG    2023-08-19 15:20:59,252: find_def var='asint' stmt=$18compare_op.7 = asint == $16call_function.6
DEBUG    2023-08-19 15:20:59,252: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, hashing.py:59),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,252: on stmt: branch $20pred, 22, 30
DEBUG    2023-08-19 15:20:59,252: ==== SSA block rewrite pass on 22
DEBUG    2023-08-19 15:20:59,252: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333EFD60>
DEBUG    2023-08-19 15:20:59,252: on stmt: $22load_global.0 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:20:59,252: on stmt: $const24.1 = const(int, -2)
DEBUG    2023-08-19 15:20:59,252: on stmt: asint.1 = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,260: on stmt: jump 30
DEBUG    2023-08-19 15:20:59,260: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:20:59,260: Running <numba.core.ssa._FixSSAVars object at 0x0000025F333EFD60>
DEBUG    2023-08-19 15:20:59,260: on stmt: $32return_value.1 = cast(value=asint)
DEBUG    2023-08-19 15:20:59,260: find_def var='asint' stmt=$32return_value.1 = cast(value=asint)
DEBUG    2023-08-19 15:20:59,260: find_def_from_top label 30
DEBUG    2023-08-19 15:20:59,260: insert phi node asint.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
DEBUG    2023-08-19 15:20:59,260: find_def_from_bottom label 0
DEBUG    2023-08-19 15:20:59,260: incoming_def asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,260: find_def_from_bottom label 22
DEBUG    2023-08-19 15:20:59,260: incoming_def asint.1 = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,260: replaced with: $32return_value.1 = cast(value=asint.2)
DEBUG    2023-08-19 15:20:59,260: on stmt: return $32return_value.1
DEBUG    2023-08-19 15:20:59,305: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,305: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,305: stack: []
DEBUG    2023-08-19 15:20:59,305: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,305: stack []
DEBUG    2023-08-19 15:20:59,305: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,305: stack []
DEBUG    2023-08-19 15:20:59,305: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,305: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:59,306: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:20:59,306: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:20:59,306: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,306: stack ['$6call_function.2']
DEBUG    2023-08-19 15:20:59,306: end state. edges=[]
DEBUG    2023-08-19 15:20:59,306: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,306: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,306: defmap: {}
DEBUG    2023-08-19 15:20:59,306: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,306: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,307: keep phismap: {}
DEBUG    2023-08-19 15:20:59,307: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,307: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,307: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,307: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:20:59,309: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,310: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3343AE50>
DEBUG    2023-08-19 15:20:59,310: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:20:59,310: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:20:59,310: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,310: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:20:59,310: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:20:59,310: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F3343A940>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F3343AC40>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F3343AD60>],
             'name': [<numba.core.ir.Assign object at 0x0000025F3343A0A0>]})
DEBUG    2023-08-19 15:20:59,310: SSA violators set()
DEBUG    2023-08-19 15:20:59,322: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m - Of which 2 did not match due to:
 Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
   With argument(s): '(unicode_type)':[0m
[1m  Rejected as the implementation raised a specific error:
    TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:20:59,330: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m  - Of which 2 did not match due to:
  Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
    With argument(s): '(unicode_type)':[0m
[1m   Rejected as the implementation raised a specific error:
     TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:20:59,333: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,333: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,333: stack: []
DEBUG    2023-08-19 15:20:59,333: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,333: stack []
DEBUG    2023-08-19 15:20:59,333: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,333: stack []
DEBUG    2023-08-19 15:20:59,333: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,333: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:59,333: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:20:59,333: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:20:59,334: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,334: stack ['$6call_function.2']
DEBUG    2023-08-19 15:20:59,334: end state. edges=[]
DEBUG    2023-08-19 15:20:59,334: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,334: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,334: defmap: {}
DEBUG    2023-08-19 15:20:59,334: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,334: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,334: keep phismap: {}
DEBUG    2023-08-19 15:20:59,334: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,334: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,334: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,335: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:20:59,336: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,337: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333F52E0>
DEBUG    2023-08-19 15:20:59,337: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:20:59,337: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:20:59,338: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,338: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:20:59,338: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:20:59,338: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F3343DD90>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F33433A30>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F33433940>],
             'name': [<numba.core.ir.Assign object at 0x0000025F3343D5E0>]})
DEBUG    2023-08-19 15:20:59,338: SSA violators set()
DEBUG    2023-08-19 15:20:59,353: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,353: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,353: stack: []
DEBUG    2023-08-19 15:20:59,353: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,353: stack []
DEBUG    2023-08-19 15:20:59,353: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,353: stack []
DEBUG    2023-08-19 15:20:59,353: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,353: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:59,353: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:20:59,353: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:20:59,361: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,361: stack ['$6call_function.2']
DEBUG    2023-08-19 15:20:59,361: end state. edges=[]
DEBUG    2023-08-19 15:20:59,361: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,361: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,361: defmap: {}
DEBUG    2023-08-19 15:20:59,361: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,361: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,361: keep phismap: {}
DEBUG    2023-08-19 15:20:59,361: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,361: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,361: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,361: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:20:59,363: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,363: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333F9760>
DEBUG    2023-08-19 15:20:59,363: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:20:59,363: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:20:59,363: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,363: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:20:59,363: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:20:59,363: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F333F9A90>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F334D3070>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F334D34C0>],
             'name': [<numba.core.ir.Assign object at 0x0000025F333F9C10>]})
DEBUG    2023-08-19 15:20:59,363: SSA violators set()
DEBUG    2023-08-19 15:20:59,363: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m   - Of which 2 did not match due to:
   Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
     With argument(s): '(unicode_type)':[0m
[1m    Rejected as the implementation raised a specific error:
      TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:20:59,373: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m    - Of which 2 did not match due to:
    Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
      With argument(s): '(unicode_type)':[0m
[1m     Rejected as the implementation raised a specific error:
       TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:20:59,373: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,373: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,373: stack: []
DEBUG    2023-08-19 15:20:59,373: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,373: stack []
DEBUG    2023-08-19 15:20:59,373: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,373: stack []
DEBUG    2023-08-19 15:20:59,381: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,381: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:59,381: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:20:59,381: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:20:59,381: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,381: stack ['$6call_function.2']
DEBUG    2023-08-19 15:20:59,381: end state. edges=[]
DEBUG    2023-08-19 15:20:59,381: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,381: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,381: defmap: {}
DEBUG    2023-08-19 15:20:59,381: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,381: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,381: keep phismap: {}
DEBUG    2023-08-19 15:20:59,381: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,381: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,381: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,383: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:20:59,383: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,383: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F334DD7F0>
DEBUG    2023-08-19 15:20:59,383: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:20:59,383: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:20:59,383: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,383: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:20:59,383: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:20:59,383: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F334DD4F0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F334E6130>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F334E6250>],
             'name': [<numba.core.ir.Assign object at 0x0000025F334DD3A0>]})
DEBUG    2023-08-19 15:20:59,383: SSA violators set()
DEBUG    2023-08-19 15:20:59,403: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,403: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,403: stack: []
DEBUG    2023-08-19 15:20:59,403: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,403: stack []
DEBUG    2023-08-19 15:20:59,403: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,403: stack []
DEBUG    2023-08-19 15:20:59,403: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,403: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:59,403: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:20:59,403: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:20:59,403: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,403: stack ['$6call_function.2']
DEBUG    2023-08-19 15:20:59,403: end state. edges=[]
DEBUG    2023-08-19 15:20:59,403: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,403: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,403: defmap: {}
DEBUG    2023-08-19 15:20:59,403: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,403: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,403: keep phismap: {}
DEBUG    2023-08-19 15:20:59,403: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,403: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,403: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,412: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:20:59,414: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,414: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3350A9A0>
DEBUG    2023-08-19 15:20:59,414: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:20:59,414: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:20:59,414: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,414: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:20:59,414: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:20:59,414: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F3350A2E0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F3350AFD0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F334DF130>],
             'name': [<numba.core.ir.Assign object at 0x0000025F3350A4C0>]})
DEBUG    2023-08-19 15:20:59,414: SSA violators set()
DEBUG    2023-08-19 15:20:59,422: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m     - Of which 2 did not match due to:
     Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
       With argument(s): '(unicode_type)':[0m
[1m      Rejected as the implementation raised a specific error:
        TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:20:59,424: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
        With argument(s): '(unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:20:59,424: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,424: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,424: stack: []
DEBUG    2023-08-19 15:20:59,424: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,424: stack []
DEBUG    2023-08-19 15:20:59,424: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,424: stack []
DEBUG    2023-08-19 15:20:59,424: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:20:59,424: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:59,424: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:20:59,424: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:20:59,424: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:20:59,424: stack ['$6call_function.2']
DEBUG    2023-08-19 15:20:59,424: end state. edges=[]
DEBUG    2023-08-19 15:20:59,424: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,424: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,424: defmap: {}
DEBUG    2023-08-19 15:20:59,424: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,424: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:20:59,424: keep phismap: {}
DEBUG    2023-08-19 15:20:59,424: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:20:59,424: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,424: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,424: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:20:59,432: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,432: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F334F01C0>
DEBUG    2023-08-19 15:20:59,432: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:20:59,432: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:20:59,432: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,432: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:20:59,432: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:20:59,434: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F334F0A90>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F334F0700>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F334F0EE0>],
             'name': [<numba.core.ir.Assign object at 0x0000025F334F0D30>]})
DEBUG    2023-08-19 15:20:59,434: SSA violators set()
DEBUG    2023-08-19 15:20:59,454: bytecode dump:
>          0	NOP(arg=None, lineno=609)
           2	LOAD_GLOBAL(arg=0, lineno=609)
           4	LOAD_METHOD(arg=1, lineno=609)
           6	LOAD_FAST(arg=3, lineno=609)
           8	CALL_METHOD(arg=1, lineno=609)
          10	LOAD_CONST(arg=1, lineno=609)
          12	BINARY_LSHIFT(arg=None, lineno=609)
          14	STORE_FAST(arg=4, lineno=609)
          16	LOAD_FAST(arg=0, lineno=610)
          18	LOAD_GLOBAL(arg=0, lineno=610)
          20	LOAD_METHOD(arg=1, lineno=610)
          22	LOAD_CONST(arg=2, lineno=610)
          24	CALL_METHOD(arg=1, lineno=610)
          26	BINARY_XOR(arg=None, lineno=610)
          28	STORE_FAST(arg=5, lineno=610)
          30	LOAD_FAST(arg=1, lineno=611)
          32	LOAD_GLOBAL(arg=0, lineno=611)
          34	LOAD_METHOD(arg=1, lineno=611)
          36	LOAD_CONST(arg=3, lineno=611)
          38	CALL_METHOD(arg=1, lineno=611)
          40	BINARY_XOR(arg=None, lineno=611)
          42	STORE_FAST(arg=6, lineno=611)
          44	LOAD_FAST(arg=0, lineno=612)
          46	LOAD_GLOBAL(arg=0, lineno=612)
          48	LOAD_METHOD(arg=1, lineno=612)
          50	LOAD_CONST(arg=4, lineno=612)
          52	CALL_METHOD(arg=1, lineno=612)
          54	BINARY_XOR(arg=None, lineno=612)
          56	STORE_FAST(arg=7, lineno=612)
          58	LOAD_FAST(arg=1, lineno=613)
          60	LOAD_GLOBAL(arg=0, lineno=613)
          62	LOAD_METHOD(arg=1, lineno=613)
          64	LOAD_CONST(arg=5, lineno=613)
          66	CALL_METHOD(arg=1, lineno=613)
          68	BINARY_XOR(arg=None, lineno=613)
          70	STORE_FAST(arg=8, lineno=613)
          72	LOAD_CONST(arg=6, lineno=615)
          74	STORE_FAST(arg=9, lineno=615)
>         76	LOAD_FAST(arg=3, lineno=616)
          78	LOAD_CONST(arg=7, lineno=616)
          80	COMPARE_OP(arg=5, lineno=616)
          82	POP_JUMP_IF_FALSE(arg=150, lineno=616)
          84	LOAD_GLOBAL(arg=2, lineno=617)
          86	LOAD_FAST(arg=2, lineno=617)
          88	LOAD_FAST(arg=9, lineno=617)
          90	CALL_FUNCTION(arg=2, lineno=617)
          92	STORE_FAST(arg=10, lineno=617)
          94	LOAD_FAST(arg=9, lineno=618)
          96	LOAD_CONST(arg=8, lineno=618)
          98	INPLACE_ADD(arg=None, lineno=618)
         100	STORE_FAST(arg=9, lineno=618)
         102	LOAD_FAST(arg=3, lineno=619)
         104	LOAD_CONST(arg=7, lineno=619)
         106	INPLACE_SUBTRACT(arg=None, lineno=619)
         108	STORE_FAST(arg=3, lineno=619)
         110	LOAD_FAST(arg=8, lineno=620)
         112	LOAD_FAST(arg=10, lineno=620)
         114	INPLACE_XOR(arg=None, lineno=620)
         116	STORE_FAST(arg=8, lineno=620)
         118	LOAD_GLOBAL(arg=3, lineno=621)
         120	LOAD_FAST(arg=5, lineno=621)
         122	LOAD_FAST(arg=6, lineno=621)
         124	LOAD_FAST(arg=7, lineno=621)
         126	LOAD_FAST(arg=8, lineno=621)
         128	CALL_FUNCTION(arg=4, lineno=621)
         130	UNPACK_SEQUENCE(arg=4, lineno=621)
         132	STORE_FAST(arg=5, lineno=621)
         134	STORE_FAST(arg=6, lineno=621)
         136	STORE_FAST(arg=7, lineno=621)
         138	STORE_FAST(arg=8, lineno=621)
         140	LOAD_FAST(arg=5, lineno=622)
         142	LOAD_FAST(arg=10, lineno=622)
         144	INPLACE_XOR(arg=None, lineno=622)
         146	STORE_FAST(arg=5, lineno=622)
         148	JUMP_ABSOLUTE(arg=76, lineno=622)
>        150	LOAD_GLOBAL(arg=0, lineno=626)
         152	LOAD_METHOD(arg=1, lineno=626)
         154	LOAD_CONST(arg=6, lineno=626)
         156	CALL_METHOD(arg=1, lineno=626)
         158	STORE_FAST(arg=11, lineno=626)
         160	LOAD_FAST(arg=9, lineno=627)
         162	LOAD_CONST(arg=7, lineno=627)
         164	BINARY_MULTIPLY(arg=None, lineno=627)
         166	STORE_FAST(arg=12, lineno=627)
         168	LOAD_GLOBAL(arg=0, lineno=628)
         170	LOAD_METHOD(arg=1, lineno=628)
         172	LOAD_CONST(arg=9, lineno=628)
         174	CALL_METHOD(arg=1, lineno=628)
         176	STORE_FAST(arg=13, lineno=628)
         178	LOAD_FAST(arg=3, lineno=629)
         180	LOAD_CONST(arg=10, lineno=629)
         182	COMPARE_OP(arg=5, lineno=629)
         184	POP_JUMP_IF_FALSE(arg=238, lineno=629)
         186	LOAD_CONST(arg=11, lineno=630)
         188	STORE_FAST(arg=14, lineno=630)
         190	LOAD_GLOBAL(arg=0, lineno=631)
         192	LOAD_METHOD(arg=1, lineno=631)
         194	LOAD_FAST(arg=13, lineno=631)
         196	LOAD_FAST(arg=14, lineno=631)
         198	BINARY_LSHIFT(arg=None, lineno=631)
         200	CALL_METHOD(arg=1, lineno=631)
         202	UNARY_INVERT(arg=None, lineno=631)
         204	STORE_FAST(arg=15, lineno=631)
         206	LOAD_FAST(arg=11, lineno=632)
         208	LOAD_FAST(arg=15, lineno=632)
         210	BINARY_AND(arg=None, lineno=632)
         212	LOAD_GLOBAL(arg=0, lineno=632)
         214	LOAD_METHOD(arg=1, lineno=632)
         216	LOAD_GLOBAL(arg=4, lineno=632)
         218	LOAD_FAST(arg=2, lineno=632)
         220	LOAD_FAST(arg=12, lineno=632)
         222	LOAD_CONST(arg=12, lineno=632)
         224	BINARY_ADD(arg=None, lineno=632)
         226	CALL_FUNCTION(arg=2, lineno=632)
         228	CALL_METHOD(arg=1, lineno=632)
         230	LOAD_FAST(arg=14, lineno=633)
         232	BINARY_LSHIFT(arg=None, lineno=632)
         234	BINARY_OR(arg=None, lineno=632)
         236	STORE_FAST(arg=11, lineno=632)
>        238	LOAD_FAST(arg=3, lineno=634)
         240	LOAD_CONST(arg=12, lineno=634)
         242	COMPARE_OP(arg=5, lineno=634)
         244	POP_JUMP_IF_FALSE(arg=300, lineno=634)
         248	LOAD_CONST(arg=13, lineno=635)
         250	STORE_FAST(arg=14, lineno=635)
         252	LOAD_GLOBAL(arg=0, lineno=636)
         254	LOAD_METHOD(arg=1, lineno=636)
         256	LOAD_FAST(arg=13, lineno=636)
         258	LOAD_FAST(arg=14, lineno=636)
         260	BINARY_LSHIFT(arg=None, lineno=636)
         262	CALL_METHOD(arg=1, lineno=636)
         264	UNARY_INVERT(arg=None, lineno=636)
         266	STORE_FAST(arg=15, lineno=636)
         268	LOAD_FAST(arg=11, lineno=637)
         270	LOAD_FAST(arg=15, lineno=637)
         272	BINARY_AND(arg=None, lineno=637)
         274	LOAD_GLOBAL(arg=0, lineno=637)
         276	LOAD_METHOD(arg=1, lineno=637)
         278	LOAD_GLOBAL(arg=4, lineno=637)
         280	LOAD_FAST(arg=2, lineno=637)
         282	LOAD_FAST(arg=12, lineno=637)
         284	LOAD_CONST(arg=14, lineno=637)
         286	BINARY_ADD(arg=None, lineno=637)
         288	CALL_FUNCTION(arg=2, lineno=637)
         290	CALL_METHOD(arg=1, lineno=637)
         292	LOAD_FAST(arg=14, lineno=638)
         294	BINARY_LSHIFT(arg=None, lineno=637)
         296	BINARY_OR(arg=None, lineno=637)
         298	STORE_FAST(arg=11, lineno=637)
>        300	LOAD_FAST(arg=3, lineno=639)
         302	LOAD_CONST(arg=14, lineno=639)
         304	COMPARE_OP(arg=5, lineno=639)
         306	POP_JUMP_IF_FALSE(arg=362, lineno=639)
         310	LOAD_CONST(arg=15, lineno=640)
         312	STORE_FAST(arg=14, lineno=640)
         314	LOAD_GLOBAL(arg=0, lineno=641)
         316	LOAD_METHOD(arg=1, lineno=641)
         318	LOAD_FAST(arg=13, lineno=641)
         320	LOAD_FAST(arg=14, lineno=641)
         322	BINARY_LSHIFT(arg=None, lineno=641)
         324	CALL_METHOD(arg=1, lineno=641)
         326	UNARY_INVERT(arg=None, lineno=641)
         328	STORE_FAST(arg=15, lineno=641)
         330	LOAD_FAST(arg=11, lineno=642)
         332	LOAD_FAST(arg=15, lineno=642)
         334	BINARY_AND(arg=None, lineno=642)
         336	LOAD_GLOBAL(arg=0, lineno=642)
         338	LOAD_METHOD(arg=1, lineno=642)
         340	LOAD_GLOBAL(arg=4, lineno=642)
         342	LOAD_FAST(arg=2, lineno=642)
         344	LOAD_FAST(arg=12, lineno=642)
         346	LOAD_CONST(arg=16, lineno=642)
         348	BINARY_ADD(arg=None, lineno=642)
         350	CALL_FUNCTION(arg=2, lineno=642)
         352	CALL_METHOD(arg=1, lineno=642)
         354	LOAD_FAST(arg=14, lineno=643)
         356	BINARY_LSHIFT(arg=None, lineno=642)
         358	BINARY_OR(arg=None, lineno=642)
         360	STORE_FAST(arg=11, lineno=642)
>        362	LOAD_FAST(arg=3, lineno=644)
         364	LOAD_CONST(arg=16, lineno=644)
         366	COMPARE_OP(arg=5, lineno=644)
         368	POP_JUMP_IF_FALSE(arg=458, lineno=644)
         372	LOAD_FAST(arg=11, lineno=645)
         374	LOAD_GLOBAL(arg=0, lineno=645)
         376	LOAD_METHOD(arg=1, lineno=645)
         378	LOAD_CONST(arg=17, lineno=645)
         380	CALL_METHOD(arg=1, lineno=645)
         382	INPLACE_AND(arg=None, lineno=645)
         384	STORE_FAST(arg=11, lineno=645)
         386	LOAD_GLOBAL(arg=5, lineno=646)
         388	LOAD_CONST(arg=16, lineno=646)
         390	CALL_FUNCTION(arg=1, lineno=646)
         392	GET_ITER(arg=None, lineno=646)
>        394	FOR_ITER(arg=62, lineno=646)
         396	STORE_FAST(arg=16, lineno=646)
         398	LOAD_FAST(arg=16, lineno=647)
         400	LOAD_CONST(arg=7, lineno=647)
         402	BINARY_MULTIPLY(arg=None, lineno=647)
         404	STORE_FAST(arg=14, lineno=647)
         406	LOAD_GLOBAL(arg=0, lineno=648)
         408	LOAD_METHOD(arg=1, lineno=648)
         410	LOAD_FAST(arg=13, lineno=648)
         412	LOAD_FAST(arg=14, lineno=648)
         414	BINARY_LSHIFT(arg=None, lineno=648)
         416	CALL_METHOD(arg=1, lineno=648)
         418	UNARY_INVERT(arg=None, lineno=648)
         420	STORE_FAST(arg=15, lineno=648)
         422	LOAD_FAST(arg=11, lineno=649)
         424	LOAD_FAST(arg=15, lineno=649)
         426	BINARY_AND(arg=None, lineno=649)
         428	LOAD_GLOBAL(arg=0, lineno=649)
         430	LOAD_METHOD(arg=1, lineno=649)
         432	LOAD_GLOBAL(arg=4, lineno=649)
         434	LOAD_FAST(arg=2, lineno=649)
         436	LOAD_FAST(arg=12, lineno=649)
         438	LOAD_FAST(arg=16, lineno=649)
         440	BINARY_ADD(arg=None, lineno=649)
         442	CALL_FUNCTION(arg=2, lineno=649)
         444	CALL_METHOD(arg=1, lineno=649)
         446	LOAD_FAST(arg=14, lineno=650)
         448	BINARY_LSHIFT(arg=None, lineno=649)
         450	BINARY_OR(arg=None, lineno=649)
         452	STORE_FAST(arg=11, lineno=649)
         454	JUMP_ABSOLUTE(arg=394, lineno=649)
>        458	LOAD_FAST(arg=3, lineno=651)
         460	LOAD_CONST(arg=18, lineno=651)
         462	COMPARE_OP(arg=5, lineno=651)
         464	POP_JUMP_IF_FALSE(arg=520, lineno=651)
         468	LOAD_CONST(arg=19, lineno=652)
         470	STORE_FAST(arg=14, lineno=652)
         472	LOAD_GLOBAL(arg=0, lineno=653)
         474	LOAD_METHOD(arg=1, lineno=653)
         476	LOAD_FAST(arg=13, lineno=653)
         478	LOAD_FAST(arg=14, lineno=653)
         480	BINARY_LSHIFT(arg=None, lineno=653)
         482	CALL_METHOD(arg=1, lineno=653)
         484	UNARY_INVERT(arg=None, lineno=653)
         486	STORE_FAST(arg=15, lineno=653)
         488	LOAD_FAST(arg=11, lineno=654)
         490	LOAD_FAST(arg=15, lineno=654)
         492	BINARY_AND(arg=None, lineno=654)
         494	LOAD_GLOBAL(arg=0, lineno=654)
         496	LOAD_METHOD(arg=1, lineno=654)
         498	LOAD_GLOBAL(arg=4, lineno=654)
         500	LOAD_FAST(arg=2, lineno=654)
         502	LOAD_FAST(arg=12, lineno=654)
         504	LOAD_CONST(arg=20, lineno=654)
         506	BINARY_ADD(arg=None, lineno=654)
         508	CALL_FUNCTION(arg=2, lineno=654)
         510	CALL_METHOD(arg=1, lineno=654)
         512	LOAD_FAST(arg=14, lineno=655)
         514	BINARY_LSHIFT(arg=None, lineno=654)
         516	BINARY_OR(arg=None, lineno=654)
         518	STORE_FAST(arg=11, lineno=654)
>        520	LOAD_FAST(arg=3, lineno=656)
         522	LOAD_CONST(arg=20, lineno=656)
         524	COMPARE_OP(arg=5, lineno=656)
         526	POP_JUMP_IF_FALSE(arg=582, lineno=656)
         530	LOAD_CONST(arg=7, lineno=657)
         532	STORE_FAST(arg=14, lineno=657)
         534	LOAD_GLOBAL(arg=0, lineno=658)
         536	LOAD_METHOD(arg=1, lineno=658)
         538	LOAD_FAST(arg=13, lineno=658)
         540	LOAD_FAST(arg=14, lineno=658)
         542	BINARY_LSHIFT(arg=None, lineno=658)
         544	CALL_METHOD(arg=1, lineno=658)
         546	UNARY_INVERT(arg=None, lineno=658)
         548	STORE_FAST(arg=15, lineno=658)
         550	LOAD_FAST(arg=11, lineno=659)
         552	LOAD_FAST(arg=15, lineno=659)
         554	BINARY_AND(arg=None, lineno=659)
         556	LOAD_GLOBAL(arg=0, lineno=659)
         558	LOAD_METHOD(arg=1, lineno=659)
         560	LOAD_GLOBAL(arg=4, lineno=659)
         562	LOAD_FAST(arg=2, lineno=659)
         564	LOAD_FAST(arg=12, lineno=659)
         566	LOAD_CONST(arg=8, lineno=659)
         568	BINARY_ADD(arg=None, lineno=659)
         570	CALL_FUNCTION(arg=2, lineno=659)
         572	CALL_METHOD(arg=1, lineno=659)
         574	LOAD_FAST(arg=14, lineno=660)
         576	BINARY_LSHIFT(arg=None, lineno=659)
         578	BINARY_OR(arg=None, lineno=659)
         580	STORE_FAST(arg=11, lineno=659)
>        582	LOAD_FAST(arg=3, lineno=661)
         584	LOAD_CONST(arg=8, lineno=661)
         586	COMPARE_OP(arg=5, lineno=661)
         588	POP_JUMP_IF_FALSE(arg=626, lineno=661)
         592	LOAD_FAST(arg=13, lineno=662)
         594	UNARY_INVERT(arg=None, lineno=662)
         596	STORE_FAST(arg=15, lineno=662)
         598	LOAD_FAST(arg=11, lineno=663)
         600	LOAD_FAST(arg=15, lineno=663)
         602	BINARY_AND(arg=None, lineno=663)
         604	LOAD_GLOBAL(arg=0, lineno=663)
         606	LOAD_METHOD(arg=1, lineno=663)
         608	LOAD_GLOBAL(arg=4, lineno=663)
         610	LOAD_FAST(arg=2, lineno=663)
         612	LOAD_FAST(arg=12, lineno=663)
         614	LOAD_CONST(arg=6, lineno=663)
         616	BINARY_ADD(arg=None, lineno=663)
         618	CALL_FUNCTION(arg=2, lineno=663)
         620	CALL_METHOD(arg=1, lineno=663)
         622	BINARY_OR(arg=None, lineno=663)
         624	STORE_FAST(arg=11, lineno=663)
>        626	LOAD_FAST(arg=4, lineno=665)
         628	LOAD_FAST(arg=11, lineno=665)
         630	INPLACE_OR(arg=None, lineno=665)
         632	STORE_FAST(arg=4, lineno=665)
         634	LOAD_FAST(arg=8, lineno=666)
         636	LOAD_FAST(arg=4, lineno=666)
         638	INPLACE_XOR(arg=None, lineno=666)
         640	STORE_FAST(arg=8, lineno=666)
         642	LOAD_GLOBAL(arg=3, lineno=667)
         644	LOAD_FAST(arg=5, lineno=667)
         646	LOAD_FAST(arg=6, lineno=667)
         648	LOAD_FAST(arg=7, lineno=667)
         650	LOAD_FAST(arg=8, lineno=667)
         652	CALL_FUNCTION(arg=4, lineno=667)
         654	UNPACK_SEQUENCE(arg=4, lineno=667)
         656	STORE_FAST(arg=5, lineno=667)
         658	STORE_FAST(arg=6, lineno=667)
         660	STORE_FAST(arg=7, lineno=667)
         662	STORE_FAST(arg=8, lineno=667)
         664	LOAD_FAST(arg=5, lineno=668)
         666	LOAD_FAST(arg=4, lineno=668)
         668	INPLACE_XOR(arg=None, lineno=668)
         670	STORE_FAST(arg=5, lineno=668)
         672	LOAD_FAST(arg=7, lineno=669)
         674	LOAD_FAST(arg=13, lineno=669)
         676	INPLACE_XOR(arg=None, lineno=669)
         678	STORE_FAST(arg=7, lineno=669)
         680	LOAD_GLOBAL(arg=3, lineno=670)
         682	LOAD_FAST(arg=5, lineno=670)
         684	LOAD_FAST(arg=6, lineno=670)
         686	LOAD_FAST(arg=7, lineno=670)
         688	LOAD_FAST(arg=8, lineno=670)
         690	CALL_FUNCTION(arg=4, lineno=670)
         692	UNPACK_SEQUENCE(arg=4, lineno=670)
         694	STORE_FAST(arg=5, lineno=670)
         696	STORE_FAST(arg=6, lineno=670)
         698	STORE_FAST(arg=7, lineno=670)
         700	STORE_FAST(arg=8, lineno=670)
         702	LOAD_GLOBAL(arg=3, lineno=671)
         704	LOAD_FAST(arg=5, lineno=671)
         706	LOAD_FAST(arg=6, lineno=671)
         708	LOAD_FAST(arg=7, lineno=671)
         710	LOAD_FAST(arg=8, lineno=671)
         712	CALL_FUNCTION(arg=4, lineno=671)
         714	UNPACK_SEQUENCE(arg=4, lineno=671)
         716	STORE_FAST(arg=5, lineno=671)
         718	STORE_FAST(arg=6, lineno=671)
         720	STORE_FAST(arg=7, lineno=671)
         722	STORE_FAST(arg=8, lineno=671)
         724	LOAD_FAST(arg=5, lineno=672)
         726	LOAD_FAST(arg=6, lineno=672)
         728	BINARY_XOR(arg=None, lineno=672)
         730	LOAD_FAST(arg=7, lineno=672)
         732	LOAD_FAST(arg=8, lineno=672)
         734	BINARY_XOR(arg=None, lineno=672)
         736	BINARY_XOR(arg=None, lineno=672)
         738	STORE_FAST(arg=11, lineno=672)
         740	LOAD_FAST(arg=11, lineno=673)
         742	RETURN_VALUE(arg=None, lineno=673)
DEBUG    2023-08-19 15:20:59,454: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,454: stack: []
DEBUG    2023-08-19 15:20:59,454: dispatch pc=0, inst=NOP(arg=None, lineno=609)
DEBUG    2023-08-19 15:20:59,454: stack []
DEBUG    2023-08-19 15:20:59,454: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=609)
DEBUG    2023-08-19 15:20:59,454: stack []
DEBUG    2023-08-19 15:20:59,454: dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=609)
DEBUG    2023-08-19 15:20:59,454: stack ['$2load_global.0']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=609)
DEBUG    2023-08-19 15:20:59,454: stack ['$4load_method.1']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=609)
DEBUG    2023-08-19 15:20:59,454: stack ['$4load_method.1', '$src_sz6.2']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=609)
DEBUG    2023-08-19 15:20:59,454: stack ['$8call_method.3']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=12, inst=BINARY_LSHIFT(arg=None, lineno=609)
DEBUG    2023-08-19 15:20:59,454: stack ['$8call_method.3', '$const10.4']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=14, inst=STORE_FAST(arg=4, lineno=609)
DEBUG    2023-08-19 15:20:59,454: stack ['$12binary_lshift.5']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=610)
DEBUG    2023-08-19 15:20:59,454: stack []
DEBUG    2023-08-19 15:20:59,454: dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=610)
DEBUG    2023-08-19 15:20:59,454: stack ['$k016.6']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=20, inst=LOAD_METHOD(arg=1, lineno=610)
DEBUG    2023-08-19 15:20:59,454: stack ['$k016.6', '$18load_global.7']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=610)
DEBUG    2023-08-19 15:20:59,454: stack ['$k016.6', '$20load_method.8']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=610)
DEBUG    2023-08-19 15:20:59,454: stack ['$k016.6', '$20load_method.8', '$const22.9']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=26, inst=BINARY_XOR(arg=None, lineno=610)
DEBUG    2023-08-19 15:20:59,454: stack ['$k016.6', '$24call_method.10']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=28, inst=STORE_FAST(arg=5, lineno=610)
DEBUG    2023-08-19 15:20:59,454: stack ['$26binary_xor.11']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=611)
DEBUG    2023-08-19 15:20:59,454: stack []
DEBUG    2023-08-19 15:20:59,454: dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=611)
DEBUG    2023-08-19 15:20:59,454: stack ['$k130.12']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=34, inst=LOAD_METHOD(arg=1, lineno=611)
DEBUG    2023-08-19 15:20:59,454: stack ['$k130.12', '$32load_global.13']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=611)
DEBUG    2023-08-19 15:20:59,454: stack ['$k130.12', '$34load_method.14']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=611)
DEBUG    2023-08-19 15:20:59,454: stack ['$k130.12', '$34load_method.14', '$const36.15']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=40, inst=BINARY_XOR(arg=None, lineno=611)
DEBUG    2023-08-19 15:20:59,454: stack ['$k130.12', '$38call_method.16']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=42, inst=STORE_FAST(arg=6, lineno=611)
DEBUG    2023-08-19 15:20:59,454: stack ['$40binary_xor.17']
DEBUG    2023-08-19 15:20:59,454: dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=612)
DEBUG    2023-08-19 15:20:59,454: stack []
DEBUG    2023-08-19 15:20:59,454: dispatch pc=46, inst=LOAD_GLOBAL(arg=0, lineno=612)
DEBUG    2023-08-19 15:20:59,462: stack ['$k044.18']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=48, inst=LOAD_METHOD(arg=1, lineno=612)
DEBUG    2023-08-19 15:20:59,462: stack ['$k044.18', '$46load_global.19']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=50, inst=LOAD_CONST(arg=4, lineno=612)
DEBUG    2023-08-19 15:20:59,462: stack ['$k044.18', '$48load_method.20']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=52, inst=CALL_METHOD(arg=1, lineno=612)
DEBUG    2023-08-19 15:20:59,462: stack ['$k044.18', '$48load_method.20', '$const50.21']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=54, inst=BINARY_XOR(arg=None, lineno=612)
DEBUG    2023-08-19 15:20:59,462: stack ['$k044.18', '$52call_method.22']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=56, inst=STORE_FAST(arg=7, lineno=612)
DEBUG    2023-08-19 15:20:59,462: stack ['$54binary_xor.23']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=613)
DEBUG    2023-08-19 15:20:59,462: stack []
DEBUG    2023-08-19 15:20:59,462: dispatch pc=60, inst=LOAD_GLOBAL(arg=0, lineno=613)
DEBUG    2023-08-19 15:20:59,462: stack ['$k158.24']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=62, inst=LOAD_METHOD(arg=1, lineno=613)
DEBUG    2023-08-19 15:20:59,462: stack ['$k158.24', '$60load_global.25']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=64, inst=LOAD_CONST(arg=5, lineno=613)
DEBUG    2023-08-19 15:20:59,462: stack ['$k158.24', '$62load_method.26']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=66, inst=CALL_METHOD(arg=1, lineno=613)
DEBUG    2023-08-19 15:20:59,462: stack ['$k158.24', '$62load_method.26', '$const64.27']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=68, inst=BINARY_XOR(arg=None, lineno=613)
DEBUG    2023-08-19 15:20:59,462: stack ['$k158.24', '$66call_method.28']
DEBUG    2023-08-19 15:20:59,462: dispatch pc=70, inst=STORE_FAST(arg=8, lineno=613)
DEBUG    2023-08-19 15:20:59,462: stack ['$68binary_xor.29']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=72, inst=LOAD_CONST(arg=6, lineno=615)
DEBUG    2023-08-19 15:20:59,464: stack []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=74, inst=STORE_FAST(arg=9, lineno=615)
DEBUG    2023-08-19 15:20:59,464: stack ['$const72.30']
DEBUG    2023-08-19 15:20:59,464: end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,464: pending: deque([State(pc_initial=76 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,464: stack: []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=76, inst=LOAD_FAST(arg=3, lineno=616)
DEBUG    2023-08-19 15:20:59,464: stack []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=78, inst=LOAD_CONST(arg=7, lineno=616)
DEBUG    2023-08-19 15:20:59,464: stack ['$src_sz76.0']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=80, inst=COMPARE_OP(arg=5, lineno=616)
DEBUG    2023-08-19 15:20:59,464: stack ['$src_sz76.0', '$const78.1']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=150, lineno=616)
DEBUG    2023-08-19 15:20:59,464: stack ['$80compare_op.2']
DEBUG    2023-08-19 15:20:59,464: end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,464: pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,464: stack: []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=84, inst=LOAD_GLOBAL(arg=2, lineno=617)
DEBUG    2023-08-19 15:20:59,464: stack []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=617)
DEBUG    2023-08-19 15:20:59,464: stack ['$84load_global.0']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=88, inst=LOAD_FAST(arg=9, lineno=617)
DEBUG    2023-08-19 15:20:59,464: stack ['$84load_global.0', '$src86.1']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=90, inst=CALL_FUNCTION(arg=2, lineno=617)
DEBUG    2023-08-19 15:20:59,464: stack ['$84load_global.0', '$src86.1', '$idx88.2']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=92, inst=STORE_FAST(arg=10, lineno=617)
DEBUG    2023-08-19 15:20:59,464: stack ['$90call_function.3']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=94, inst=LOAD_FAST(arg=9, lineno=618)
DEBUG    2023-08-19 15:20:59,464: stack []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=96, inst=LOAD_CONST(arg=8, lineno=618)
DEBUG    2023-08-19 15:20:59,464: stack ['$idx94.4']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=98, inst=INPLACE_ADD(arg=None, lineno=618)
DEBUG    2023-08-19 15:20:59,464: stack ['$idx94.4', '$const96.5']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=100, inst=STORE_FAST(arg=9, lineno=618)
DEBUG    2023-08-19 15:20:59,464: stack ['$98inplace_add.6']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=102, inst=LOAD_FAST(arg=3, lineno=619)
DEBUG    2023-08-19 15:20:59,464: stack []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=104, inst=LOAD_CONST(arg=7, lineno=619)
DEBUG    2023-08-19 15:20:59,464: stack ['$src_sz102.7']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=106, inst=INPLACE_SUBTRACT(arg=None, lineno=619)
DEBUG    2023-08-19 15:20:59,464: stack ['$src_sz102.7', '$const104.8']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=108, inst=STORE_FAST(arg=3, lineno=619)
DEBUG    2023-08-19 15:20:59,464: stack ['$106inplace_subtract.9']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=110, inst=LOAD_FAST(arg=8, lineno=620)
DEBUG    2023-08-19 15:20:59,464: stack []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=112, inst=LOAD_FAST(arg=10, lineno=620)
DEBUG    2023-08-19 15:20:59,464: stack ['$v3110.10']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=114, inst=INPLACE_XOR(arg=None, lineno=620)
DEBUG    2023-08-19 15:20:59,464: stack ['$v3110.10', '$mi112.11']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=116, inst=STORE_FAST(arg=8, lineno=620)
DEBUG    2023-08-19 15:20:59,464: stack ['$114inplace_xor.12']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=118, inst=LOAD_GLOBAL(arg=3, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack []
DEBUG    2023-08-19 15:20:59,464: dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack ['$118load_global.13']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=122, inst=LOAD_FAST(arg=6, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack ['$118load_global.13', '$v0120.14']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=124, inst=LOAD_FAST(arg=7, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack ['$118load_global.13', '$v0120.14', '$v1122.15']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=126, inst=LOAD_FAST(arg=8, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack ['$118load_global.13', '$v0120.14', '$v1122.15', '$v2124.16']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=128, inst=CALL_FUNCTION(arg=4, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack ['$118load_global.13', '$v0120.14', '$v1122.15', '$v2124.16', '$v3126.17']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=130, inst=UNPACK_SEQUENCE(arg=4, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack ['$128call_function.18']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=132, inst=STORE_FAST(arg=5, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack ['$130unpack_sequence.22', '$130unpack_sequence.21', '$130unpack_sequence.20', '$130unpack_sequence.19']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=134, inst=STORE_FAST(arg=6, lineno=621)
DEBUG    2023-08-19 15:20:59,464: stack ['$130unpack_sequence.22', '$130unpack_sequence.21', '$130unpack_sequence.20']
DEBUG    2023-08-19 15:20:59,464: dispatch pc=136, inst=STORE_FAST(arg=7, lineno=621)
DEBUG    2023-08-19 15:20:59,471: stack ['$130unpack_sequence.22', '$130unpack_sequence.21']
DEBUG    2023-08-19 15:20:59,471: dispatch pc=138, inst=STORE_FAST(arg=8, lineno=621)
DEBUG    2023-08-19 15:20:59,471: stack ['$130unpack_sequence.22']
DEBUG    2023-08-19 15:20:59,471: dispatch pc=140, inst=LOAD_FAST(arg=5, lineno=622)
DEBUG    2023-08-19 15:20:59,471: stack []
DEBUG    2023-08-19 15:20:59,471: dispatch pc=142, inst=LOAD_FAST(arg=10, lineno=622)
DEBUG    2023-08-19 15:20:59,471: stack ['$v0140.24']
DEBUG    2023-08-19 15:20:59,471: dispatch pc=144, inst=INPLACE_XOR(arg=None, lineno=622)
DEBUG    2023-08-19 15:20:59,471: stack ['$v0140.24', '$mi142.25']
DEBUG    2023-08-19 15:20:59,471: dispatch pc=146, inst=STORE_FAST(arg=5, lineno=622)
DEBUG    2023-08-19 15:20:59,471: stack ['$144inplace_xor.26']
DEBUG    2023-08-19 15:20:59,471: dispatch pc=148, inst=JUMP_ABSOLUTE(arg=76, lineno=622)
DEBUG    2023-08-19 15:20:59,472: stack []
DEBUG    2023-08-19 15:20:59,472: end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,472: pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,472: stack: []
DEBUG    2023-08-19 15:20:59,472: dispatch pc=150, inst=LOAD_GLOBAL(arg=0, lineno=626)
DEBUG    2023-08-19 15:20:59,472: stack []
DEBUG    2023-08-19 15:20:59,472: dispatch pc=152, inst=LOAD_METHOD(arg=1, lineno=626)
DEBUG    2023-08-19 15:20:59,472: stack ['$150load_global.0']
DEBUG    2023-08-19 15:20:59,472: dispatch pc=154, inst=LOAD_CONST(arg=6, lineno=626)
DEBUG    2023-08-19 15:20:59,472: stack ['$152load_method.1']
DEBUG    2023-08-19 15:20:59,472: dispatch pc=156, inst=CALL_METHOD(arg=1, lineno=626)
DEBUG    2023-08-19 15:20:59,472: stack ['$152load_method.1', '$const154.2']
DEBUG    2023-08-19 15:20:59,472: dispatch pc=158, inst=STORE_FAST(arg=11, lineno=626)
DEBUG    2023-08-19 15:20:59,473: stack ['$156call_method.3']
DEBUG    2023-08-19 15:20:59,473: dispatch pc=160, inst=LOAD_FAST(arg=9, lineno=627)
DEBUG    2023-08-19 15:20:59,473: stack []
DEBUG    2023-08-19 15:20:59,473: dispatch pc=162, inst=LOAD_CONST(arg=7, lineno=627)
DEBUG    2023-08-19 15:20:59,473: stack ['$idx160.4']
DEBUG    2023-08-19 15:20:59,473: dispatch pc=164, inst=BINARY_MULTIPLY(arg=None, lineno=627)
DEBUG    2023-08-19 15:20:59,473: stack ['$idx160.4', '$const162.5']
DEBUG    2023-08-19 15:20:59,473: dispatch pc=166, inst=STORE_FAST(arg=12, lineno=627)
DEBUG    2023-08-19 15:20:59,473: stack ['$164binary_multiply.6']
DEBUG    2023-08-19 15:20:59,473: dispatch pc=168, inst=LOAD_GLOBAL(arg=0, lineno=628)
DEBUG    2023-08-19 15:20:59,473: stack []
DEBUG    2023-08-19 15:20:59,473: dispatch pc=170, inst=LOAD_METHOD(arg=1, lineno=628)
DEBUG    2023-08-19 15:20:59,473: stack ['$168load_global.7']
DEBUG    2023-08-19 15:20:59,473: dispatch pc=172, inst=LOAD_CONST(arg=9, lineno=628)
DEBUG    2023-08-19 15:20:59,473: stack ['$170load_method.8']
DEBUG    2023-08-19 15:20:59,474: dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=628)
DEBUG    2023-08-19 15:20:59,474: stack ['$170load_method.8', '$const172.9']
DEBUG    2023-08-19 15:20:59,474: dispatch pc=176, inst=STORE_FAST(arg=13, lineno=628)
DEBUG    2023-08-19 15:20:59,474: stack ['$174call_method.10']
DEBUG    2023-08-19 15:20:59,474: dispatch pc=178, inst=LOAD_FAST(arg=3, lineno=629)
DEBUG    2023-08-19 15:20:59,474: stack []
DEBUG    2023-08-19 15:20:59,474: dispatch pc=180, inst=LOAD_CONST(arg=10, lineno=629)
DEBUG    2023-08-19 15:20:59,474: stack ['$src_sz178.11']
DEBUG    2023-08-19 15:20:59,474: dispatch pc=182, inst=COMPARE_OP(arg=5, lineno=629)
DEBUG    2023-08-19 15:20:59,474: stack ['$src_sz178.11', '$const180.12']
DEBUG    2023-08-19 15:20:59,474: dispatch pc=184, inst=POP_JUMP_IF_FALSE(arg=238, lineno=629)
DEBUG    2023-08-19 15:20:59,474: stack ['$182compare_op.13']
DEBUG    2023-08-19 15:20:59,474: end state. edges=[Edge(pc=186, stack=(), blockstack=(), npush=0), Edge(pc=238, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,474: pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=186 nstack_initial=0), State(pc_initial=238 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,475: pending: deque([State(pc_initial=186 nstack_initial=0), State(pc_initial=238 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,475: stack: []
DEBUG    2023-08-19 15:20:59,475: dispatch pc=186, inst=LOAD_CONST(arg=11, lineno=630)
DEBUG    2023-08-19 15:20:59,475: stack []
DEBUG    2023-08-19 15:20:59,475: dispatch pc=188, inst=STORE_FAST(arg=14, lineno=630)
DEBUG    2023-08-19 15:20:59,475: stack ['$const186.0']
DEBUG    2023-08-19 15:20:59,475: dispatch pc=190, inst=LOAD_GLOBAL(arg=0, lineno=631)
DEBUG    2023-08-19 15:20:59,475: stack []
DEBUG    2023-08-19 15:20:59,475: dispatch pc=192, inst=LOAD_METHOD(arg=1, lineno=631)
DEBUG    2023-08-19 15:20:59,475: stack ['$190load_global.1']
DEBUG    2023-08-19 15:20:59,475: dispatch pc=194, inst=LOAD_FAST(arg=13, lineno=631)
DEBUG    2023-08-19 15:20:59,475: stack ['$192load_method.2']
DEBUG    2023-08-19 15:20:59,475: dispatch pc=196, inst=LOAD_FAST(arg=14, lineno=631)
DEBUG    2023-08-19 15:20:59,475: stack ['$192load_method.2', '$ohexefef194.3']
DEBUG    2023-08-19 15:20:59,476: dispatch pc=198, inst=BINARY_LSHIFT(arg=None, lineno=631)
DEBUG    2023-08-19 15:20:59,476: stack ['$192load_method.2', '$ohexefef194.3', '$jmp196.4']
DEBUG    2023-08-19 15:20:59,476: dispatch pc=200, inst=CALL_METHOD(arg=1, lineno=631)
DEBUG    2023-08-19 15:20:59,476: stack ['$192load_method.2', '$198binary_lshift.5']
DEBUG    2023-08-19 15:20:59,476: dispatch pc=202, inst=UNARY_INVERT(arg=None, lineno=631)
DEBUG    2023-08-19 15:20:59,476: stack ['$200call_method.6']
DEBUG    2023-08-19 15:20:59,476: dispatch pc=204, inst=STORE_FAST(arg=15, lineno=631)
DEBUG    2023-08-19 15:20:59,476: stack ['$202unary_invert.7']
DEBUG    2023-08-19 15:20:59,476: dispatch pc=206, inst=LOAD_FAST(arg=11, lineno=632)
DEBUG    2023-08-19 15:20:59,476: stack []
DEBUG    2023-08-19 15:20:59,476: dispatch pc=208, inst=LOAD_FAST(arg=15, lineno=632)
DEBUG    2023-08-19 15:20:59,476: stack ['$t206.8']
DEBUG    2023-08-19 15:20:59,476: dispatch pc=210, inst=BINARY_AND(arg=None, lineno=632)
DEBUG    2023-08-19 15:20:59,476: stack ['$t206.8', '$mask208.9']
DEBUG    2023-08-19 15:20:59,476: dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=632)
DEBUG    2023-08-19 15:20:59,477: stack ['$210binary_and.10']
DEBUG    2023-08-19 15:20:59,477: dispatch pc=214, inst=LOAD_METHOD(arg=1, lineno=632)
DEBUG    2023-08-19 15:20:59,477: stack ['$210binary_and.10', '$212load_global.11']
DEBUG    2023-08-19 15:20:59,477: dispatch pc=216, inst=LOAD_GLOBAL(arg=4, lineno=632)
DEBUG    2023-08-19 15:20:59,477: stack ['$210binary_and.10', '$214load_method.12']
DEBUG    2023-08-19 15:20:59,477: dispatch pc=218, inst=LOAD_FAST(arg=2, lineno=632)
DEBUG    2023-08-19 15:20:59,477: stack ['$210binary_and.10', '$214load_method.12', '$216load_global.13']
DEBUG    2023-08-19 15:20:59,477: dispatch pc=220, inst=LOAD_FAST(arg=12, lineno=632)
DEBUG    2023-08-19 15:20:59,477: stack ['$210binary_and.10', '$214load_method.12', '$216load_global.13', '$src218.14']
DEBUG    2023-08-19 15:20:59,477: dispatch pc=222, inst=LOAD_CONST(arg=12, lineno=632)
DEBUG    2023-08-19 15:20:59,477: stack ['$210binary_and.10', '$214load_method.12', '$216load_global.13', '$src218.14', '$boffset220.15']
DEBUG    2023-08-19 15:20:59,477: dispatch pc=224, inst=BINARY_ADD(arg=None, lineno=632)
DEBUG    2023-08-19 15:20:59,477: stack ['$210binary_and.10', '$214load_method.12', '$216load_global.13', '$src218.14', '$boffset220.15', '$const222.16']
DEBUG    2023-08-19 15:20:59,477: dispatch pc=226, inst=CALL_FUNCTION(arg=2, lineno=632)
DEBUG    2023-08-19 15:20:59,477: stack ['$210binary_and.10', '$214load_method.12', '$216load_global.13', '$src218.14', '$224binary_add.17']
DEBUG    2023-08-19 15:20:59,478: dispatch pc=228, inst=CALL_METHOD(arg=1, lineno=632)
DEBUG    2023-08-19 15:20:59,478: stack ['$210binary_and.10', '$214load_method.12', '$226call_function.18']
DEBUG    2023-08-19 15:20:59,478: dispatch pc=230, inst=LOAD_FAST(arg=14, lineno=633)
DEBUG    2023-08-19 15:20:59,478: stack ['$210binary_and.10', '$228call_method.19']
DEBUG    2023-08-19 15:20:59,478: dispatch pc=232, inst=BINARY_LSHIFT(arg=None, lineno=632)
DEBUG    2023-08-19 15:20:59,478: stack ['$210binary_and.10', '$228call_method.19', '$jmp230.20']
DEBUG    2023-08-19 15:20:59,478: dispatch pc=234, inst=BINARY_OR(arg=None, lineno=632)
DEBUG    2023-08-19 15:20:59,478: stack ['$210binary_and.10', '$232binary_lshift.21']
DEBUG    2023-08-19 15:20:59,478: dispatch pc=236, inst=STORE_FAST(arg=11, lineno=632)
DEBUG    2023-08-19 15:20:59,478: stack ['$234binary_or.22']
DEBUG    2023-08-19 15:20:59,478: end state. edges=[Edge(pc=238, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,478: pending: deque([State(pc_initial=238 nstack_initial=0), State(pc_initial=238 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,478: stack: []
DEBUG    2023-08-19 15:20:59,478: dispatch pc=238, inst=LOAD_FAST(arg=3, lineno=634)
DEBUG    2023-08-19 15:20:59,479: stack []
DEBUG    2023-08-19 15:20:59,479: dispatch pc=240, inst=LOAD_CONST(arg=12, lineno=634)
DEBUG    2023-08-19 15:20:59,479: stack ['$src_sz238.0']
DEBUG    2023-08-19 15:20:59,479: dispatch pc=242, inst=COMPARE_OP(arg=5, lineno=634)
DEBUG    2023-08-19 15:20:59,479: stack ['$src_sz238.0', '$const240.1']
DEBUG    2023-08-19 15:20:59,479: dispatch pc=244, inst=POP_JUMP_IF_FALSE(arg=300, lineno=634)
DEBUG    2023-08-19 15:20:59,479: stack ['$242compare_op.2']
DEBUG    2023-08-19 15:20:59,479: end state. edges=[Edge(pc=248, stack=(), blockstack=(), npush=0), Edge(pc=300, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,479: pending: deque([State(pc_initial=238 nstack_initial=0), State(pc_initial=248 nstack_initial=0), State(pc_initial=300 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,479: pending: deque([State(pc_initial=248 nstack_initial=0), State(pc_initial=300 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,479: stack: []
DEBUG    2023-08-19 15:20:59,479: dispatch pc=248, inst=LOAD_CONST(arg=13, lineno=635)
DEBUG    2023-08-19 15:20:59,479: stack []
DEBUG    2023-08-19 15:20:59,479: dispatch pc=250, inst=STORE_FAST(arg=14, lineno=635)
DEBUG    2023-08-19 15:20:59,480: stack ['$const248.0']
DEBUG    2023-08-19 15:20:59,480: dispatch pc=252, inst=LOAD_GLOBAL(arg=0, lineno=636)
DEBUG    2023-08-19 15:20:59,480: stack []
DEBUG    2023-08-19 15:20:59,480: dispatch pc=254, inst=LOAD_METHOD(arg=1, lineno=636)
DEBUG    2023-08-19 15:20:59,480: stack ['$252load_global.1']
DEBUG    2023-08-19 15:20:59,480: dispatch pc=256, inst=LOAD_FAST(arg=13, lineno=636)
DEBUG    2023-08-19 15:20:59,480: stack ['$254load_method.2']
DEBUG    2023-08-19 15:20:59,480: dispatch pc=258, inst=LOAD_FAST(arg=14, lineno=636)
DEBUG    2023-08-19 15:20:59,480: stack ['$254load_method.2', '$ohexefef256.3']
DEBUG    2023-08-19 15:20:59,480: dispatch pc=260, inst=BINARY_LSHIFT(arg=None, lineno=636)
DEBUG    2023-08-19 15:20:59,480: stack ['$254load_method.2', '$ohexefef256.3', '$jmp258.4']
DEBUG    2023-08-19 15:20:59,480: dispatch pc=262, inst=CALL_METHOD(arg=1, lineno=636)
DEBUG    2023-08-19 15:20:59,480: stack ['$254load_method.2', '$260binary_lshift.5']
DEBUG    2023-08-19 15:20:59,480: dispatch pc=264, inst=UNARY_INVERT(arg=None, lineno=636)
DEBUG    2023-08-19 15:20:59,480: stack ['$262call_method.6']
DEBUG    2023-08-19 15:20:59,481: dispatch pc=266, inst=STORE_FAST(arg=15, lineno=636)
DEBUG    2023-08-19 15:20:59,481: stack ['$264unary_invert.7']
DEBUG    2023-08-19 15:20:59,481: dispatch pc=268, inst=LOAD_FAST(arg=11, lineno=637)
DEBUG    2023-08-19 15:20:59,481: stack []
DEBUG    2023-08-19 15:20:59,481: dispatch pc=270, inst=LOAD_FAST(arg=15, lineno=637)
DEBUG    2023-08-19 15:20:59,481: stack ['$t268.8']
DEBUG    2023-08-19 15:20:59,481: dispatch pc=272, inst=BINARY_AND(arg=None, lineno=637)
DEBUG    2023-08-19 15:20:59,481: stack ['$t268.8', '$mask270.9']
DEBUG    2023-08-19 15:20:59,481: dispatch pc=274, inst=LOAD_GLOBAL(arg=0, lineno=637)
DEBUG    2023-08-19 15:20:59,481: stack ['$272binary_and.10']
DEBUG    2023-08-19 15:20:59,481: dispatch pc=276, inst=LOAD_METHOD(arg=1, lineno=637)
DEBUG    2023-08-19 15:20:59,481: stack ['$272binary_and.10', '$274load_global.11']
DEBUG    2023-08-19 15:20:59,481: dispatch pc=278, inst=LOAD_GLOBAL(arg=4, lineno=637)
DEBUG    2023-08-19 15:20:59,481: stack ['$272binary_and.10', '$276load_method.12']
DEBUG    2023-08-19 15:20:59,482: dispatch pc=280, inst=LOAD_FAST(arg=2, lineno=637)
DEBUG    2023-08-19 15:20:59,482: stack ['$272binary_and.10', '$276load_method.12', '$278load_global.13']
DEBUG    2023-08-19 15:20:59,482: dispatch pc=282, inst=LOAD_FAST(arg=12, lineno=637)
DEBUG    2023-08-19 15:20:59,482: stack ['$272binary_and.10', '$276load_method.12', '$278load_global.13', '$src280.14']
DEBUG    2023-08-19 15:20:59,482: dispatch pc=284, inst=LOAD_CONST(arg=14, lineno=637)
DEBUG    2023-08-19 15:20:59,482: stack ['$272binary_and.10', '$276load_method.12', '$278load_global.13', '$src280.14', '$boffset282.15']
DEBUG    2023-08-19 15:20:59,482: dispatch pc=286, inst=BINARY_ADD(arg=None, lineno=637)
DEBUG    2023-08-19 15:20:59,482: stack ['$272binary_and.10', '$276load_method.12', '$278load_global.13', '$src280.14', '$boffset282.15', '$const284.16']
DEBUG    2023-08-19 15:20:59,482: dispatch pc=288, inst=CALL_FUNCTION(arg=2, lineno=637)
DEBUG    2023-08-19 15:20:59,482: stack ['$272binary_and.10', '$276load_method.12', '$278load_global.13', '$src280.14', '$286binary_add.17']
DEBUG    2023-08-19 15:20:59,482: dispatch pc=290, inst=CALL_METHOD(arg=1, lineno=637)
DEBUG    2023-08-19 15:20:59,482: stack ['$272binary_and.10', '$276load_method.12', '$288call_function.18']
DEBUG    2023-08-19 15:20:59,482: dispatch pc=292, inst=LOAD_FAST(arg=14, lineno=638)
DEBUG    2023-08-19 15:20:59,482: stack ['$272binary_and.10', '$290call_method.19']
DEBUG    2023-08-19 15:20:59,482: dispatch pc=294, inst=BINARY_LSHIFT(arg=None, lineno=637)
DEBUG    2023-08-19 15:20:59,483: stack ['$272binary_and.10', '$290call_method.19', '$jmp292.20']
DEBUG    2023-08-19 15:20:59,483: dispatch pc=296, inst=BINARY_OR(arg=None, lineno=637)
DEBUG    2023-08-19 15:20:59,483: stack ['$272binary_and.10', '$294binary_lshift.21']
DEBUG    2023-08-19 15:20:59,483: dispatch pc=298, inst=STORE_FAST(arg=11, lineno=637)
DEBUG    2023-08-19 15:20:59,483: stack ['$296binary_or.22']
DEBUG    2023-08-19 15:20:59,483: end state. edges=[Edge(pc=300, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,483: pending: deque([State(pc_initial=300 nstack_initial=0), State(pc_initial=300 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,483: stack: []
DEBUG    2023-08-19 15:20:59,483: dispatch pc=300, inst=LOAD_FAST(arg=3, lineno=639)
DEBUG    2023-08-19 15:20:59,483: stack []
DEBUG    2023-08-19 15:20:59,483: dispatch pc=302, inst=LOAD_CONST(arg=14, lineno=639)
DEBUG    2023-08-19 15:20:59,483: stack ['$src_sz300.0']
DEBUG    2023-08-19 15:20:59,483: dispatch pc=304, inst=COMPARE_OP(arg=5, lineno=639)
DEBUG    2023-08-19 15:20:59,483: stack ['$src_sz300.0', '$const302.1']
DEBUG    2023-08-19 15:20:59,484: dispatch pc=306, inst=POP_JUMP_IF_FALSE(arg=362, lineno=639)
DEBUG    2023-08-19 15:20:59,484: stack ['$304compare_op.2']
DEBUG    2023-08-19 15:20:59,484: end state. edges=[Edge(pc=310, stack=(), blockstack=(), npush=0), Edge(pc=362, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,484: pending: deque([State(pc_initial=300 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=362 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,484: pending: deque([State(pc_initial=310 nstack_initial=0), State(pc_initial=362 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,484: stack: []
DEBUG    2023-08-19 15:20:59,484: dispatch pc=310, inst=LOAD_CONST(arg=15, lineno=640)
DEBUG    2023-08-19 15:20:59,484: stack []
DEBUG    2023-08-19 15:20:59,484: dispatch pc=312, inst=STORE_FAST(arg=14, lineno=640)
DEBUG    2023-08-19 15:20:59,484: stack ['$const310.0']
DEBUG    2023-08-19 15:20:59,484: dispatch pc=314, inst=LOAD_GLOBAL(arg=0, lineno=641)
DEBUG    2023-08-19 15:20:59,484: stack []
DEBUG    2023-08-19 15:20:59,484: dispatch pc=316, inst=LOAD_METHOD(arg=1, lineno=641)
DEBUG    2023-08-19 15:20:59,484: stack ['$314load_global.1']
DEBUG    2023-08-19 15:20:59,484: dispatch pc=318, inst=LOAD_FAST(arg=13, lineno=641)
DEBUG    2023-08-19 15:20:59,485: stack ['$316load_method.2']
DEBUG    2023-08-19 15:20:59,485: dispatch pc=320, inst=LOAD_FAST(arg=14, lineno=641)
DEBUG    2023-08-19 15:20:59,485: stack ['$316load_method.2', '$ohexefef318.3']
DEBUG    2023-08-19 15:20:59,485: dispatch pc=322, inst=BINARY_LSHIFT(arg=None, lineno=641)
DEBUG    2023-08-19 15:20:59,485: stack ['$316load_method.2', '$ohexefef318.3', '$jmp320.4']
DEBUG    2023-08-19 15:20:59,485: dispatch pc=324, inst=CALL_METHOD(arg=1, lineno=641)
DEBUG    2023-08-19 15:20:59,485: stack ['$316load_method.2', '$322binary_lshift.5']
DEBUG    2023-08-19 15:20:59,485: dispatch pc=326, inst=UNARY_INVERT(arg=None, lineno=641)
DEBUG    2023-08-19 15:20:59,485: stack ['$324call_method.6']
DEBUG    2023-08-19 15:20:59,485: dispatch pc=328, inst=STORE_FAST(arg=15, lineno=641)
DEBUG    2023-08-19 15:20:59,485: stack ['$326unary_invert.7']
DEBUG    2023-08-19 15:20:59,485: dispatch pc=330, inst=LOAD_FAST(arg=11, lineno=642)
DEBUG    2023-08-19 15:20:59,485: stack []
DEBUG    2023-08-19 15:20:59,485: dispatch pc=332, inst=LOAD_FAST(arg=15, lineno=642)
DEBUG    2023-08-19 15:20:59,486: stack ['$t330.8']
DEBUG    2023-08-19 15:20:59,486: dispatch pc=334, inst=BINARY_AND(arg=None, lineno=642)
DEBUG    2023-08-19 15:20:59,486: stack ['$t330.8', '$mask332.9']
DEBUG    2023-08-19 15:20:59,486: dispatch pc=336, inst=LOAD_GLOBAL(arg=0, lineno=642)
DEBUG    2023-08-19 15:20:59,486: stack ['$334binary_and.10']
DEBUG    2023-08-19 15:20:59,486: dispatch pc=338, inst=LOAD_METHOD(arg=1, lineno=642)
DEBUG    2023-08-19 15:20:59,486: stack ['$334binary_and.10', '$336load_global.11']
DEBUG    2023-08-19 15:20:59,486: dispatch pc=340, inst=LOAD_GLOBAL(arg=4, lineno=642)
DEBUG    2023-08-19 15:20:59,486: stack ['$334binary_and.10', '$338load_method.12']
DEBUG    2023-08-19 15:20:59,486: dispatch pc=342, inst=LOAD_FAST(arg=2, lineno=642)
DEBUG    2023-08-19 15:20:59,486: stack ['$334binary_and.10', '$338load_method.12', '$340load_global.13']
DEBUG    2023-08-19 15:20:59,486: dispatch pc=344, inst=LOAD_FAST(arg=12, lineno=642)
DEBUG    2023-08-19 15:20:59,486: stack ['$334binary_and.10', '$338load_method.12', '$340load_global.13', '$src342.14']
DEBUG    2023-08-19 15:20:59,486: dispatch pc=346, inst=LOAD_CONST(arg=16, lineno=642)
DEBUG    2023-08-19 15:20:59,487: stack ['$334binary_and.10', '$338load_method.12', '$340load_global.13', '$src342.14', '$boffset344.15']
DEBUG    2023-08-19 15:20:59,487: dispatch pc=348, inst=BINARY_ADD(arg=None, lineno=642)
DEBUG    2023-08-19 15:20:59,487: stack ['$334binary_and.10', '$338load_method.12', '$340load_global.13', '$src342.14', '$boffset344.15', '$const346.16']
DEBUG    2023-08-19 15:20:59,487: dispatch pc=350, inst=CALL_FUNCTION(arg=2, lineno=642)
DEBUG    2023-08-19 15:20:59,487: stack ['$334binary_and.10', '$338load_method.12', '$340load_global.13', '$src342.14', '$348binary_add.17']
DEBUG    2023-08-19 15:20:59,487: dispatch pc=352, inst=CALL_METHOD(arg=1, lineno=642)
DEBUG    2023-08-19 15:20:59,487: stack ['$334binary_and.10', '$338load_method.12', '$350call_function.18']
DEBUG    2023-08-19 15:20:59,487: dispatch pc=354, inst=LOAD_FAST(arg=14, lineno=643)
DEBUG    2023-08-19 15:20:59,487: stack ['$334binary_and.10', '$352call_method.19']
DEBUG    2023-08-19 15:20:59,487: dispatch pc=356, inst=BINARY_LSHIFT(arg=None, lineno=642)
DEBUG    2023-08-19 15:20:59,487: stack ['$334binary_and.10', '$352call_method.19', '$jmp354.20']
DEBUG    2023-08-19 15:20:59,487: dispatch pc=358, inst=BINARY_OR(arg=None, lineno=642)
DEBUG    2023-08-19 15:20:59,487: stack ['$334binary_and.10', '$356binary_lshift.21']
DEBUG    2023-08-19 15:20:59,488: dispatch pc=360, inst=STORE_FAST(arg=11, lineno=642)
DEBUG    2023-08-19 15:20:59,488: stack ['$358binary_or.22']
DEBUG    2023-08-19 15:20:59,488: end state. edges=[Edge(pc=362, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,488: pending: deque([State(pc_initial=362 nstack_initial=0), State(pc_initial=362 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,488: stack: []
DEBUG    2023-08-19 15:20:59,488: dispatch pc=362, inst=LOAD_FAST(arg=3, lineno=644)
DEBUG    2023-08-19 15:20:59,488: stack []
DEBUG    2023-08-19 15:20:59,488: dispatch pc=364, inst=LOAD_CONST(arg=16, lineno=644)
DEBUG    2023-08-19 15:20:59,488: stack ['$src_sz362.0']
DEBUG    2023-08-19 15:20:59,488: dispatch pc=366, inst=COMPARE_OP(arg=5, lineno=644)
DEBUG    2023-08-19 15:20:59,488: stack ['$src_sz362.0', '$const364.1']
DEBUG    2023-08-19 15:20:59,488: dispatch pc=368, inst=POP_JUMP_IF_FALSE(arg=458, lineno=644)
DEBUG    2023-08-19 15:20:59,488: stack ['$366compare_op.2']
DEBUG    2023-08-19 15:20:59,488: end state. edges=[Edge(pc=372, stack=(), blockstack=(), npush=0), Edge(pc=458, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,489: pending: deque([State(pc_initial=362 nstack_initial=0), State(pc_initial=372 nstack_initial=0), State(pc_initial=458 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,489: pending: deque([State(pc_initial=372 nstack_initial=0), State(pc_initial=458 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,489: stack: []
DEBUG    2023-08-19 15:20:59,489: dispatch pc=372, inst=LOAD_FAST(arg=11, lineno=645)
DEBUG    2023-08-19 15:20:59,489: stack []
DEBUG    2023-08-19 15:20:59,489: dispatch pc=374, inst=LOAD_GLOBAL(arg=0, lineno=645)
DEBUG    2023-08-19 15:20:59,489: stack ['$t372.0']
DEBUG    2023-08-19 15:20:59,489: dispatch pc=376, inst=LOAD_METHOD(arg=1, lineno=645)
DEBUG    2023-08-19 15:20:59,489: stack ['$t372.0', '$374load_global.1']
DEBUG    2023-08-19 15:20:59,489: dispatch pc=378, inst=LOAD_CONST(arg=17, lineno=645)
DEBUG    2023-08-19 15:20:59,489: stack ['$t372.0', '$376load_method.2']
DEBUG    2023-08-19 15:20:59,489: dispatch pc=380, inst=CALL_METHOD(arg=1, lineno=645)
DEBUG    2023-08-19 15:20:59,489: stack ['$t372.0', '$376load_method.2', '$const378.3']
DEBUG    2023-08-19 15:20:59,489: dispatch pc=382, inst=INPLACE_AND(arg=None, lineno=645)
DEBUG    2023-08-19 15:20:59,490: stack ['$t372.0', '$380call_method.4']
DEBUG    2023-08-19 15:20:59,490: dispatch pc=384, inst=STORE_FAST(arg=11, lineno=645)
DEBUG    2023-08-19 15:20:59,490: stack ['$382inplace_and.5']
DEBUG    2023-08-19 15:20:59,490: dispatch pc=386, inst=LOAD_GLOBAL(arg=5, lineno=646)
DEBUG    2023-08-19 15:20:59,490: stack []
DEBUG    2023-08-19 15:20:59,490: dispatch pc=388, inst=LOAD_CONST(arg=16, lineno=646)
DEBUG    2023-08-19 15:20:59,490: stack ['$386load_global.6']
DEBUG    2023-08-19 15:20:59,490: dispatch pc=390, inst=CALL_FUNCTION(arg=1, lineno=646)
DEBUG    2023-08-19 15:20:59,490: stack ['$386load_global.6', '$const388.7']
DEBUG    2023-08-19 15:20:59,490: dispatch pc=392, inst=GET_ITER(arg=None, lineno=646)
DEBUG    2023-08-19 15:20:59,490: stack ['$390call_function.8']
DEBUG    2023-08-19 15:20:59,490: end state. edges=[Edge(pc=394, stack=('$392get_iter.9',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,490: pending: deque([State(pc_initial=458 nstack_initial=0), State(pc_initial=394 nstack_initial=1)])
DEBUG    2023-08-19 15:20:59,490: stack: []
DEBUG    2023-08-19 15:20:59,491: dispatch pc=458, inst=LOAD_FAST(arg=3, lineno=651)
DEBUG    2023-08-19 15:20:59,491: stack []
DEBUG    2023-08-19 15:20:59,491: dispatch pc=460, inst=LOAD_CONST(arg=18, lineno=651)
DEBUG    2023-08-19 15:20:59,491: stack ['$src_sz458.0']
DEBUG    2023-08-19 15:20:59,491: dispatch pc=462, inst=COMPARE_OP(arg=5, lineno=651)
DEBUG    2023-08-19 15:20:59,491: stack ['$src_sz458.0', '$const460.1']
DEBUG    2023-08-19 15:20:59,491: dispatch pc=464, inst=POP_JUMP_IF_FALSE(arg=520, lineno=651)
DEBUG    2023-08-19 15:20:59,491: stack ['$462compare_op.2']
DEBUG    2023-08-19 15:20:59,491: end state. edges=[Edge(pc=468, stack=(), blockstack=(), npush=0), Edge(pc=520, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,491: pending: deque([State(pc_initial=394 nstack_initial=1), State(pc_initial=468 nstack_initial=0), State(pc_initial=520 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,491: stack: ['$phi394.0']
DEBUG    2023-08-19 15:20:59,491: dispatch pc=394, inst=FOR_ITER(arg=62, lineno=646)
DEBUG    2023-08-19 15:20:59,491: stack ['$phi394.0']
DEBUG    2023-08-19 15:20:59,491: end state. edges=[Edge(pc=458, stack=(), blockstack=(), npush=0), Edge(pc=396, stack=('$phi394.0', '$394for_iter.2'), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,492: pending: deque([State(pc_initial=468 nstack_initial=0), State(pc_initial=520 nstack_initial=0), State(pc_initial=458 nstack_initial=0), State(pc_initial=396 nstack_initial=2)])
DEBUG    2023-08-19 15:20:59,492: stack: []
DEBUG    2023-08-19 15:20:59,492: dispatch pc=468, inst=LOAD_CONST(arg=19, lineno=652)
DEBUG    2023-08-19 15:20:59,492: stack []
DEBUG    2023-08-19 15:20:59,492: dispatch pc=470, inst=STORE_FAST(arg=14, lineno=652)
DEBUG    2023-08-19 15:20:59,492: stack ['$const468.0']
DEBUG    2023-08-19 15:20:59,492: dispatch pc=472, inst=LOAD_GLOBAL(arg=0, lineno=653)
DEBUG    2023-08-19 15:20:59,492: stack []
DEBUG    2023-08-19 15:20:59,492: dispatch pc=474, inst=LOAD_METHOD(arg=1, lineno=653)
DEBUG    2023-08-19 15:20:59,492: stack ['$472load_global.1']
DEBUG    2023-08-19 15:20:59,492: dispatch pc=476, inst=LOAD_FAST(arg=13, lineno=653)
DEBUG    2023-08-19 15:20:59,492: stack ['$474load_method.2']
DEBUG    2023-08-19 15:20:59,492: dispatch pc=478, inst=LOAD_FAST(arg=14, lineno=653)
DEBUG    2023-08-19 15:20:59,492: stack ['$474load_method.2', '$ohexefef476.3']
DEBUG    2023-08-19 15:20:59,492: dispatch pc=480, inst=BINARY_LSHIFT(arg=None, lineno=653)
DEBUG    2023-08-19 15:20:59,493: stack ['$474load_method.2', '$ohexefef476.3', '$jmp478.4']
DEBUG    2023-08-19 15:20:59,493: dispatch pc=482, inst=CALL_METHOD(arg=1, lineno=653)
DEBUG    2023-08-19 15:20:59,493: stack ['$474load_method.2', '$480binary_lshift.5']
DEBUG    2023-08-19 15:20:59,493: dispatch pc=484, inst=UNARY_INVERT(arg=None, lineno=653)
DEBUG    2023-08-19 15:20:59,493: stack ['$482call_method.6']
DEBUG    2023-08-19 15:20:59,493: dispatch pc=486, inst=STORE_FAST(arg=15, lineno=653)
DEBUG    2023-08-19 15:20:59,493: stack ['$484unary_invert.7']
DEBUG    2023-08-19 15:20:59,493: dispatch pc=488, inst=LOAD_FAST(arg=11, lineno=654)
DEBUG    2023-08-19 15:20:59,493: stack []
DEBUG    2023-08-19 15:20:59,493: dispatch pc=490, inst=LOAD_FAST(arg=15, lineno=654)
DEBUG    2023-08-19 15:20:59,493: stack ['$t488.8']
DEBUG    2023-08-19 15:20:59,493: dispatch pc=492, inst=BINARY_AND(arg=None, lineno=654)
DEBUG    2023-08-19 15:20:59,493: stack ['$t488.8', '$mask490.9']
DEBUG    2023-08-19 15:20:59,493: dispatch pc=494, inst=LOAD_GLOBAL(arg=0, lineno=654)
DEBUG    2023-08-19 15:20:59,494: stack ['$492binary_and.10']
DEBUG    2023-08-19 15:20:59,494: dispatch pc=496, inst=LOAD_METHOD(arg=1, lineno=654)
DEBUG    2023-08-19 15:20:59,494: stack ['$492binary_and.10', '$494load_global.11']
DEBUG    2023-08-19 15:20:59,494: dispatch pc=498, inst=LOAD_GLOBAL(arg=4, lineno=654)
DEBUG    2023-08-19 15:20:59,494: stack ['$492binary_and.10', '$496load_method.12']
DEBUG    2023-08-19 15:20:59,494: dispatch pc=500, inst=LOAD_FAST(arg=2, lineno=654)
DEBUG    2023-08-19 15:20:59,494: stack ['$492binary_and.10', '$496load_method.12', '$498load_global.13']
DEBUG    2023-08-19 15:20:59,494: dispatch pc=502, inst=LOAD_FAST(arg=12, lineno=654)
DEBUG    2023-08-19 15:20:59,494: stack ['$492binary_and.10', '$496load_method.12', '$498load_global.13', '$src500.14']
DEBUG    2023-08-19 15:20:59,494: dispatch pc=504, inst=LOAD_CONST(arg=20, lineno=654)
DEBUG    2023-08-19 15:20:59,494: stack ['$492binary_and.10', '$496load_method.12', '$498load_global.13', '$src500.14', '$boffset502.15']
DEBUG    2023-08-19 15:20:59,494: dispatch pc=506, inst=BINARY_ADD(arg=None, lineno=654)
DEBUG    2023-08-19 15:20:59,494: stack ['$492binary_and.10', '$496load_method.12', '$498load_global.13', '$src500.14', '$boffset502.15', '$const504.16']
DEBUG    2023-08-19 15:20:59,494: dispatch pc=508, inst=CALL_FUNCTION(arg=2, lineno=654)
DEBUG    2023-08-19 15:20:59,494: stack ['$492binary_and.10', '$496load_method.12', '$498load_global.13', '$src500.14', '$506binary_add.17']
DEBUG    2023-08-19 15:20:59,495: dispatch pc=510, inst=CALL_METHOD(arg=1, lineno=654)
DEBUG    2023-08-19 15:20:59,495: stack ['$492binary_and.10', '$496load_method.12', '$508call_function.18']
DEBUG    2023-08-19 15:20:59,495: dispatch pc=512, inst=LOAD_FAST(arg=14, lineno=655)
DEBUG    2023-08-19 15:20:59,495: stack ['$492binary_and.10', '$510call_method.19']
DEBUG    2023-08-19 15:20:59,495: dispatch pc=514, inst=BINARY_LSHIFT(arg=None, lineno=654)
DEBUG    2023-08-19 15:20:59,495: stack ['$492binary_and.10', '$510call_method.19', '$jmp512.20']
DEBUG    2023-08-19 15:20:59,495: dispatch pc=516, inst=BINARY_OR(arg=None, lineno=654)
DEBUG    2023-08-19 15:20:59,495: stack ['$492binary_and.10', '$514binary_lshift.21']
DEBUG    2023-08-19 15:20:59,495: dispatch pc=518, inst=STORE_FAST(arg=11, lineno=654)
DEBUG    2023-08-19 15:20:59,495: stack ['$516binary_or.22']
DEBUG    2023-08-19 15:20:59,495: end state. edges=[Edge(pc=520, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,495: pending: deque([State(pc_initial=520 nstack_initial=0), State(pc_initial=458 nstack_initial=0), State(pc_initial=396 nstack_initial=2), State(pc_initial=520 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,495: stack: []
DEBUG    2023-08-19 15:20:59,495: dispatch pc=520, inst=LOAD_FAST(arg=3, lineno=656)
DEBUG    2023-08-19 15:20:59,496: stack []
DEBUG    2023-08-19 15:20:59,496: dispatch pc=522, inst=LOAD_CONST(arg=20, lineno=656)
DEBUG    2023-08-19 15:20:59,496: stack ['$src_sz520.0']
DEBUG    2023-08-19 15:20:59,496: dispatch pc=524, inst=COMPARE_OP(arg=5, lineno=656)
DEBUG    2023-08-19 15:20:59,496: stack ['$src_sz520.0', '$const522.1']
DEBUG    2023-08-19 15:20:59,496: dispatch pc=526, inst=POP_JUMP_IF_FALSE(arg=582, lineno=656)
DEBUG    2023-08-19 15:20:59,496: stack ['$524compare_op.2']
DEBUG    2023-08-19 15:20:59,496: end state. edges=[Edge(pc=530, stack=(), blockstack=(), npush=0), Edge(pc=582, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,496: pending: deque([State(pc_initial=458 nstack_initial=0), State(pc_initial=396 nstack_initial=2), State(pc_initial=520 nstack_initial=0), State(pc_initial=530 nstack_initial=0), State(pc_initial=582 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,496: pending: deque([State(pc_initial=396 nstack_initial=2), State(pc_initial=520 nstack_initial=0), State(pc_initial=530 nstack_initial=0), State(pc_initial=582 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,496: stack: ['$phi396.0', '$phi396.1']
DEBUG    2023-08-19 15:20:59,496: dispatch pc=396, inst=STORE_FAST(arg=16, lineno=646)
DEBUG    2023-08-19 15:20:59,496: stack ['$phi396.0', '$phi396.1']
DEBUG    2023-08-19 15:20:59,496: dispatch pc=398, inst=LOAD_FAST(arg=16, lineno=647)
DEBUG    2023-08-19 15:20:59,497: stack ['$phi396.0']
DEBUG    2023-08-19 15:20:59,497: dispatch pc=400, inst=LOAD_CONST(arg=7, lineno=647)
DEBUG    2023-08-19 15:20:59,497: stack ['$phi396.0', '$i398.2']
DEBUG    2023-08-19 15:20:59,497: dispatch pc=402, inst=BINARY_MULTIPLY(arg=None, lineno=647)
DEBUG    2023-08-19 15:20:59,497: stack ['$phi396.0', '$i398.2', '$const400.3']
DEBUG    2023-08-19 15:20:59,497: dispatch pc=404, inst=STORE_FAST(arg=14, lineno=647)
DEBUG    2023-08-19 15:20:59,497: stack ['$phi396.0', '$402binary_multiply.4']
DEBUG    2023-08-19 15:20:59,497: dispatch pc=406, inst=LOAD_GLOBAL(arg=0, lineno=648)
DEBUG    2023-08-19 15:20:59,497: stack ['$phi396.0']
DEBUG    2023-08-19 15:20:59,497: dispatch pc=408, inst=LOAD_METHOD(arg=1, lineno=648)
DEBUG    2023-08-19 15:20:59,497: stack ['$phi396.0', '$406load_global.5']
DEBUG    2023-08-19 15:20:59,497: dispatch pc=410, inst=LOAD_FAST(arg=13, lineno=648)
DEBUG    2023-08-19 15:20:59,497: stack ['$phi396.0', '$408load_method.6']
DEBUG    2023-08-19 15:20:59,497: dispatch pc=412, inst=LOAD_FAST(arg=14, lineno=648)
DEBUG    2023-08-19 15:20:59,497: stack ['$phi396.0', '$408load_method.6', '$ohexefef410.7']
DEBUG    2023-08-19 15:20:59,498: dispatch pc=414, inst=BINARY_LSHIFT(arg=None, lineno=648)
DEBUG    2023-08-19 15:20:59,498: stack ['$phi396.0', '$408load_method.6', '$ohexefef410.7', '$jmp412.8']
DEBUG    2023-08-19 15:20:59,498: dispatch pc=416, inst=CALL_METHOD(arg=1, lineno=648)
DEBUG    2023-08-19 15:20:59,498: stack ['$phi396.0', '$408load_method.6', '$414binary_lshift.9']
DEBUG    2023-08-19 15:20:59,498: dispatch pc=418, inst=UNARY_INVERT(arg=None, lineno=648)
DEBUG    2023-08-19 15:20:59,498: stack ['$phi396.0', '$416call_method.10']
DEBUG    2023-08-19 15:20:59,498: dispatch pc=420, inst=STORE_FAST(arg=15, lineno=648)
DEBUG    2023-08-19 15:20:59,498: stack ['$phi396.0', '$418unary_invert.11']
DEBUG    2023-08-19 15:20:59,498: dispatch pc=422, inst=LOAD_FAST(arg=11, lineno=649)
DEBUG    2023-08-19 15:20:59,498: stack ['$phi396.0']
DEBUG    2023-08-19 15:20:59,498: dispatch pc=424, inst=LOAD_FAST(arg=15, lineno=649)
DEBUG    2023-08-19 15:20:59,498: stack ['$phi396.0', '$t422.12']
DEBUG    2023-08-19 15:20:59,498: dispatch pc=426, inst=BINARY_AND(arg=None, lineno=649)
DEBUG    2023-08-19 15:20:59,498: stack ['$phi396.0', '$t422.12', '$mask424.13']
DEBUG    2023-08-19 15:20:59,499: dispatch pc=428, inst=LOAD_GLOBAL(arg=0, lineno=649)
DEBUG    2023-08-19 15:20:59,499: stack ['$phi396.0', '$426binary_and.14']
DEBUG    2023-08-19 15:20:59,499: dispatch pc=430, inst=LOAD_METHOD(arg=1, lineno=649)
DEBUG    2023-08-19 15:20:59,499: stack ['$phi396.0', '$426binary_and.14', '$428load_global.15']
DEBUG    2023-08-19 15:20:59,499: dispatch pc=432, inst=LOAD_GLOBAL(arg=4, lineno=649)
DEBUG    2023-08-19 15:20:59,499: stack ['$phi396.0', '$426binary_and.14', '$430load_method.16']
DEBUG    2023-08-19 15:20:59,499: dispatch pc=434, inst=LOAD_FAST(arg=2, lineno=649)
DEBUG    2023-08-19 15:20:59,499: stack ['$phi396.0', '$426binary_and.14', '$430load_method.16', '$432load_global.17']
DEBUG    2023-08-19 15:20:59,499: dispatch pc=436, inst=LOAD_FAST(arg=12, lineno=649)
DEBUG    2023-08-19 15:20:59,499: stack ['$phi396.0', '$426binary_and.14', '$430load_method.16', '$432load_global.17', '$src434.18']
DEBUG    2023-08-19 15:20:59,499: dispatch pc=438, inst=LOAD_FAST(arg=16, lineno=649)
DEBUG    2023-08-19 15:20:59,499: stack ['$phi396.0', '$426binary_and.14', '$430load_method.16', '$432load_global.17', '$src434.18', '$boffset436.19']
DEBUG    2023-08-19 15:20:59,499: dispatch pc=440, inst=BINARY_ADD(arg=None, lineno=649)
DEBUG    2023-08-19 15:20:59,499: stack ['$phi396.0', '$426binary_and.14', '$430load_method.16', '$432load_global.17', '$src434.18', '$boffset436.19', '$i438.20']
DEBUG    2023-08-19 15:20:59,499: dispatch pc=442, inst=CALL_FUNCTION(arg=2, lineno=649)
DEBUG    2023-08-19 15:20:59,500: stack ['$phi396.0', '$426binary_and.14', '$430load_method.16', '$432load_global.17', '$src434.18', '$440binary_add.21']
DEBUG    2023-08-19 15:20:59,500: dispatch pc=444, inst=CALL_METHOD(arg=1, lineno=649)
DEBUG    2023-08-19 15:20:59,500: stack ['$phi396.0', '$426binary_and.14', '$430load_method.16', '$442call_function.22']
DEBUG    2023-08-19 15:20:59,500: dispatch pc=446, inst=LOAD_FAST(arg=14, lineno=650)
DEBUG    2023-08-19 15:20:59,500: stack ['$phi396.0', '$426binary_and.14', '$444call_method.23']
DEBUG    2023-08-19 15:20:59,500: dispatch pc=448, inst=BINARY_LSHIFT(arg=None, lineno=649)
DEBUG    2023-08-19 15:20:59,500: stack ['$phi396.0', '$426binary_and.14', '$444call_method.23', '$jmp446.24']
DEBUG    2023-08-19 15:20:59,500: dispatch pc=450, inst=BINARY_OR(arg=None, lineno=649)
DEBUG    2023-08-19 15:20:59,500: stack ['$phi396.0', '$426binary_and.14', '$448binary_lshift.25']
DEBUG    2023-08-19 15:20:59,500: dispatch pc=452, inst=STORE_FAST(arg=11, lineno=649)
DEBUG    2023-08-19 15:20:59,500: stack ['$phi396.0', '$450binary_or.26']
DEBUG    2023-08-19 15:20:59,500: dispatch pc=454, inst=JUMP_ABSOLUTE(arg=394, lineno=649)
DEBUG    2023-08-19 15:20:59,500: stack ['$phi396.0']
DEBUG    2023-08-19 15:20:59,500: end state. edges=[Edge(pc=394, stack=('$phi396.0',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,501: pending: deque([State(pc_initial=520 nstack_initial=0), State(pc_initial=530 nstack_initial=0), State(pc_initial=582 nstack_initial=0), State(pc_initial=394 nstack_initial=1)])
DEBUG    2023-08-19 15:20:59,501: pending: deque([State(pc_initial=530 nstack_initial=0), State(pc_initial=582 nstack_initial=0), State(pc_initial=394 nstack_initial=1)])
DEBUG    2023-08-19 15:20:59,501: stack: []
DEBUG    2023-08-19 15:20:59,501: dispatch pc=530, inst=LOAD_CONST(arg=7, lineno=657)
DEBUG    2023-08-19 15:20:59,501: stack []
DEBUG    2023-08-19 15:20:59,501: dispatch pc=532, inst=STORE_FAST(arg=14, lineno=657)
DEBUG    2023-08-19 15:20:59,501: stack ['$const530.0']
DEBUG    2023-08-19 15:20:59,501: dispatch pc=534, inst=LOAD_GLOBAL(arg=0, lineno=658)
DEBUG    2023-08-19 15:20:59,501: stack []
DEBUG    2023-08-19 15:20:59,501: dispatch pc=536, inst=LOAD_METHOD(arg=1, lineno=658)
DEBUG    2023-08-19 15:20:59,501: stack ['$534load_global.1']
DEBUG    2023-08-19 15:20:59,501: dispatch pc=538, inst=LOAD_FAST(arg=13, lineno=658)
DEBUG    2023-08-19 15:20:59,501: stack ['$536load_method.2']
DEBUG    2023-08-19 15:20:59,501: dispatch pc=540, inst=LOAD_FAST(arg=14, lineno=658)
DEBUG    2023-08-19 15:20:59,501: stack ['$536load_method.2', '$ohexefef538.3']
DEBUG    2023-08-19 15:20:59,502: dispatch pc=542, inst=BINARY_LSHIFT(arg=None, lineno=658)
DEBUG    2023-08-19 15:20:59,502: stack ['$536load_method.2', '$ohexefef538.3', '$jmp540.4']
DEBUG    2023-08-19 15:20:59,502: dispatch pc=544, inst=CALL_METHOD(arg=1, lineno=658)
DEBUG    2023-08-19 15:20:59,502: stack ['$536load_method.2', '$542binary_lshift.5']
DEBUG    2023-08-19 15:20:59,502: dispatch pc=546, inst=UNARY_INVERT(arg=None, lineno=658)
DEBUG    2023-08-19 15:20:59,502: stack ['$544call_method.6']
DEBUG    2023-08-19 15:20:59,502: dispatch pc=548, inst=STORE_FAST(arg=15, lineno=658)
DEBUG    2023-08-19 15:20:59,502: stack ['$546unary_invert.7']
DEBUG    2023-08-19 15:20:59,502: dispatch pc=550, inst=LOAD_FAST(arg=11, lineno=659)
DEBUG    2023-08-19 15:20:59,502: stack []
DEBUG    2023-08-19 15:20:59,503: dispatch pc=552, inst=LOAD_FAST(arg=15, lineno=659)
DEBUG    2023-08-19 15:20:59,503: stack ['$t550.8']
DEBUG    2023-08-19 15:20:59,503: dispatch pc=554, inst=BINARY_AND(arg=None, lineno=659)
DEBUG    2023-08-19 15:20:59,503: stack ['$t550.8', '$mask552.9']
DEBUG    2023-08-19 15:20:59,503: dispatch pc=556, inst=LOAD_GLOBAL(arg=0, lineno=659)
DEBUG    2023-08-19 15:20:59,503: stack ['$554binary_and.10']
DEBUG    2023-08-19 15:20:59,503: dispatch pc=558, inst=LOAD_METHOD(arg=1, lineno=659)
DEBUG    2023-08-19 15:20:59,503: stack ['$554binary_and.10', '$556load_global.11']
DEBUG    2023-08-19 15:20:59,503: dispatch pc=560, inst=LOAD_GLOBAL(arg=4, lineno=659)
DEBUG    2023-08-19 15:20:59,503: stack ['$554binary_and.10', '$558load_method.12']
DEBUG    2023-08-19 15:20:59,503: dispatch pc=562, inst=LOAD_FAST(arg=2, lineno=659)
DEBUG    2023-08-19 15:20:59,503: stack ['$554binary_and.10', '$558load_method.12', '$560load_global.13']
DEBUG    2023-08-19 15:20:59,504: dispatch pc=564, inst=LOAD_FAST(arg=12, lineno=659)
DEBUG    2023-08-19 15:20:59,504: stack ['$554binary_and.10', '$558load_method.12', '$560load_global.13', '$src562.14']
DEBUG    2023-08-19 15:20:59,504: dispatch pc=566, inst=LOAD_CONST(arg=8, lineno=659)
DEBUG    2023-08-19 15:20:59,504: stack ['$554binary_and.10', '$558load_method.12', '$560load_global.13', '$src562.14', '$boffset564.15']
DEBUG    2023-08-19 15:20:59,504: dispatch pc=568, inst=BINARY_ADD(arg=None, lineno=659)
DEBUG    2023-08-19 15:20:59,504: stack ['$554binary_and.10', '$558load_method.12', '$560load_global.13', '$src562.14', '$boffset564.15', '$const566.16']
DEBUG    2023-08-19 15:20:59,504: dispatch pc=570, inst=CALL_FUNCTION(arg=2, lineno=659)
DEBUG    2023-08-19 15:20:59,504: stack ['$554binary_and.10', '$558load_method.12', '$560load_global.13', '$src562.14', '$568binary_add.17']
DEBUG    2023-08-19 15:20:59,504: dispatch pc=572, inst=CALL_METHOD(arg=1, lineno=659)
DEBUG    2023-08-19 15:20:59,505: stack ['$554binary_and.10', '$558load_method.12', '$570call_function.18']
DEBUG    2023-08-19 15:20:59,505: dispatch pc=574, inst=LOAD_FAST(arg=14, lineno=660)
DEBUG    2023-08-19 15:20:59,505: stack ['$554binary_and.10', '$572call_method.19']
DEBUG    2023-08-19 15:20:59,505: dispatch pc=576, inst=BINARY_LSHIFT(arg=None, lineno=659)
DEBUG    2023-08-19 15:20:59,505: stack ['$554binary_and.10', '$572call_method.19', '$jmp574.20']
DEBUG    2023-08-19 15:20:59,505: dispatch pc=578, inst=BINARY_OR(arg=None, lineno=659)
DEBUG    2023-08-19 15:20:59,505: stack ['$554binary_and.10', '$576binary_lshift.21']
DEBUG    2023-08-19 15:20:59,505: dispatch pc=580, inst=STORE_FAST(arg=11, lineno=659)
DEBUG    2023-08-19 15:20:59,505: stack ['$578binary_or.22']
DEBUG    2023-08-19 15:20:59,505: end state. edges=[Edge(pc=582, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,506: pending: deque([State(pc_initial=582 nstack_initial=0), State(pc_initial=394 nstack_initial=1), State(pc_initial=582 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,506: stack: []
DEBUG    2023-08-19 15:20:59,506: dispatch pc=582, inst=LOAD_FAST(arg=3, lineno=661)
DEBUG    2023-08-19 15:20:59,506: stack []
DEBUG    2023-08-19 15:20:59,506: dispatch pc=584, inst=LOAD_CONST(arg=8, lineno=661)
DEBUG    2023-08-19 15:20:59,506: stack ['$src_sz582.0']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=586, inst=COMPARE_OP(arg=5, lineno=661)
DEBUG    2023-08-19 15:20:59,506: stack ['$src_sz582.0', '$const584.1']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=588, inst=POP_JUMP_IF_FALSE(arg=626, lineno=661)
DEBUG    2023-08-19 15:20:59,506: stack ['$586compare_op.2']
DEBUG    2023-08-19 15:20:59,506: end state. edges=[Edge(pc=592, stack=(), blockstack=(), npush=0), Edge(pc=626, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,506: pending: deque([State(pc_initial=394 nstack_initial=1), State(pc_initial=582 nstack_initial=0), State(pc_initial=592 nstack_initial=0), State(pc_initial=626 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,506: pending: deque([State(pc_initial=582 nstack_initial=0), State(pc_initial=592 nstack_initial=0), State(pc_initial=626 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,506: pending: deque([State(pc_initial=592 nstack_initial=0), State(pc_initial=626 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,506: stack: []
DEBUG    2023-08-19 15:20:59,506: dispatch pc=592, inst=LOAD_FAST(arg=13, lineno=662)
DEBUG    2023-08-19 15:20:59,506: stack []
DEBUG    2023-08-19 15:20:59,506: dispatch pc=594, inst=UNARY_INVERT(arg=None, lineno=662)
DEBUG    2023-08-19 15:20:59,506: stack ['$ohexefef592.0']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=596, inst=STORE_FAST(arg=15, lineno=662)
DEBUG    2023-08-19 15:20:59,506: stack ['$594unary_invert.1']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=598, inst=LOAD_FAST(arg=11, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack []
DEBUG    2023-08-19 15:20:59,506: dispatch pc=600, inst=LOAD_FAST(arg=15, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$t598.2']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=602, inst=BINARY_AND(arg=None, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$t598.2', '$mask600.3']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=604, inst=LOAD_GLOBAL(arg=0, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=606, inst=LOAD_METHOD(arg=1, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$604load_global.5']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=608, inst=LOAD_GLOBAL(arg=4, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$606load_method.6']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=610, inst=LOAD_FAST(arg=2, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$606load_method.6', '$608load_global.7']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=612, inst=LOAD_FAST(arg=12, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$606load_method.6', '$608load_global.7', '$src610.8']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=614, inst=LOAD_CONST(arg=6, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$606load_method.6', '$608load_global.7', '$src610.8', '$boffset612.9']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=616, inst=BINARY_ADD(arg=None, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$606load_method.6', '$608load_global.7', '$src610.8', '$boffset612.9', '$const614.10']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=618, inst=CALL_FUNCTION(arg=2, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$606load_method.6', '$608load_global.7', '$src610.8', '$616binary_add.11']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=620, inst=CALL_METHOD(arg=1, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$606load_method.6', '$618call_function.12']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=622, inst=BINARY_OR(arg=None, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$602binary_and.4', '$620call_method.13']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=624, inst=STORE_FAST(arg=11, lineno=663)
DEBUG    2023-08-19 15:20:59,506: stack ['$622binary_or.14']
DEBUG    2023-08-19 15:20:59,506: end state. edges=[Edge(pc=626, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:20:59,506: pending: deque([State(pc_initial=626 nstack_initial=0), State(pc_initial=626 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,506: stack: []
DEBUG    2023-08-19 15:20:59,506: dispatch pc=626, inst=LOAD_FAST(arg=4, lineno=665)
DEBUG    2023-08-19 15:20:59,506: stack []
DEBUG    2023-08-19 15:20:59,506: dispatch pc=628, inst=LOAD_FAST(arg=11, lineno=665)
DEBUG    2023-08-19 15:20:59,506: stack ['$b626.0']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=630, inst=INPLACE_OR(arg=None, lineno=665)
DEBUG    2023-08-19 15:20:59,506: stack ['$b626.0', '$t628.1']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=632, inst=STORE_FAST(arg=4, lineno=665)
DEBUG    2023-08-19 15:20:59,506: stack ['$630inplace_or.2']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=634, inst=LOAD_FAST(arg=8, lineno=666)
DEBUG    2023-08-19 15:20:59,506: stack []
DEBUG    2023-08-19 15:20:59,506: dispatch pc=636, inst=LOAD_FAST(arg=4, lineno=666)
DEBUG    2023-08-19 15:20:59,506: stack ['$v3634.3']
DEBUG    2023-08-19 15:20:59,506: dispatch pc=638, inst=INPLACE_XOR(arg=None, lineno=666)
DEBUG    2023-08-19 15:20:59,506: stack ['$v3634.3', '$b636.4']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=640, inst=STORE_FAST(arg=8, lineno=666)
DEBUG    2023-08-19 15:20:59,513: stack ['$638inplace_xor.5']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=642, inst=LOAD_GLOBAL(arg=3, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack []
DEBUG    2023-08-19 15:20:59,513: dispatch pc=644, inst=LOAD_FAST(arg=5, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$642load_global.6']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=646, inst=LOAD_FAST(arg=6, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$642load_global.6', '$v0644.7']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=648, inst=LOAD_FAST(arg=7, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$642load_global.6', '$v0644.7', '$v1646.8']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=650, inst=LOAD_FAST(arg=8, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$642load_global.6', '$v0644.7', '$v1646.8', '$v2648.9']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=652, inst=CALL_FUNCTION(arg=4, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$642load_global.6', '$v0644.7', '$v1646.8', '$v2648.9', '$v3650.10']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=654, inst=UNPACK_SEQUENCE(arg=4, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$652call_function.11']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=656, inst=STORE_FAST(arg=5, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$654unpack_sequence.15', '$654unpack_sequence.14', '$654unpack_sequence.13', '$654unpack_sequence.12']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=658, inst=STORE_FAST(arg=6, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$654unpack_sequence.15', '$654unpack_sequence.14', '$654unpack_sequence.13']
DEBUG    2023-08-19 15:20:59,513: dispatch pc=660, inst=STORE_FAST(arg=7, lineno=667)
DEBUG    2023-08-19 15:20:59,513: stack ['$654unpack_sequence.15', '$654unpack_sequence.14']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=662, inst=STORE_FAST(arg=8, lineno=667)
DEBUG    2023-08-19 15:20:59,515: stack ['$654unpack_sequence.15']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=664, inst=LOAD_FAST(arg=5, lineno=668)
DEBUG    2023-08-19 15:20:59,515: stack []
DEBUG    2023-08-19 15:20:59,515: dispatch pc=666, inst=LOAD_FAST(arg=4, lineno=668)
DEBUG    2023-08-19 15:20:59,515: stack ['$v0664.17']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=668, inst=INPLACE_XOR(arg=None, lineno=668)
DEBUG    2023-08-19 15:20:59,515: stack ['$v0664.17', '$b666.18']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=670, inst=STORE_FAST(arg=5, lineno=668)
DEBUG    2023-08-19 15:20:59,515: stack ['$668inplace_xor.19']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=672, inst=LOAD_FAST(arg=7, lineno=669)
DEBUG    2023-08-19 15:20:59,515: stack []
DEBUG    2023-08-19 15:20:59,515: dispatch pc=674, inst=LOAD_FAST(arg=13, lineno=669)
DEBUG    2023-08-19 15:20:59,515: stack ['$v2672.20']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=676, inst=INPLACE_XOR(arg=None, lineno=669)
DEBUG    2023-08-19 15:20:59,515: stack ['$v2672.20', '$ohexefef674.21']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=678, inst=STORE_FAST(arg=7, lineno=669)
DEBUG    2023-08-19 15:20:59,515: stack ['$676inplace_xor.22']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=680, inst=LOAD_GLOBAL(arg=3, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack []
DEBUG    2023-08-19 15:20:59,515: dispatch pc=682, inst=LOAD_FAST(arg=5, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$680load_global.23']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=684, inst=LOAD_FAST(arg=6, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$680load_global.23', '$v0682.24']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=686, inst=LOAD_FAST(arg=7, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$680load_global.23', '$v0682.24', '$v1684.25']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=688, inst=LOAD_FAST(arg=8, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$680load_global.23', '$v0682.24', '$v1684.25', '$v2686.26']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=690, inst=CALL_FUNCTION(arg=4, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$680load_global.23', '$v0682.24', '$v1684.25', '$v2686.26', '$v3688.27']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=692, inst=UNPACK_SEQUENCE(arg=4, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$690call_function.28']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=694, inst=STORE_FAST(arg=5, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$692unpack_sequence.32', '$692unpack_sequence.31', '$692unpack_sequence.30', '$692unpack_sequence.29']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=696, inst=STORE_FAST(arg=6, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$692unpack_sequence.32', '$692unpack_sequence.31', '$692unpack_sequence.30']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=698, inst=STORE_FAST(arg=7, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$692unpack_sequence.32', '$692unpack_sequence.31']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=700, inst=STORE_FAST(arg=8, lineno=670)
DEBUG    2023-08-19 15:20:59,515: stack ['$692unpack_sequence.32']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=702, inst=LOAD_GLOBAL(arg=3, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack []
DEBUG    2023-08-19 15:20:59,515: dispatch pc=704, inst=LOAD_FAST(arg=5, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$702load_global.34']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=706, inst=LOAD_FAST(arg=6, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$702load_global.34', '$v0704.35']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=708, inst=LOAD_FAST(arg=7, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$702load_global.34', '$v0704.35', '$v1706.36']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=710, inst=LOAD_FAST(arg=8, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$702load_global.34', '$v0704.35', '$v1706.36', '$v2708.37']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=712, inst=CALL_FUNCTION(arg=4, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$702load_global.34', '$v0704.35', '$v1706.36', '$v2708.37', '$v3710.38']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=714, inst=UNPACK_SEQUENCE(arg=4, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$712call_function.39']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=716, inst=STORE_FAST(arg=5, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$714unpack_sequence.43', '$714unpack_sequence.42', '$714unpack_sequence.41', '$714unpack_sequence.40']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=718, inst=STORE_FAST(arg=6, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$714unpack_sequence.43', '$714unpack_sequence.42', '$714unpack_sequence.41']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=720, inst=STORE_FAST(arg=7, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$714unpack_sequence.43', '$714unpack_sequence.42']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=722, inst=STORE_FAST(arg=8, lineno=671)
DEBUG    2023-08-19 15:20:59,515: stack ['$714unpack_sequence.43']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=724, inst=LOAD_FAST(arg=5, lineno=672)
DEBUG    2023-08-19 15:20:59,515: stack []
DEBUG    2023-08-19 15:20:59,515: dispatch pc=726, inst=LOAD_FAST(arg=6, lineno=672)
DEBUG    2023-08-19 15:20:59,515: stack ['$v0724.45']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=728, inst=BINARY_XOR(arg=None, lineno=672)
DEBUG    2023-08-19 15:20:59,515: stack ['$v0724.45', '$v1726.46']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=730, inst=LOAD_FAST(arg=7, lineno=672)
DEBUG    2023-08-19 15:20:59,515: stack ['$728binary_xor.47']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=732, inst=LOAD_FAST(arg=8, lineno=672)
DEBUG    2023-08-19 15:20:59,515: stack ['$728binary_xor.47', '$v2730.48']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=734, inst=BINARY_XOR(arg=None, lineno=672)
DEBUG    2023-08-19 15:20:59,515: stack ['$728binary_xor.47', '$v2730.48', '$v3732.49']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=736, inst=BINARY_XOR(arg=None, lineno=672)
DEBUG    2023-08-19 15:20:59,515: stack ['$728binary_xor.47', '$734binary_xor.50']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=738, inst=STORE_FAST(arg=11, lineno=672)
DEBUG    2023-08-19 15:20:59,515: stack ['$736binary_xor.51']
DEBUG    2023-08-19 15:20:59,515: dispatch pc=740, inst=LOAD_FAST(arg=11, lineno=673)
DEBUG    2023-08-19 15:20:59,515: stack []
DEBUG    2023-08-19 15:20:59,515: dispatch pc=742, inst=RETURN_VALUE(arg=None, lineno=673)
DEBUG    2023-08-19 15:20:59,515: stack ['$t740.52']
DEBUG    2023-08-19 15:20:59,515: end state. edges=[]
DEBUG    2023-08-19 15:20:59,515: pending: deque([State(pc_initial=626 nstack_initial=0)])
DEBUG    2023-08-19 15:20:59,515: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:20:59,515: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=186 nstack_initial=0): set(),
             State(pc_initial=238 nstack_initial=0): set(),
             State(pc_initial=248 nstack_initial=0): set(),
             State(pc_initial=300 nstack_initial=0): set(),
             State(pc_initial=310 nstack_initial=0): set(),
             State(pc_initial=362 nstack_initial=0): set(),
             State(pc_initial=372 nstack_initial=0): set(),
             State(pc_initial=394 nstack_initial=1): {'$phi394.0'},
             State(pc_initial=396 nstack_initial=2): {'$phi396.1'},
             State(pc_initial=458 nstack_initial=0): set(),
             State(pc_initial=468 nstack_initial=0): set(),
             State(pc_initial=520 nstack_initial=0): set(),
             State(pc_initial=530 nstack_initial=0): set(),
             State(pc_initial=582 nstack_initial=0): set(),
             State(pc_initial=592 nstack_initial=0): set(),
             State(pc_initial=626 nstack_initial=0): set()})
DEBUG    2023-08-19 15:20:59,515: defmap: {'$phi394.0': State(pc_initial=372 nstack_initial=0),
 '$phi396.1': State(pc_initial=394 nstack_initial=1)}
DEBUG    2023-08-19 15:20:59,515: phismap: defaultdict(<class 'set'>,
            {'$phi394.0': {('$392get_iter.9',
                            State(pc_initial=372 nstack_initial=0)),
                           ('$phi396.0',
                            State(pc_initial=396 nstack_initial=2))},
             '$phi396.0': {('$phi394.0',
                            State(pc_initial=394 nstack_initial=1))},
             '$phi396.1': {('$394for_iter.2',
                            State(pc_initial=394 nstack_initial=1))}})
DEBUG    2023-08-19 15:20:59,515: changing phismap: defaultdict(<class 'set'>,
            {'$phi394.0': {('$392get_iter.9',
                            State(pc_initial=372 nstack_initial=0)),
                           ('$phi394.0',
                            State(pc_initial=394 nstack_initial=1))},
             '$phi396.0': {('$392get_iter.9',
                            State(pc_initial=372 nstack_initial=0))},
             '$phi396.1': {('$394for_iter.2',
                            State(pc_initial=394 nstack_initial=1))}})
DEBUG    2023-08-19 15:20:59,515: changing phismap: defaultdict(<class 'set'>,
            {'$phi394.0': {('$392get_iter.9',
                            State(pc_initial=372 nstack_initial=0))},
             '$phi396.0': {('$392get_iter.9',
                            State(pc_initial=372 nstack_initial=0))},
             '$phi396.1': {('$394for_iter.2',
                            State(pc_initial=394 nstack_initial=1))}})
DEBUG    2023-08-19 15:20:59,515: changing phismap: defaultdict(<class 'set'>,
            {'$phi394.0': {('$392get_iter.9',
                            State(pc_initial=372 nstack_initial=0))},
             '$phi396.0': {('$392get_iter.9',
                            State(pc_initial=372 nstack_initial=0))},
             '$phi396.1': {('$394for_iter.2',
                            State(pc_initial=394 nstack_initial=1))}})
DEBUG    2023-08-19 15:20:59,515: keep phismap: {'$phi394.0': {('$392get_iter.9', State(pc_initial=372 nstack_initial=0))},
 '$phi396.1': {('$394for_iter.2', State(pc_initial=394 nstack_initial=1))}}
DEBUG    2023-08-19 15:20:59,515: new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=372 nstack_initial=0): {'$phi394.0': '$392get_iter.9'},
             State(pc_initial=394 nstack_initial=1): {'$phi396.1': '$394for_iter.2'}})
DEBUG    2023-08-19 15:20:59,523: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$src_sz6.2'}), (8, {'func': '$4load_method.1', 'args': ['$src_sz6.2'], 'res': '$8call_method.3'}), (10, {'res': '$const10.4'}), (12, {'lhs': '$8call_method.3', 'rhs': '$const10.4', 'res': '$12binary_lshift.5'}), (14, {'value': '$12binary_lshift.5'}), (16, {'res': '$k016.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_method.8'}), (22, {'res': '$const22.9'}), (24, {'func': '$20load_method.8', 'args': ['$const22.9'], 'res': '$24call_method.10'}), (26, {'lhs': '$k016.6', 'rhs': '$24call_method.10', 'res': '$26binary_xor.11'}), (28, {'value': '$26binary_xor.11'}), (30, {'res': '$k130.12'}), (32, {'res': '$32load_global.13'}), (34, {'item': '$32load_global.13', 'res': '$34load_method.14'}), (36, {'res': '$const36.15'}), (38, {'func': '$34load_method.14', 'args': ['$const36.15'], 'res': '$38call_method.16'}), (40, {'lhs': '$k130.12', 'rhs': '$38call_method.16', 'res': '$40binary_xor.17'}), (42, {'value': '$40binary_xor.17'}), (44, {'res': '$k044.18'}), (46, {'res': '$46load_global.19'}), (48, {'item': '$46load_global.19', 'res': '$48load_method.20'}), (50, {'res': '$const50.21'}), (52, {'func': '$48load_method.20', 'args': ['$const50.21'], 'res': '$52call_method.22'}), (54, {'lhs': '$k044.18', 'rhs': '$52call_method.22', 'res': '$54binary_xor.23'}), (56, {'value': '$54binary_xor.23'}), (58, {'res': '$k158.24'}), (60, {'res': '$60load_global.25'}), (62, {'item': '$60load_global.25', 'res': '$62load_method.26'}), (64, {'res': '$const64.27'}), (66, {'func': '$62load_method.26', 'args': ['$const64.27'], 'res': '$66call_method.28'}), (68, {'lhs': '$k158.24', 'rhs': '$66call_method.28', 'res': '$68binary_xor.29'}), (70, {'value': '$68binary_xor.29'}), (72, {'res': '$const72.30'}), (74, {'value': '$const72.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$src_sz76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$src_sz76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 150: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$84load_global.0'}), (86, {'res': '$src86.1'}), (88, {'res': '$idx88.2'}), (90, {'func': '$84load_global.0', 'args': ['$src86.1', '$idx88.2'], 'res': '$90call_function.3'}), (92, {'value': '$90call_function.3'}), (94, {'res': '$idx94.4'}), (96, {'res': '$const96.5'}), (98, {'lhs': '$idx94.4', 'rhs': '$const96.5', 'res': '$98inplace_add.6'}), (100, {'value': '$98inplace_add.6'}), (102, {'res': '$src_sz102.7'}), (104, {'res': '$const104.8'}), (106, {'lhs': '$src_sz102.7', 'rhs': '$const104.8', 'res': '$106inplace_subtract.9'}), (108, {'value': '$106inplace_subtract.9'}), (110, {'res': '$v3110.10'}), (112, {'res': '$mi112.11'}), (114, {'lhs': '$v3110.10', 'rhs': '$mi112.11', 'res': '$114inplace_xor.12'}), (116, {'value': '$114inplace_xor.12'}), (118, {'res': '$118load_global.13'}), (120, {'res': '$v0120.14'}), (122, {'res': '$v1122.15'}), (124, {'res': '$v2124.16'}), (126, {'res': '$v3126.17'}), (128, {'func': '$118load_global.13', 'args': ['$v0120.14', '$v1122.15', '$v2124.16', '$v3126.17'], 'res': '$128call_function.18'}), (130, {'iterable': '$128call_function.18', 'stores': ['$130unpack_sequence.19', '$130unpack_sequence.20', '$130unpack_sequence.21', '$130unpack_sequence.22'], 'tupleobj': '$130unpack_sequence.23'}), (132, {'value': '$130unpack_sequence.19'}), (134, {'value': '$130unpack_sequence.20'}), (136, {'value': '$130unpack_sequence.21'}), (138, {'value': '$130unpack_sequence.22'}), (140, {'res': '$v0140.24'}), (142, {'res': '$mi142.25'}), (144, {'lhs': '$v0140.24', 'rhs': '$mi142.25', 'res': '$144inplace_xor.26'}), (146, {'value': '$144inplace_xor.26'}), (148, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$150load_global.0'}), (152, {'item': '$150load_global.0', 'res': '$152load_method.1'}), (154, {'res': '$const154.2'}), (156, {'func': '$152load_method.1', 'args': ['$const154.2'], 'res': '$156call_method.3'}), (158, {'value': '$156call_method.3'}), (160, {'res': '$idx160.4'}), (162, {'res': '$const162.5'}), (164, {'lhs': '$idx160.4', 'rhs': '$const162.5', 'res': '$164binary_multiply.6'}), (166, {'value': '$164binary_multiply.6'}), (168, {'res': '$168load_global.7'}), (170, {'item': '$168load_global.7', 'res': '$170load_method.8'}), (172, {'res': '$const172.9'}), (174, {'func': '$170load_method.8', 'args': ['$const172.9'], 'res': '$174call_method.10'}), (176, {'value': '$174call_method.10'}), (178, {'res': '$src_sz178.11'}), (180, {'res': '$const180.12'}), (182, {'lhs': '$src_sz178.11', 'rhs': '$const180.12', 'res': '$182compare_op.13'}), (184, {'pred': '$182compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={186: (), 238: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=186 nstack_initial=0):
AdaptBlockInfo(insts=((186, {'res': '$const186.0'}), (188, {'value': '$const186.0'}), (190, {'res': '$190load_global.1'}), (192, {'item': '$190load_global.1', 'res': '$192load_method.2'}), (194, {'res': '$ohexefef194.3'}), (196, {'res': '$jmp196.4'}), (198, {'lhs': '$ohexefef194.3', 'rhs': '$jmp196.4', 'res': '$198binary_lshift.5'}), (200, {'func': '$192load_method.2', 'args': ['$198binary_lshift.5'], 'res': '$200call_method.6'}), (202, {'value': '$200call_method.6', 'res': '$202unary_invert.7'}), (204, {'value': '$202unary_invert.7'}), (206, {'res': '$t206.8'}), (208, {'res': '$mask208.9'}), (210, {'lhs': '$t206.8', 'rhs': '$mask208.9', 'res': '$210binary_and.10'}), (212, {'res': '$212load_global.11'}), (214, {'item': '$212load_global.11', 'res': '$214load_method.12'}), (216, {'res': '$216load_global.13'}), (218, {'res': '$src218.14'}), (220, {'res': '$boffset220.15'}), (222, {'res': '$const222.16'}), (224, {'lhs': '$boffset220.15', 'rhs': '$const222.16', 'res': '$224binary_add.17'}), (226, {'func': '$216load_global.13', 'args': ['$src218.14', '$224binary_add.17'], 'res': '$226call_function.18'}), (228, {'func': '$214load_method.12', 'args': ['$226call_function.18'], 'res': '$228call_method.19'}), (230, {'res': '$jmp230.20'}), (232, {'lhs': '$228call_method.19', 'rhs': '$jmp230.20', 'res': '$232binary_lshift.21'}), (234, {'lhs': '$210binary_and.10', 'rhs': '$232binary_lshift.21', 'res': '$234binary_or.22'}), (236, {'value': '$234binary_or.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=238 nstack_initial=0):
AdaptBlockInfo(insts=((238, {'res': '$src_sz238.0'}), (240, {'res': '$const240.1'}), (242, {'lhs': '$src_sz238.0', 'rhs': '$const240.1', 'res': '$242compare_op.2'}), (244, {'pred': '$242compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={248: (), 300: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=248 nstack_initial=0):
AdaptBlockInfo(insts=((248, {'res': '$const248.0'}), (250, {'value': '$const248.0'}), (252, {'res': '$252load_global.1'}), (254, {'item': '$252load_global.1', 'res': '$254load_method.2'}), (256, {'res': '$ohexefef256.3'}), (258, {'res': '$jmp258.4'}), (260, {'lhs': '$ohexefef256.3', 'rhs': '$jmp258.4', 'res': '$260binary_lshift.5'}), (262, {'func': '$254load_method.2', 'args': ['$260binary_lshift.5'], 'res': '$262call_method.6'}), (264, {'value': '$262call_method.6', 'res': '$264unary_invert.7'}), (266, {'value': '$264unary_invert.7'}), (268, {'res': '$t268.8'}), (270, {'res': '$mask270.9'}), (272, {'lhs': '$t268.8', 'rhs': '$mask270.9', 'res': '$272binary_and.10'}), (274, {'res': '$274load_global.11'}), (276, {'item': '$274load_global.11', 'res': '$276load_method.12'}), (278, {'res': '$278load_global.13'}), (280, {'res': '$src280.14'}), (282, {'res': '$boffset282.15'}), (284, {'res': '$const284.16'}), (286, {'lhs': '$boffset282.15', 'rhs': '$const284.16', 'res': '$286binary_add.17'}), (288, {'func': '$278load_global.13', 'args': ['$src280.14', '$286binary_add.17'], 'res': '$288call_function.18'}), (290, {'func': '$276load_method.12', 'args': ['$288call_function.18'], 'res': '$290call_method.19'}), (292, {'res': '$jmp292.20'}), (294, {'lhs': '$290call_method.19', 'rhs': '$jmp292.20', 'res': '$294binary_lshift.21'}), (296, {'lhs': '$272binary_and.10', 'rhs': '$294binary_lshift.21', 'res': '$296binary_or.22'}), (298, {'value': '$296binary_or.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=300 nstack_initial=0):
AdaptBlockInfo(insts=((300, {'res': '$src_sz300.0'}), (302, {'res': '$const302.1'}), (304, {'lhs': '$src_sz300.0', 'rhs': '$const302.1', 'res': '$304compare_op.2'}), (306, {'pred': '$304compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={310: (), 362: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=310 nstack_initial=0):
AdaptBlockInfo(insts=((310, {'res': '$const310.0'}), (312, {'value': '$const310.0'}), (314, {'res': '$314load_global.1'}), (316, {'item': '$314load_global.1', 'res': '$316load_method.2'}), (318, {'res': '$ohexefef318.3'}), (320, {'res': '$jmp320.4'}), (322, {'lhs': '$ohexefef318.3', 'rhs': '$jmp320.4', 'res': '$322binary_lshift.5'}), (324, {'func': '$316load_method.2', 'args': ['$322binary_lshift.5'], 'res': '$324call_method.6'}), (326, {'value': '$324call_method.6', 'res': '$326unary_invert.7'}), (328, {'value': '$326unary_invert.7'}), (330, {'res': '$t330.8'}), (332, {'res': '$mask332.9'}), (334, {'lhs': '$t330.8', 'rhs': '$mask332.9', 'res': '$334binary_and.10'}), (336, {'res': '$336load_global.11'}), (338, {'item': '$336load_global.11', 'res': '$338load_method.12'}), (340, {'res': '$340load_global.13'}), (342, {'res': '$src342.14'}), (344, {'res': '$boffset344.15'}), (346, {'res': '$const346.16'}), (348, {'lhs': '$boffset344.15', 'rhs': '$const346.16', 'res': '$348binary_add.17'}), (350, {'func': '$340load_global.13', 'args': ['$src342.14', '$348binary_add.17'], 'res': '$350call_function.18'}), (352, {'func': '$338load_method.12', 'args': ['$350call_function.18'], 'res': '$352call_method.19'}), (354, {'res': '$jmp354.20'}), (356, {'lhs': '$352call_method.19', 'rhs': '$jmp354.20', 'res': '$356binary_lshift.21'}), (358, {'lhs': '$334binary_and.10', 'rhs': '$356binary_lshift.21', 'res': '$358binary_or.22'}), (360, {'value': '$358binary_or.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=362 nstack_initial=0):
AdaptBlockInfo(insts=((362, {'res': '$src_sz362.0'}), (364, {'res': '$const364.1'}), (366, {'lhs': '$src_sz362.0', 'rhs': '$const364.1', 'res': '$366compare_op.2'}), (368, {'pred': '$366compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={372: (), 458: ()})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=372 nstack_initial=0):
AdaptBlockInfo(insts=((372, {'res': '$t372.0'}), (374, {'res': '$374load_global.1'}), (376, {'item': '$374load_global.1', 'res': '$376load_method.2'}), (378, {'res': '$const378.3'}), (380, {'func': '$376load_method.2', 'args': ['$const378.3'], 'res': '$380call_method.4'}), (382, {'lhs': '$t372.0', 'rhs': '$380call_method.4', 'res': '$382inplace_and.5'}), (384, {'value': '$382inplace_and.5'}), (386, {'res': '$386load_global.6'}), (388, {'res': '$const388.7'}), (390, {'func': '$386load_global.6', 'args': ['$const388.7'], 'res': '$390call_function.8'}), (392, {'value': '$390call_function.8', 'res': '$392get_iter.9'})), outgoing_phis={'$phi394.0': '$392get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={394: ('$392get_iter.9',)})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=394 nstack_initial=1):
AdaptBlockInfo(insts=((394, {'iterator': '$phi394.0', 'pair': '$394for_iter.1', 'indval': '$394for_iter.2', 'pred': '$394for_iter.3'}),), outgoing_phis={'$phi396.1': '$394for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={458: (), 396: ('$phi394.0', '$394for_iter.2')})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=396 nstack_initial=2):
AdaptBlockInfo(insts=((396, {'value': '$phi396.1'}), (398, {'res': '$i398.2'}), (400, {'res': '$const400.3'}), (402, {'lhs': '$i398.2', 'rhs': '$const400.3', 'res': '$402binary_multiply.4'}), (404, {'value': '$402binary_multiply.4'}), (406, {'res': '$406load_global.5'}), (408, {'item': '$406load_global.5', 'res': '$408load_method.6'}), (410, {'res': '$ohexefef410.7'}), (412, {'res': '$jmp412.8'}), (414, {'lhs': '$ohexefef410.7', 'rhs': '$jmp412.8', 'res': '$414binary_lshift.9'}), (416, {'func': '$408load_method.6', 'args': ['$414binary_lshift.9'], 'res': '$416call_method.10'}), (418, {'value': '$416call_method.10', 'res': '$418unary_invert.11'}), (420, {'value': '$418unary_invert.11'}), (422, {'res': '$t422.12'}), (424, {'res': '$mask424.13'}), (426, {'lhs': '$t422.12', 'rhs': '$mask424.13', 'res': '$426binary_and.14'}), (428, {'res': '$428load_global.15'}), (430, {'item': '$428load_global.15', 'res': '$430load_method.16'}), (432, {'res': '$432load_global.17'}), (434, {'res': '$src434.18'}), (436, {'res': '$boffset436.19'}), (438, {'res': '$i438.20'}), (440, {'lhs': '$boffset436.19', 'rhs': '$i438.20', 'res': '$440binary_add.21'}), (442, {'func': '$432load_global.17', 'args': ['$src434.18', '$440binary_add.21'], 'res': '$442call_function.22'}), (444, {'func': '$430load_method.16', 'args': ['$442call_function.22'], 'res': '$444call_method.23'}), (446, {'res': '$jmp446.24'}), (448, {'lhs': '$444call_method.23', 'rhs': '$jmp446.24', 'res': '$448binary_lshift.25'}), (450, {'lhs': '$426binary_and.14', 'rhs': '$448binary_lshift.25', 'res': '$450binary_or.26'}), (452, {'value': '$450binary_or.26'}), (454, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={394: ('$phi396.0',)})
DEBUG    2023-08-19 15:20:59,523: block_infos State(pc_initial=458 nstack_initial=0):
AdaptBlockInfo(insts=((458, {'res': '$src_sz458.0'}), (460, {'res': '$const460.1'}), (462, {'lhs': '$src_sz458.0', 'rhs': '$const460.1', 'res': '$462compare_op.2'}), (464, {'pred': '$462compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={468: (), 520: ()})
DEBUG    2023-08-19 15:20:59,525: block_infos State(pc_initial=468 nstack_initial=0):
AdaptBlockInfo(insts=((468, {'res': '$const468.0'}), (470, {'value': '$const468.0'}), (472, {'res': '$472load_global.1'}), (474, {'item': '$472load_global.1', 'res': '$474load_method.2'}), (476, {'res': '$ohexefef476.3'}), (478, {'res': '$jmp478.4'}), (480, {'lhs': '$ohexefef476.3', 'rhs': '$jmp478.4', 'res': '$480binary_lshift.5'}), (482, {'func': '$474load_method.2', 'args': ['$480binary_lshift.5'], 'res': '$482call_method.6'}), (484, {'value': '$482call_method.6', 'res': '$484unary_invert.7'}), (486, {'value': '$484unary_invert.7'}), (488, {'res': '$t488.8'}), (490, {'res': '$mask490.9'}), (492, {'lhs': '$t488.8', 'rhs': '$mask490.9', 'res': '$492binary_and.10'}), (494, {'res': '$494load_global.11'}), (496, {'item': '$494load_global.11', 'res': '$496load_method.12'}), (498, {'res': '$498load_global.13'}), (500, {'res': '$src500.14'}), (502, {'res': '$boffset502.15'}), (504, {'res': '$const504.16'}), (506, {'lhs': '$boffset502.15', 'rhs': '$const504.16', 'res': '$506binary_add.17'}), (508, {'func': '$498load_global.13', 'args': ['$src500.14', '$506binary_add.17'], 'res': '$508call_function.18'}), (510, {'func': '$496load_method.12', 'args': ['$508call_function.18'], 'res': '$510call_method.19'}), (512, {'res': '$jmp512.20'}), (514, {'lhs': '$510call_method.19', 'rhs': '$jmp512.20', 'res': '$514binary_lshift.21'}), (516, {'lhs': '$492binary_and.10', 'rhs': '$514binary_lshift.21', 'res': '$516binary_or.22'}), (518, {'value': '$516binary_or.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={520: ()})
DEBUG    2023-08-19 15:20:59,525: block_infos State(pc_initial=520 nstack_initial=0):
AdaptBlockInfo(insts=((520, {'res': '$src_sz520.0'}), (522, {'res': '$const522.1'}), (524, {'lhs': '$src_sz520.0', 'rhs': '$const522.1', 'res': '$524compare_op.2'}), (526, {'pred': '$524compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={530: (), 582: ()})
DEBUG    2023-08-19 15:20:59,525: block_infos State(pc_initial=530 nstack_initial=0):
AdaptBlockInfo(insts=((530, {'res': '$const530.0'}), (532, {'value': '$const530.0'}), (534, {'res': '$534load_global.1'}), (536, {'item': '$534load_global.1', 'res': '$536load_method.2'}), (538, {'res': '$ohexefef538.3'}), (540, {'res': '$jmp540.4'}), (542, {'lhs': '$ohexefef538.3', 'rhs': '$jmp540.4', 'res': '$542binary_lshift.5'}), (544, {'func': '$536load_method.2', 'args': ['$542binary_lshift.5'], 'res': '$544call_method.6'}), (546, {'value': '$544call_method.6', 'res': '$546unary_invert.7'}), (548, {'value': '$546unary_invert.7'}), (550, {'res': '$t550.8'}), (552, {'res': '$mask552.9'}), (554, {'lhs': '$t550.8', 'rhs': '$mask552.9', 'res': '$554binary_and.10'}), (556, {'res': '$556load_global.11'}), (558, {'item': '$556load_global.11', 'res': '$558load_method.12'}), (560, {'res': '$560load_global.13'}), (562, {'res': '$src562.14'}), (564, {'res': '$boffset564.15'}), (566, {'res': '$const566.16'}), (568, {'lhs': '$boffset564.15', 'rhs': '$const566.16', 'res': '$568binary_add.17'}), (570, {'func': '$560load_global.13', 'args': ['$src562.14', '$568binary_add.17'], 'res': '$570call_function.18'}), (572, {'func': '$558load_method.12', 'args': ['$570call_function.18'], 'res': '$572call_method.19'}), (574, {'res': '$jmp574.20'}), (576, {'lhs': '$572call_method.19', 'rhs': '$jmp574.20', 'res': '$576binary_lshift.21'}), (578, {'lhs': '$554binary_and.10', 'rhs': '$576binary_lshift.21', 'res': '$578binary_or.22'}), (580, {'value': '$578binary_or.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={582: ()})
DEBUG    2023-08-19 15:20:59,525: block_infos State(pc_initial=582 nstack_initial=0):
AdaptBlockInfo(insts=((582, {'res': '$src_sz582.0'}), (584, {'res': '$const584.1'}), (586, {'lhs': '$src_sz582.0', 'rhs': '$const584.1', 'res': '$586compare_op.2'}), (588, {'pred': '$586compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={592: (), 626: ()})
DEBUG    2023-08-19 15:20:59,525: block_infos State(pc_initial=592 nstack_initial=0):
AdaptBlockInfo(insts=((592, {'res': '$ohexefef592.0'}), (594, {'value': '$ohexefef592.0', 'res': '$594unary_invert.1'}), (596, {'value': '$594unary_invert.1'}), (598, {'res': '$t598.2'}), (600, {'res': '$mask600.3'}), (602, {'lhs': '$t598.2', 'rhs': '$mask600.3', 'res': '$602binary_and.4'}), (604, {'res': '$604load_global.5'}), (606, {'item': '$604load_global.5', 'res': '$606load_method.6'}), (608, {'res': '$608load_global.7'}), (610, {'res': '$src610.8'}), (612, {'res': '$boffset612.9'}), (614, {'res': '$const614.10'}), (616, {'lhs': '$boffset612.9', 'rhs': '$const614.10', 'res': '$616binary_add.11'}), (618, {'func': '$608load_global.7', 'args': ['$src610.8', '$616binary_add.11'], 'res': '$618call_function.12'}), (620, {'func': '$606load_method.6', 'args': ['$618call_function.12'], 'res': '$620call_method.13'}), (622, {'lhs': '$602binary_and.4', 'rhs': '$620call_method.13', 'res': '$622binary_or.14'}), (624, {'value': '$622binary_or.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={626: ()})
DEBUG    2023-08-19 15:20:59,525: block_infos State(pc_initial=626 nstack_initial=0):
AdaptBlockInfo(insts=((626, {'res': '$b626.0'}), (628, {'res': '$t628.1'}), (630, {'lhs': '$b626.0', 'rhs': '$t628.1', 'res': '$630inplace_or.2'}), (632, {'value': '$630inplace_or.2'}), (634, {'res': '$v3634.3'}), (636, {'res': '$b636.4'}), (638, {'lhs': '$v3634.3', 'rhs': '$b636.4', 'res': '$638inplace_xor.5'}), (640, {'value': '$638inplace_xor.5'}), (642, {'res': '$642load_global.6'}), (644, {'res': '$v0644.7'}), (646, {'res': '$v1646.8'}), (648, {'res': '$v2648.9'}), (650, {'res': '$v3650.10'}), (652, {'func': '$642load_global.6', 'args': ['$v0644.7', '$v1646.8', '$v2648.9', '$v3650.10'], 'res': '$652call_function.11'}), (654, {'iterable': '$652call_function.11', 'stores': ['$654unpack_sequence.12', '$654unpack_sequence.13', '$654unpack_sequence.14', '$654unpack_sequence.15'], 'tupleobj': '$654unpack_sequence.16'}), (656, {'value': '$654unpack_sequence.12'}), (658, {'value': '$654unpack_sequence.13'}), (660, {'value': '$654unpack_sequence.14'}), (662, {'value': '$654unpack_sequence.15'}), (664, {'res': '$v0664.17'}), (666, {'res': '$b666.18'}), (668, {'lhs': '$v0664.17', 'rhs': '$b666.18', 'res': '$668inplace_xor.19'}), (670, {'value': '$668inplace_xor.19'}), (672, {'res': '$v2672.20'}), (674, {'res': '$ohexefef674.21'}), (676, {'lhs': '$v2672.20', 'rhs': '$ohexefef674.21', 'res': '$676inplace_xor.22'}), (678, {'value': '$676inplace_xor.22'}), (680, {'res': '$680load_global.23'}), (682, {'res': '$v0682.24'}), (684, {'res': '$v1684.25'}), (686, {'res': '$v2686.26'}), (688, {'res': '$v3688.27'}), (690, {'func': '$680load_global.23', 'args': ['$v0682.24', '$v1684.25', '$v2686.26', '$v3688.27'], 'res': '$690call_function.28'}), (692, {'iterable': '$690call_function.28', 'stores': ['$692unpack_sequence.29', '$692unpack_sequence.30', '$692unpack_sequence.31', '$692unpack_sequence.32'], 'tupleobj': '$692unpack_sequence.33'}), (694, {'value': '$692unpack_sequence.29'}), (696, {'value': '$692unpack_sequence.30'}), (698, {'value': '$692unpack_sequence.31'}), (700, {'value': '$692unpack_sequence.32'}), (702, {'res': '$702load_global.34'}), (704, {'res': '$v0704.35'}), (706, {'res': '$v1706.36'}), (708, {'res': '$v2708.37'}), (710, {'res': '$v3710.38'}), (712, {'func': '$702load_global.34', 'args': ['$v0704.35', '$v1706.36', '$v2708.37', '$v3710.38'], 'res': '$712call_function.39'}), (714, {'iterable': '$712call_function.39', 'stores': ['$714unpack_sequence.40', '$714unpack_sequence.41', '$714unpack_sequence.42', '$714unpack_sequence.43'], 'tupleobj': '$714unpack_sequence.44'}), (716, {'value': '$714unpack_sequence.40'}), (718, {'value': '$714unpack_sequence.41'}), (720, {'value': '$714unpack_sequence.42'}), (722, {'value': '$714unpack_sequence.43'}), (724, {'res': '$v0724.45'}), (726, {'res': '$v1726.46'}), (728, {'lhs': '$v0724.45', 'rhs': '$v1726.46', 'res': '$728binary_xor.47'}), (730, {'res': '$v2730.48'}), (732, {'res': '$v3732.49'}), (734, {'lhs': '$v2730.48', 'rhs': '$v3732.49', 'res': '$734binary_xor.50'}), (736, {'lhs': '$728binary_xor.47', 'rhs': '$734binary_xor.50', 'res': '$736binary_xor.51'}), (738, {'value': '$736binary_xor.51'}), (740, {'res': '$t740.52'}), (742, {'retval': '$t740.52', 'castval': '$742return_value.53'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:20:59,539: label 0:
    k0 = arg(0, name=k0)                     ['k0']
    k1 = arg(1, name=k1)                     ['k1']
    src = arg(2, name=src)                   ['src']
    src_sz = arg(3, name=src_sz)             ['src_sz']
    $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=uint64) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None) ['$4load_method.1', '$8call_method.3', 'src_sz']
    $const10.4 = const(int, 56)              ['$const10.4']
    b = $8call_method.3 << $const10.4        ['$8call_method.3', '$const10.4', 'b']
    $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$18load_global.7']
    $20load_method.8 = getattr(value=$18load_global.7, attr=uint64) ['$18load_global.7', '$20load_method.8']
    $const22.9 = const(int, 8317987319222330741) ['$const22.9']
    $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None) ['$20load_method.8', '$24call_method.10', '$const22.9']
    v0 = k0 ^ $24call_method.10              ['$24call_method.10', 'k0', 'v0']
    $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$32load_global.13']
    $34load_method.14 = getattr(value=$32load_global.13, attr=uint64) ['$32load_global.13', '$34load_method.14']
    $const36.15 = const(int, 7237128888997146477) ['$const36.15']
    $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None) ['$34load_method.14', '$38call_method.16', '$const36.15']
    v1 = k1 ^ $38call_method.16              ['$38call_method.16', 'k1', 'v1']
    $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$46load_global.19']
    $48load_method.20 = getattr(value=$46load_global.19, attr=uint64) ['$46load_global.19', '$48load_method.20']
    $const50.21 = const(int, 7816392313619706465) ['$const50.21']
    $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None) ['$48load_method.20', '$52call_method.22', '$const50.21']
    v2 = k0 ^ $52call_method.22              ['$52call_method.22', 'k0', 'v2']
    $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$60load_global.25']
    $62load_method.26 = getattr(value=$60load_global.25, attr=uint64) ['$60load_global.25', '$62load_method.26']
    $const64.27 = const(int, 8387220255154660723) ['$const64.27']
    $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None) ['$62load_method.26', '$66call_method.28', '$const64.27']
    v3 = k1 ^ $66call_method.28              ['$66call_method.28', 'k1', 'v3']
    idx = const(int, 0)                      ['idx']
    jump 76                                  []
label 76:
    $const78.1 = const(int, 8)               ['$const78.1']
    $80compare_op.2 = src_sz >= $const78.1   ['$80compare_op.2', '$const78.1', 'src_sz']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 150                  ['$82pred']
label 84:
    $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>) ['$84load_global.0']
    mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None) ['$84load_global.0', 'idx', 'mi', 'src']
    $const96.5 = const(int, 1)               ['$const96.5']
    $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined) ['$98inplace_add.6', '$const96.5', 'idx']
    idx = $98inplace_add.6                   ['$98inplace_add.6', 'idx']
    $const104.8 = const(int, 8)              ['$const104.8']
    $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_subtract.9', '$const104.8', 'src_sz']
    src_sz = $106inplace_subtract.9          ['$106inplace_subtract.9', 'src_sz']
    $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_xor.12', 'mi', 'v3']
    v3 = $114inplace_xor.12                  ['$114inplace_xor.12', 'v3']
    $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>) ['$118load_global.13']
    $128call_function.18 = call $118load_global.13(v0, v1, v2, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None) ['$118load_global.13', '$128call_function.18', 'v0', 'v1', 'v2', 'v3']
    $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4) ['$128call_function.18', '$130unpack_sequence.23']
    $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>) ['$130unpack_sequence.19', '$130unpack_sequence.23']
    $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>) ['$130unpack_sequence.20', '$130unpack_sequence.23']
    $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>) ['$130unpack_sequence.21', '$130unpack_sequence.23']
    $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>) ['$130unpack_sequence.22', '$130unpack_sequence.23']
    v0 = $130unpack_sequence.19              ['$130unpack_sequence.19', 'v0']
    v1 = $130unpack_sequence.20              ['$130unpack_sequence.20', 'v1']
    v2 = $130unpack_sequence.21              ['$130unpack_sequence.21', 'v2']
    v3 = $130unpack_sequence.22              ['$130unpack_sequence.22', 'v3']
    $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined) ['$144inplace_xor.26', 'mi', 'v0']
    v0 = $144inplace_xor.26                  ['$144inplace_xor.26', 'v0']
    jump 76                                  []
label 150:
    $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$150load_global.0']
    $152load_method.1 = getattr(value=$150load_global.0, attr=uint64) ['$150load_global.0', '$152load_method.1']
    $const154.2 = const(int, 0)              ['$const154.2']
    t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None) ['$152load_method.1', '$const154.2', 't']
    $const162.5 = const(int, 8)              ['$const162.5']
    boffset = idx * $const162.5              ['$const162.5', 'boffset', 'idx']
    $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$168load_global.7']
    $170load_method.8 = getattr(value=$168load_global.7, attr=uint64) ['$168load_global.7', '$170load_method.8']
    $const172.9 = const(int, 255)            ['$const172.9']
    ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None) ['$170load_method.8', '$const172.9', 'ohexefef']
    $const180.12 = const(int, 7)             ['$const180.12']
    $182compare_op.13 = src_sz >= $const180.12 ['$182compare_op.13', '$const180.12', 'src_sz']
    bool184 = global(bool: <class 'bool'>)   ['bool184']
    $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None) ['$182compare_op.13', '$184pred', 'bool184']
    branch $184pred, 186, 238                ['$184pred']
label 186:
    jmp = const(int, 48)                     ['jmp']
    $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$190load_global.1']
    $192load_method.2 = getattr(value=$190load_global.1, attr=uint64) ['$190load_global.1', '$192load_method.2']
    $198binary_lshift.5 = ohexefef << jmp    ['$198binary_lshift.5', 'jmp', 'ohexefef']
    $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None) ['$192load_method.2', '$198binary_lshift.5', '$200call_method.6']
    mask = unary(fn=<built-in function invert>, value=$200call_method.6) ['$200call_method.6', 'mask']
    $210binary_and.10 = t & mask             ['$210binary_and.10', 'mask', 't']
    $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$212load_global.11']
    $214load_method.12 = getattr(value=$212load_global.11, attr=uint64) ['$212load_global.11', '$214load_method.12']
    $216load_global.13 = global(grab_byte: <intrinsic grab_byte>) ['$216load_global.13']
    $const222.16 = const(int, 6)             ['$const222.16']
    $224binary_add.17 = boffset + $const222.16 ['$224binary_add.17', '$const222.16', 'boffset']
    $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None) ['$216load_global.13', '$224binary_add.17', '$226call_function.18', 'src']
    $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None) ['$214load_method.12', '$226call_function.18', '$228call_method.19']
    $232binary_lshift.21 = $228call_method.19 << jmp ['$228call_method.19', '$232binary_lshift.21', 'jmp']
    t = $210binary_and.10 | $232binary_lshift.21 ['$210binary_and.10', '$232binary_lshift.21', 't']
    jump 238                                 []
label 238:
    $const240.1 = const(int, 6)              ['$const240.1']
    $242compare_op.2 = src_sz >= $const240.1 ['$242compare_op.2', '$const240.1', 'src_sz']
    bool244 = global(bool: <class 'bool'>)   ['bool244']
    $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None) ['$242compare_op.2', '$244pred', 'bool244']
    branch $244pred, 248, 300                ['$244pred']
label 248:
    jmp = const(int, 40)                     ['jmp']
    $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$252load_global.1']
    $254load_method.2 = getattr(value=$252load_global.1, attr=uint64) ['$252load_global.1', '$254load_method.2']
    $260binary_lshift.5 = ohexefef << jmp    ['$260binary_lshift.5', 'jmp', 'ohexefef']
    $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None) ['$254load_method.2', '$260binary_lshift.5', '$262call_method.6']
    mask = unary(fn=<built-in function invert>, value=$262call_method.6) ['$262call_method.6', 'mask']
    $272binary_and.10 = t & mask             ['$272binary_and.10', 'mask', 't']
    $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$274load_global.11']
    $276load_method.12 = getattr(value=$274load_global.11, attr=uint64) ['$274load_global.11', '$276load_method.12']
    $278load_global.13 = global(grab_byte: <intrinsic grab_byte>) ['$278load_global.13']
    $const284.16 = const(int, 5)             ['$const284.16']
    $286binary_add.17 = boffset + $const284.16 ['$286binary_add.17', '$const284.16', 'boffset']
    $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None) ['$278load_global.13', '$286binary_add.17', '$288call_function.18', 'src']
    $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None) ['$276load_method.12', '$288call_function.18', '$290call_method.19']
    $294binary_lshift.21 = $290call_method.19 << jmp ['$290call_method.19', '$294binary_lshift.21', 'jmp']
    t = $272binary_and.10 | $294binary_lshift.21 ['$272binary_and.10', '$294binary_lshift.21', 't']
    jump 300                                 []
label 300:
    $const302.1 = const(int, 5)              ['$const302.1']
    $304compare_op.2 = src_sz >= $const302.1 ['$304compare_op.2', '$const302.1', 'src_sz']
    bool306 = global(bool: <class 'bool'>)   ['bool306']
    $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None) ['$304compare_op.2', '$306pred', 'bool306']
    branch $306pred, 310, 362                ['$306pred']
label 310:
    jmp = const(int, 32)                     ['jmp']
    $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$314load_global.1']
    $316load_method.2 = getattr(value=$314load_global.1, attr=uint64) ['$314load_global.1', '$316load_method.2']
    $322binary_lshift.5 = ohexefef << jmp    ['$322binary_lshift.5', 'jmp', 'ohexefef']
    $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None) ['$316load_method.2', '$322binary_lshift.5', '$324call_method.6']
    mask = unary(fn=<built-in function invert>, value=$324call_method.6) ['$324call_method.6', 'mask']
    $334binary_and.10 = t & mask             ['$334binary_and.10', 'mask', 't']
    $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$336load_global.11']
    $338load_method.12 = getattr(value=$336load_global.11, attr=uint64) ['$336load_global.11', '$338load_method.12']
    $340load_global.13 = global(grab_byte: <intrinsic grab_byte>) ['$340load_global.13']
    $const346.16 = const(int, 4)             ['$const346.16']
    $348binary_add.17 = boffset + $const346.16 ['$348binary_add.17', '$const346.16', 'boffset']
    $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None) ['$340load_global.13', '$348binary_add.17', '$350call_function.18', 'src']
    $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None) ['$338load_method.12', '$350call_function.18', '$352call_method.19']
    $356binary_lshift.21 = $352call_method.19 << jmp ['$352call_method.19', '$356binary_lshift.21', 'jmp']
    t = $334binary_and.10 | $356binary_lshift.21 ['$334binary_and.10', '$356binary_lshift.21', 't']
    jump 362                                 []
label 362:
    $const364.1 = const(int, 4)              ['$const364.1']
    $366compare_op.2 = src_sz >= $const364.1 ['$366compare_op.2', '$const364.1', 'src_sz']
    bool368 = global(bool: <class 'bool'>)   ['bool368']
    $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None) ['$366compare_op.2', '$368pred', 'bool368']
    branch $368pred, 372, 458                ['$368pred']
label 372:
    $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$374load_global.1']
    $376load_method.2 = getattr(value=$374load_global.1, attr=uint64) ['$374load_global.1', '$376load_method.2']
    $const378.3 = const(int, 18446744069414584320) ['$const378.3']
    $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None) ['$376load_method.2', '$380call_method.4', '$const378.3']
    $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined) ['$380call_method.4', '$382inplace_and.5', 't']
    t = $382inplace_and.5                    ['$382inplace_and.5', 't']
    $386load_global.6 = global(range: <class 'range'>) ['$386load_global.6']
    $const388.7 = const(int, 4)              ['$const388.7']
    $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None) ['$386load_global.6', '$390call_function.8', '$const388.7']
    $392get_iter.9 = getiter(value=$390call_function.8) ['$390call_function.8', '$392get_iter.9']
    $phi394.0 = $392get_iter.9               ['$392get_iter.9', '$phi394.0']
    jump 394                                 []
label 394:
    $394for_iter.1 = iternext(value=$phi394.0) ['$394for_iter.1', '$phi394.0']
    $394for_iter.2 = pair_first(value=$394for_iter.1) ['$394for_iter.1', '$394for_iter.2']
    $394for_iter.3 = pair_second(value=$394for_iter.1) ['$394for_iter.1', '$394for_iter.3']
    $phi396.1 = $394for_iter.2               ['$394for_iter.2', '$phi396.1']
    branch $394for_iter.3, 396, 458          ['$394for_iter.3']
label 396:
    i = $phi396.1                            ['$phi396.1', 'i']
    $const400.3 = const(int, 8)              ['$const400.3']
    jmp = i * $const400.3                    ['$const400.3', 'i', 'jmp']
    $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$406load_global.5']
    $408load_method.6 = getattr(value=$406load_global.5, attr=uint64) ['$406load_global.5', '$408load_method.6']
    $414binary_lshift.9 = ohexefef << jmp    ['$414binary_lshift.9', 'jmp', 'ohexefef']
    $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None) ['$408load_method.6', '$414binary_lshift.9', '$416call_method.10']
    mask = unary(fn=<built-in function invert>, value=$416call_method.10) ['$416call_method.10', 'mask']
    $426binary_and.14 = t & mask             ['$426binary_and.14', 'mask', 't']
    $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$428load_global.15']
    $430load_method.16 = getattr(value=$428load_global.15, attr=uint64) ['$428load_global.15', '$430load_method.16']
    $432load_global.17 = global(grab_byte: <intrinsic grab_byte>) ['$432load_global.17']
    $440binary_add.21 = boffset + i          ['$440binary_add.21', 'boffset', 'i']
    $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None) ['$432load_global.17', '$440binary_add.21', '$442call_function.22', 'src']
    $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None) ['$430load_method.16', '$442call_function.22', '$444call_method.23']
    $448binary_lshift.25 = $444call_method.23 << jmp ['$444call_method.23', '$448binary_lshift.25', 'jmp']
    t = $426binary_and.14 | $448binary_lshift.25 ['$426binary_and.14', '$448binary_lshift.25', 't']
    jump 394                                 []
label 458:
    $const460.1 = const(int, 3)              ['$const460.1']
    $462compare_op.2 = src_sz >= $const460.1 ['$462compare_op.2', '$const460.1', 'src_sz']
    bool464 = global(bool: <class 'bool'>)   ['bool464']
    $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None) ['$462compare_op.2', '$464pred', 'bool464']
    branch $464pred, 468, 520                ['$464pred']
label 468:
    jmp = const(int, 16)                     ['jmp']
    $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$472load_global.1']
    $474load_method.2 = getattr(value=$472load_global.1, attr=uint64) ['$472load_global.1', '$474load_method.2']
    $480binary_lshift.5 = ohexefef << jmp    ['$480binary_lshift.5', 'jmp', 'ohexefef']
    $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None) ['$474load_method.2', '$480binary_lshift.5', '$482call_method.6']
    mask = unary(fn=<built-in function invert>, value=$482call_method.6) ['$482call_method.6', 'mask']
    $492binary_and.10 = t & mask             ['$492binary_and.10', 'mask', 't']
    $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$494load_global.11']
    $496load_method.12 = getattr(value=$494load_global.11, attr=uint64) ['$494load_global.11', '$496load_method.12']
    $498load_global.13 = global(grab_byte: <intrinsic grab_byte>) ['$498load_global.13']
    $const504.16 = const(int, 2)             ['$const504.16']
    $506binary_add.17 = boffset + $const504.16 ['$506binary_add.17', '$const504.16', 'boffset']
    $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None) ['$498load_global.13', '$506binary_add.17', '$508call_function.18', 'src']
    $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None) ['$496load_method.12', '$508call_function.18', '$510call_method.19']
    $514binary_lshift.21 = $510call_method.19 << jmp ['$510call_method.19', '$514binary_lshift.21', 'jmp']
    t = $492binary_and.10 | $514binary_lshift.21 ['$492binary_and.10', '$514binary_lshift.21', 't']
    jump 520                                 []
label 520:
    $const522.1 = const(int, 2)              ['$const522.1']
    $524compare_op.2 = src_sz >= $const522.1 ['$524compare_op.2', '$const522.1', 'src_sz']
    bool526 = global(bool: <class 'bool'>)   ['bool526']
    $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None) ['$524compare_op.2', '$526pred', 'bool526']
    branch $526pred, 530, 582                ['$526pred']
label 530:
    jmp = const(int, 8)                      ['jmp']
    $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$534load_global.1']
    $536load_method.2 = getattr(value=$534load_global.1, attr=uint64) ['$534load_global.1', '$536load_method.2']
    $542binary_lshift.5 = ohexefef << jmp    ['$542binary_lshift.5', 'jmp', 'ohexefef']
    $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None) ['$536load_method.2', '$542binary_lshift.5', '$544call_method.6']
    mask = unary(fn=<built-in function invert>, value=$544call_method.6) ['$544call_method.6', 'mask']
    $554binary_and.10 = t & mask             ['$554binary_and.10', 'mask', 't']
    $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$556load_global.11']
    $558load_method.12 = getattr(value=$556load_global.11, attr=uint64) ['$556load_global.11', '$558load_method.12']
    $560load_global.13 = global(grab_byte: <intrinsic grab_byte>) ['$560load_global.13']
    $const566.16 = const(int, 1)             ['$const566.16']
    $568binary_add.17 = boffset + $const566.16 ['$568binary_add.17', '$const566.16', 'boffset']
    $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None) ['$560load_global.13', '$568binary_add.17', '$570call_function.18', 'src']
    $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None) ['$558load_method.12', '$570call_function.18', '$572call_method.19']
    $576binary_lshift.21 = $572call_method.19 << jmp ['$572call_method.19', '$576binary_lshift.21', 'jmp']
    t = $554binary_and.10 | $576binary_lshift.21 ['$554binary_and.10', '$576binary_lshift.21', 't']
    jump 582                                 []
label 582:
    $const584.1 = const(int, 1)              ['$const584.1']
    $586compare_op.2 = src_sz >= $const584.1 ['$586compare_op.2', '$const584.1', 'src_sz']
    bool588 = global(bool: <class 'bool'>)   ['bool588']
    $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None) ['$586compare_op.2', '$588pred', 'bool588']
    branch $588pred, 592, 626                ['$588pred']
label 592:
    mask = unary(fn=<built-in function invert>, value=ohexefef) ['mask', 'ohexefef']
    $602binary_and.4 = t & mask              ['$602binary_and.4', 'mask', 't']
    $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$604load_global.5']
    $606load_method.6 = getattr(value=$604load_global.5, attr=uint64) ['$604load_global.5', '$606load_method.6']
    $608load_global.7 = global(grab_byte: <intrinsic grab_byte>) ['$608load_global.7']
    $const614.10 = const(int, 0)             ['$const614.10']
    $616binary_add.11 = boffset + $const614.10 ['$616binary_add.11', '$const614.10', 'boffset']
    $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None) ['$608load_global.7', '$616binary_add.11', '$618call_function.12', 'src']
    $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None) ['$606load_method.6', '$618call_function.12', '$620call_method.13']
    t = $602binary_and.4 | $620call_method.13 ['$602binary_and.4', '$620call_method.13', 't']
    jump 626                                 []
label 626:
    b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined) ['b', 'b.1', 't']
    v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined) ['b.1', 'v3', 'v3.1']
    $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>) ['$642load_global.6']
    $652call_function.11 = call $642load_global.6(v0, v1, v2, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None) ['$642load_global.6', '$652call_function.11', 'v0', 'v1', 'v2', 'v3.1']
    $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4) ['$652call_function.11', '$654unpack_sequence.16']
    $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>) ['$654unpack_sequence.12', '$654unpack_sequence.16']
    $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>) ['$654unpack_sequence.13', '$654unpack_sequence.16']
    $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>) ['$654unpack_sequence.14', '$654unpack_sequence.16']
    $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>) ['$654unpack_sequence.15', '$654unpack_sequence.16']
    v0.1 = $654unpack_sequence.12            ['$654unpack_sequence.12', 'v0.1']
    v1.1 = $654unpack_sequence.13            ['$654unpack_sequence.13', 'v1.1']
    v2.1 = $654unpack_sequence.14            ['$654unpack_sequence.14', 'v2.1']
    v3.2 = $654unpack_sequence.15            ['$654unpack_sequence.15', 'v3.2']
    v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined) ['b.1', 'v0.1', 'v0.2']
    v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined) ['ohexefef', 'v2.1', 'v2.2']
    $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>) ['$680load_global.23']
    $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None) ['$680load_global.23', '$690call_function.28', 'v0.2', 'v1.1', 'v2.2', 'v3.2']
    $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4) ['$690call_function.28', '$692unpack_sequence.33']
    $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>) ['$692unpack_sequence.29', '$692unpack_sequence.33']
    $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>) ['$692unpack_sequence.30', '$692unpack_sequence.33']
    $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>) ['$692unpack_sequence.31', '$692unpack_sequence.33']
    $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>) ['$692unpack_sequence.32', '$692unpack_sequence.33']
    v0.3 = $692unpack_sequence.29            ['$692unpack_sequence.29', 'v0.3']
    v1.2 = $692unpack_sequence.30            ['$692unpack_sequence.30', 'v1.2']
    v2.3 = $692unpack_sequence.31            ['$692unpack_sequence.31', 'v2.3']
    v3.3 = $692unpack_sequence.32            ['$692unpack_sequence.32', 'v3.3']
    $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>) ['$702load_global.34']
    $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None) ['$702load_global.34', '$712call_function.39', 'v0.3', 'v1.2', 'v2.3', 'v3.3']
    $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4) ['$712call_function.39', '$714unpack_sequence.44']
    $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>) ['$714unpack_sequence.40', '$714unpack_sequence.44']
    $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>) ['$714unpack_sequence.41', '$714unpack_sequence.44']
    $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>) ['$714unpack_sequence.42', '$714unpack_sequence.44']
    $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>) ['$714unpack_sequence.43', '$714unpack_sequence.44']
    v0.4 = $714unpack_sequence.40            ['$714unpack_sequence.40', 'v0.4']
    v1.3 = $714unpack_sequence.41            ['$714unpack_sequence.41', 'v1.3']
    v2.4 = $714unpack_sequence.42            ['$714unpack_sequence.42', 'v2.4']
    v3.4 = $714unpack_sequence.43            ['$714unpack_sequence.43', 'v3.4']
    $728binary_xor.47 = v0.4 ^ v1.3          ['$728binary_xor.47', 'v0.4', 'v1.3']
    $734binary_xor.50 = v2.4 ^ v3.4          ['$734binary_xor.50', 'v2.4', 'v3.4']
    t.1 = $728binary_xor.47 ^ $734binary_xor.50 ['$728binary_xor.47', '$734binary_xor.50', 't.1']
    $742return_value.53 = cast(value=t.1)    ['$742return_value.53', 't.1']
    return $742return_value.53               ['$742return_value.53']

DEBUG    2023-08-19 15:20:59,626: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:20:59,634: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,634: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,634: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,634: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,634: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,634: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,634: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,634: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,634: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,634: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,634: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,634: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,634: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,634: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,634: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,634: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,634: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,634: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,634: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,634: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,634: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,634: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,636: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,636: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,636: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,636: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,636: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,636: ==== SSA block analysis pass on 76
DEBUG    2023-08-19 15:20:59,636: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,636: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,636: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,636: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,636: ==== SSA block analysis pass on 84
DEBUG    2023-08-19 15:20:59,636: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,636: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,636: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,636: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,636: on stmt: idx = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,636: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,636: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,636: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,636: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,636: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,636: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $128call_function.18 = call $118load_global.13(v0, v1, v2, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,636: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,636: on stmt: v0 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,636: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,636: on stmt: v2 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,636: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,636: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,636: on stmt: v0 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,636: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,636: ==== SSA block analysis pass on 150
DEBUG    2023-08-19 15:20:59,636: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,636: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,636: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,636: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,636: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,636: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,636: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,636: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,636: ==== SSA block analysis pass on 186
DEBUG    2023-08-19 15:20:59,636: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,636: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,636: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,636: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,636: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,636: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,636: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,636: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,636: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,636: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,636: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,636: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,636: ==== SSA block analysis pass on 238
DEBUG    2023-08-19 15:20:59,636: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,636: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,636: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,636: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,636: ==== SSA block analysis pass on 248
DEBUG    2023-08-19 15:20:59,636: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,636: on stmt: jmp = const(int, 40)
DEBUG    2023-08-19 15:20:59,636: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,636: on stmt: $260binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,636: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,636: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,636: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,636: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,636: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,636: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,636: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,636: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,636: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,636: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,644: ==== SSA block analysis pass on 300
DEBUG    2023-08-19 15:20:59,644: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,644: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,644: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,644: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,644: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,644: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,644: ==== SSA block analysis pass on 310
DEBUG    2023-08-19 15:20:59,644: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,644: on stmt: jmp = const(int, 32)
DEBUG    2023-08-19 15:20:59,644: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,644: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,644: on stmt: $322binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,644: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,644: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,644: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,644: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,644: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,644: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,644: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,644: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,644: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,646: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,646: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,646: ==== SSA block analysis pass on 362
DEBUG    2023-08-19 15:20:59,646: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,646: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,646: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,646: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,646: ==== SSA block analysis pass on 372
DEBUG    2023-08-19 15:20:59,646: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,646: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,646: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,646: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,646: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,646: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,646: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,646: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,646: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,646: ==== SSA block analysis pass on 394
DEBUG    2023-08-19 15:20:59,646: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,646: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,646: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,646: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,646: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,646: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,646: ==== SSA block analysis pass on 396
DEBUG    2023-08-19 15:20:59,646: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,646: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,646: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,646: on stmt: jmp = i * $const400.3
DEBUG    2023-08-19 15:20:59,646: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,646: on stmt: $414binary_lshift.9 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,646: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,646: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,646: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,646: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,646: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp
DEBUG    2023-08-19 15:20:59,646: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,646: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,646: ==== SSA block analysis pass on 458
DEBUG    2023-08-19 15:20:59,646: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,646: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,646: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,646: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,646: ==== SSA block analysis pass on 468
DEBUG    2023-08-19 15:20:59,646: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,646: on stmt: jmp = const(int, 16)
DEBUG    2023-08-19 15:20:59,646: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,646: on stmt: $480binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,646: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,646: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,646: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,646: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,646: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,646: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,646: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,646: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,646: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,646: ==== SSA block analysis pass on 520
DEBUG    2023-08-19 15:20:59,646: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,646: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,646: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,646: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,646: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,654: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,654: ==== SSA block analysis pass on 530
DEBUG    2023-08-19 15:20:59,654: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,654: on stmt: jmp = const(int, 8)
DEBUG    2023-08-19 15:20:59,654: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,654: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,654: on stmt: $542binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,654: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,654: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,654: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,654: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,654: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,654: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,654: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,655: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,655: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,655: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,655: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,655: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,655: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,655: ==== SSA block analysis pass on 582
DEBUG    2023-08-19 15:20:59,655: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,655: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,655: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,655: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,656: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,656: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,656: ==== SSA block analysis pass on 592
DEBUG    2023-08-19 15:20:59,656: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,656: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,656: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,656: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,656: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,656: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,657: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,657: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,657: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,657: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,657: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,657: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,657: ==== SSA block analysis pass on 626
DEBUG    2023-08-19 15:20:59,657: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333ECBB0>
DEBUG    2023-08-19 15:20:59,657: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,657: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,658: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,658: on stmt: $652call_function.11 = call $642load_global.6(v0, v1, v2, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,658: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,658: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,658: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,658: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,658: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,658: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,658: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,658: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,659: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,659: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,659: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,659: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,659: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,659: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,659: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,659: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,660: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,660: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,660: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,660: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,660: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,660: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,661: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,661: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,661: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,661: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,661: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,661: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,661: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,661: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,661: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,662: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,662: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,662: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,662: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,662: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,662: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,662: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,668: defs defaultdict(<class 'list'>,
            {'$106inplace_subtract.9': [<numba.core.ir.Assign object at 0x0000025F3352EA90>],
             '$114inplace_xor.12': [<numba.core.ir.Assign object at 0x0000025F3352EF10>],
             '$118load_global.13': [<numba.core.ir.Assign object at 0x0000025F33531160>],
             '$128call_function.18': [<numba.core.ir.Assign object at 0x0000025F335317C0>],
             '$130unpack_sequence.19': [<numba.core.ir.Assign object at 0x0000025F33531A60>],
             '$130unpack_sequence.20': [<numba.core.ir.Assign object at 0x0000025F33531B80>],
             '$130unpack_sequence.21': [<numba.core.ir.Assign object at 0x0000025F33531CA0>],
             '$130unpack_sequence.22': [<numba.core.ir.Assign object at 0x0000025F33531DC0>],
             '$130unpack_sequence.23': [<numba.core.ir.Assign object at 0x0000025F33531910>],
             '$144inplace_xor.26': [<numba.core.ir.Assign object at 0x0000025F33532490>],
             '$150load_global.0': [<numba.core.ir.Assign object at 0x0000025F3352EC40>],
             '$152load_method.1': [<numba.core.ir.Assign object at 0x0000025F335314C0>],
             '$168load_global.7': [<numba.core.ir.Assign object at 0x0000025F33532FA0>],
             '$170load_method.8': [<numba.core.ir.Assign object at 0x0000025F33530160>],
             '$182compare_op.13': [<numba.core.ir.Assign object at 0x0000025F335309D0>],
             '$184pred': [<numba.core.ir.Assign object at 0x0000025F33530C40>],
             '$18load_global.7': [<numba.core.ir.Assign object at 0x0000025F33418F40>],
             '$190load_global.1': [<numba.core.ir.Assign object at 0x0000025F33530FA0>],
             '$192load_method.2': [<numba.core.ir.Assign object at 0x0000025F33534160>],
             '$198binary_lshift.5': [<numba.core.ir.Assign object at 0x0000025F33534550>],
             '$200call_method.6': [<numba.core.ir.Assign object at 0x0000025F33534730>],
             '$20load_method.8': [<numba.core.ir.Assign object at 0x0000025F3343D6D0>],
             '$210binary_and.10': [<numba.core.ir.Assign object at 0x0000025F33534D30>],
             '$212load_global.11': [<numba.core.ir.Assign object at 0x0000025F33534E80>],
             '$214load_method.12': [<numba.core.ir.Assign object at 0x0000025F33536040>],
             '$216load_global.13': [<numba.core.ir.Assign object at 0x0000025F335361C0>],
             '$224binary_add.17': [<numba.core.ir.Assign object at 0x0000025F33536730>],
             '$226call_function.18': [<numba.core.ir.Assign object at 0x0000025F335368E0>],
             '$228call_method.19': [<numba.core.ir.Assign object at 0x0000025F33536A90>],
             '$232binary_lshift.21': [<numba.core.ir.Assign object at 0x0000025F33536CD0>],
             '$242compare_op.2': [<numba.core.ir.Assign object at 0x0000025F33537070>],
             '$244pred': [<numba.core.ir.Assign object at 0x0000025F335372E0>],
             '$24call_method.10': [<numba.core.ir.Assign object at 0x0000025F3343DC10>],
             '$252load_global.1': [<numba.core.ir.Assign object at 0x0000025F33537760>],
             '$254load_method.2': [<numba.core.ir.Assign object at 0x0000025F335378E0>],
             '$260binary_lshift.5': [<numba.core.ir.Assign object at 0x0000025F33537CD0>],
             '$262call_method.6': [<numba.core.ir.Assign object at 0x0000025F33537EB0>],
             '$272binary_and.10': [<numba.core.ir.Assign object at 0x0000025F33539490>],
             '$274load_global.11': [<numba.core.ir.Assign object at 0x0000025F335395E0>],
             '$276load_method.12': [<numba.core.ir.Assign object at 0x0000025F33539760>],
             '$278load_global.13': [<numba.core.ir.Assign object at 0x0000025F335398E0>],
             '$286binary_add.17': [<numba.core.ir.Assign object at 0x0000025F33539E50>],
             '$288call_function.18': [<numba.core.ir.Assign object at 0x0000025F3353C040>],
             '$290call_method.19': [<numba.core.ir.Assign object at 0x0000025F3353C1F0>],
             '$294binary_lshift.21': [<numba.core.ir.Assign object at 0x0000025F3353C430>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F333EC340>],
             '$304compare_op.2': [<numba.core.ir.Assign object at 0x0000025F3353C6A0>],
             '$306pred': [<numba.core.ir.Assign object at 0x0000025F3353C940>],
             '$314load_global.1': [<numba.core.ir.Assign object at 0x0000025F3353CDC0>],
             '$316load_method.2': [<numba.core.ir.Assign object at 0x0000025F3353CF40>],
             '$322binary_lshift.5': [<numba.core.ir.Assign object at 0x0000025F3353D370>],
             '$324call_method.6': [<numba.core.ir.Assign object at 0x0000025F3353D550>],
             '$32load_global.13': [<numba.core.ir.Assign object at 0x0000025F334DF820>],
             '$334binary_and.10': [<numba.core.ir.Assign object at 0x0000025F3353DAF0>],
             '$336load_global.11': [<numba.core.ir.Assign object at 0x0000025F3353DC40>],
             '$338load_method.12': [<numba.core.ir.Assign object at 0x0000025F3353DDC0>],
             '$340load_global.13': [<numba.core.ir.Assign object at 0x0000025F3353DF40>],
             '$348binary_add.17': [<numba.core.ir.Assign object at 0x0000025F3353F4F0>],
             '$34load_method.14': [<numba.core.ir.Assign object at 0x0000025F334DF340>],
             '$350call_function.18': [<numba.core.ir.Assign object at 0x0000025F3353F6A0>],
             '$352call_method.19': [<numba.core.ir.Assign object at 0x0000025F3353F850>],
             '$356binary_lshift.21': [<numba.core.ir.Assign object at 0x0000025F3353FA90>],
             '$366compare_op.2': [<numba.core.ir.Assign object at 0x0000025F3353FD00>],
             '$368pred': [<numba.core.ir.Assign object at 0x0000025F3353FFA0>],
             '$374load_global.1': [<numba.core.ir.Assign object at 0x0000025F33541340>],
             '$376load_method.2': [<numba.core.ir.Assign object at 0x0000025F335414C0>],
             '$380call_method.4': [<numba.core.ir.Assign object at 0x0000025F33541850>],
             '$382inplace_and.5': [<numba.core.ir.Assign object at 0x0000025F33541970>],
             '$386load_global.6': [<numba.core.ir.Assign object at 0x0000025F33541B80>],
             '$38call_method.16': [<numba.core.ir.Assign object at 0x0000025F334DFD90>],
             '$390call_function.8': [<numba.core.ir.Assign object at 0x0000025F33541EE0>],
             '$392get_iter.9': [<numba.core.ir.Assign object at 0x0000025F33543040>],
             '$394for_iter.1': [<numba.core.ir.Assign object at 0x0000025F33543370>],
             '$394for_iter.2': [<numba.core.ir.Assign object at 0x0000025F33543490>],
             '$394for_iter.3': [<numba.core.ir.Assign object at 0x0000025F335435B0>],
             '$406load_global.5': [<numba.core.ir.Assign object at 0x0000025F33543EE0>],
             '$408load_method.6': [<numba.core.ir.Assign object at 0x0000025F335450A0>],
             '$414binary_lshift.9': [<numba.core.ir.Assign object at 0x0000025F33545490>],
             '$416call_method.10': [<numba.core.ir.Assign object at 0x0000025F33545670>],
             '$426binary_and.14': [<numba.core.ir.Assign object at 0x0000025F33545C10>],
             '$428load_global.15': [<numba.core.ir.Assign object at 0x0000025F33545D60>],
             '$430load_method.16': [<numba.core.ir.Assign object at 0x0000025F33545EE0>],
             '$432load_global.17': [<numba.core.ir.Assign object at 0x0000025F335480A0>],
             '$440binary_add.21': [<numba.core.ir.Assign object at 0x0000025F335485B0>],
             '$442call_function.22': [<numba.core.ir.Assign object at 0x0000025F33548760>],
             '$444call_method.23': [<numba.core.ir.Assign object at 0x0000025F33548910>],
             '$448binary_lshift.25': [<numba.core.ir.Assign object at 0x0000025F33548B50>],
             '$462compare_op.2': [<numba.core.ir.Assign object at 0x0000025F33548970>],
             '$464pred': [<numba.core.ir.Assign object at 0x0000025F3354A040>],
             '$46load_global.19': [<numba.core.ir.Assign object at 0x0000025F33528280>],
             '$472load_global.1': [<numba.core.ir.Assign object at 0x0000025F3354A4C0>],
             '$474load_method.2': [<numba.core.ir.Assign object at 0x0000025F3354A640>],
             '$480binary_lshift.5': [<numba.core.ir.Assign object at 0x0000025F3354AA30>],
             '$482call_method.6': [<numba.core.ir.Assign object at 0x0000025F3354AC10>],
             '$48load_method.20': [<numba.core.ir.Assign object at 0x0000025F33528400>],
             '$492binary_and.10': [<numba.core.ir.Assign object at 0x0000025F3354C1F0>],
             '$494load_global.11': [<numba.core.ir.Assign object at 0x0000025F3354C340>],
             '$496load_method.12': [<numba.core.ir.Assign object at 0x0000025F3354C4C0>],
             '$498load_global.13': [<numba.core.ir.Assign object at 0x0000025F3354C640>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000025F33433EE0>],
             '$506binary_add.17': [<numba.core.ir.Assign object at 0x0000025F3354CBB0>],
             '$508call_function.18': [<numba.core.ir.Assign object at 0x0000025F3354CD60>],
             '$510call_method.19': [<numba.core.ir.Assign object at 0x0000025F3354CF10>],
             '$514binary_lshift.21': [<numba.core.ir.Assign object at 0x0000025F3354F190>],
             '$524compare_op.2': [<numba.core.ir.Assign object at 0x0000025F3354F400>],
             '$526pred': [<numba.core.ir.Assign object at 0x0000025F3354F6A0>],
             '$52call_method.22': [<numba.core.ir.Assign object at 0x0000025F33528790>],
             '$534load_global.1': [<numba.core.ir.Assign object at 0x0000025F3354FB20>],
             '$536load_method.2': [<numba.core.ir.Assign object at 0x0000025F3354FCA0>],
             '$542binary_lshift.5': [<numba.core.ir.Assign object at 0x0000025F3354D0D0>],
             '$544call_method.6': [<numba.core.ir.Assign object at 0x0000025F3354D2B0>],
             '$554binary_and.10': [<numba.core.ir.Assign object at 0x0000025F3354D850>],
             '$556load_global.11': [<numba.core.ir.Assign object at 0x0000025F3354D9A0>],
             '$558load_method.12': [<numba.core.ir.Assign object at 0x0000025F3354DB20>],
             '$560load_global.13': [<numba.core.ir.Assign object at 0x0000025F3354DCA0>],
             '$568binary_add.17': [<numba.core.ir.Assign object at 0x0000025F33552250>],
             '$570call_function.18': [<numba.core.ir.Assign object at 0x0000025F33552400>],
             '$572call_method.19': [<numba.core.ir.Assign object at 0x0000025F335525B0>],
             '$576binary_lshift.21': [<numba.core.ir.Assign object at 0x0000025F335527F0>],
             '$586compare_op.2': [<numba.core.ir.Assign object at 0x0000025F33552A60>],
             '$588pred': [<numba.core.ir.Assign object at 0x0000025F33552D00>],
             '$602binary_and.4': [<numba.core.ir.Assign object at 0x0000025F33551550>],
             '$604load_global.5': [<numba.core.ir.Assign object at 0x0000025F335516A0>],
             '$606load_method.6': [<numba.core.ir.Assign object at 0x0000025F33551820>],
             '$608load_global.7': [<numba.core.ir.Assign object at 0x0000025F335519A0>],
             '$60load_global.25': [<numba.core.ir.Assign object at 0x0000025F33528C40>],
             '$616binary_add.11': [<numba.core.ir.Assign object at 0x0000025F33551F10>],
             '$618call_function.12': [<numba.core.ir.Assign object at 0x0000025F33557100>],
             '$620call_method.13': [<numba.core.ir.Assign object at 0x0000025F335572B0>],
             '$62load_method.26': [<numba.core.ir.Assign object at 0x0000025F33528DC0>],
             '$642load_global.6': [<numba.core.ir.Assign object at 0x0000025F33557D60>],
             '$652call_function.11': [<numba.core.ir.Assign object at 0x0000025F33559400>],
             '$654unpack_sequence.12': [<numba.core.ir.Assign object at 0x0000025F335596A0>],
             '$654unpack_sequence.13': [<numba.core.ir.Assign object at 0x0000025F335597C0>],
             '$654unpack_sequence.14': [<numba.core.ir.Assign object at 0x0000025F335598E0>],
             '$654unpack_sequence.15': [<numba.core.ir.Assign object at 0x0000025F33559A00>],
             '$654unpack_sequence.16': [<numba.core.ir.Assign object at 0x0000025F33559550>],
             '$66call_method.28': [<numba.core.ir.Assign object at 0x0000025F3352F190>],
             '$680load_global.23': [<numba.core.ir.Assign object at 0x0000025F3355B9A0>],
             '$690call_function.28': [<numba.core.ir.Assign object at 0x0000025F3355E040>],
             '$692unpack_sequence.29': [<numba.core.ir.Assign object at 0x0000025F3355E2E0>],
             '$692unpack_sequence.30': [<numba.core.ir.Assign object at 0x0000025F3355E400>],
             '$692unpack_sequence.31': [<numba.core.ir.Assign object at 0x0000025F3355E520>],
             '$692unpack_sequence.32': [<numba.core.ir.Assign object at 0x0000025F3355E640>],
             '$692unpack_sequence.33': [<numba.core.ir.Assign object at 0x0000025F3355E190>],
             '$702load_global.34': [<numba.core.ir.Assign object at 0x0000025F3355EBE0>],
             '$712call_function.39': [<numba.core.ir.Assign object at 0x0000025F33556280>],
             '$714unpack_sequence.40': [<numba.core.ir.Assign object at 0x0000025F33556520>],
             '$714unpack_sequence.41': [<numba.core.ir.Assign object at 0x0000025F33556640>],
             '$714unpack_sequence.42': [<numba.core.ir.Assign object at 0x0000025F33556760>],
             '$714unpack_sequence.43': [<numba.core.ir.Assign object at 0x0000025F33556880>],
             '$714unpack_sequence.44': [<numba.core.ir.Assign object at 0x0000025F335563D0>],
             '$728binary_xor.47': [<numba.core.ir.Assign object at 0x0000025F335640D0>],
             '$734binary_xor.50': [<numba.core.ir.Assign object at 0x0000025F33564490>],
             '$742return_value.53': [<numba.core.ir.Assign object at 0x0000025F335649A0>],
             '$80compare_op.2': [<numba.core.ir.Assign object at 0x0000025F3352F790>],
             '$82pred': [<numba.core.ir.Assign object at 0x0000025F3352FA00>],
             '$84load_global.0': [<numba.core.ir.Assign object at 0x0000025F3352FC40>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x0000025F33433DC0>],
             '$98inplace_add.6': [<numba.core.ir.Assign object at 0x0000025F3352E5B0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x0000025F333F59D0>],
             '$const104.8': [<numba.core.ir.Assign object at 0x0000025F3352E8E0>],
             '$const154.2': [<numba.core.ir.Assign object at 0x0000025F33532370>],
             '$const162.5': [<numba.core.ir.Assign object at 0x0000025F33532B80>],
             '$const172.9': [<numba.core.ir.Assign object at 0x0000025F335302E0>],
             '$const180.12': [<numba.core.ir.Assign object at 0x0000025F33530820>],
             '$const22.9': [<numba.core.ir.Assign object at 0x0000025F3343D7C0>],
             '$const222.16': [<numba.core.ir.Assign object at 0x0000025F33536580>],
             '$const240.1': [<numba.core.ir.Assign object at 0x0000025F33536370>],
             '$const284.16': [<numba.core.ir.Assign object at 0x0000025F33539CA0>],
             '$const302.1': [<numba.core.ir.Assign object at 0x0000025F33539B20>],
             '$const346.16': [<numba.core.ir.Assign object at 0x0000025F3353F340>],
             '$const36.15': [<numba.core.ir.Assign object at 0x0000025F334DFB80>],
             '$const364.1': [<numba.core.ir.Assign object at 0x0000025F3353FC70>],
             '$const378.3': [<numba.core.ir.Assign object at 0x0000025F33541640>],
             '$const388.7': [<numba.core.ir.Assign object at 0x0000025F33541D00>],
             '$const400.3': [<numba.core.ir.Assign object at 0x0000025F33543B20>],
             '$const460.1': [<numba.core.ir.Assign object at 0x0000025F33543C10>],
             '$const50.21': [<numba.core.ir.Assign object at 0x0000025F33528580>],
             '$const504.16': [<numba.core.ir.Assign object at 0x0000025F3354CA00>],
             '$const522.1': [<numba.core.ir.Assign object at 0x0000025F3354C880>],
             '$const566.16': [<numba.core.ir.Assign object at 0x0000025F335520A0>],
             '$const584.1': [<numba.core.ir.Assign object at 0x0000025F3354DEE0>],
             '$const614.10': [<numba.core.ir.Assign object at 0x0000025F33551D60>],
             '$const64.27': [<numba.core.ir.Assign object at 0x0000025F33528F40>],
             '$const78.1': [<numba.core.ir.Assign object at 0x0000025F33429640>],
             '$const96.5': [<numba.core.ir.Assign object at 0x0000025F3352E400>],
             '$phi394.0': [<numba.core.ir.Assign object at 0x0000025F33541250>],
             '$phi396.1': [<numba.core.ir.Assign object at 0x0000025F335432B0>],
             'b': [<numba.core.ir.Assign object at 0x0000025F333F5EE0>],
             'b.1': [<numba.core.ir.Assign object at 0x0000025F33557610>],
             'boffset': [<numba.core.ir.Assign object at 0x0000025F33532D30>],
             'bool184': [<numba.core.ir.Assign object at 0x0000025F33530B20>],
             'bool244': [<numba.core.ir.Assign object at 0x0000025F335371C0>],
             'bool306': [<numba.core.ir.Assign object at 0x0000025F3353C820>],
             'bool368': [<numba.core.ir.Assign object at 0x0000025F3353FE80>],
             'bool464': [<numba.core.ir.Assign object at 0x0000025F33548EE0>],
             'bool526': [<numba.core.ir.Assign object at 0x0000025F3354F580>],
             'bool588': [<numba.core.ir.Assign object at 0x0000025F33552BE0>],
             'bool82': [<numba.core.ir.Assign object at 0x0000025F3352F8E0>],
             'i': [<numba.core.ir.Assign object at 0x0000025F33543880>],
             'idx': [<numba.core.ir.Assign object at 0x0000025F3352F520>,
                     <numba.core.ir.Assign object at 0x0000025F3352E670>],
             'jmp': [<numba.core.ir.Assign object at 0x0000025F33530730>,
                     <numba.core.ir.Assign object at 0x0000025F33537520>,
                     <numba.core.ir.Assign object at 0x0000025F3353CB80>,
                     <numba.core.ir.Assign object at 0x0000025F33543CD0>,
                     <numba.core.ir.Assign object at 0x0000025F3354A280>,
                     <numba.core.ir.Assign object at 0x0000025F3354F8E0>],
             'k0': [<numba.core.ir.Assign object at 0x0000025F33429F10>],
             'k1': [<numba.core.ir.Assign object at 0x0000025F33429940>],
             'mask': [<numba.core.ir.Assign object at 0x0000025F33534820>,
                      <numba.core.ir.Assign object at 0x0000025F33537FA0>,
                      <numba.core.ir.Assign object at 0x0000025F3353D640>,
                      <numba.core.ir.Assign object at 0x0000025F33545760>,
                      <numba.core.ir.Assign object at 0x0000025F3354AD00>,
                      <numba.core.ir.Assign object at 0x0000025F3354D3A0>,
                      <numba.core.ir.Assign object at 0x0000025F335510A0>],
             'mi': [<numba.core.ir.Assign object at 0x0000025F3352E0A0>],
             'ohexefef': [<numba.core.ir.Assign object at 0x0000025F335304F0>],
             'src': [<numba.core.ir.Assign object at 0x0000025F33429460>],
             'src_sz': [<numba.core.ir.Assign object at 0x0000025F33429820>,
                        <numba.core.ir.Assign object at 0x0000025F3352EB50>],
             't': [<numba.core.ir.Assign object at 0x0000025F33532850>,
                   <numba.core.ir.Assign object at 0x0000025F33536E50>,
                   <numba.core.ir.Assign object at 0x0000025F3353C5B0>,
                   <numba.core.ir.Assign object at 0x0000025F3353FC10>,
                   <numba.core.ir.Assign object at 0x0000025F33541A30>,
                   <numba.core.ir.Assign object at 0x0000025F33548CD0>,
                   <numba.core.ir.Assign object at 0x0000025F3354F310>,
                   <numba.core.ir.Assign object at 0x0000025F33552970>,
                   <numba.core.ir.Assign object at 0x0000025F335573D0>],
             't.1': [<numba.core.ir.Assign object at 0x0000025F33564610>],
             'v0': [<numba.core.ir.Assign object at 0x0000025F3343DC40>,
                    <numba.core.ir.Assign object at 0x0000025F33531E20>,
                    <numba.core.ir.Assign object at 0x0000025F33532550>],
             'v0.1': [<numba.core.ir.Assign object at 0x0000025F33559AC0>],
             'v0.2': [<numba.core.ir.Assign object at 0x0000025F3355B250>],
             'v0.3': [<numba.core.ir.Assign object at 0x0000025F3355E700>],
             'v0.4': [<numba.core.ir.Assign object at 0x0000025F33556940>],
             'v1': [<numba.core.ir.Assign object at 0x0000025F334DFEB0>,
                    <numba.core.ir.Assign object at 0x0000025F33531F10>],
             'v1.1': [<numba.core.ir.Assign object at 0x0000025F33559BE0>],
             'v1.2': [<numba.core.ir.Assign object at 0x0000025F3355E820>],
             'v1.3': [<numba.core.ir.Assign object at 0x0000025F33556A60>],
             'v2': [<numba.core.ir.Assign object at 0x0000025F335288B0>,
                    <numba.core.ir.Assign object at 0x0000025F33531FD0>],
             'v2.1': [<numba.core.ir.Assign object at 0x0000025F33559D00>],
             'v2.2': [<numba.core.ir.Assign object at 0x0000025F3355B730>],
             'v2.3': [<numba.core.ir.Assign object at 0x0000025F3355E940>],
             'v2.4': [<numba.core.ir.Assign object at 0x0000025F33556B80>],
             'v3': [<numba.core.ir.Assign object at 0x0000025F3352F2B0>,
                    <numba.core.ir.Assign object at 0x0000025F3352EFD0>,
                    <numba.core.ir.Assign object at 0x0000025F335320D0>],
             'v3.1': [<numba.core.ir.Assign object at 0x0000025F33557AF0>],
             'v3.2': [<numba.core.ir.Assign object at 0x0000025F33559E20>],
             'v3.3': [<numba.core.ir.Assign object at 0x0000025F3355EA60>],
             'v3.4': [<numba.core.ir.Assign object at 0x0000025F33556CA0>]})
DEBUG    2023-08-19 15:20:59,669: SSA violators {'jmp', 'v2', 'v0', 'idx', 'src_sz', 'mask', 'v1', 'v3', 't'}
DEBUG    2023-08-19 15:20:59,669: Fix SSA violator on var jmp
DEBUG    2023-08-19 15:20:59,669: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,669: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,669: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,669: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,669: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,669: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,669: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,670: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,670: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,670: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,670: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,670: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,670: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,670: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,670: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,670: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,670: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,671: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,671: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,671: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,671: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,671: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,671: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,671: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,671: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,671: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,671: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,671: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,671: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,671: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,672: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,672: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,672: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,672: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,672: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,672: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,672: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,672: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,672: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,672: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,672: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,672: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,672: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,672: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,673: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,673: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,673: on stmt: idx = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,673: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,673: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,673: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,673: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,673: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,673: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,673: on stmt: $128call_function.18 = call $118load_global.13(v0, v1, v2, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,673: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,673: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,673: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,673: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,674: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,674: on stmt: v0 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,674: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,674: on stmt: v2 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,674: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,674: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,674: on stmt: v0 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,674: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,674: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,674: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,674: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,674: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,674: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,674: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,674: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,675: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,675: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,675: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,675: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,675: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,675: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,675: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,675: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,675: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,675: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,675: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,675: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,675: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,675: first assign: jmp
DEBUG    2023-08-19 15:20:59,676: replaced with: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,676: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,676: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,676: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,676: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,676: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,676: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,676: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,676: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,676: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,676: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,676: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,677: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,677: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,677: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,677: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,677: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,677: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,677: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,677: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,677: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,677: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,677: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,677: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,677: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,677: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,678: on stmt: jmp = const(int, 40)
DEBUG    2023-08-19 15:20:59,678: replaced with: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,678: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,678: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,678: on stmt: $260binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,678: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,678: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,678: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,678: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,678: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,678: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,678: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,678: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,678: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,679: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,679: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,679: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,679: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,679: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,679: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,679: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,679: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,679: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,679: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,679: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,679: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,679: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,680: on stmt: jmp = const(int, 32)
DEBUG    2023-08-19 15:20:59,680: replaced with: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,680: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,680: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,680: on stmt: $322binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,680: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,680: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,680: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,680: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,680: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,680: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,680: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,680: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,680: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,681: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,681: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,681: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,681: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,681: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,681: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,681: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,681: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,681: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,681: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,681: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,681: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,681: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,681: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,682: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,682: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,682: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,682: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,682: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,682: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,682: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,682: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,682: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,682: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,682: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,682: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,682: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,682: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,683: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,683: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,683: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,683: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,683: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,683: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,683: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,683: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,683: on stmt: jmp = i * $const400.3
DEBUG    2023-08-19 15:20:59,683: replaced with: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,683: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,683: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,683: on stmt: $414binary_lshift.9 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,683: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,683: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,684: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,684: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,684: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,684: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,684: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,684: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,684: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,684: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp
DEBUG    2023-08-19 15:20:59,684: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,684: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,684: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,684: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,684: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,684: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,685: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,685: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,685: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,685: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,685: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,685: on stmt: jmp = const(int, 16)
DEBUG    2023-08-19 15:20:59,685: replaced with: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,685: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,685: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,685: on stmt: $480binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,685: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,685: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,685: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,686: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,686: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,686: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,686: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,686: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,686: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,686: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,686: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,686: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,686: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,686: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,686: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,687: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,687: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,687: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,687: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,687: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,687: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,687: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,687: on stmt: jmp = const(int, 8)
DEBUG    2023-08-19 15:20:59,687: replaced with: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,687: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,687: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,687: on stmt: $542binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,688: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,688: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,688: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,688: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,688: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,688: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,688: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,688: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,688: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,688: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,688: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,688: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,689: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,689: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,689: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,689: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,689: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,689: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,689: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,689: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,689: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,689: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,689: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,689: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,690: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,690: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,690: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,690: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,690: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,690: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,690: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,690: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,690: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,690: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,690: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,690: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,691: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,691: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,691: on stmt: $652call_function.11 = call $642load_global.6(v0, v1, v2, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,691: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,691: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,691: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,691: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,691: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,691: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,692: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,692: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,692: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,692: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,692: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,692: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,692: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,692: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,692: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,692: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,692: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,692: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,692: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,692: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,693: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,693: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,693: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,693: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,693: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,693: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,693: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,693: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,693: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,693: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,693: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,693: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,693: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,693: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,694: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,694: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,694: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,694: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,694: Replaced assignments: defaultdict(<class 'list'>,
            {186: [<numba.core.ir.Assign object at 0x0000025F334E6970>],
             248: [<numba.core.ir.Assign object at 0x0000025F334E6460>],
             310: [<numba.core.ir.Assign object at 0x0000025F332B9880>],
             396: [<numba.core.ir.Assign object at 0x0000025F332B95E0>],
             468: [<numba.core.ir.Assign object at 0x0000025F332B9760>],
             530: [<numba.core.ir.Assign object at 0x0000025F332B9430>]})
DEBUG    2023-08-19 15:20:59,694: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,694: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,694: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,694: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,694: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,694: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,694: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,694: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,695: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,695: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,695: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,695: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,695: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,695: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,695: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,695: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,695: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,695: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,695: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,695: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,696: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,696: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,696: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,696: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,696: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,696: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,696: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,696: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,696: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,696: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,696: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,696: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,697: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,697: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,697: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,697: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,697: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,697: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,697: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,697: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,697: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,697: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,697: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,697: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,697: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,697: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,698: on stmt: idx = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,698: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,698: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,698: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,698: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,698: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,698: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,698: on stmt: $128call_function.18 = call $118load_global.13(v0, v1, v2, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,698: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,698: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,698: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,698: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,699: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,699: on stmt: v0 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,699: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,699: on stmt: v2 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,699: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,699: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,699: on stmt: v0 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,699: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,699: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,699: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,699: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,699: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,699: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,699: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,700: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,700: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,700: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,700: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,700: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,700: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,700: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,700: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,700: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,700: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,700: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,700: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,700: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,700: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,701: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,701: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,701: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,701: find_def var='jmp' stmt=$198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,701: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,701: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,701: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,701: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,701: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,701: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,701: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,701: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,701: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,702: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,702: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,702: find_def var='jmp' stmt=$232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,702: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,702: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,702: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,702: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,702: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,702: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,702: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,702: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,702: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,702: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,703: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,703: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,703: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,704: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,704: on stmt: $260binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,704: find_def var='jmp' stmt=$260binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,704: replaced with: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,704: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,704: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,704: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,704: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,704: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,704: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,704: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,704: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,704: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,704: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,704: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,704: find_def var='jmp' stmt=$294binary_lshift.21 = $290call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,704: replaced with: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,704: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,704: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,705: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,705: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,705: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,705: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,705: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,705: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,705: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,705: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,705: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,705: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,705: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,705: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,705: on stmt: $322binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,705: find_def var='jmp' stmt=$322binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,706: replaced with: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,706: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,706: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,706: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,706: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,706: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,706: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,706: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,706: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,706: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,706: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,706: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,707: find_def var='jmp' stmt=$356binary_lshift.21 = $352call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,707: replaced with: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,707: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,707: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,707: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,707: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,707: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,707: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,707: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,707: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,707: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,707: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,707: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,707: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,707: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,707: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,707: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,707: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,707: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,707: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,707: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,707: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,707: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,707: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,707: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,707: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,707: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,707: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,707: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,707: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,707: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,707: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,707: on stmt: $414binary_lshift.9 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,707: find_def var='jmp' stmt=$414binary_lshift.9 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,707: replaced with: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,707: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,707: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,707: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,707: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,707: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp
DEBUG    2023-08-19 15:20:59,707: find_def var='jmp' stmt=$448binary_lshift.25 = $444call_method.23 << jmp
DEBUG    2023-08-19 15:20:59,707: replaced with: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,707: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,707: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,707: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,707: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,707: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,707: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,707: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,707: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,707: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,707: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,707: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,707: on stmt: $480binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,707: find_def var='jmp' stmt=$480binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,707: replaced with: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,707: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,707: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,707: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,707: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,707: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,707: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,707: find_def var='jmp' stmt=$514binary_lshift.21 = $510call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,707: replaced with: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,707: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,707: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,707: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,707: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,707: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,707: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,707: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,707: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,707: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,707: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,707: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,714: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,714: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,714: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,714: on stmt: $542binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,714: find_def var='jmp' stmt=$542binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,714: replaced with: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,714: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,714: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,714: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,714: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,714: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,714: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,714: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,714: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,714: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,714: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,714: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,714: find_def var='jmp' stmt=$576binary_lshift.21 = $572call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,716: replaced with: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,716: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,716: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,716: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,716: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,716: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,716: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,716: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,716: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,716: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,716: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,716: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,716: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,716: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,716: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,716: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,716: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,716: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,716: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334E6760>
DEBUG    2023-08-19 15:20:59,716: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,716: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,716: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $652call_function.11 = call $642load_global.6(v0, v1, v2, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,716: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,716: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,716: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,716: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,716: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,716: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,716: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,716: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,716: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,716: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,716: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,716: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,716: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,716: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,716: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,716: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,716: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,716: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,716: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,716: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,716: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,716: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,716: Fix SSA violator on var v2
DEBUG    2023-08-19 15:20:59,716: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,716: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,716: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,716: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,716: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,716: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,716: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,716: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,716: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,716: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,716: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,716: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,716: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,716: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,716: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,716: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,716: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,716: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,716: first assign: v2
DEBUG    2023-08-19 15:20:59,716: replaced with: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,716: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,716: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,716: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,716: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,716: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,716: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,716: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,716: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,716: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,716: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,716: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,716: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,724: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,724: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,724: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,724: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,724: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,724: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,724: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,724: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,724: on stmt: idx = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,724: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,724: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,724: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,724: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,724: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,724: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,724: on stmt: $128call_function.18 = call $118load_global.13(v0, v1, v2, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,724: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,724: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,724: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,724: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,724: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,727: on stmt: v0 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,727: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,727: on stmt: v2 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,727: replaced with: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,727: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,727: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,727: on stmt: v0 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,727: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,727: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,727: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,727: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,727: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,727: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,727: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,727: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,727: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,727: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,727: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,727: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,727: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,727: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,727: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,727: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,727: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,727: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,727: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,727: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,727: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,727: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,727: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,727: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,727: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,727: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,727: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,727: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,727: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,727: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,727: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,727: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,727: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,727: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,727: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,727: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,727: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,727: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,727: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,727: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,727: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,727: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,727: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,727: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,727: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,727: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,727: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,727: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,727: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,727: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,727: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,727: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,727: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,735: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,735: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,735: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,735: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,735: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,735: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,735: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,735: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,735: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,735: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,735: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,735: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,735: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,735: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,735: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,735: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,735: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,735: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,737: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,737: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,737: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,737: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,737: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,737: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,737: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,737: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,737: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,737: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,737: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,737: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,737: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,737: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,737: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,737: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,737: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,737: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,737: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,737: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,737: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,737: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,737: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,737: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,737: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,737: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,737: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,737: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,737: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,737: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,737: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,737: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,737: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,737: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,737: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,737: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,737: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,737: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,737: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,737: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,737: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,737: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,737: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,737: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,737: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,737: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,737: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,737: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,737: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,737: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,737: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,737: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,737: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,737: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,737: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,737: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,737: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,737: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,737: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,737: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,737: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,737: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,737: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,737: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,737: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,737: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,737: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,737: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,737: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,737: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,737: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,737: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,745: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,745: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,745: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,745: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,745: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,745: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,745: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,745: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,745: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,745: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,745: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,745: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,745: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,745: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,745: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,745: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,745: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,745: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,745: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,745: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,745: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,745: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334E68E0>
DEBUG    2023-08-19 15:20:59,745: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,745: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,745: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,745: on stmt: $652call_function.11 = call $642load_global.6(v0, v1, v2, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,745: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,745: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,747: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,747: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,747: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,747: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,747: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,747: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,747: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,747: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,747: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,747: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,747: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,747: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,747: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,747: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,747: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,747: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,747: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,747: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,747: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,747: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,747: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,747: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,747: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,747: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F334E6D60>],
             84: [<numba.core.ir.Assign object at 0x0000025F334E6EE0>]})
DEBUG    2023-08-19 15:20:59,747: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,747: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,747: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,747: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,747: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,747: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,747: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,747: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,747: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,747: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,747: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,747: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,747: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,747: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,747: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,747: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,747: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,747: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,747: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,747: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,747: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,747: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,747: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,747: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,747: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,747: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,747: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,747: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,747: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,747: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,747: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,747: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,747: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,747: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,755: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,755: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,755: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,755: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,755: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,755: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,755: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,755: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,755: on stmt: idx = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,755: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,755: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,755: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,755: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,755: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,755: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,755: on stmt: $128call_function.18 = call $118load_global.13(v0, v1, v2, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,755: find_def var='v2' stmt=$128call_function.18 = call $118load_global.13(v0, v1, v2, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: find_def_from_top label 84
DEBUG    2023-08-19 15:20:59,757: idom 76 from label 84
DEBUG    2023-08-19 15:20:59,757: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,757: find_def_from_top label 76
DEBUG    2023-08-19 15:20:59,757: insert phi node v2.6 = phi(incoming_values=[], incoming_blocks=[]) at 76
DEBUG    2023-08-19 15:20:59,757: find_def_from_bottom label 0
DEBUG    2023-08-19 15:20:59,757: incoming_def v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,757: find_def_from_bottom label 84
DEBUG    2023-08-19 15:20:59,757: incoming_def v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,757: replaced with: $128call_function.18 = call $118load_global.13(v0, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,757: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,757: on stmt: v0 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,757: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,757: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,757: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,757: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,757: on stmt: v0 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,757: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,757: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,757: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,757: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,757: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,757: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,757: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,757: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,757: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,757: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,757: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,757: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,757: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,757: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,757: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,757: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,757: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,757: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,757: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,757: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,757: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,757: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,757: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,757: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,757: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,757: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,757: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,757: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,757: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,757: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,757: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,757: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,757: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,757: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,757: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,757: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,757: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,757: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,757: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,757: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,757: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,757: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,757: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,765: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,765: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,765: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,765: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,765: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,765: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,765: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,765: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,765: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,765: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,765: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,765: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,765: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,765: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,765: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,765: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,765: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,765: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,765: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,767: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,767: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,767: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,767: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,767: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,767: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,767: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,767: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,767: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,767: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,767: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,767: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,767: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,767: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,767: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,767: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,767: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,767: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,767: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,767: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,767: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,767: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,767: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,767: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,767: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,767: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,767: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,767: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,767: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,767: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,767: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,767: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,767: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,767: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,767: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,767: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,767: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,767: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,767: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,767: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,767: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,767: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,767: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,767: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,767: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,767: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,767: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,767: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,767: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,767: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,767: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,767: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,767: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,767: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,767: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,767: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,767: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,767: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,767: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,767: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,767: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,767: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,767: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,767: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,767: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,767: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,767: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,767: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,767: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,767: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,775: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,775: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,775: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,775: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,775: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,775: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,775: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,775: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,775: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,775: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,775: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,775: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,775: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,775: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,775: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,775: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,775: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,775: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,775: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,775: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,775: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,775: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,775: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,775: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,775: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,775: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,775: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,777: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,777: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,777: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,777: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,777: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,777: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,777: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3323A0D0>
DEBUG    2023-08-19 15:20:59,777: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,777: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,777: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $652call_function.11 = call $642load_global.6(v0, v1, v2, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: find_def var='v2' stmt=$652call_function.11 = call $642load_global.6(v0, v1, v2, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2, hashing.py:612), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: find_def_from_top label 626
DEBUG    2023-08-19 15:20:59,777: idom 582 from label 626
DEBUG    2023-08-19 15:20:59,777: find_def_from_bottom label 582
DEBUG    2023-08-19 15:20:59,777: find_def_from_top label 582
DEBUG    2023-08-19 15:20:59,777: idom 520 from label 582
DEBUG    2023-08-19 15:20:59,777: find_def_from_bottom label 520
DEBUG    2023-08-19 15:20:59,777: find_def_from_top label 520
DEBUG    2023-08-19 15:20:59,777: idom 458 from label 520
DEBUG    2023-08-19 15:20:59,777: find_def_from_bottom label 458
DEBUG    2023-08-19 15:20:59,777: find_def_from_top label 458
DEBUG    2023-08-19 15:20:59,777: idom 362 from label 458
DEBUG    2023-08-19 15:20:59,777: find_def_from_bottom label 362
DEBUG    2023-08-19 15:20:59,777: find_def_from_top label 362
DEBUG    2023-08-19 15:20:59,777: idom 300 from label 362
DEBUG    2023-08-19 15:20:59,777: find_def_from_bottom label 300
DEBUG    2023-08-19 15:20:59,777: find_def_from_top label 300
DEBUG    2023-08-19 15:20:59,777: idom 238 from label 300
DEBUG    2023-08-19 15:20:59,777: find_def_from_bottom label 238
DEBUG    2023-08-19 15:20:59,777: find_def_from_top label 238
DEBUG    2023-08-19 15:20:59,777: idom 150 from label 238
DEBUG    2023-08-19 15:20:59,777: find_def_from_bottom label 150
DEBUG    2023-08-19 15:20:59,777: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,777: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,777: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,777: replaced with: $652call_function.11 = call $642load_global.6(v0, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,777: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,777: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,777: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,777: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,777: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,777: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,777: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,777: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,777: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,777: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,777: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,777: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,777: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,777: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,777: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,777: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,777: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,777: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,777: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,777: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,777: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,777: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,777: Fix SSA violator on var v0
DEBUG    2023-08-19 15:20:59,777: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,777: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,777: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,777: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,777: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,777: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,777: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,777: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,777: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,777: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,777: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,777: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,777: first assign: v0
DEBUG    2023-08-19 15:20:59,777: replaced with: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,777: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,777: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,777: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,777: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,777: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,777: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,785: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,785: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,785: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,785: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,785: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,785: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,785: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,785: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,785: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,785: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,785: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,785: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,785: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,785: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,785: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,785: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,785: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,785: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,787: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,787: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,787: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,787: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,787: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,787: on stmt: idx = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,787: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,787: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,787: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,787: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,787: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,787: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $128call_function.18 = call $118load_global.13(v0, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,787: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,787: on stmt: v0 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,787: replaced with: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,787: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,787: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,787: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,787: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,787: on stmt: v0 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,787: replaced with: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,787: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,787: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,787: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,787: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,787: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,787: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,787: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,787: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,787: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,787: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,787: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,787: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,787: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,787: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,787: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,787: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,787: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,787: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,787: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,787: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,787: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,787: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,787: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,787: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,787: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,787: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,787: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,787: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,787: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,787: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,787: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,787: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,787: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,787: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,787: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,787: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,787: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,787: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,787: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,787: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,787: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,787: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,787: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,787: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,787: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,787: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,787: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,787: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,787: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,787: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,787: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,787: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,787: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,787: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,787: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,787: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,787: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,795: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,795: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,795: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,795: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,795: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,795: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,795: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,795: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,795: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,795: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,795: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,795: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,795: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,795: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,795: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,795: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,795: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,795: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,795: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,795: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,795: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,795: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,795: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,795: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,795: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,795: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,797: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,797: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,797: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,797: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,797: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,797: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,797: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,797: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,797: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,797: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,797: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,797: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,797: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,797: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,797: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,797: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,797: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,797: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,797: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,797: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,797: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,797: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,797: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,797: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,797: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,797: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,797: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,797: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,797: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,797: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,797: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,797: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,797: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,797: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,797: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,797: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,797: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,797: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,797: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,797: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,797: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,797: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,797: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,797: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,797: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,797: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,797: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,797: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,797: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,797: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,797: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,797: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,797: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,797: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,797: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,797: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,797: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,797: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,797: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,797: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,797: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,797: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,797: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,797: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,797: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,797: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,797: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,797: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,797: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,797: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,797: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,797: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,797: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,805: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,805: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,805: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,805: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,805: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,805: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,805: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,805: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BB1F0>
DEBUG    2023-08-19 15:20:59,805: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,805: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,805: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,805: on stmt: $652call_function.11 = call $642load_global.6(v0, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,805: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,805: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,805: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,805: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,805: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,805: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,805: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,805: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,807: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,807: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,807: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,807: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,807: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,807: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,807: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,807: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,807: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,807: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,807: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,807: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,807: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,807: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,807: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,807: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,807: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,807: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,807: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,807: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,807: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F331BBC10>],
             84: [<numba.core.ir.Assign object at 0x0000025F332B9850>,
                  <numba.core.ir.Assign object at 0x0000025F332B9D30>]})
DEBUG    2023-08-19 15:20:59,807: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,807: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,807: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,807: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,807: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,807: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,807: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,807: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,807: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,807: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,807: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,807: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,807: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,807: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,807: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,807: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,807: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,807: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,807: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,807: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,807: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,807: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,807: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,807: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,807: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,807: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,807: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,807: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,807: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,807: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,807: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,807: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,807: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,807: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,807: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,807: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,807: on stmt: idx = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,807: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,807: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,807: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,807: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,815: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,816: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,816: on stmt: $128call_function.18 = call $118load_global.13(v0, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,816: find_def var='v0' stmt=$128call_function.18 = call $118load_global.13(v0, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,816: find_def_from_top label 84
DEBUG    2023-08-19 15:20:59,816: idom 76 from label 84
DEBUG    2023-08-19 15:20:59,816: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,816: find_def_from_top label 76
DEBUG    2023-08-19 15:20:59,816: insert phi node v0.7 = phi(incoming_values=[], incoming_blocks=[]) at 76
DEBUG    2023-08-19 15:20:59,816: find_def_from_bottom label 0
DEBUG    2023-08-19 15:20:59,816: incoming_def v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,816: find_def_from_bottom label 84
DEBUG    2023-08-19 15:20:59,816: incoming_def v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,816: replaced with: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,816: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,816: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,816: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,816: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,816: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,816: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,818: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,818: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,818: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,818: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,818: find_def var='v0' stmt=$144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,818: replaced with: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,818: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,818: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,818: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,818: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,818: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,818: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,818: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,818: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,818: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,818: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,818: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,818: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,818: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,818: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,818: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,818: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,818: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,818: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,818: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,818: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,818: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,820: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,820: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,820: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,820: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,820: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,820: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,820: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,820: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,820: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,820: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,820: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,820: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,820: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,821: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,821: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,821: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,821: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,821: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,821: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,821: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,821: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,821: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,821: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,821: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,822: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,822: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,822: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,822: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,822: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,822: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,822: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,822: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,822: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,822: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,822: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,823: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,823: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,823: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,823: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,823: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,823: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,823: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,823: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,823: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,823: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,823: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,823: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,824: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,824: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,824: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,824: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,824: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,824: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,824: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,824: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,824: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,824: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,825: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,825: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,825: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,825: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,825: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,825: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,825: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,825: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,825: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,825: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,825: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,826: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,826: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,826: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,826: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,826: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,826: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,826: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,826: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,826: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,826: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,826: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,826: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,827: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,827: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,827: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,827: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,827: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,827: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,827: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,827: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,827: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,827: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,827: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,827: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,828: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,828: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,828: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,828: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,828: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,828: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,828: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,828: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,828: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,828: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,828: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,828: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,829: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,829: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,829: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,829: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,829: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,829: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,829: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,829: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,829: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,829: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,829: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,830: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,830: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,830: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,830: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,830: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,830: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,830: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,830: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,830: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,830: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,830: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,830: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,830: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,831: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,831: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,831: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,831: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,831: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,831: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,831: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,831: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,831: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,831: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,832: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,832: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,832: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,832: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,832: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,832: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,832: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,832: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,832: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,832: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,832: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,832: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,833: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,833: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,833: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,833: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,833: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,833: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,833: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,833: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,833: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,833: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,833: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,833: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,834: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,834: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,834: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,834: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,834: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,834: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,834: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,834: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,834: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,834: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,834: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,835: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,835: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,835: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,835: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,835: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,835: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,835: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,835: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,835: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,836: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,836: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,836: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,836: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,836: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,836: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,836: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,836: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,836: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331E9AC0>
DEBUG    2023-08-19 15:20:59,836: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,837: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,837: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,837: on stmt: $652call_function.11 = call $642load_global.6(v0, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,837: find_def var='v0' stmt=$652call_function.11 = call $642load_global.6(v0, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0, hashing.py:610), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,837: find_def_from_top label 626
DEBUG    2023-08-19 15:20:59,837: idom 582 from label 626
DEBUG    2023-08-19 15:20:59,837: find_def_from_bottom label 582
DEBUG    2023-08-19 15:20:59,838: find_def_from_top label 582
DEBUG    2023-08-19 15:20:59,838: idom 520 from label 582
DEBUG    2023-08-19 15:20:59,838: find_def_from_bottom label 520
DEBUG    2023-08-19 15:20:59,838: find_def_from_top label 520
DEBUG    2023-08-19 15:20:59,838: idom 458 from label 520
DEBUG    2023-08-19 15:20:59,838: find_def_from_bottom label 458
DEBUG    2023-08-19 15:20:59,838: find_def_from_top label 458
DEBUG    2023-08-19 15:20:59,838: idom 362 from label 458
DEBUG    2023-08-19 15:20:59,838: find_def_from_bottom label 362
DEBUG    2023-08-19 15:20:59,838: find_def_from_top label 362
DEBUG    2023-08-19 15:20:59,838: idom 300 from label 362
DEBUG    2023-08-19 15:20:59,838: find_def_from_bottom label 300
DEBUG    2023-08-19 15:20:59,839: find_def_from_top label 300
DEBUG    2023-08-19 15:20:59,839: idom 238 from label 300
DEBUG    2023-08-19 15:20:59,839: find_def_from_bottom label 238
DEBUG    2023-08-19 15:20:59,839: find_def_from_top label 238
DEBUG    2023-08-19 15:20:59,839: idom 150 from label 238
DEBUG    2023-08-19 15:20:59,839: find_def_from_bottom label 150
DEBUG    2023-08-19 15:20:59,839: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,839: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,839: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,839: replaced with: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,839: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,839: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,840: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,840: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,840: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,840: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,840: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,840: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,840: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,840: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,840: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,840: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,841: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,841: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,841: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,841: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,841: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,841: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,841: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,841: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,841: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,841: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,841: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,842: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,842: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,842: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,842: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,842: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,842: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,842: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,842: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,842: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,842: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,842: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,843: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,843: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,843: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,843: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,843: Fix SSA violator on var idx
DEBUG    2023-08-19 15:20:59,843: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,843: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,843: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,843: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,843: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,843: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,843: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,844: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,844: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,844: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,844: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,844: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,844: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,844: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,844: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,844: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,844: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,844: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,845: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,845: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,845: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,845: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,845: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,845: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,845: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,845: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,845: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,845: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,845: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,846: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,846: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,846: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,846: first assign: idx
DEBUG    2023-08-19 15:20:59,846: replaced with: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,846: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,846: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,846: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,846: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,846: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,847: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,847: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,847: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,847: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,847: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,847: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,847: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,847: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,847: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,847: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,847: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,847: on stmt: idx = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,848: replaced with: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,848: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,848: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,848: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,848: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,848: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,848: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,848: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,848: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,848: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,848: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,848: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,848: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,848: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,849: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,849: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,849: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,849: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,849: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,849: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,849: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,849: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,849: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,849: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,849: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,849: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,849: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,849: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,850: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,850: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,850: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,850: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,850: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,850: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,850: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,850: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,850: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,850: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,850: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,850: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,850: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,851: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,851: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,851: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,851: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,851: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,851: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,851: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,851: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,851: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,851: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,851: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,851: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,851: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,851: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,852: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,852: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,852: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,852: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,852: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,852: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,852: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,852: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,852: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,852: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,852: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,852: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,852: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,852: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,853: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,853: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,853: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,853: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,853: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,853: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,853: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,853: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,853: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,853: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,853: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,853: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,853: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,853: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,853: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,853: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,853: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,853: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,853: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,853: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,853: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,853: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,853: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,853: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,853: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,853: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,853: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,853: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,853: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,853: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,853: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,853: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,853: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,853: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,853: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,853: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,853: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,853: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,853: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,856: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,856: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,856: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,856: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,856: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,856: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,856: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,856: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,856: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,856: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,856: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,856: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,856: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,856: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,856: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,856: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,856: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,856: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,856: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,856: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,856: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,856: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,856: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,856: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,856: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,856: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,856: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,856: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,856: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,856: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,856: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,858: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,858: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,858: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,858: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,858: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,858: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,858: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,858: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,858: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,858: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,858: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,858: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,858: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,858: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,858: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,858: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,858: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,858: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,858: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,858: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,858: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,858: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,858: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,858: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,858: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,858: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,858: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,858: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,858: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,858: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,858: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,858: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,858: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,858: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,858: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,858: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,858: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,858: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,858: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,858: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,858: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,858: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,858: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,858: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,858: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,858: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,858: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,858: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,858: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,858: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,858: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,858: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,858: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,858: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,858: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,858: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,858: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,858: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,858: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,858: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,858: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,858: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,858: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F334DF550>
DEBUG    2023-08-19 15:20:59,858: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,858: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,858: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,858: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,858: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,858: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,858: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,858: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,858: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,858: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,858: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,858: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,858: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,858: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,866: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,866: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,866: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,866: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,866: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,866: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,866: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,866: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,866: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,866: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,866: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,866: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,866: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,866: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,866: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,866: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,866: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,866: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,866: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,866: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,866: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F334DF8E0>],
             84: [<numba.core.ir.Assign object at 0x0000025F334E6EB0>]})
DEBUG    2023-08-19 15:20:59,866: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,866: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,866: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,866: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,866: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,866: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,866: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,868: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,869: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,869: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,869: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,869: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,869: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,869: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,869: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,869: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,869: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,869: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,869: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,869: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,869: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,869: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,869: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,869: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,869: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,869: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,869: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,869: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,869: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,869: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,869: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,869: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,869: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,869: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,869: on stmt: mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: find_def var='idx' stmt=mi = call $84load_global.0(src, idx, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx, hashing.py:615)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: find_def_from_top label 84
DEBUG    2023-08-19 15:20:59,869: idom 76 from label 84
DEBUG    2023-08-19 15:20:59,869: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,869: find_def_from_top label 76
DEBUG    2023-08-19 15:20:59,869: insert phi node idx.2 = phi(incoming_values=[], incoming_blocks=[]) at 76
DEBUG    2023-08-19 15:20:59,869: find_def_from_bottom label 0
DEBUG    2023-08-19 15:20:59,869: incoming_def idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,869: find_def_from_bottom label 84
DEBUG    2023-08-19 15:20:59,869: incoming_def idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,869: replaced with: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,869: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,869: find_def var='idx' stmt=$98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,869: find_def_from_top label 84
DEBUG    2023-08-19 15:20:59,869: idom 76 from label 84
DEBUG    2023-08-19 15:20:59,869: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,869: replaced with: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,869: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,869: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,869: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,869: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,869: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,869: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,869: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,869: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,869: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,869: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,869: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,869: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,869: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,869: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,869: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,869: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,869: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,869: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,869: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,869: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,869: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,869: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,869: on stmt: boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,869: find_def var='idx' stmt=boffset = idx * $const162.5
DEBUG    2023-08-19 15:20:59,869: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,869: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,869: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,869: replaced with: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:20:59,877: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,877: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,877: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,877: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,877: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,877: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,877: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,877: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,877: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,877: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,877: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,877: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,877: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,877: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,877: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,877: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,877: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,877: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,877: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,877: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,877: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,877: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,877: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,877: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,877: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,877: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,877: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,879: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,879: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,879: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,879: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,879: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,879: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,879: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,879: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,879: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,879: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,879: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,879: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,879: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,879: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,879: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,879: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,879: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,879: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,879: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,879: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,879: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,879: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,879: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,879: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,879: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,879: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,879: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,879: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,879: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,879: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,879: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,879: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,879: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,879: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,879: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,879: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,879: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,879: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,879: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,879: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,879: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,879: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,879: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,879: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,879: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,879: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,879: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,879: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,879: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,879: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,879: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,879: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,879: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,879: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,879: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,879: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,887: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,887: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,887: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,887: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,887: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,887: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,887: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,887: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,887: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,887: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,887: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,887: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,887: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,887: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,887: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,887: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,887: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,887: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,887: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,887: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,887: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,887: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,887: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,887: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,889: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,889: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,889: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,889: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,889: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,889: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,889: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,889: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,889: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,889: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,889: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,889: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,889: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,889: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,889: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,889: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,889: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,889: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,889: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,889: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,889: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,889: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,889: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,889: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,889: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,889: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,889: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,889: Running <numba.core.ssa._FixSSAVars object at 0x0000025F330F0130>
DEBUG    2023-08-19 15:20:59,889: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,889: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,889: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,889: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,889: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,889: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,889: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,889: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,889: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,889: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,889: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,889: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,889: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,889: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,889: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,889: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,889: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,889: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,889: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,889: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,889: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,889: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,889: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,889: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,889: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,889: Fix SSA violator on var src_sz
DEBUG    2023-08-19 15:20:59,889: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,889: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,889: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,889: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,889: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,889: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,889: first assign: src_sz
DEBUG    2023-08-19 15:20:59,889: replaced with: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,889: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,889: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,889: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,889: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,889: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,889: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,889: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,889: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,889: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,889: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,889: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,889: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,889: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,889: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,897: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,897: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,897: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,897: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,897: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,897: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,897: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,897: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,897: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,897: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,897: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,897: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,897: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,897: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,897: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,897: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,897: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,897: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,897: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,897: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,897: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,897: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,897: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,897: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,897: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,897: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,897: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,897: on stmt: src_sz = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,899: replaced with: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,899: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,899: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,899: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,899: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,899: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,899: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,899: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,899: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,899: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,899: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,899: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,899: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,899: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,899: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,899: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,899: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,899: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:20:59,899: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,899: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,899: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,899: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,899: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,899: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,899: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,899: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,899: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,899: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,899: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,899: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,899: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,899: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,899: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,899: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,899: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,899: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,899: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,899: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,899: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,899: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,899: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,899: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,899: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,899: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,899: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,899: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,899: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,899: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,899: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,899: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,899: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,899: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,899: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,899: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,899: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,899: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,899: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,899: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,899: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,899: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,899: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,899: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,899: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,899: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,899: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,899: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,899: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,899: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,899: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,899: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,907: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,907: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,907: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,907: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,907: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,907: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,907: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,907: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,907: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,907: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,907: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,907: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,907: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,907: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,907: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,907: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,907: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,907: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,907: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,907: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,909: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,909: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,909: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,909: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,909: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,909: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,909: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,909: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,909: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,909: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,909: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,909: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,909: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,909: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,909: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,909: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,909: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,909: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,909: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,909: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,909: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,909: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,909: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,909: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,909: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,909: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,909: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,909: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,909: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,909: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,909: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,909: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,909: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,909: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,909: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,909: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,909: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,909: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,909: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,909: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,909: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,909: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,909: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,909: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,909: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,909: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,909: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,909: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,909: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,909: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,909: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,909: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,909: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,909: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,909: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,909: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,909: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,909: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,909: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,909: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,909: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,909: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,909: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,909: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,909: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,909: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,917: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,917: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,917: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,917: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,917: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,917: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,917: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,917: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,917: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,917: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,917: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,917: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,917: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,917: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,917: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,917: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,917: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,917: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,917: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,917: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BDFA0>
DEBUG    2023-08-19 15:20:59,917: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,919: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,919: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,919: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,919: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,919: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,919: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,919: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,919: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,919: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,919: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,919: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,919: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,919: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,919: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,919: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,919: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,919: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,919: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,919: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,919: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,919: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,919: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,919: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,919: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,919: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F331E9A90>],
             84: [<numba.core.ir.Assign object at 0x0000025F331BBEE0>]})
DEBUG    2023-08-19 15:20:59,919: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,919: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,919: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,919: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,919: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,919: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,919: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,919: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: find_def var='src_sz' stmt=$8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,919: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,919: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,919: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,919: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,919: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,919: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,919: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,919: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,919: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,919: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,919: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,919: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,919: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,919: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,919: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,919: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,919: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,919: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,919: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,919: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,919: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,919: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,919: on stmt: $80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,919: find_def var='src_sz' stmt=$80compare_op.2 = src_sz >= $const78.1
DEBUG    2023-08-19 15:20:59,919: find_def_from_top label 76
DEBUG    2023-08-19 15:20:59,919: insert phi node src_sz.2 = phi(incoming_values=[], incoming_blocks=[]) at 76
DEBUG    2023-08-19 15:20:59,919: find_def_from_bottom label 0
DEBUG    2023-08-19 15:20:59,919: incoming_def src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,919: find_def_from_bottom label 84
DEBUG    2023-08-19 15:20:59,919: incoming_def src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,919: replaced with: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:20:59,919: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,919: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,927: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,927: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,927: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,927: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,927: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,927: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,927: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,927: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,927: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,927: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,927: find_def var='src_sz' stmt=$106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,927: find_def_from_top label 84
DEBUG    2023-08-19 15:20:59,927: idom 76 from label 84
DEBUG    2023-08-19 15:20:59,927: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,927: replaced with: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,927: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,927: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,927: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,927: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,927: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,927: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,927: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,927: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,927: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,927: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,927: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,929: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,929: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,929: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,929: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,929: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,929: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,929: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,929: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,929: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,929: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,929: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,929: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:20:59,929: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,929: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,929: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,929: on stmt: $182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,929: find_def var='src_sz' stmt=$182compare_op.13 = src_sz >= $const180.12
DEBUG    2023-08-19 15:20:59,929: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,929: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,929: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,929: replaced with: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:20:59,929: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,929: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,929: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,929: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,929: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,929: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,929: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,929: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,929: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,929: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,929: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,929: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,929: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,929: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,929: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,929: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,929: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,929: on stmt: $242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,929: find_def var='src_sz' stmt=$242compare_op.2 = src_sz >= $const240.1
DEBUG    2023-08-19 15:20:59,929: find_def_from_top label 238
DEBUG    2023-08-19 15:20:59,929: idom 150 from label 238
DEBUG    2023-08-19 15:20:59,929: find_def_from_bottom label 150
DEBUG    2023-08-19 15:20:59,929: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,929: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,929: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,929: replaced with: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:20:59,929: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,929: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,929: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,929: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,929: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,929: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,929: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,929: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,929: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,929: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,929: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,929: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,929: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,929: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,929: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,929: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,929: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,929: on stmt: $304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,929: find_def var='src_sz' stmt=$304compare_op.2 = src_sz >= $const302.1
DEBUG    2023-08-19 15:20:59,929: find_def_from_top label 300
DEBUG    2023-08-19 15:20:59,929: idom 238 from label 300
DEBUG    2023-08-19 15:20:59,929: find_def_from_bottom label 238
DEBUG    2023-08-19 15:20:59,929: find_def_from_top label 238
DEBUG    2023-08-19 15:20:59,929: idom 150 from label 238
DEBUG    2023-08-19 15:20:59,929: find_def_from_bottom label 150
DEBUG    2023-08-19 15:20:59,929: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,929: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,929: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,929: replaced with: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:20:59,929: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,929: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,929: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,929: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,929: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,929: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,929: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,929: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,929: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,929: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,929: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,929: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,929: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,937: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,937: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,937: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,937: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,937: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,937: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,937: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,937: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,937: on stmt: $366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,937: find_def var='src_sz' stmt=$366compare_op.2 = src_sz >= $const364.1
DEBUG    2023-08-19 15:20:59,937: find_def_from_top label 362
DEBUG    2023-08-19 15:20:59,937: idom 300 from label 362
DEBUG    2023-08-19 15:20:59,937: find_def_from_bottom label 300
DEBUG    2023-08-19 15:20:59,937: find_def_from_top label 300
DEBUG    2023-08-19 15:20:59,937: idom 238 from label 300
DEBUG    2023-08-19 15:20:59,937: find_def_from_bottom label 238
DEBUG    2023-08-19 15:20:59,937: find_def_from_top label 238
DEBUG    2023-08-19 15:20:59,937: idom 150 from label 238
DEBUG    2023-08-19 15:20:59,937: find_def_from_bottom label 150
DEBUG    2023-08-19 15:20:59,937: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,937: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,937: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,937: replaced with: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:20:59,937: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,939: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,939: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,939: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,939: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,939: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,939: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,939: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,939: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,939: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,939: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,939: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,939: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,939: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,939: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,939: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,939: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,939: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,939: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,939: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,939: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,939: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,939: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,939: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,939: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,939: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,939: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,939: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,939: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,939: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,939: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,939: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,939: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,939: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,939: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,939: on stmt: $462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,939: find_def var='src_sz' stmt=$462compare_op.2 = src_sz >= $const460.1
DEBUG    2023-08-19 15:20:59,939: find_def_from_top label 458
DEBUG    2023-08-19 15:20:59,939: idom 362 from label 458
DEBUG    2023-08-19 15:20:59,939: find_def_from_bottom label 362
DEBUG    2023-08-19 15:20:59,939: find_def_from_top label 362
DEBUG    2023-08-19 15:20:59,939: idom 300 from label 362
DEBUG    2023-08-19 15:20:59,939: find_def_from_bottom label 300
DEBUG    2023-08-19 15:20:59,939: find_def_from_top label 300
DEBUG    2023-08-19 15:20:59,939: idom 238 from label 300
DEBUG    2023-08-19 15:20:59,939: find_def_from_bottom label 238
DEBUG    2023-08-19 15:20:59,939: find_def_from_top label 238
DEBUG    2023-08-19 15:20:59,939: idom 150 from label 238
DEBUG    2023-08-19 15:20:59,939: find_def_from_bottom label 150
DEBUG    2023-08-19 15:20:59,939: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,939: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,939: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,939: replaced with: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:20:59,939: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,939: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,939: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,939: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,939: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,939: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,939: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,939: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,939: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,939: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,939: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,939: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,939: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,939: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,939: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,939: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,939: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,939: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,939: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,939: on stmt: $524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,939: find_def var='src_sz' stmt=$524compare_op.2 = src_sz >= $const522.1
DEBUG    2023-08-19 15:20:59,939: find_def_from_top label 520
DEBUG    2023-08-19 15:20:59,939: idom 458 from label 520
DEBUG    2023-08-19 15:20:59,939: find_def_from_bottom label 458
DEBUG    2023-08-19 15:20:59,939: find_def_from_top label 458
DEBUG    2023-08-19 15:20:59,939: idom 362 from label 458
DEBUG    2023-08-19 15:20:59,939: find_def_from_bottom label 362
DEBUG    2023-08-19 15:20:59,939: find_def_from_top label 362
DEBUG    2023-08-19 15:20:59,947: idom 300 from label 362
DEBUG    2023-08-19 15:20:59,947: find_def_from_bottom label 300
DEBUG    2023-08-19 15:20:59,947: find_def_from_top label 300
DEBUG    2023-08-19 15:20:59,947: idom 238 from label 300
DEBUG    2023-08-19 15:20:59,947: find_def_from_bottom label 238
DEBUG    2023-08-19 15:20:59,947: find_def_from_top label 238
DEBUG    2023-08-19 15:20:59,947: idom 150 from label 238
DEBUG    2023-08-19 15:20:59,947: find_def_from_bottom label 150
DEBUG    2023-08-19 15:20:59,947: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,947: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,947: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,947: replaced with: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:20:59,947: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,947: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,947: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,947: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,947: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,947: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,947: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,947: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,947: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,947: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,947: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,947: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,949: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,949: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,949: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,949: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,949: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,949: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,949: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,949: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,949: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,949: on stmt: $586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,949: find_def var='src_sz' stmt=$586compare_op.2 = src_sz >= $const584.1
DEBUG    2023-08-19 15:20:59,949: find_def_from_top label 582
DEBUG    2023-08-19 15:20:59,949: idom 520 from label 582
DEBUG    2023-08-19 15:20:59,949: find_def_from_bottom label 520
DEBUG    2023-08-19 15:20:59,949: find_def_from_top label 520
DEBUG    2023-08-19 15:20:59,949: idom 458 from label 520
DEBUG    2023-08-19 15:20:59,949: find_def_from_bottom label 458
DEBUG    2023-08-19 15:20:59,949: find_def_from_top label 458
DEBUG    2023-08-19 15:20:59,949: idom 362 from label 458
DEBUG    2023-08-19 15:20:59,949: find_def_from_bottom label 362
DEBUG    2023-08-19 15:20:59,949: find_def_from_top label 362
DEBUG    2023-08-19 15:20:59,949: idom 300 from label 362
DEBUG    2023-08-19 15:20:59,949: find_def_from_bottom label 300
DEBUG    2023-08-19 15:20:59,949: find_def_from_top label 300
DEBUG    2023-08-19 15:20:59,949: idom 238 from label 300
DEBUG    2023-08-19 15:20:59,949: find_def_from_bottom label 238
DEBUG    2023-08-19 15:20:59,949: find_def_from_top label 238
DEBUG    2023-08-19 15:20:59,949: idom 150 from label 238
DEBUG    2023-08-19 15:20:59,949: find_def_from_bottom label 150
DEBUG    2023-08-19 15:20:59,949: find_def_from_top label 150
DEBUG    2023-08-19 15:20:59,949: idom 76 from label 150
DEBUG    2023-08-19 15:20:59,949: find_def_from_bottom label 76
DEBUG    2023-08-19 15:20:59,949: replaced with: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:20:59,949: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,949: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,949: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,949: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,949: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,949: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,949: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,949: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,949: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,949: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,949: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,949: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C7820>
DEBUG    2023-08-19 15:20:59,949: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,949: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,949: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,949: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,949: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,949: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,949: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,949: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,949: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,949: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,949: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,949: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,949: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,949: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,949: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,949: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,949: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,949: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,949: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,949: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,949: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,949: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,949: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,949: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,949: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,949: Fix SSA violator on var mask
DEBUG    2023-08-19 15:20:59,949: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,949: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,949: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,949: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,949: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,949: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,949: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,949: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,949: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,949: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,949: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,949: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,949: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,949: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,957: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,957: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,957: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,957: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,957: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,957: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,957: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,957: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,957: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,957: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,957: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,957: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,957: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,957: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,957: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,957: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,957: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,957: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,957: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,957: on stmt: src_sz.2 = phi(incoming_values=[Var(src_sz, hashing.py:609), Var(src_sz.1, hashing.py:619)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,957: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,957: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,957: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,957: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,957: on stmt: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:20:59,957: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,957: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,957: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,957: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,960: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,960: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,960: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,960: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,960: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,960: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,960: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,960: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,960: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,960: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,960: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,960: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,960: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,960: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,960: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,960: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,960: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,960: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,960: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,960: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,960: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,960: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,960: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,960: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,960: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:20:59,960: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,960: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,960: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,960: on stmt: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:20:59,960: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,960: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,960: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,960: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,960: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,960: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,960: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,960: first assign: mask
DEBUG    2023-08-19 15:20:59,960: replaced with: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,960: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,960: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,960: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,960: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,960: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,960: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,960: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,960: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,960: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,960: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,960: on stmt: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:20:59,960: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,960: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,960: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,960: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,960: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,960: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,960: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: mask = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,960: replaced with: mask.1 = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,960: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,960: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,960: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,960: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,960: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,960: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,960: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,960: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,960: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,960: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,960: on stmt: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:20:59,960: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,960: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,960: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,960: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,960: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,960: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,960: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: mask = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,960: replaced with: mask.2 = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,960: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,960: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,960: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,960: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,960: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,960: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,960: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,960: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,968: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,968: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,968: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,968: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,968: on stmt: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:20:59,968: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,968: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,968: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,968: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,968: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,968: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,968: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,968: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,968: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,968: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,968: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,968: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,968: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,968: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,968: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,968: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,968: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,968: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,968: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,970: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,970: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,970: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,970: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,970: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,970: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,970: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,970: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,970: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,970: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,970: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: mask = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,970: replaced with: mask.3 = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,970: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,970: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,970: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,970: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,970: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,970: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,970: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,970: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,970: on stmt: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:20:59,970: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,970: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,970: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,970: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,970: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,970: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: mask = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,970: replaced with: mask.4 = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:20:59,970: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,970: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,970: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:20:59,970: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:20:59,970: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:20:59,970: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:20:59,970: on stmt: jump 520
DEBUG    2023-08-19 15:20:59,970: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:20:59,970: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:20:59,970: on stmt: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:20:59,970: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:20:59,970: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:20:59,970: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,970: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,970: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:20:59,970: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: mask = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,970: replaced with: mask.5 = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:20:59,970: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,970: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,970: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:20:59,970: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:20:59,970: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:20:59,970: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:20:59,970: on stmt: jump 582
DEBUG    2023-08-19 15:20:59,970: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:20:59,970: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:20:59,970: on stmt: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:20:59,970: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:20:59,970: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:20:59,970: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: mask = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,970: replaced with: mask.6 = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:20:59,970: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:20:59,970: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,970: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:20:59,970: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:20:59,970: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:20:59,970: on stmt: jump 626
DEBUG    2023-08-19 15:20:59,970: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:20:59,970: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333EC820>
DEBUG    2023-08-19 15:20:59,970: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,970: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,970: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,970: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:20:59,970: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,970: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,970: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:20:59,970: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:20:59,970: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:20:59,970: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:20:59,978: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,978: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,978: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,978: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,978: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:20:59,978: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,978: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,978: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,978: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,978: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:20:59,978: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:20:59,978: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:20:59,978: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:20:59,978: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,978: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,978: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:20:59,978: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,978: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,978: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,978: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,978: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:20:59,978: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:20:59,978: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:20:59,978: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:20:59,978: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:20:59,978: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:20:59,978: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:20:59,978: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:20:59,978: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:20:59,980: Replaced assignments: defaultdict(<class 'list'>,
            {186: [<numba.core.ir.Assign object at 0x0000025F334E6F10>],
             248: [<numba.core.ir.Assign object at 0x0000025F332B9400>],
             310: [<numba.core.ir.Assign object at 0x0000025F332B9070>],
             396: [<numba.core.ir.Assign object at 0x0000025F331E9AC0>],
             468: [<numba.core.ir.Assign object at 0x0000025F333A1370>],
             530: [<numba.core.ir.Assign object at 0x0000025F333A11C0>],
             592: [<numba.core.ir.Assign object at 0x0000025F333F5C10>]})
DEBUG    2023-08-19 15:20:59,980: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:20:59,980: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,980: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:20:59,980: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:20:59,980: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:20:59,980: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:20:59,980: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:20:59,980: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:20:59,980: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:20:59,980: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:20:59,980: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:20:59,980: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:20:59,980: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:20:59,980: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:20:59,980: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:20:59,980: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:20:59,980: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:20:59,980: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,980: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:20:59,980: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,980: on stmt: src_sz.2 = phi(incoming_values=[Var(src_sz, hashing.py:609), Var(src_sz.1, hashing.py:619)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,980: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,980: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,980: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:20:59,980: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:20:59,980: on stmt: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:20:59,980: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:20:59,980: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:20:59,980: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,980: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:20:59,980: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:20:59,980: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,980: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:20:59,980: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:20:59,980: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,980: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:20:59,980: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,980: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:20:59,980: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:20:59,980: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:20:59,980: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:20:59,980: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:20:59,980: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:20:59,980: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:20:59,980: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,980: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:20:59,980: on stmt: jump 76
DEBUG    2023-08-19 15:20:59,980: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:20:59,980: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,980: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:20:59,980: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:20:59,980: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:20:59,980: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:20:59,980: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:20:59,980: on stmt: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:20:59,980: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:20:59,980: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:20:59,980: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,980: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:20:59,980: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:20:59,980: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:20:59,980: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,980: find_def var='mask' stmt=$210binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,980: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,980: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,980: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:20:59,980: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:20:59,980: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,980: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:20:59,980: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:20:59,980: on stmt: jump 238
DEBUG    2023-08-19 15:20:59,988: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:20:59,988: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,988: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:20:59,988: on stmt: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:20:59,988: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,988: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,988: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:20:59,988: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:20:59,988: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,988: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:20:59,988: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,988: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,988: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:20:59,988: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,988: on stmt: mask.1 = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:20:59,988: on stmt: $272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,988: find_def var='mask' stmt=$272binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,988: replaced with: $272binary_and.10 = t & mask.1
DEBUG    2023-08-19 15:20:59,988: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,990: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:20:59,990: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:20:59,990: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:20:59,990: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:20:59,990: on stmt: jump 300
DEBUG    2023-08-19 15:20:59,990: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:20:59,990: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,990: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:20:59,990: on stmt: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:20:59,990: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:20:59,990: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:20:59,990: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,990: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:20:59,990: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,990: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:20:59,990: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: mask.2 = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:20:59,990: on stmt: $334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,990: find_def var='mask' stmt=$334binary_and.10 = t & mask
DEBUG    2023-08-19 15:20:59,990: replaced with: $334binary_and.10 = t & mask.2
DEBUG    2023-08-19 15:20:59,990: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:20:59,990: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:20:59,990: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:20:59,990: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:20:59,990: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:20:59,990: on stmt: jump 362
DEBUG    2023-08-19 15:20:59,990: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:20:59,990: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,990: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:20:59,990: on stmt: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:20:59,990: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:20:59,990: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:20:59,990: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,990: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,990: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:20:59,990: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:20:59,990: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:20:59,990: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:20:59,990: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:20:59,990: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:20:59,990: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,990: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:20:59,990: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,990: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:20:59,990: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,990: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:20:59,990: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:20:59,990: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:20:59,990: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:20:59,990: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,990: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:20:59,990: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:20:59,990: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:20:59,990: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:20:59,990: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:20:59,990: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,990: on stmt: mask.3 = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:20:59,990: on stmt: $426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,990: find_def var='mask' stmt=$426binary_and.14 = t & mask
DEBUG    2023-08-19 15:20:59,990: replaced with: $426binary_and.14 = t & mask.3
DEBUG    2023-08-19 15:20:59,990: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,990: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:20:59,998: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:20:59,998: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:20:59,998: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,998: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,998: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:20:59,998: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:20:59,998: on stmt: jump 394
DEBUG    2023-08-19 15:20:59,998: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:20:59,998: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,998: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:20:59,998: on stmt: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:20:59,998: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:20:59,998: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:20:59,998: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:20:59,998: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:20:59,998: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:20:59,998: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:20:59,998: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:20:59,998: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:20:59,998: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:20:59,998: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,000: on stmt: mask.4 = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:21:00,000: on stmt: $492binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,000: find_def var='mask' stmt=$492binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,000: replaced with: $492binary_and.10 = t & mask.4
DEBUG    2023-08-19 15:21:00,000: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,000: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,000: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,000: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:21:00,000: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:21:00,000: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,000: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,000: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:21:00,000: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,000: on stmt: jump 520
DEBUG    2023-08-19 15:21:00,000: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:21:00,000: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:21:00,000: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:21:00,000: on stmt: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:21:00,000: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,000: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,000: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:21:00,000: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:21:00,000: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:21:00,000: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,000: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,000: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,000: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:21:00,000: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,000: on stmt: mask.5 = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:21:00,000: on stmt: $554binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,003: find_def var='mask' stmt=$554binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,003: replaced with: $554binary_and.10 = t & mask.5
DEBUG    2023-08-19 15:21:00,003: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,003: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,003: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,003: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:21:00,003: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:21:00,003: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,003: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,004: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:21:00,004: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,004: on stmt: jump 582
DEBUG    2023-08-19 15:21:00,004: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:21:00,004: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:21:00,004: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:21:00,004: on stmt: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:21:00,004: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,004: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,004: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:21:00,004: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:21:00,004: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:21:00,005: on stmt: mask.6 = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:21:00,005: on stmt: $602binary_and.4 = t & mask
DEBUG    2023-08-19 15:21:00,005: find_def var='mask' stmt=$602binary_and.4 = t & mask
DEBUG    2023-08-19 15:21:00,005: replaced with: $602binary_and.4 = t & mask.6
DEBUG    2023-08-19 15:21:00,005: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,005: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,005: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,005: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:21:00,005: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:21:00,005: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,005: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,006: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,006: on stmt: jump 626
DEBUG    2023-08-19 15:21:00,006: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:21:00,006: Running <numba.core.ssa._FixSSAVars object at 0x0000025F334DD970>
DEBUG    2023-08-19 15:21:00,006: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,006: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,006: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,006: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,006: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:21:00,006: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,006: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,006: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,007: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,007: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:21:00,007: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:21:00,007: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:21:00,007: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:21:00,007: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,007: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,007: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,007: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,007: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:21:00,007: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,007: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,008: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,008: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,008: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:21:00,008: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:21:00,008: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:21:00,008: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:21:00,008: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,008: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,008: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:21:00,008: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,009: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,009: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,009: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,009: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:21:00,009: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:21:00,009: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:21:00,009: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:21:00,009: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:21:00,009: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:21:00,009: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:21:00,009: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:21:00,010: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:21:00,010: Fix SSA violator on var v1
DEBUG    2023-08-19 15:21:00,010: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:00,010: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,010: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:21:00,010: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:21:00,010: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:21:00,010: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:21:00,010: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,010: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,010: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,010: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:21:00,011: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:21:00,011: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,011: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,011: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:21:00,011: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,011: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:21:00,011: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,011: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:21:00,011: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:21:00,011: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,011: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:21:00,011: first assign: v1
DEBUG    2023-08-19 15:21:00,012: replaced with: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:21:00,012: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,012: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:21:00,012: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:21:00,012: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,012: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:21:00,012: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,012: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:21:00,012: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:21:00,012: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,012: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:21:00,012: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:21:00,013: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,013: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:21:00,013: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,013: on stmt: src_sz.2 = phi(incoming_values=[Var(src_sz, hashing.py:609), Var(src_sz.1, hashing.py:619)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,013: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,013: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,013: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,013: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:21:00,013: on stmt: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:21:00,013: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,013: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,013: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:21:00,014: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:21:00,014: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,014: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:21:00,014: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,014: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:21:00,014: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,014: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:21:00,014: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:21:00,014: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,014: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:21:00,014: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,014: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:21:00,014: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,015: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,015: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:21:00,015: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,015: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,015: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,015: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,015: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:21:00,015: on stmt: v1 = $130unpack_sequence.20
DEBUG    2023-08-19 15:21:00,015: replaced with: v1.4 = $130unpack_sequence.20
DEBUG    2023-08-19 15:21:00,015: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:21:00,015: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:21:00,015: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,016: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:21:00,016: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,016: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:21:00,016: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,016: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,016: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,016: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:21:00,016: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,016: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,016: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:21:00,016: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,016: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,016: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:21:00,017: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,017: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:21:00,017: on stmt: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:21:00,017: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,017: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,017: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:21:00,017: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:21:00,017: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,017: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:21:00,017: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,017: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,017: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:21:00,017: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,018: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:21:00,018: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,018: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,018: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,018: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,018: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:21:00,018: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:21:00,018: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,018: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,018: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:21:00,018: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:21:00,018: on stmt: jump 238
DEBUG    2023-08-19 15:21:00,019: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:21:00,019: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,019: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:21:00,019: on stmt: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:21:00,019: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,019: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,019: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:21:00,019: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:21:00,019: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,019: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:21:00,019: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,019: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,019: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:21:00,020: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,020: on stmt: mask.1 = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:21:00,020: on stmt: $272binary_and.10 = t & mask.1
DEBUG    2023-08-19 15:21:00,020: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,020: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,020: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,020: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:21:00,020: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:21:00,020: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,020: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,020: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:21:00,020: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:21:00,021: on stmt: jump 300
DEBUG    2023-08-19 15:21:00,021: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:21:00,021: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,021: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:21:00,021: on stmt: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:21:00,021: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,021: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,021: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:21:00,021: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:21:00,021: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,021: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:21:00,021: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,021: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,022: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:21:00,022: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,022: on stmt: mask.2 = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:21:00,022: on stmt: $334binary_and.10 = t & mask.2
DEBUG    2023-08-19 15:21:00,022: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,022: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,022: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,022: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:21:00,022: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:21:00,022: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,022: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,023: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:21:00,023: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:21:00,023: on stmt: jump 362
DEBUG    2023-08-19 15:21:00,023: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:21:00,023: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,023: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:21:00,023: on stmt: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:21:00,023: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,023: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,023: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:21:00,023: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:21:00,023: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,023: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,024: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,024: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:21:00,024: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,024: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,024: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:21:00,024: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:21:00,024: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:21:00,024: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,024: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:21:00,024: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:21:00,024: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,024: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:21:00,024: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,025: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:21:00,025: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,025: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,025: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:21:00,025: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:21:00,025: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:21:00,025: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,025: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:21:00,025: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:21:00,025: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:21:00,025: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,025: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,025: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:21:00,026: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,026: on stmt: mask.3 = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:21:00,026: on stmt: $426binary_and.14 = t & mask.3
DEBUG    2023-08-19 15:21:00,026: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,026: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:21:00,026: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,026: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:21:00,026: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,026: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,026: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:21:00,026: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:21:00,026: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,027: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:21:00,027: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,027: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:21:00,027: on stmt: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:21:00,027: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,027: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,027: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:21:00,027: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:21:00,027: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,027: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:21:00,027: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,027: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,027: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:21:00,028: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,028: on stmt: mask.4 = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:21:00,028: on stmt: $492binary_and.10 = t & mask.4
DEBUG    2023-08-19 15:21:00,028: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,028: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,028: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,028: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:21:00,028: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:21:00,028: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,028: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,028: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:21:00,028: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,029: on stmt: jump 520
DEBUG    2023-08-19 15:21:00,029: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:21:00,029: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,029: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:21:00,029: on stmt: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:21:00,029: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,029: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,029: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:21:00,029: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:21:00,029: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,029: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,029: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,029: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,030: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:21:00,030: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,030: on stmt: mask.5 = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:21:00,030: on stmt: $554binary_and.10 = t & mask.5
DEBUG    2023-08-19 15:21:00,030: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,030: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,030: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,030: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:21:00,030: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:21:00,030: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,030: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,030: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:21:00,031: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,031: on stmt: jump 582
DEBUG    2023-08-19 15:21:00,031: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:21:00,031: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,031: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:21:00,031: on stmt: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:21:00,031: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,031: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,031: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:21:00,031: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:21:00,031: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,031: on stmt: mask.6 = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:21:00,031: on stmt: $602binary_and.4 = t & mask.6
DEBUG    2023-08-19 15:21:00,032: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,032: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,032: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,032: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:21:00,032: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:21:00,032: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,032: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,032: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,032: on stmt: jump 626
DEBUG    2023-08-19 15:21:00,032: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:21:00,032: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F333F51F0>
DEBUG    2023-08-19 15:21:00,032: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,033: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,033: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,033: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,033: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:21:00,033: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,033: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,033: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,033: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,033: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:21:00,033: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:21:00,033: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:21:00,033: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:21:00,034: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,034: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,034: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,034: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,034: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:21:00,034: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,034: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,034: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,034: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,034: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:21:00,034: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:21:00,034: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:21:00,034: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:21:00,035: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,035: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,035: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:21:00,035: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,035: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,035: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,035: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,035: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:21:00,035: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:21:00,035: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:21:00,036: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:21:00,036: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:21:00,036: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:21:00,036: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:21:00,036: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:21:00,036: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:21:00,036: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F333A1070>],
             84: [<numba.core.ir.Assign object at 0x0000025F333A1910>]})
DEBUG    2023-08-19 15:21:00,036: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:00,036: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,036: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:21:00,036: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:21:00,036: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:21:00,036: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:21:00,036: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,036: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,036: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,036: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:21:00,036: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:21:00,036: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,036: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,036: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:21:00,036: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,036: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:21:00,038: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,038: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:21:00,038: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:21:00,038: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,038: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:21:00,038: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,038: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:21:00,038: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:21:00,038: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,038: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:21:00,038: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,038: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:21:00,038: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:21:00,038: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,038: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:21:00,038: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:21:00,038: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,038: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:21:00,038: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,038: on stmt: src_sz.2 = phi(incoming_values=[Var(src_sz, hashing.py:609), Var(src_sz.1, hashing.py:619)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,040: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,040: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,040: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,040: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:21:00,040: on stmt: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:21:00,040: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:21:00,040: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:21:00,040: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,040: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:21:00,040: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:21:00,040: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,040: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:21:00,040: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:21:00,040: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,040: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:21:00,040: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,040: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:21:00,040: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: find_def var='v1' stmt=$128call_function.18 = call $118load_global.13(v0.7, v1, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: find_def_from_top label 84
DEBUG    2023-08-19 15:21:00,040: idom 76 from label 84
DEBUG    2023-08-19 15:21:00,040: find_def_from_bottom label 76
DEBUG    2023-08-19 15:21:00,040: find_def_from_top label 76
DEBUG    2023-08-19 15:21:00,040: insert phi node v1.5 = phi(incoming_values=[], incoming_blocks=[]) at 76
DEBUG    2023-08-19 15:21:00,040: find_def_from_bottom label 0
DEBUG    2023-08-19 15:21:00,040: incoming_def v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:21:00,040: find_def_from_bottom label 84
DEBUG    2023-08-19 15:21:00,040: incoming_def v1.4 = $130unpack_sequence.20
DEBUG    2023-08-19 15:21:00,040: replaced with: $128call_function.18 = call $118load_global.13(v0.7, v1.5, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:21:00,040: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,040: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:21:00,040: on stmt: v1.4 = $130unpack_sequence.20
DEBUG    2023-08-19 15:21:00,040: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:21:00,040: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:21:00,040: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,040: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:21:00,040: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,040: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:21:00,040: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,040: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,040: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:21:00,040: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,040: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:21:00,040: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,040: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:21:00,040: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:21:00,040: on stmt: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:21:00,040: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:21:00,040: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:21:00,040: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,040: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:21:00,040: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,040: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:21:00,040: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:21:00,040: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,040: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,040: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,040: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:21:00,040: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:21:00,040: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,040: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:21:00,040: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:21:00,040: on stmt: jump 238
DEBUG    2023-08-19 15:21:00,048: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:21:00,048: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,048: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:21:00,048: on stmt: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:21:00,048: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,048: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,048: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:21:00,048: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:21:00,048: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,048: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:21:00,048: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,048: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,048: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:21:00,048: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,048: on stmt: mask.1 = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:21:00,048: on stmt: $272binary_and.10 = t & mask.1
DEBUG    2023-08-19 15:21:00,048: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,048: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,048: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,048: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:21:00,048: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:21:00,050: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:21:00,050: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:21:00,050: on stmt: jump 300
DEBUG    2023-08-19 15:21:00,050: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:21:00,050: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,050: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:21:00,050: on stmt: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:21:00,050: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:21:00,050: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:21:00,050: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,050: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:21:00,050: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,050: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:21:00,050: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: mask.2 = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:21:00,050: on stmt: $334binary_and.10 = t & mask.2
DEBUG    2023-08-19 15:21:00,050: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,050: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:21:00,050: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:21:00,050: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:21:00,050: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:21:00,050: on stmt: jump 362
DEBUG    2023-08-19 15:21:00,050: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:21:00,050: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,050: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:21:00,050: on stmt: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:21:00,050: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:21:00,050: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:21:00,050: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,050: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,050: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:21:00,050: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,050: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:21:00,050: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:21:00,050: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:21:00,050: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:21:00,050: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,050: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:21:00,050: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,050: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:21:00,050: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,050: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,050: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:21:00,050: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:21:00,050: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:21:00,050: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,050: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:21:00,050: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:21:00,050: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:21:00,050: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,050: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:21:00,050: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: mask.3 = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:21:00,050: on stmt: $426binary_and.14 = t & mask.3
DEBUG    2023-08-19 15:21:00,050: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:21:00,050: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,050: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:21:00,050: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,050: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:21:00,050: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:21:00,050: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,050: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:21:00,050: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,058: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:21:00,058: on stmt: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:21:00,059: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,059: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,059: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:21:00,059: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:21:00,059: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,059: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:21:00,059: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,059: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,059: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:21:00,060: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,060: on stmt: mask.4 = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:21:00,060: on stmt: $492binary_and.10 = t & mask.4
DEBUG    2023-08-19 15:21:00,060: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,060: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,060: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,060: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:21:00,060: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:21:00,060: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,061: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,061: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:21:00,061: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,061: on stmt: jump 520
DEBUG    2023-08-19 15:21:00,061: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:21:00,061: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,061: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:21:00,061: on stmt: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:21:00,061: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,061: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,062: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:21:00,062: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:21:00,062: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,062: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,062: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,062: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,062: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:21:00,062: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,062: on stmt: mask.5 = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:21:00,062: on stmt: $554binary_and.10 = t & mask.5
DEBUG    2023-08-19 15:21:00,063: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,063: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,063: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,063: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:21:00,063: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:21:00,063: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,063: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,063: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:21:00,064: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,064: on stmt: jump 582
DEBUG    2023-08-19 15:21:00,064: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:21:00,064: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,064: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:21:00,064: on stmt: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:21:00,064: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,064: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,064: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:21:00,064: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:21:00,064: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,065: on stmt: mask.6 = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:21:00,065: on stmt: $602binary_and.4 = t & mask.6
DEBUG    2023-08-19 15:21:00,065: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,065: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,065: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,065: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:21:00,065: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:21:00,065: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,065: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,066: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,066: on stmt: jump 626
DEBUG    2023-08-19 15:21:00,066: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:21:00,066: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332F23D0>
DEBUG    2023-08-19 15:21:00,066: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,066: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,066: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,066: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,067: find_def var='v1' stmt=$652call_function.11 = call $642load_global.6(v0.7, v1, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1, hashing.py:611), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,067: find_def_from_top label 626
DEBUG    2023-08-19 15:21:00,067: idom 582 from label 626
DEBUG    2023-08-19 15:21:00,067: find_def_from_bottom label 582
DEBUG    2023-08-19 15:21:00,067: find_def_from_top label 582
DEBUG    2023-08-19 15:21:00,067: idom 520 from label 582
DEBUG    2023-08-19 15:21:00,067: find_def_from_bottom label 520
DEBUG    2023-08-19 15:21:00,067: find_def_from_top label 520
DEBUG    2023-08-19 15:21:00,067: idom 458 from label 520
DEBUG    2023-08-19 15:21:00,067: find_def_from_bottom label 458
DEBUG    2023-08-19 15:21:00,067: find_def_from_top label 458
DEBUG    2023-08-19 15:21:00,068: idom 362 from label 458
DEBUG    2023-08-19 15:21:00,068: find_def_from_bottom label 362
DEBUG    2023-08-19 15:21:00,068: find_def_from_top label 362
DEBUG    2023-08-19 15:21:00,068: idom 300 from label 362
DEBUG    2023-08-19 15:21:00,068: find_def_from_bottom label 300
DEBUG    2023-08-19 15:21:00,068: find_def_from_top label 300
DEBUG    2023-08-19 15:21:00,068: idom 238 from label 300
DEBUG    2023-08-19 15:21:00,068: find_def_from_bottom label 238
DEBUG    2023-08-19 15:21:00,068: find_def_from_top label 238
DEBUG    2023-08-19 15:21:00,068: idom 150 from label 238
DEBUG    2023-08-19 15:21:00,068: find_def_from_bottom label 150
DEBUG    2023-08-19 15:21:00,068: find_def_from_top label 150
DEBUG    2023-08-19 15:21:00,069: idom 76 from label 150
DEBUG    2023-08-19 15:21:00,069: find_def_from_bottom label 76
DEBUG    2023-08-19 15:21:00,069: replaced with: $652call_function.11 = call $642load_global.6(v0.7, v1.5, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,069: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:21:00,069: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,069: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,069: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,070: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,070: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:21:00,070: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:21:00,070: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:21:00,070: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:21:00,070: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,070: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,070: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,070: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,071: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:21:00,071: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,071: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,071: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,071: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,071: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:21:00,071: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:21:00,071: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:21:00,072: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:21:00,072: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,072: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,072: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:21:00,072: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,072: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,072: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,072: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,072: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:21:00,072: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:21:00,072: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:21:00,072: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:21:00,072: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:21:00,072: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:21:00,073: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:21:00,073: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:21:00,073: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:21:00,073: Fix SSA violator on var v3
DEBUG    2023-08-19 15:21:00,073: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:00,073: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,073: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:21:00,073: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:21:00,073: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:21:00,073: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:21:00,073: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,073: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,073: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,073: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:21:00,074: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:21:00,074: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,074: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,074: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:21:00,074: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,074: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:21:00,074: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,074: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:21:00,074: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:21:00,074: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,074: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:21:00,074: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,075: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:21:00,075: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:21:00,075: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,075: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:21:00,075: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,075: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:21:00,075: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:21:00,075: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,075: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:21:00,075: first assign: v3
DEBUG    2023-08-19 15:21:00,075: replaced with: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:21:00,075: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:21:00,076: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,076: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:21:00,076: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,076: on stmt: v1.5 = phi(incoming_values=[Var(v1, hashing.py:611), Var(v1.4, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,076: on stmt: src_sz.2 = phi(incoming_values=[Var(src_sz, hashing.py:609), Var(src_sz.1, hashing.py:619)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,076: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,076: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,076: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,076: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:21:00,076: on stmt: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:21:00,076: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,076: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,077: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:21:00,077: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:21:00,077: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,077: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:21:00,077: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,077: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:21:00,077: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,077: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:21:00,077: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:21:00,077: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,077: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:21:00,077: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,078: on stmt: v3 = $114inplace_xor.12
DEBUG    2023-08-19 15:21:00,078: replaced with: v3.5 = $114inplace_xor.12
DEBUG    2023-08-19 15:21:00,078: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,078: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1.5, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,078: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:21:00,078: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,078: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,078: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,078: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,078: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:21:00,078: on stmt: v1.4 = $130unpack_sequence.20
DEBUG    2023-08-19 15:21:00,078: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:21:00,078: on stmt: v3 = $130unpack_sequence.22
DEBUG    2023-08-19 15:21:00,079: replaced with: v3.6 = $130unpack_sequence.22
DEBUG    2023-08-19 15:21:00,079: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,079: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:21:00,079: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,079: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:21:00,079: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,079: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,079: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,079: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:21:00,079: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,079: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,079: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:21:00,080: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,080: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,080: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:21:00,080: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,080: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:21:00,080: on stmt: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:21:00,080: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,080: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,080: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:21:00,080: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:21:00,080: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,080: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:21:00,080: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,081: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,081: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:21:00,081: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,081: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:21:00,081: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,081: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,081: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,081: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,081: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:21:00,081: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:21:00,081: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,081: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,082: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:21:00,082: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:21:00,082: on stmt: jump 238
DEBUG    2023-08-19 15:21:00,082: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:21:00,082: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,082: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:21:00,082: on stmt: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:21:00,082: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,082: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,082: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:21:00,082: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:21:00,082: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,082: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:21:00,083: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,083: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,083: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:21:00,083: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,083: on stmt: mask.1 = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:21:00,083: on stmt: $272binary_and.10 = t & mask.1
DEBUG    2023-08-19 15:21:00,083: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,083: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,083: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,083: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:21:00,083: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:21:00,083: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,083: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,084: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:21:00,084: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:21:00,084: on stmt: jump 300
DEBUG    2023-08-19 15:21:00,084: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:21:00,084: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,084: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:21:00,084: on stmt: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:21:00,084: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,084: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,084: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:21:00,084: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:21:00,084: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,084: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:21:00,084: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,084: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,085: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:21:00,085: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,085: on stmt: mask.2 = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:21:00,085: on stmt: $334binary_and.10 = t & mask.2
DEBUG    2023-08-19 15:21:00,085: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,085: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,085: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,085: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:21:00,085: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:21:00,085: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,085: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,085: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:21:00,085: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:21:00,085: on stmt: jump 362
DEBUG    2023-08-19 15:21:00,086: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:21:00,086: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,086: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:21:00,086: on stmt: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:21:00,086: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,086: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,086: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:21:00,086: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:21:00,086: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,086: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,086: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,087: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:21:00,087: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,087: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,087: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:21:00,087: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:21:00,087: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:21:00,087: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,087: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:21:00,087: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:21:00,087: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,087: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:21:00,088: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,088: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:21:00,088: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,088: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,088: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:21:00,088: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:21:00,088: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:21:00,088: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,088: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:21:00,088: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:21:00,088: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:21:00,089: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,089: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,089: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:21:00,089: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,089: on stmt: mask.3 = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:21:00,089: on stmt: $426binary_and.14 = t & mask.3
DEBUG    2023-08-19 15:21:00,089: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,089: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:21:00,089: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,089: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:21:00,089: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,090: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,090: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:21:00,090: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:21:00,090: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,090: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:21:00,090: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,090: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:21:00,090: on stmt: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:21:00,090: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,090: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,090: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:21:00,090: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:21:00,090: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,091: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:21:00,091: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,091: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,091: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:21:00,091: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,091: on stmt: mask.4 = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:21:00,091: on stmt: $492binary_and.10 = t & mask.4
DEBUG    2023-08-19 15:21:00,091: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,091: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,091: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,091: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:21:00,091: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:21:00,091: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,091: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,091: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:21:00,092: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,092: on stmt: jump 520
DEBUG    2023-08-19 15:21:00,092: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:21:00,092: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,092: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:21:00,092: on stmt: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:21:00,092: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,092: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,092: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:21:00,092: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:21:00,092: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,092: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,092: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,092: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,092: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:21:00,092: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,093: on stmt: mask.5 = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:21:00,093: on stmt: $554binary_and.10 = t & mask.5
DEBUG    2023-08-19 15:21:00,093: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,093: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,093: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,093: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:21:00,093: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:21:00,093: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,093: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,093: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:21:00,093: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,093: on stmt: jump 582
DEBUG    2023-08-19 15:21:00,093: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:21:00,093: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,093: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:21:00,094: on stmt: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:21:00,094: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,094: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,094: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:21:00,094: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:21:00,094: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,094: on stmt: mask.6 = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:21:00,094: on stmt: $602binary_and.4 = t & mask.6
DEBUG    2023-08-19 15:21:00,094: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,094: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,094: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,094: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:21:00,094: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:21:00,094: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,094: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,095: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,095: on stmt: jump 626
DEBUG    2023-08-19 15:21:00,095: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:21:00,095: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,095: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,095: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,095: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,095: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1.5, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,095: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:21:00,095: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,095: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,095: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,095: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,095: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:21:00,095: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:21:00,096: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:21:00,096: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:21:00,096: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,096: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,096: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,096: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,096: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:21:00,096: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,096: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,096: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,096: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,096: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:21:00,096: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:21:00,096: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:21:00,096: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:21:00,096: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,097: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,097: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:21:00,097: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,097: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,097: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,097: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,097: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:21:00,097: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:21:00,097: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:21:00,097: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:21:00,097: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:21:00,097: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:21:00,097: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:21:00,097: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:21:00,097: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:21:00,098: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F33433250>],
             84: [<numba.core.ir.Assign object at 0x0000025F333EC8B0>,
                  <numba.core.ir.Assign object at 0x0000025F334DF190>]})
DEBUG    2023-08-19 15:21:00,098: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:00,098: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,098: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:21:00,098: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:21:00,098: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:21:00,098: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:21:00,098: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,098: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,098: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,098: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:21:00,098: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:21:00,098: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,098: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,099: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:21:00,099: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,099: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:21:00,099: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,099: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:21:00,099: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:21:00,099: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,099: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:21:00,099: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,099: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:21:00,099: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:21:00,099: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,099: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:21:00,099: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,099: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:21:00,100: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:21:00,100: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,100: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:21:00,100: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:21:00,100: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,100: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:21:00,100: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,100: on stmt: v1.5 = phi(incoming_values=[Var(v1, hashing.py:611), Var(v1.4, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,100: on stmt: src_sz.2 = phi(incoming_values=[Var(src_sz, hashing.py:609), Var(src_sz.1, hashing.py:619)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,100: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,100: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,100: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,100: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:21:00,100: on stmt: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:21:00,101: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,101: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,101: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:21:00,101: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:21:00,101: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,101: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:21:00,101: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,101: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:21:00,101: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,101: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:21:00,101: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:21:00,101: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,101: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:21:00,101: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,101: find_def var='v3' stmt=$114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,102: find_def_from_top label 84
DEBUG    2023-08-19 15:21:00,102: idom 76 from label 84
DEBUG    2023-08-19 15:21:00,102: find_def_from_bottom label 76
DEBUG    2023-08-19 15:21:00,102: find_def_from_top label 76
DEBUG    2023-08-19 15:21:00,102: insert phi node v3.7 = phi(incoming_values=[], incoming_blocks=[]) at 76
DEBUG    2023-08-19 15:21:00,102: find_def_from_bottom label 0
DEBUG    2023-08-19 15:21:00,102: incoming_def v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:21:00,102: find_def_from_bottom label 84
DEBUG    2023-08-19 15:21:00,102: incoming_def v3.6 = $130unpack_sequence.22
DEBUG    2023-08-19 15:21:00,102: replaced with: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3.7, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,102: on stmt: v3.5 = $114inplace_xor.12
DEBUG    2023-08-19 15:21:00,102: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,102: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1.5, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,102: find_def var='v3' stmt=$128call_function.18 = call $118load_global.13(v0.7, v1.5, v2.6, v3, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: replaced with: $128call_function.18 = call $118load_global.13(v0.7, v1.5, v2.6, v3.5, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3.5, hashing.py:620)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:21:00,103: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,103: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:21:00,103: on stmt: v1.4 = $130unpack_sequence.20
DEBUG    2023-08-19 15:21:00,103: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:21:00,103: on stmt: v3.6 = $130unpack_sequence.22
DEBUG    2023-08-19 15:21:00,103: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,103: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:21:00,103: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,103: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:21:00,103: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,103: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,103: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:21:00,103: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,103: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:21:00,103: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,103: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:21:00,103: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:21:00,103: on stmt: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:21:00,103: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:21:00,103: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:21:00,103: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,103: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:21:00,103: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,103: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:21:00,103: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:21:00,103: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,103: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,103: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:21:00,103: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:21:00,103: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:21:00,103: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:21:00,103: on stmt: jump 238
DEBUG    2023-08-19 15:21:00,103: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:21:00,103: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,103: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:21:00,103: on stmt: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:21:00,103: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:21:00,103: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:21:00,103: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,103: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:21:00,103: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,103: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:21:00,103: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: mask.1 = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:21:00,103: on stmt: $272binary_and.10 = t & mask.1
DEBUG    2023-08-19 15:21:00,103: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,103: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:21:00,103: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:21:00,103: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:21:00,103: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:21:00,103: on stmt: jump 300
DEBUG    2023-08-19 15:21:00,103: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:21:00,103: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,103: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:21:00,103: on stmt: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:21:00,103: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,103: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:21:00,103: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:21:00,103: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,103: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:21:00,103: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,103: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,109: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:21:00,109: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,109: on stmt: mask.2 = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:21:00,109: on stmt: $334binary_and.10 = t & mask.2
DEBUG    2023-08-19 15:21:00,109: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,109: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,109: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,109: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:21:00,109: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:21:00,109: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,109: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,109: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:21:00,109: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:21:00,109: on stmt: jump 362
DEBUG    2023-08-19 15:21:00,109: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:21:00,109: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,109: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:21:00,109: on stmt: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:21:00,109: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,109: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,109: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:21:00,109: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:21:00,109: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,109: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,109: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,109: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:21:00,109: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,109: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,109: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:21:00,109: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:21:00,111: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:21:00,111: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:21:00,111: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:21:00,111: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,111: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,111: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:21:00,111: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:21:00,111: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:21:00,111: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:21:00,111: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,111: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:21:00,111: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: mask.3 = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:21:00,111: on stmt: $426binary_and.14 = t & mask.3
DEBUG    2023-08-19 15:21:00,111: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:21:00,111: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:21:00,111: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:21:00,111: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:21:00,111: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:21:00,111: on stmt: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:21:00,111: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:21:00,111: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,111: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:21:00,111: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: mask.4 = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:21:00,111: on stmt: $492binary_and.10 = t & mask.4
DEBUG    2023-08-19 15:21:00,111: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,111: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:21:00,111: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:21:00,111: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:21:00,111: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,111: on stmt: jump 520
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:21:00,111: on stmt: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:21:00,111: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,111: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,111: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:21:00,111: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: mask.5 = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:21:00,111: on stmt: $554binary_and.10 = t & mask.5
DEBUG    2023-08-19 15:21:00,111: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,111: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:21:00,111: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:21:00,111: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:21:00,111: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,111: on stmt: jump 582
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:21:00,111: on stmt: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:21:00,111: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: mask.6 = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:21:00,111: on stmt: $602binary_and.4 = t & mask.6
DEBUG    2023-08-19 15:21:00,111: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,111: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,111: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:21:00,111: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:21:00,111: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,111: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,111: on stmt: jump 626
DEBUG    2023-08-19 15:21:00,111: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:21:00,111: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3343A550>
DEBUG    2023-08-19 15:21:00,111: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,111: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,111: find_def var='v3' stmt=v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,111: find_def_from_top label 626
DEBUG    2023-08-19 15:21:00,111: idom 582 from label 626
DEBUG    2023-08-19 15:21:00,111: find_def_from_bottom label 582
DEBUG    2023-08-19 15:21:00,111: find_def_from_top label 582
DEBUG    2023-08-19 15:21:00,111: idom 520 from label 582
DEBUG    2023-08-19 15:21:00,111: find_def_from_bottom label 520
DEBUG    2023-08-19 15:21:00,111: find_def_from_top label 520
DEBUG    2023-08-19 15:21:00,111: idom 458 from label 520
DEBUG    2023-08-19 15:21:00,111: find_def_from_bottom label 458
DEBUG    2023-08-19 15:21:00,111: find_def_from_top label 458
DEBUG    2023-08-19 15:21:00,111: idom 362 from label 458
DEBUG    2023-08-19 15:21:00,111: find_def_from_bottom label 362
DEBUG    2023-08-19 15:21:00,111: find_def_from_top label 362
DEBUG    2023-08-19 15:21:00,111: idom 300 from label 362
DEBUG    2023-08-19 15:21:00,111: find_def_from_bottom label 300
DEBUG    2023-08-19 15:21:00,119: find_def_from_top label 300
DEBUG    2023-08-19 15:21:00,119: idom 238 from label 300
DEBUG    2023-08-19 15:21:00,119: find_def_from_bottom label 238
DEBUG    2023-08-19 15:21:00,119: find_def_from_top label 238
DEBUG    2023-08-19 15:21:00,119: idom 150 from label 238
DEBUG    2023-08-19 15:21:00,119: find_def_from_bottom label 150
DEBUG    2023-08-19 15:21:00,119: find_def_from_top label 150
DEBUG    2023-08-19 15:21:00,119: idom 76 from label 150
DEBUG    2023-08-19 15:21:00,119: find_def_from_bottom label 76
DEBUG    2023-08-19 15:21:00,119: replaced with: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3.7, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,119: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,119: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1.5, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,119: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:21:00,119: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,119: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,119: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,119: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,119: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:21:00,119: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:21:00,119: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:21:00,119: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:21:00,119: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,119: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,119: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,119: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,119: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:21:00,119: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,119: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,119: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:21:00,121: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:21:00,121: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:21:00,121: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:21:00,121: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:21:00,121: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:21:00,121: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:21:00,121: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:21:00,121: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:21:00,121: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:21:00,121: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:21:00,121: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:21:00,121: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:21:00,121: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:21:00,121: Fix SSA violator on var t
DEBUG    2023-08-19 15:21:00,121: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:00,121: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,121: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:21:00,121: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:21:00,121: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:21:00,121: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:21:00,121: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,121: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:21:00,121: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:21:00,121: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:21:00,121: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:21:00,121: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:21:00,121: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:21:00,121: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:21:00,121: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:21:00,121: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:21:00,121: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:21:00,121: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:21:00,121: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,121: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:21:00,121: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,121: on stmt: v3.7 = phi(incoming_values=[Var(v3, hashing.py:613), Var(v3.6, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,121: on stmt: v1.5 = phi(incoming_values=[Var(v1, hashing.py:611), Var(v1.4, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,121: on stmt: src_sz.2 = phi(incoming_values=[Var(src_sz, hashing.py:609), Var(src_sz.1, hashing.py:619)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,121: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,121: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,121: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,121: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:21:00,121: on stmt: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:21:00,121: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:21:00,121: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:21:00,121: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,121: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:21:00,121: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:21:00,121: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,121: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:21:00,121: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:21:00,121: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,121: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:21:00,121: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3.7, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,121: on stmt: v3.5 = $114inplace_xor.12
DEBUG    2023-08-19 15:21:00,121: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1.5, v2.6, v3.5, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3.5, hashing.py:620)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:21:00,121: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,121: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:21:00,121: on stmt: v1.4 = $130unpack_sequence.20
DEBUG    2023-08-19 15:21:00,121: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:21:00,121: on stmt: v3.6 = $130unpack_sequence.22
DEBUG    2023-08-19 15:21:00,121: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,121: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:21:00,121: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,121: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:21:00,121: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,121: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:21:00,121: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: first assign: t
DEBUG    2023-08-19 15:21:00,121: replaced with: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,121: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:21:00,121: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:21:00,121: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:21:00,121: on stmt: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:21:00,121: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:21:00,121: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:21:00,121: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,121: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:21:00,121: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,121: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:21:00,121: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,121: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:21:00,121: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,121: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,121: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,129: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,129: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:21:00,129: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:21:00,129: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,129: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,129: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:21:00,129: on stmt: t = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:21:00,129: replaced with: t.2 = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:21:00,129: on stmt: jump 238
DEBUG    2023-08-19 15:21:00,129: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:21:00,129: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,129: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:21:00,129: on stmt: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:21:00,129: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,129: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,129: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:21:00,129: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:21:00,129: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,129: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:21:00,129: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,129: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,129: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:21:00,129: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,129: on stmt: mask.1 = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:21:00,129: on stmt: $272binary_and.10 = t & mask.1
DEBUG    2023-08-19 15:21:00,129: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,129: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,129: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,129: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:21:00,129: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:21:00,129: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:21:00,131: on stmt: t = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:21:00,131: replaced with: t.3 = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:21:00,131: on stmt: jump 300
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:21:00,131: on stmt: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:21:00,131: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:21:00,131: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,131: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:21:00,131: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: mask.2 = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:21:00,131: on stmt: $334binary_and.10 = t & mask.2
DEBUG    2023-08-19 15:21:00,131: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,131: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:21:00,131: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:21:00,131: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:21:00,131: on stmt: t = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:21:00,131: replaced with: t.4 = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:21:00,131: on stmt: jump 362
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:21:00,131: on stmt: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:21:00,131: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,131: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:21:00,131: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,131: on stmt: t = $382inplace_and.5
DEBUG    2023-08-19 15:21:00,131: replaced with: t.5 = $382inplace_and.5
DEBUG    2023-08-19 15:21:00,131: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:21:00,131: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:21:00,131: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:21:00,131: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:21:00,131: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,131: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,131: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:21:00,131: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:21:00,131: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:21:00,131: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:21:00,131: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,131: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:21:00,131: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: mask.3 = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:21:00,131: on stmt: $426binary_and.14 = t & mask.3
DEBUG    2023-08-19 15:21:00,131: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:21:00,131: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:21:00,131: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:21:00,131: on stmt: t = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:21:00,131: replaced with: t.6 = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:21:00,131: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:21:00,131: on stmt: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:21:00,131: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:21:00,131: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,131: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:21:00,131: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: mask.4 = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:21:00,131: on stmt: $492binary_and.10 = t & mask.4
DEBUG    2023-08-19 15:21:00,131: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,131: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:21:00,131: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:21:00,131: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:21:00,131: on stmt: t = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,131: replaced with: t.7 = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,131: on stmt: jump 520
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:21:00,131: on stmt: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:21:00,131: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,131: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:21:00,131: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:21:00,131: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,131: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,131: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,131: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,131: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:21:00,131: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,139: on stmt: mask.5 = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:21:00,139: on stmt: $554binary_and.10 = t & mask.5
DEBUG    2023-08-19 15:21:00,139: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,139: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,139: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,139: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:21:00,139: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:21:00,139: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,139: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,139: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:21:00,139: on stmt: t = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,139: replaced with: t.8 = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,139: on stmt: jump 582
DEBUG    2023-08-19 15:21:00,139: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:21:00,139: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,139: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:21:00,139: on stmt: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:21:00,139: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,139: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,139: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:21:00,139: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:21:00,139: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,139: on stmt: mask.6 = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:21:00,139: on stmt: $602binary_and.4 = t & mask.6
DEBUG    2023-08-19 15:21:00,139: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,139: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,141: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:21:00,141: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:21:00,141: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: t = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,141: replaced with: t.9 = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,141: on stmt: jump 626
DEBUG    2023-08-19 15:21:00,141: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:21:00,141: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F3343D0D0>
DEBUG    2023-08-19 15:21:00,141: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,141: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3.7, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,141: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1.5, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:21:00,141: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:21:00,141: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:21:00,141: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:21:00,141: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:21:00,141: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,141: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,141: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:21:00,141: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:21:00,141: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:21:00,141: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:21:00,141: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:21:00,141: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:21:00,141: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,141: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:21:00,141: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:21:00,141: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:21:00,141: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:21:00,141: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:21:00,141: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:21:00,141: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:21:00,141: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:21:00,141: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:21:00,141: Replaced assignments: defaultdict(<class 'list'>,
            {150: [<numba.core.ir.Assign object at 0x0000025F332B90D0>],
             186: [<numba.core.ir.Assign object at 0x0000025F332B9460>],
             248: [<numba.core.ir.Assign object at 0x0000025F331E9130>],
             310: [<numba.core.ir.Assign object at 0x0000025F334DD970>],
             372: [<numba.core.ir.Assign object at 0x0000025F3343A880>],
             396: [<numba.core.ir.Assign object at 0x0000025F332B7B50>],
             468: [<numba.core.ir.Assign object at 0x0000025F332B7D00>],
             530: [<numba.core.ir.Assign object at 0x0000025F332B7AF0>],
             592: [<numba.core.ir.Assign object at 0x0000025F332B76D0>]})
DEBUG    2023-08-19 15:21:00,141: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:00,141: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,141: on stmt: k0 = arg(0, name=k0)
DEBUG    2023-08-19 15:21:00,141: on stmt: k1 = arg(1, name=k1)
DEBUG    2023-08-19 15:21:00,141: on stmt: src = arg(2, name=src)
DEBUG    2023-08-19 15:21:00,141: on stmt: src_sz = arg(3, name=src_sz)
DEBUG    2023-08-19 15:21:00,141: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,141: on stmt: $8call_method.3 = call $4load_method.1(src_sz, func=$4load_method.1, args=[Var(src_sz, hashing.py:609)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: $const10.4 = const(int, 56)
DEBUG    2023-08-19 15:21:00,141: on stmt: b = $8call_method.3 << $const10.4
DEBUG    2023-08-19 15:21:00,141: on stmt: $18load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,141: on stmt: $const22.9 = const(int, 8317987319222330741)
DEBUG    2023-08-19 15:21:00,141: on stmt: $24call_method.10 = call $20load_method.8($const22.9, func=$20load_method.8, args=[Var($const22.9, hashing.py:610)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: v0 = k0 ^ $24call_method.10
DEBUG    2023-08-19 15:21:00,141: on stmt: $32load_global.13 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $34load_method.14 = getattr(value=$32load_global.13, attr=uint64)
DEBUG    2023-08-19 15:21:00,141: on stmt: $const36.15 = const(int, 7237128888997146477)
DEBUG    2023-08-19 15:21:00,141: on stmt: $38call_method.16 = call $34load_method.14($const36.15, func=$34load_method.14, args=[Var($const36.15, hashing.py:611)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: v1 = k1 ^ $38call_method.16
DEBUG    2023-08-19 15:21:00,141: on stmt: $46load_global.19 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $48load_method.20 = getattr(value=$46load_global.19, attr=uint64)
DEBUG    2023-08-19 15:21:00,141: on stmt: $const50.21 = const(int, 7816392313619706465)
DEBUG    2023-08-19 15:21:00,141: on stmt: $52call_method.22 = call $48load_method.20($const50.21, func=$48load_method.20, args=[Var($const50.21, hashing.py:612)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: v2 = k0 ^ $52call_method.22
DEBUG    2023-08-19 15:21:00,141: on stmt: $60load_global.25 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $62load_method.26 = getattr(value=$60load_global.25, attr=uint64)
DEBUG    2023-08-19 15:21:00,141: on stmt: $const64.27 = const(int, 8387220255154660723)
DEBUG    2023-08-19 15:21:00,141: on stmt: $66call_method.28 = call $62load_method.26($const64.27, func=$62load_method.26, args=[Var($const64.27, hashing.py:613)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: v3 = k1 ^ $66call_method.28
DEBUG    2023-08-19 15:21:00,141: on stmt: idx = const(int, 0)
DEBUG    2023-08-19 15:21:00,141: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,141: ==== SSA block rewrite pass on 76
DEBUG    2023-08-19 15:21:00,141: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,141: on stmt: v3.7 = phi(incoming_values=[Var(v3, hashing.py:613), Var(v3.6, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,141: on stmt: v1.5 = phi(incoming_values=[Var(v1, hashing.py:611), Var(v1.4, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,141: on stmt: src_sz.2 = phi(incoming_values=[Var(src_sz, hashing.py:609), Var(src_sz.1, hashing.py:619)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,141: on stmt: idx.2 = phi(incoming_values=[Var(idx, hashing.py:615), Var(idx.1, hashing.py:618)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,141: on stmt: v0.7 = phi(incoming_values=[Var(v0, hashing.py:610), Var(v0.6, hashing.py:622)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,141: on stmt: v2.6 = phi(incoming_values=[Var(v2, hashing.py:612), Var(v2.5, hashing.py:621)], incoming_blocks=[0, 84])
DEBUG    2023-08-19 15:21:00,141: on stmt: $const78.1 = const(int, 8)
DEBUG    2023-08-19 15:21:00,141: on stmt: $80compare_op.2 = src_sz.2 >= $const78.1
DEBUG    2023-08-19 15:21:00,141: on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, hashing.py:616),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: branch $82pred, 84, 150
DEBUG    2023-08-19 15:21:00,141: ==== SSA block rewrite pass on 84
DEBUG    2023-08-19 15:21:00,141: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,141: on stmt: $84load_global.0 = global(grab_uint64_t: <intrinsic grab_uint64_t>)
DEBUG    2023-08-19 15:21:00,141: on stmt: mi = call $84load_global.0(src, idx.2, func=$84load_global.0, args=[Var(src, hashing.py:609), Var(idx.2, hashing.py:617)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: $const96.5 = const(int, 1)
DEBUG    2023-08-19 15:21:00,141: on stmt: $98inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const96.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,141: on stmt: idx.1 = $98inplace_add.6
DEBUG    2023-08-19 15:21:00,141: on stmt: $const104.8 = const(int, 8)
DEBUG    2023-08-19 15:21:00,141: on stmt: $106inplace_subtract.9 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=src_sz.2, rhs=$const104.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,141: on stmt: src_sz.1 = $106inplace_subtract.9
DEBUG    2023-08-19 15:21:00,141: on stmt: $114inplace_xor.12 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3.7, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,141: on stmt: v3.5 = $114inplace_xor.12
DEBUG    2023-08-19 15:21:00,141: on stmt: $118load_global.13 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,141: on stmt: $128call_function.18 = call $118load_global.13(v0.7, v1.5, v2.6, v3.5, func=$118load_global.13, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3.5, hashing.py:620)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,141: on stmt: $130unpack_sequence.23 = exhaust_iter(value=$128call_function.18, count=4)
DEBUG    2023-08-19 15:21:00,149: on stmt: $130unpack_sequence.19 = static_getitem(value=$130unpack_sequence.23, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,149: on stmt: $130unpack_sequence.20 = static_getitem(value=$130unpack_sequence.23, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,149: on stmt: $130unpack_sequence.21 = static_getitem(value=$130unpack_sequence.23, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,149: on stmt: $130unpack_sequence.22 = static_getitem(value=$130unpack_sequence.23, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,149: on stmt: v0.5 = $130unpack_sequence.19
DEBUG    2023-08-19 15:21:00,149: on stmt: v1.4 = $130unpack_sequence.20
DEBUG    2023-08-19 15:21:00,149: on stmt: v2.5 = $130unpack_sequence.21
DEBUG    2023-08-19 15:21:00,149: on stmt: v3.6 = $130unpack_sequence.22
DEBUG    2023-08-19 15:21:00,149: on stmt: $144inplace_xor.26 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.5, rhs=mi, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,149: on stmt: v0.6 = $144inplace_xor.26
DEBUG    2023-08-19 15:21:00,149: on stmt: jump 76
DEBUG    2023-08-19 15:21:00,149: ==== SSA block rewrite pass on 150
DEBUG    2023-08-19 15:21:00,149: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,149: on stmt: $150load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,149: on stmt: $152load_method.1 = getattr(value=$150load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,149: on stmt: $const154.2 = const(int, 0)
DEBUG    2023-08-19 15:21:00,149: on stmt: t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,149: on stmt: $const162.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,149: on stmt: boffset = idx.2 * $const162.5
DEBUG    2023-08-19 15:21:00,149: on stmt: $168load_global.7 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,149: on stmt: $170load_method.8 = getattr(value=$168load_global.7, attr=uint64)
DEBUG    2023-08-19 15:21:00,149: on stmt: $const172.9 = const(int, 255)
DEBUG    2023-08-19 15:21:00,149: on stmt: ohexefef = call $170load_method.8($const172.9, func=$170load_method.8, args=[Var($const172.9, hashing.py:628)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,149: on stmt: $const180.12 = const(int, 7)
DEBUG    2023-08-19 15:21:00,149: on stmt: $182compare_op.13 = src_sz.2 >= $const180.12
DEBUG    2023-08-19 15:21:00,149: on stmt: bool184 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,149: on stmt: $184pred = call bool184($182compare_op.13, func=bool184, args=(Var($182compare_op.13, hashing.py:629),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,149: on stmt: branch $184pred, 186, 238
DEBUG    2023-08-19 15:21:00,149: ==== SSA block rewrite pass on 186
DEBUG    2023-08-19 15:21:00,149: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,151: on stmt: jmp = const(int, 48)
DEBUG    2023-08-19 15:21:00,151: on stmt: $190load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,151: on stmt: $192load_method.2 = getattr(value=$190load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,151: on stmt: $198binary_lshift.5 = ohexefef << jmp
DEBUG    2023-08-19 15:21:00,151: on stmt: $200call_method.6 = call $192load_method.2($198binary_lshift.5, func=$192load_method.2, args=[Var($198binary_lshift.5, hashing.py:631)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,151: on stmt: mask = unary(fn=<built-in function invert>, value=$200call_method.6)
DEBUG    2023-08-19 15:21:00,151: on stmt: $210binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,151: find_def var='t' stmt=$210binary_and.10 = t & mask
DEBUG    2023-08-19 15:21:00,151: find_def_from_top label 186
DEBUG    2023-08-19 15:21:00,151: idom 150 from label 186
DEBUG    2023-08-19 15:21:00,151: find_def_from_bottom label 150
DEBUG    2023-08-19 15:21:00,151: on stmt: $212load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,151: on stmt: $214load_method.12 = getattr(value=$212load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,151: on stmt: $216load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,151: on stmt: $const222.16 = const(int, 6)
DEBUG    2023-08-19 15:21:00,151: on stmt: $224binary_add.17 = boffset + $const222.16
DEBUG    2023-08-19 15:21:00,151: on stmt: $226call_function.18 = call $216load_global.13(src, $224binary_add.17, func=$216load_global.13, args=[Var(src, hashing.py:609), Var($224binary_add.17, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,151: on stmt: $228call_method.19 = call $214load_method.12($226call_function.18, func=$214load_method.12, args=[Var($226call_function.18, hashing.py:632)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,151: on stmt: $232binary_lshift.21 = $228call_method.19 << jmp
DEBUG    2023-08-19 15:21:00,151: on stmt: t.2 = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:21:00,151: on stmt: jump 238
DEBUG    2023-08-19 15:21:00,151: ==== SSA block rewrite pass on 238
DEBUG    2023-08-19 15:21:00,151: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,151: on stmt: $const240.1 = const(int, 6)
DEBUG    2023-08-19 15:21:00,151: on stmt: $242compare_op.2 = src_sz.2 >= $const240.1
DEBUG    2023-08-19 15:21:00,153: on stmt: bool244 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,153: on stmt: $244pred = call bool244($242compare_op.2, func=bool244, args=(Var($242compare_op.2, hashing.py:634),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,153: on stmt: branch $244pred, 248, 300
DEBUG    2023-08-19 15:21:00,153: ==== SSA block rewrite pass on 248
DEBUG    2023-08-19 15:21:00,153: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,153: on stmt: jmp.1 = const(int, 40)
DEBUG    2023-08-19 15:21:00,153: on stmt: $252load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,153: on stmt: $254load_method.2 = getattr(value=$252load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,153: on stmt: $260binary_lshift.5 = ohexefef << jmp.1
DEBUG    2023-08-19 15:21:00,153: on stmt: $262call_method.6 = call $254load_method.2($260binary_lshift.5, func=$254load_method.2, args=[Var($260binary_lshift.5, hashing.py:636)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,153: on stmt: mask.1 = unary(fn=<built-in function invert>, value=$262call_method.6)
DEBUG    2023-08-19 15:21:00,153: on stmt: $272binary_and.10 = t & mask.1
DEBUG    2023-08-19 15:21:00,153: find_def var='t' stmt=$272binary_and.10 = t & mask.1
DEBUG    2023-08-19 15:21:00,153: find_def_from_top label 248
DEBUG    2023-08-19 15:21:00,153: idom 238 from label 248
DEBUG    2023-08-19 15:21:00,154: find_def_from_bottom label 238
DEBUG    2023-08-19 15:21:00,154: find_def_from_top label 238
DEBUG    2023-08-19 15:21:00,154: insert phi node t.10 = phi(incoming_values=[], incoming_blocks=[]) at 238
DEBUG    2023-08-19 15:21:00,154: find_def_from_bottom label 186
DEBUG    2023-08-19 15:21:00,154: incoming_def t.2 = $210binary_and.10 | $232binary_lshift.21
DEBUG    2023-08-19 15:21:00,154: find_def_from_bottom label 150
DEBUG    2023-08-19 15:21:00,154: incoming_def t = call $152load_method.1($const154.2, func=$152load_method.1, args=[Var($const154.2, hashing.py:626)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,154: replaced with: $272binary_and.10 = t.10 & mask.1
DEBUG    2023-08-19 15:21:00,154: on stmt: $274load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,154: on stmt: $276load_method.12 = getattr(value=$274load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,154: on stmt: $278load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,154: on stmt: $const284.16 = const(int, 5)
DEBUG    2023-08-19 15:21:00,154: on stmt: $286binary_add.17 = boffset + $const284.16
DEBUG    2023-08-19 15:21:00,154: on stmt: $288call_function.18 = call $278load_global.13(src, $286binary_add.17, func=$278load_global.13, args=[Var(src, hashing.py:609), Var($286binary_add.17, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,155: on stmt: $290call_method.19 = call $276load_method.12($288call_function.18, func=$276load_method.12, args=[Var($288call_function.18, hashing.py:637)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,155: on stmt: $294binary_lshift.21 = $290call_method.19 << jmp.1
DEBUG    2023-08-19 15:21:00,155: on stmt: t.3 = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:21:00,155: on stmt: jump 300
DEBUG    2023-08-19 15:21:00,155: ==== SSA block rewrite pass on 300
DEBUG    2023-08-19 15:21:00,155: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,155: on stmt: $const302.1 = const(int, 5)
DEBUG    2023-08-19 15:21:00,155: on stmt: $304compare_op.2 = src_sz.2 >= $const302.1
DEBUG    2023-08-19 15:21:00,155: on stmt: bool306 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,155: on stmt: $306pred = call bool306($304compare_op.2, func=bool306, args=(Var($304compare_op.2, hashing.py:639),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,155: on stmt: branch $306pred, 310, 362
DEBUG    2023-08-19 15:21:00,155: ==== SSA block rewrite pass on 310
DEBUG    2023-08-19 15:21:00,155: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,156: on stmt: jmp.2 = const(int, 32)
DEBUG    2023-08-19 15:21:00,156: on stmt: $314load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,156: on stmt: $316load_method.2 = getattr(value=$314load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,156: on stmt: $322binary_lshift.5 = ohexefef << jmp.2
DEBUG    2023-08-19 15:21:00,156: on stmt: $324call_method.6 = call $316load_method.2($322binary_lshift.5, func=$316load_method.2, args=[Var($322binary_lshift.5, hashing.py:641)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,156: on stmt: mask.2 = unary(fn=<built-in function invert>, value=$324call_method.6)
DEBUG    2023-08-19 15:21:00,156: on stmt: $334binary_and.10 = t & mask.2
DEBUG    2023-08-19 15:21:00,156: find_def var='t' stmt=$334binary_and.10 = t & mask.2
DEBUG    2023-08-19 15:21:00,156: find_def_from_top label 310
DEBUG    2023-08-19 15:21:00,156: idom 300 from label 310
DEBUG    2023-08-19 15:21:00,156: find_def_from_bottom label 300
DEBUG    2023-08-19 15:21:00,156: find_def_from_top label 300
DEBUG    2023-08-19 15:21:00,156: insert phi node t.11 = phi(incoming_values=[], incoming_blocks=[]) at 300
DEBUG    2023-08-19 15:21:00,156: find_def_from_bottom label 248
DEBUG    2023-08-19 15:21:00,157: incoming_def t.3 = $272binary_and.10 | $294binary_lshift.21
DEBUG    2023-08-19 15:21:00,157: find_def_from_bottom label 238
DEBUG    2023-08-19 15:21:00,157: incoming_def t.10 = phi(incoming_values=[Var(t.2, hashing.py:632), Var(t, hashing.py:626)], incoming_blocks=[186, 150])
DEBUG    2023-08-19 15:21:00,157: replaced with: $334binary_and.10 = t.11 & mask.2
DEBUG    2023-08-19 15:21:00,157: on stmt: $336load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,157: on stmt: $338load_method.12 = getattr(value=$336load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,157: on stmt: $340load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,157: on stmt: $const346.16 = const(int, 4)
DEBUG    2023-08-19 15:21:00,157: on stmt: $348binary_add.17 = boffset + $const346.16
DEBUG    2023-08-19 15:21:00,157: on stmt: $350call_function.18 = call $340load_global.13(src, $348binary_add.17, func=$340load_global.13, args=[Var(src, hashing.py:609), Var($348binary_add.17, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,157: on stmt: $352call_method.19 = call $338load_method.12($350call_function.18, func=$338load_method.12, args=[Var($350call_function.18, hashing.py:642)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,157: on stmt: $356binary_lshift.21 = $352call_method.19 << jmp.2
DEBUG    2023-08-19 15:21:00,157: on stmt: t.4 = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:21:00,157: on stmt: jump 362
DEBUG    2023-08-19 15:21:00,158: ==== SSA block rewrite pass on 362
DEBUG    2023-08-19 15:21:00,158: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,158: on stmt: $const364.1 = const(int, 4)
DEBUG    2023-08-19 15:21:00,158: on stmt: $366compare_op.2 = src_sz.2 >= $const364.1
DEBUG    2023-08-19 15:21:00,158: on stmt: bool368 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,158: on stmt: $368pred = call bool368($366compare_op.2, func=bool368, args=(Var($366compare_op.2, hashing.py:644),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,158: on stmt: branch $368pred, 372, 458
DEBUG    2023-08-19 15:21:00,158: ==== SSA block rewrite pass on 372
DEBUG    2023-08-19 15:21:00,158: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,158: on stmt: $374load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,158: on stmt: $376load_method.2 = getattr(value=$374load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,158: on stmt: $const378.3 = const(int, 18446744069414584320)
DEBUG    2023-08-19 15:21:00,158: on stmt: $380call_method.4 = call $376load_method.2($const378.3, func=$376load_method.2, args=[Var($const378.3, hashing.py:645)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,159: on stmt: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,159: find_def var='t' stmt=$382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,159: find_def_from_top label 372
DEBUG    2023-08-19 15:21:00,159: idom 362 from label 372
DEBUG    2023-08-19 15:21:00,159: find_def_from_bottom label 362
DEBUG    2023-08-19 15:21:00,159: find_def_from_top label 362
DEBUG    2023-08-19 15:21:00,159: insert phi node t.12 = phi(incoming_values=[], incoming_blocks=[]) at 362
DEBUG    2023-08-19 15:21:00,159: find_def_from_bottom label 300
DEBUG    2023-08-19 15:21:00,159: incoming_def t.11 = phi(incoming_values=[Var(t.3, hashing.py:637), Var(t.10, hashing.py:635)], incoming_blocks=[248, 238])
DEBUG    2023-08-19 15:21:00,159: find_def_from_bottom label 310
DEBUG    2023-08-19 15:21:00,159: incoming_def t.4 = $334binary_and.10 | $356binary_lshift.21
DEBUG    2023-08-19 15:21:00,159: replaced with: $382inplace_and.5 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=t.12, rhs=$380call_method.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,159: on stmt: t.5 = $382inplace_and.5
DEBUG    2023-08-19 15:21:00,159: on stmt: $386load_global.6 = global(range: <class 'range'>)
DEBUG    2023-08-19 15:21:00,159: on stmt: $const388.7 = const(int, 4)
DEBUG    2023-08-19 15:21:00,160: on stmt: $390call_function.8 = call $386load_global.6($const388.7, func=$386load_global.6, args=[Var($const388.7, hashing.py:646)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,160: on stmt: $392get_iter.9 = getiter(value=$390call_function.8)
DEBUG    2023-08-19 15:21:00,160: on stmt: $phi394.0 = $392get_iter.9
DEBUG    2023-08-19 15:21:00,160: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,160: ==== SSA block rewrite pass on 394
DEBUG    2023-08-19 15:21:00,160: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,160: on stmt: $394for_iter.1 = iternext(value=$phi394.0)
DEBUG    2023-08-19 15:21:00,160: on stmt: $394for_iter.2 = pair_first(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,160: on stmt: $394for_iter.3 = pair_second(value=$394for_iter.1)
DEBUG    2023-08-19 15:21:00,160: on stmt: $phi396.1 = $394for_iter.2
DEBUG    2023-08-19 15:21:00,160: on stmt: branch $394for_iter.3, 396, 458
DEBUG    2023-08-19 15:21:00,160: ==== SSA block rewrite pass on 396
DEBUG    2023-08-19 15:21:00,160: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,160: on stmt: i = $phi396.1
DEBUG    2023-08-19 15:21:00,160: on stmt: $const400.3 = const(int, 8)
DEBUG    2023-08-19 15:21:00,161: on stmt: jmp.3 = i * $const400.3
DEBUG    2023-08-19 15:21:00,161: on stmt: $406load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,161: on stmt: $408load_method.6 = getattr(value=$406load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,161: on stmt: $414binary_lshift.9 = ohexefef << jmp.3
DEBUG    2023-08-19 15:21:00,161: on stmt: $416call_method.10 = call $408load_method.6($414binary_lshift.9, func=$408load_method.6, args=[Var($414binary_lshift.9, hashing.py:648)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,161: on stmt: mask.3 = unary(fn=<built-in function invert>, value=$416call_method.10)
DEBUG    2023-08-19 15:21:00,161: on stmt: $426binary_and.14 = t & mask.3
DEBUG    2023-08-19 15:21:00,161: find_def var='t' stmt=$426binary_and.14 = t & mask.3
DEBUG    2023-08-19 15:21:00,161: find_def_from_top label 396
DEBUG    2023-08-19 15:21:00,161: idom 394 from label 396
DEBUG    2023-08-19 15:21:00,161: find_def_from_bottom label 394
DEBUG    2023-08-19 15:21:00,161: find_def_from_top label 394
DEBUG    2023-08-19 15:21:00,161: insert phi node t.13 = phi(incoming_values=[], incoming_blocks=[]) at 394
DEBUG    2023-08-19 15:21:00,161: find_def_from_bottom label 396
DEBUG    2023-08-19 15:21:00,161: incoming_def t.6 = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:21:00,162: find_def_from_bottom label 372
DEBUG    2023-08-19 15:21:00,162: incoming_def t.5 = $382inplace_and.5
DEBUG    2023-08-19 15:21:00,162: replaced with: $426binary_and.14 = t.13 & mask.3
DEBUG    2023-08-19 15:21:00,162: on stmt: $428load_global.15 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,162: on stmt: $430load_method.16 = getattr(value=$428load_global.15, attr=uint64)
DEBUG    2023-08-19 15:21:00,162: on stmt: $432load_global.17 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,162: on stmt: $440binary_add.21 = boffset + i
DEBUG    2023-08-19 15:21:00,162: on stmt: $442call_function.22 = call $432load_global.17(src, $440binary_add.21, func=$432load_global.17, args=[Var(src, hashing.py:609), Var($440binary_add.21, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,162: on stmt: $444call_method.23 = call $430load_method.16($442call_function.22, func=$430load_method.16, args=[Var($442call_function.22, hashing.py:649)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,162: on stmt: $448binary_lshift.25 = $444call_method.23 << jmp.3
DEBUG    2023-08-19 15:21:00,162: on stmt: t.6 = $426binary_and.14 | $448binary_lshift.25
DEBUG    2023-08-19 15:21:00,162: on stmt: jump 394
DEBUG    2023-08-19 15:21:00,162: ==== SSA block rewrite pass on 458
DEBUG    2023-08-19 15:21:00,162: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,163: on stmt: $const460.1 = const(int, 3)
DEBUG    2023-08-19 15:21:00,163: on stmt: $462compare_op.2 = src_sz.2 >= $const460.1
DEBUG    2023-08-19 15:21:00,163: on stmt: bool464 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,163: on stmt: $464pred = call bool464($462compare_op.2, func=bool464, args=(Var($462compare_op.2, hashing.py:651),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,163: on stmt: branch $464pred, 468, 520
DEBUG    2023-08-19 15:21:00,163: ==== SSA block rewrite pass on 468
DEBUG    2023-08-19 15:21:00,163: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,163: on stmt: jmp.4 = const(int, 16)
DEBUG    2023-08-19 15:21:00,163: on stmt: $472load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,163: on stmt: $474load_method.2 = getattr(value=$472load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,163: on stmt: $480binary_lshift.5 = ohexefef << jmp.4
DEBUG    2023-08-19 15:21:00,163: on stmt: $482call_method.6 = call $474load_method.2($480binary_lshift.5, func=$474load_method.2, args=[Var($480binary_lshift.5, hashing.py:653)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,163: on stmt: mask.4 = unary(fn=<built-in function invert>, value=$482call_method.6)
DEBUG    2023-08-19 15:21:00,163: on stmt: $492binary_and.10 = t & mask.4
DEBUG    2023-08-19 15:21:00,163: find_def var='t' stmt=$492binary_and.10 = t & mask.4
DEBUG    2023-08-19 15:21:00,164: find_def_from_top label 468
DEBUG    2023-08-19 15:21:00,164: idom 458 from label 468
DEBUG    2023-08-19 15:21:00,164: find_def_from_bottom label 458
DEBUG    2023-08-19 15:21:00,164: find_def_from_top label 458
DEBUG    2023-08-19 15:21:00,164: insert phi node t.14 = phi(incoming_values=[], incoming_blocks=[]) at 458
DEBUG    2023-08-19 15:21:00,164: find_def_from_bottom label 362
DEBUG    2023-08-19 15:21:00,164: incoming_def t.12 = phi(incoming_values=[Var(t.11, hashing.py:640), Var(t.4, hashing.py:642)], incoming_blocks=[300, 310])
DEBUG    2023-08-19 15:21:00,164: find_def_from_bottom label 394
DEBUG    2023-08-19 15:21:00,164: incoming_def t.13 = phi(incoming_values=[Var(t.6, hashing.py:649), Var(t.5, hashing.py:645)], incoming_blocks=[396, 372])
DEBUG    2023-08-19 15:21:00,164: replaced with: $492binary_and.10 = t.14 & mask.4
DEBUG    2023-08-19 15:21:00,164: on stmt: $494load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,164: on stmt: $496load_method.12 = getattr(value=$494load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,164: on stmt: $498load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,164: on stmt: $const504.16 = const(int, 2)
DEBUG    2023-08-19 15:21:00,165: on stmt: $506binary_add.17 = boffset + $const504.16
DEBUG    2023-08-19 15:21:00,165: on stmt: $508call_function.18 = call $498load_global.13(src, $506binary_add.17, func=$498load_global.13, args=[Var(src, hashing.py:609), Var($506binary_add.17, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,165: on stmt: $510call_method.19 = call $496load_method.12($508call_function.18, func=$496load_method.12, args=[Var($508call_function.18, hashing.py:654)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,165: on stmt: $514binary_lshift.21 = $510call_method.19 << jmp.4
DEBUG    2023-08-19 15:21:00,165: on stmt: t.7 = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,165: on stmt: jump 520
DEBUG    2023-08-19 15:21:00,165: ==== SSA block rewrite pass on 520
DEBUG    2023-08-19 15:21:00,165: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,165: on stmt: $const522.1 = const(int, 2)
DEBUG    2023-08-19 15:21:00,165: on stmt: $524compare_op.2 = src_sz.2 >= $const522.1
DEBUG    2023-08-19 15:21:00,165: on stmt: bool526 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,165: on stmt: $526pred = call bool526($524compare_op.2, func=bool526, args=(Var($524compare_op.2, hashing.py:656),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,165: on stmt: branch $526pred, 530, 582
DEBUG    2023-08-19 15:21:00,165: ==== SSA block rewrite pass on 530
DEBUG    2023-08-19 15:21:00,165: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,166: on stmt: jmp.5 = const(int, 8)
DEBUG    2023-08-19 15:21:00,166: on stmt: $534load_global.1 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,166: on stmt: $536load_method.2 = getattr(value=$534load_global.1, attr=uint64)
DEBUG    2023-08-19 15:21:00,166: on stmt: $542binary_lshift.5 = ohexefef << jmp.5
DEBUG    2023-08-19 15:21:00,166: on stmt: $544call_method.6 = call $536load_method.2($542binary_lshift.5, func=$536load_method.2, args=[Var($542binary_lshift.5, hashing.py:658)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,166: on stmt: mask.5 = unary(fn=<built-in function invert>, value=$544call_method.6)
DEBUG    2023-08-19 15:21:00,166: on stmt: $554binary_and.10 = t & mask.5
DEBUG    2023-08-19 15:21:00,166: find_def var='t' stmt=$554binary_and.10 = t & mask.5
DEBUG    2023-08-19 15:21:00,166: find_def_from_top label 530
DEBUG    2023-08-19 15:21:00,166: idom 520 from label 530
DEBUG    2023-08-19 15:21:00,166: find_def_from_bottom label 520
DEBUG    2023-08-19 15:21:00,166: find_def_from_top label 520
DEBUG    2023-08-19 15:21:00,166: insert phi node t.15 = phi(incoming_values=[], incoming_blocks=[]) at 520
DEBUG    2023-08-19 15:21:00,166: find_def_from_bottom label 458
DEBUG    2023-08-19 15:21:00,166: incoming_def t.14 = phi(incoming_values=[Var(t.12, hashing.py:645), Var(t.13, hashing.py:646)], incoming_blocks=[362, 394])
DEBUG    2023-08-19 15:21:00,167: find_def_from_bottom label 468
DEBUG    2023-08-19 15:21:00,167: incoming_def t.7 = $492binary_and.10 | $514binary_lshift.21
DEBUG    2023-08-19 15:21:00,167: replaced with: $554binary_and.10 = t.15 & mask.5
DEBUG    2023-08-19 15:21:00,167: on stmt: $556load_global.11 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,167: on stmt: $558load_method.12 = getattr(value=$556load_global.11, attr=uint64)
DEBUG    2023-08-19 15:21:00,167: on stmt: $560load_global.13 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,167: on stmt: $const566.16 = const(int, 1)
DEBUG    2023-08-19 15:21:00,167: on stmt: $568binary_add.17 = boffset + $const566.16
DEBUG    2023-08-19 15:21:00,167: on stmt: $570call_function.18 = call $560load_global.13(src, $568binary_add.17, func=$560load_global.13, args=[Var(src, hashing.py:609), Var($568binary_add.17, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,167: on stmt: $572call_method.19 = call $558load_method.12($570call_function.18, func=$558load_method.12, args=[Var($570call_function.18, hashing.py:659)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,167: on stmt: $576binary_lshift.21 = $572call_method.19 << jmp.5
DEBUG    2023-08-19 15:21:00,167: on stmt: t.8 = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,167: on stmt: jump 582
DEBUG    2023-08-19 15:21:00,167: ==== SSA block rewrite pass on 582
DEBUG    2023-08-19 15:21:00,168: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,168: on stmt: $const584.1 = const(int, 1)
DEBUG    2023-08-19 15:21:00,168: on stmt: $586compare_op.2 = src_sz.2 >= $const584.1
DEBUG    2023-08-19 15:21:00,168: on stmt: bool588 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,168: on stmt: $588pred = call bool588($586compare_op.2, func=bool588, args=(Var($586compare_op.2, hashing.py:661),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,168: on stmt: branch $588pred, 592, 626
DEBUG    2023-08-19 15:21:00,168: ==== SSA block rewrite pass on 592
DEBUG    2023-08-19 15:21:00,168: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,168: on stmt: mask.6 = unary(fn=<built-in function invert>, value=ohexefef)
DEBUG    2023-08-19 15:21:00,168: on stmt: $602binary_and.4 = t & mask.6
DEBUG    2023-08-19 15:21:00,168: find_def var='t' stmt=$602binary_and.4 = t & mask.6
DEBUG    2023-08-19 15:21:00,168: find_def_from_top label 592
DEBUG    2023-08-19 15:21:00,168: idom 582 from label 592
DEBUG    2023-08-19 15:21:00,168: find_def_from_bottom label 582
DEBUG    2023-08-19 15:21:00,168: find_def_from_top label 582
DEBUG    2023-08-19 15:21:00,169: insert phi node t.16 = phi(incoming_values=[], incoming_blocks=[]) at 582
DEBUG    2023-08-19 15:21:00,169: find_def_from_bottom label 520
DEBUG    2023-08-19 15:21:00,169: incoming_def t.15 = phi(incoming_values=[Var(t.14, hashing.py:652), Var(t.7, hashing.py:654)], incoming_blocks=[458, 468])
DEBUG    2023-08-19 15:21:00,169: find_def_from_bottom label 530
DEBUG    2023-08-19 15:21:00,169: incoming_def t.8 = $554binary_and.10 | $576binary_lshift.21
DEBUG    2023-08-19 15:21:00,169: replaced with: $602binary_and.4 = t.16 & mask.6
DEBUG    2023-08-19 15:21:00,169: on stmt: $604load_global.5 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,169: on stmt: $606load_method.6 = getattr(value=$604load_global.5, attr=uint64)
DEBUG    2023-08-19 15:21:00,169: on stmt: $608load_global.7 = global(grab_byte: <intrinsic grab_byte>)
DEBUG    2023-08-19 15:21:00,169: on stmt: $const614.10 = const(int, 0)
DEBUG    2023-08-19 15:21:00,169: on stmt: $616binary_add.11 = boffset + $const614.10
DEBUG    2023-08-19 15:21:00,170: on stmt: $618call_function.12 = call $608load_global.7(src, $616binary_add.11, func=$608load_global.7, args=[Var(src, hashing.py:609), Var($616binary_add.11, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,170: on stmt: $620call_method.13 = call $606load_method.6($618call_function.12, func=$606load_method.6, args=[Var($618call_function.12, hashing.py:663)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,170: on stmt: t.9 = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,170: on stmt: jump 626
DEBUG    2023-08-19 15:21:00,170: ==== SSA block rewrite pass on 626
DEBUG    2023-08-19 15:21:00,170: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331BD730>
DEBUG    2023-08-19 15:21:00,170: on stmt: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,170: find_def var='t' stmt=b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,170: find_def_from_top label 626
DEBUG    2023-08-19 15:21:00,170: insert phi node t.17 = phi(incoming_values=[], incoming_blocks=[]) at 626
DEBUG    2023-08-19 15:21:00,170: find_def_from_bottom label 592
DEBUG    2023-08-19 15:21:00,170: incoming_def t.9 = $602binary_and.4 | $620call_method.13
DEBUG    2023-08-19 15:21:00,171: find_def_from_bottom label 582
DEBUG    2023-08-19 15:21:00,171: incoming_def t.16 = phi(incoming_values=[Var(t.15, hashing.py:657), Var(t.8, hashing.py:659)], incoming_blocks=[520, 530])
DEBUG    2023-08-19 15:21:00,171: replaced with: b.1 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=b, rhs=t.17, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,171: on stmt: v3.1 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v3.7, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,171: on stmt: $642load_global.6 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,171: on stmt: $652call_function.11 = call $642load_global.6(v0.7, v1.5, v2.6, v3.1, func=$642load_global.6, args=[Var(v0.7, hashing.py:617), Var(v1.5, hashing.py:617), Var(v2.6, hashing.py:617), Var(v3.1, hashing.py:666)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,171: on stmt: $654unpack_sequence.16 = exhaust_iter(value=$652call_function.11, count=4)
DEBUG    2023-08-19 15:21:00,171: on stmt: $654unpack_sequence.12 = static_getitem(value=$654unpack_sequence.16, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,171: on stmt: $654unpack_sequence.13 = static_getitem(value=$654unpack_sequence.16, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,171: on stmt: $654unpack_sequence.14 = static_getitem(value=$654unpack_sequence.16, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,171: on stmt: $654unpack_sequence.15 = static_getitem(value=$654unpack_sequence.16, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,171: on stmt: v0.1 = $654unpack_sequence.12
DEBUG    2023-08-19 15:21:00,172: on stmt: v1.1 = $654unpack_sequence.13
DEBUG    2023-08-19 15:21:00,172: on stmt: v2.1 = $654unpack_sequence.14
DEBUG    2023-08-19 15:21:00,172: on stmt: v3.2 = $654unpack_sequence.15
DEBUG    2023-08-19 15:21:00,172: on stmt: v0.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v0.1, rhs=b.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,172: on stmt: v2.2 = inplace_binop(fn=<built-in function ixor>, immutable_fn=<built-in function xor>, lhs=v2.1, rhs=ohexefef, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,172: on stmt: $680load_global.23 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,172: on stmt: $690call_function.28 = call $680load_global.23(v0.2, v1.1, v2.2, v3.2, func=$680load_global.23, args=[Var(v0.2, hashing.py:668), Var(v1.1, hashing.py:667), Var(v2.2, hashing.py:669), Var(v3.2, hashing.py:667)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,172: on stmt: $692unpack_sequence.33 = exhaust_iter(value=$690call_function.28, count=4)
DEBUG    2023-08-19 15:21:00,172: on stmt: $692unpack_sequence.29 = static_getitem(value=$692unpack_sequence.33, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,172: on stmt: $692unpack_sequence.30 = static_getitem(value=$692unpack_sequence.33, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,172: on stmt: $692unpack_sequence.31 = static_getitem(value=$692unpack_sequence.33, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,172: on stmt: $692unpack_sequence.32 = static_getitem(value=$692unpack_sequence.33, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,172: on stmt: v0.3 = $692unpack_sequence.29
DEBUG    2023-08-19 15:21:00,172: on stmt: v1.2 = $692unpack_sequence.30
DEBUG    2023-08-19 15:21:00,172: on stmt: v2.3 = $692unpack_sequence.31
DEBUG    2023-08-19 15:21:00,173: on stmt: v3.3 = $692unpack_sequence.32
DEBUG    2023-08-19 15:21:00,173: on stmt: $702load_global.34 = global(_DOUBLE_ROUND: <function _DOUBLE_ROUND at 0x0000025F3198DCA0>)
DEBUG    2023-08-19 15:21:00,173: on stmt: $712call_function.39 = call $702load_global.34(v0.3, v1.2, v2.3, v3.3, func=$702load_global.34, args=[Var(v0.3, hashing.py:670), Var(v1.2, hashing.py:670), Var(v2.3, hashing.py:670), Var(v3.3, hashing.py:670)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,173: on stmt: $714unpack_sequence.44 = exhaust_iter(value=$712call_function.39, count=4)
DEBUG    2023-08-19 15:21:00,173: on stmt: $714unpack_sequence.40 = static_getitem(value=$714unpack_sequence.44, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,173: on stmt: $714unpack_sequence.41 = static_getitem(value=$714unpack_sequence.44, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,173: on stmt: $714unpack_sequence.42 = static_getitem(value=$714unpack_sequence.44, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,173: on stmt: $714unpack_sequence.43 = static_getitem(value=$714unpack_sequence.44, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,173: on stmt: v0.4 = $714unpack_sequence.40
DEBUG    2023-08-19 15:21:00,173: on stmt: v1.3 = $714unpack_sequence.41
DEBUG    2023-08-19 15:21:00,173: on stmt: v2.4 = $714unpack_sequence.42
DEBUG    2023-08-19 15:21:00,173: on stmt: v3.4 = $714unpack_sequence.43
DEBUG    2023-08-19 15:21:00,173: on stmt: $728binary_xor.47 = v0.4 ^ v1.3
DEBUG    2023-08-19 15:21:00,173: on stmt: $734binary_xor.50 = v2.4 ^ v3.4
DEBUG    2023-08-19 15:21:00,174: on stmt: t.1 = $728binary_xor.47 ^ $734binary_xor.50
DEBUG    2023-08-19 15:21:00,174: on stmt: $742return_value.53 = cast(value=t.1)
DEBUG    2023-08-19 15:21:00,174: on stmt: return $742return_value.53
DEBUG    2023-08-19 15:21:00,202: bytecode dump:
>          0	NOP(arg=None, lineno=591)
           2	LOAD_GLOBAL(arg=0, lineno=591)
           4	LOAD_FAST(arg=0, lineno=591)
           6	LOAD_FAST(arg=1, lineno=591)
           8	LOAD_FAST(arg=2, lineno=591)
          10	LOAD_FAST(arg=3, lineno=591)
          12	LOAD_CONST(arg=1, lineno=591)
          14	LOAD_CONST(arg=2, lineno=591)
          16	CALL_FUNCTION(arg=6, lineno=591)
          18	UNPACK_SEQUENCE(arg=4, lineno=591)
          20	STORE_FAST(arg=0, lineno=591)
          22	STORE_FAST(arg=1, lineno=591)
          24	STORE_FAST(arg=2, lineno=591)
          26	STORE_FAST(arg=3, lineno=591)
          28	LOAD_GLOBAL(arg=0, lineno=592)
          30	LOAD_FAST(arg=2, lineno=592)
          32	LOAD_FAST(arg=1, lineno=592)
          34	LOAD_FAST(arg=0, lineno=592)
          36	LOAD_FAST(arg=3, lineno=592)
          38	LOAD_CONST(arg=3, lineno=592)
          40	LOAD_CONST(arg=4, lineno=592)
          42	CALL_FUNCTION(arg=6, lineno=592)
          44	UNPACK_SEQUENCE(arg=4, lineno=592)
          46	STORE_FAST(arg=2, lineno=592)
          48	STORE_FAST(arg=1, lineno=592)
          50	STORE_FAST(arg=0, lineno=592)
          52	STORE_FAST(arg=3, lineno=592)
          54	LOAD_GLOBAL(arg=0, lineno=593)
          56	LOAD_FAST(arg=0, lineno=593)
          58	LOAD_FAST(arg=1, lineno=593)
          60	LOAD_FAST(arg=2, lineno=593)
          62	LOAD_FAST(arg=3, lineno=593)
          64	LOAD_CONST(arg=1, lineno=593)
          66	LOAD_CONST(arg=2, lineno=593)
          68	CALL_FUNCTION(arg=6, lineno=593)
          70	UNPACK_SEQUENCE(arg=4, lineno=593)
          72	STORE_FAST(arg=0, lineno=593)
          74	STORE_FAST(arg=1, lineno=593)
          76	STORE_FAST(arg=2, lineno=593)
          78	STORE_FAST(arg=3, lineno=593)
          80	LOAD_GLOBAL(arg=0, lineno=594)
          82	LOAD_FAST(arg=2, lineno=594)
          84	LOAD_FAST(arg=1, lineno=594)
          86	LOAD_FAST(arg=0, lineno=594)
          88	LOAD_FAST(arg=3, lineno=594)
          90	LOAD_CONST(arg=3, lineno=594)
          92	LOAD_CONST(arg=4, lineno=594)
          94	CALL_FUNCTION(arg=6, lineno=594)
          96	UNPACK_SEQUENCE(arg=4, lineno=594)
          98	STORE_FAST(arg=2, lineno=594)
         100	STORE_FAST(arg=1, lineno=594)
         102	STORE_FAST(arg=0, lineno=594)
         104	STORE_FAST(arg=3, lineno=594)
         106	LOAD_FAST(arg=0, lineno=595)
         108	LOAD_FAST(arg=1, lineno=595)
         110	LOAD_FAST(arg=2, lineno=595)
         112	LOAD_FAST(arg=3, lineno=595)
         114	BUILD_TUPLE(arg=4, lineno=595)
         116	RETURN_VALUE(arg=None, lineno=595)
DEBUG    2023-08-19 15:21:00,202: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,202: stack: []
DEBUG    2023-08-19 15:21:00,202: dispatch pc=0, inst=NOP(arg=None, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack []
DEBUG    2023-08-19 15:21:00,202: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack []
DEBUG    2023-08-19 15:21:00,202: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$2load_global.0', '$v04.1']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$2load_global.0', '$v04.1', '$v16.2']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$2load_global.0', '$v04.1', '$v16.2', '$v28.3']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$2load_global.0', '$v04.1', '$v16.2', '$v28.3', '$v310.4']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$2load_global.0', '$v04.1', '$v16.2', '$v28.3', '$v310.4', '$const12.5']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=16, inst=CALL_FUNCTION(arg=6, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$2load_global.0', '$v04.1', '$v16.2', '$v28.3', '$v310.4', '$const12.5', '$const14.6']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=18, inst=UNPACK_SEQUENCE(arg=4, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$16call_function.7']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=20, inst=STORE_FAST(arg=0, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$18unpack_sequence.11', '$18unpack_sequence.10', '$18unpack_sequence.9', '$18unpack_sequence.8']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=22, inst=STORE_FAST(arg=1, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$18unpack_sequence.11', '$18unpack_sequence.10', '$18unpack_sequence.9']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=24, inst=STORE_FAST(arg=2, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$18unpack_sequence.11', '$18unpack_sequence.10']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=26, inst=STORE_FAST(arg=3, lineno=591)
DEBUG    2023-08-19 15:21:00,202: stack ['$18unpack_sequence.11']
DEBUG    2023-08-19 15:21:00,202: dispatch pc=28, inst=LOAD_GLOBAL(arg=0, lineno=592)
DEBUG    2023-08-19 15:21:00,202: stack []
DEBUG    2023-08-19 15:21:00,202: dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$28load_global.13']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$28load_global.13', '$v230.14']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$28load_global.13', '$v230.14', '$v132.15']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$28load_global.13', '$v230.14', '$v132.15', '$v034.16']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=38, inst=LOAD_CONST(arg=3, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$28load_global.13', '$v230.14', '$v132.15', '$v034.16', '$v336.17']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$28load_global.13', '$v230.14', '$v132.15', '$v034.16', '$v336.17', '$const38.18']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=42, inst=CALL_FUNCTION(arg=6, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$28load_global.13', '$v230.14', '$v132.15', '$v034.16', '$v336.17', '$const38.18', '$const40.19']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=44, inst=UNPACK_SEQUENCE(arg=4, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$42call_function.20']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=46, inst=STORE_FAST(arg=2, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$44unpack_sequence.24', '$44unpack_sequence.23', '$44unpack_sequence.22', '$44unpack_sequence.21']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=48, inst=STORE_FAST(arg=1, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$44unpack_sequence.24', '$44unpack_sequence.23', '$44unpack_sequence.22']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=50, inst=STORE_FAST(arg=0, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$44unpack_sequence.24', '$44unpack_sequence.23']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=52, inst=STORE_FAST(arg=3, lineno=592)
DEBUG    2023-08-19 15:21:00,210: stack ['$44unpack_sequence.24']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=54, inst=LOAD_GLOBAL(arg=0, lineno=593)
DEBUG    2023-08-19 15:21:00,210: stack []
DEBUG    2023-08-19 15:21:00,210: dispatch pc=56, inst=LOAD_FAST(arg=0, lineno=593)
DEBUG    2023-08-19 15:21:00,210: stack ['$54load_global.26']
DEBUG    2023-08-19 15:21:00,210: dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=593)
DEBUG    2023-08-19 15:21:00,210: stack ['$54load_global.26', '$v056.27']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$54load_global.26', '$v056.27', '$v158.28']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$54load_global.26', '$v056.27', '$v158.28', '$v260.29']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$54load_global.26', '$v056.27', '$v158.28', '$v260.29', '$v362.30']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$54load_global.26', '$v056.27', '$v158.28', '$v260.29', '$v362.30', '$const64.31']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=68, inst=CALL_FUNCTION(arg=6, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$54load_global.26', '$v056.27', '$v158.28', '$v260.29', '$v362.30', '$const64.31', '$const66.32']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=70, inst=UNPACK_SEQUENCE(arg=4, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$68call_function.33']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=72, inst=STORE_FAST(arg=0, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$70unpack_sequence.37', '$70unpack_sequence.36', '$70unpack_sequence.35', '$70unpack_sequence.34']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=74, inst=STORE_FAST(arg=1, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$70unpack_sequence.37', '$70unpack_sequence.36', '$70unpack_sequence.35']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=76, inst=STORE_FAST(arg=2, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$70unpack_sequence.37', '$70unpack_sequence.36']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=78, inst=STORE_FAST(arg=3, lineno=593)
DEBUG    2023-08-19 15:21:00,212: stack ['$70unpack_sequence.37']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=80, inst=LOAD_GLOBAL(arg=0, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack []
DEBUG    2023-08-19 15:21:00,212: dispatch pc=82, inst=LOAD_FAST(arg=2, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$80load_global.39']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=84, inst=LOAD_FAST(arg=1, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$80load_global.39', '$v282.40']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$80load_global.39', '$v282.40', '$v184.41']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=88, inst=LOAD_FAST(arg=3, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$80load_global.39', '$v282.40', '$v184.41', '$v086.42']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=90, inst=LOAD_CONST(arg=3, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$80load_global.39', '$v282.40', '$v184.41', '$v086.42', '$v388.43']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=92, inst=LOAD_CONST(arg=4, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$80load_global.39', '$v282.40', '$v184.41', '$v086.42', '$v388.43', '$const90.44']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=94, inst=CALL_FUNCTION(arg=6, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$80load_global.39', '$v282.40', '$v184.41', '$v086.42', '$v388.43', '$const90.44', '$const92.45']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=96, inst=UNPACK_SEQUENCE(arg=4, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$94call_function.46']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=98, inst=STORE_FAST(arg=2, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$96unpack_sequence.50', '$96unpack_sequence.49', '$96unpack_sequence.48', '$96unpack_sequence.47']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=100, inst=STORE_FAST(arg=1, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$96unpack_sequence.50', '$96unpack_sequence.49', '$96unpack_sequence.48']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=102, inst=STORE_FAST(arg=0, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$96unpack_sequence.50', '$96unpack_sequence.49']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=104, inst=STORE_FAST(arg=3, lineno=594)
DEBUG    2023-08-19 15:21:00,212: stack ['$96unpack_sequence.50']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=106, inst=LOAD_FAST(arg=0, lineno=595)
DEBUG    2023-08-19 15:21:00,212: stack []
DEBUG    2023-08-19 15:21:00,212: dispatch pc=108, inst=LOAD_FAST(arg=1, lineno=595)
DEBUG    2023-08-19 15:21:00,212: stack ['$v0106.52']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=595)
DEBUG    2023-08-19 15:21:00,212: stack ['$v0106.52', '$v1108.53']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=112, inst=LOAD_FAST(arg=3, lineno=595)
DEBUG    2023-08-19 15:21:00,212: stack ['$v0106.52', '$v1108.53', '$v2110.54']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=114, inst=BUILD_TUPLE(arg=4, lineno=595)
DEBUG    2023-08-19 15:21:00,212: stack ['$v0106.52', '$v1108.53', '$v2110.54', '$v3112.55']
DEBUG    2023-08-19 15:21:00,212: dispatch pc=116, inst=RETURN_VALUE(arg=None, lineno=595)
DEBUG    2023-08-19 15:21:00,212: stack ['$114build_tuple.56']
DEBUG    2023-08-19 15:21:00,212: end state. edges=[]
DEBUG    2023-08-19 15:21:00,212: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:00,212: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:00,212: defmap: {}
DEBUG    2023-08-19 15:21:00,212: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,212: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,212: keep phismap: {}
DEBUG    2023-08-19 15:21:00,212: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:00,212: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:00,212: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$v04.1'}), (6, {'res': '$v16.2'}), (8, {'res': '$v28.3'}), (10, {'res': '$v310.4'}), (12, {'res': '$const12.5'}), (14, {'res': '$const14.6'}), (16, {'func': '$2load_global.0', 'args': ['$v04.1', '$v16.2', '$v28.3', '$v310.4', '$const12.5', '$const14.6'], 'res': '$16call_function.7'}), (18, {'iterable': '$16call_function.7', 'stores': ['$18unpack_sequence.8', '$18unpack_sequence.9', '$18unpack_sequence.10', '$18unpack_sequence.11'], 'tupleobj': '$18unpack_sequence.12'}), (20, {'value': '$18unpack_sequence.8'}), (22, {'value': '$18unpack_sequence.9'}), (24, {'value': '$18unpack_sequence.10'}), (26, {'value': '$18unpack_sequence.11'}), (28, {'res': '$28load_global.13'}), (30, {'res': '$v230.14'}), (32, {'res': '$v132.15'}), (34, {'res': '$v034.16'}), (36, {'res': '$v336.17'}), (38, {'res': '$const38.18'}), (40, {'res': '$const40.19'}), (42, {'func': '$28load_global.13', 'args': ['$v230.14', '$v132.15', '$v034.16', '$v336.17', '$const38.18', '$const40.19'], 'res': '$42call_function.20'}), (44, {'iterable': '$42call_function.20', 'stores': ['$44unpack_sequence.21', '$44unpack_sequence.22', '$44unpack_sequence.23', '$44unpack_sequence.24'], 'tupleobj': '$44unpack_sequence.25'}), (46, {'value': '$44unpack_sequence.21'}), (48, {'value': '$44unpack_sequence.22'}), (50, {'value': '$44unpack_sequence.23'}), (52, {'value': '$44unpack_sequence.24'}), (54, {'res': '$54load_global.26'}), (56, {'res': '$v056.27'}), (58, {'res': '$v158.28'}), (60, {'res': '$v260.29'}), (62, {'res': '$v362.30'}), (64, {'res': '$const64.31'}), (66, {'res': '$const66.32'}), (68, {'func': '$54load_global.26', 'args': ['$v056.27', '$v158.28', '$v260.29', '$v362.30', '$const64.31', '$const66.32'], 'res': '$68call_function.33'}), (70, {'iterable': '$68call_function.33', 'stores': ['$70unpack_sequence.34', '$70unpack_sequence.35', '$70unpack_sequence.36', '$70unpack_sequence.37'], 'tupleobj': '$70unpack_sequence.38'}), (72, {'value': '$70unpack_sequence.34'}), (74, {'value': '$70unpack_sequence.35'}), (76, {'value': '$70unpack_sequence.36'}), (78, {'value': '$70unpack_sequence.37'}), (80, {'res': '$80load_global.39'}), (82, {'res': '$v282.40'}), (84, {'res': '$v184.41'}), (86, {'res': '$v086.42'}), (88, {'res': '$v388.43'}), (90, {'res': '$const90.44'}), (92, {'res': '$const92.45'}), (94, {'func': '$80load_global.39', 'args': ['$v282.40', '$v184.41', '$v086.42', '$v388.43', '$const90.44', '$const92.45'], 'res': '$94call_function.46'}), (96, {'iterable': '$94call_function.46', 'stores': ['$96unpack_sequence.47', '$96unpack_sequence.48', '$96unpack_sequence.49', '$96unpack_sequence.50'], 'tupleobj': '$96unpack_sequence.51'}), (98, {'value': '$96unpack_sequence.47'}), (100, {'value': '$96unpack_sequence.48'}), (102, {'value': '$96unpack_sequence.49'}), (104, {'value': '$96unpack_sequence.50'}), (106, {'res': '$v0106.52'}), (108, {'res': '$v1108.53'}), (110, {'res': '$v2110.54'}), (112, {'res': '$v3112.55'}), (114, {'items': ['$v0106.52', '$v1108.53', '$v2110.54', '$v3112.55'], 'res': '$114build_tuple.56'}), (116, {'retval': '$114build_tuple.56', 'castval': '$116return_value.57'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:00,212: label 0:
    v0 = arg(0, name=v0)                     ['v0']
    v1 = arg(1, name=v1)                     ['v1']
    v2 = arg(2, name=v2)                     ['v2']
    v3 = arg(3, name=v3)                     ['v3']
    $2load_global.0 = global(_HALF_ROUND: <function _HALF_ROUND at 0x0000025F3198DB80>) ['$2load_global.0']
    $const12.5 = const(int, 13)              ['$const12.5']
    $const14.6 = const(int, 16)              ['$const14.6']
    $16call_function.7 = call $2load_global.0(v0, v1, v2, v3, $const12.5, $const14.6, func=$2load_global.0, args=[Var(v0, hashing.py:591), Var(v1, hashing.py:591), Var(v2, hashing.py:591), Var(v3, hashing.py:591), Var($const12.5, hashing.py:591), Var($const14.6, hashing.py:591)], kws=(), vararg=None, target=None) ['$16call_function.7', '$2load_global.0', '$const12.5', '$const14.6', 'v0', 'v1', 'v2', 'v3']
    $18unpack_sequence.12 = exhaust_iter(value=$16call_function.7, count=4) ['$16call_function.7', '$18unpack_sequence.12']
    $18unpack_sequence.8 = static_getitem(value=$18unpack_sequence.12, index=0, index_var=None, fn=<built-in function getitem>) ['$18unpack_sequence.12', '$18unpack_sequence.8']
    $18unpack_sequence.9 = static_getitem(value=$18unpack_sequence.12, index=1, index_var=None, fn=<built-in function getitem>) ['$18unpack_sequence.12', '$18unpack_sequence.9']
    $18unpack_sequence.10 = static_getitem(value=$18unpack_sequence.12, index=2, index_var=None, fn=<built-in function getitem>) ['$18unpack_sequence.10', '$18unpack_sequence.12']
    $18unpack_sequence.11 = static_getitem(value=$18unpack_sequence.12, index=3, index_var=None, fn=<built-in function getitem>) ['$18unpack_sequence.11', '$18unpack_sequence.12']
    v0.1 = $18unpack_sequence.8              ['$18unpack_sequence.8', 'v0.1']
    v1.1 = $18unpack_sequence.9              ['$18unpack_sequence.9', 'v1.1']
    v2.1 = $18unpack_sequence.10             ['$18unpack_sequence.10', 'v2.1']
    v3.1 = $18unpack_sequence.11             ['$18unpack_sequence.11', 'v3.1']
    $28load_global.13 = global(_HALF_ROUND: <function _HALF_ROUND at 0x0000025F3198DB80>) ['$28load_global.13']
    $const38.18 = const(int, 17)             ['$const38.18']
    $const40.19 = const(int, 21)             ['$const40.19']
    $42call_function.20 = call $28load_global.13(v2.1, v1.1, v0.1, v3.1, $const38.18, $const40.19, func=$28load_global.13, args=[Var(v2.1, hashing.py:591), Var(v1.1, hashing.py:591), Var(v0.1, hashing.py:591), Var(v3.1, hashing.py:591), Var($const38.18, hashing.py:592), Var($const40.19, hashing.py:592)], kws=(), vararg=None, target=None) ['$28load_global.13', '$42call_function.20', '$const38.18', '$const40.19', 'v0.1', 'v1.1', 'v2.1', 'v3.1']
    $44unpack_sequence.25 = exhaust_iter(value=$42call_function.20, count=4) ['$42call_function.20', '$44unpack_sequence.25']
    $44unpack_sequence.21 = static_getitem(value=$44unpack_sequence.25, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.21', '$44unpack_sequence.25']
    $44unpack_sequence.22 = static_getitem(value=$44unpack_sequence.25, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.22', '$44unpack_sequence.25']
    $44unpack_sequence.23 = static_getitem(value=$44unpack_sequence.25, index=2, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.23', '$44unpack_sequence.25']
    $44unpack_sequence.24 = static_getitem(value=$44unpack_sequence.25, index=3, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.24', '$44unpack_sequence.25']
    v2.2 = $44unpack_sequence.21             ['$44unpack_sequence.21', 'v2.2']
    v1.2 = $44unpack_sequence.22             ['$44unpack_sequence.22', 'v1.2']
    v0.2 = $44unpack_sequence.23             ['$44unpack_sequence.23', 'v0.2']
    v3.2 = $44unpack_sequence.24             ['$44unpack_sequence.24', 'v3.2']
    $54load_global.26 = global(_HALF_ROUND: <function _HALF_ROUND at 0x0000025F3198DB80>) ['$54load_global.26']
    $const64.31 = const(int, 13)             ['$const64.31']
    $const66.32 = const(int, 16)             ['$const66.32']
    $68call_function.33 = call $54load_global.26(v0.2, v1.2, v2.2, v3.2, $const64.31, $const66.32, func=$54load_global.26, args=[Var(v0.2, hashing.py:592), Var(v1.2, hashing.py:592), Var(v2.2, hashing.py:592), Var(v3.2, hashing.py:592), Var($const64.31, hashing.py:593), Var($const66.32, hashing.py:593)], kws=(), vararg=None, target=None) ['$54load_global.26', '$68call_function.33', '$const64.31', '$const66.32', 'v0.2', 'v1.2', 'v2.2', 'v3.2']
    $70unpack_sequence.38 = exhaust_iter(value=$68call_function.33, count=4) ['$68call_function.33', '$70unpack_sequence.38']
    $70unpack_sequence.34 = static_getitem(value=$70unpack_sequence.38, index=0, index_var=None, fn=<built-in function getitem>) ['$70unpack_sequence.34', '$70unpack_sequence.38']
    $70unpack_sequence.35 = static_getitem(value=$70unpack_sequence.38, index=1, index_var=None, fn=<built-in function getitem>) ['$70unpack_sequence.35', '$70unpack_sequence.38']
    $70unpack_sequence.36 = static_getitem(value=$70unpack_sequence.38, index=2, index_var=None, fn=<built-in function getitem>) ['$70unpack_sequence.36', '$70unpack_sequence.38']
    $70unpack_sequence.37 = static_getitem(value=$70unpack_sequence.38, index=3, index_var=None, fn=<built-in function getitem>) ['$70unpack_sequence.37', '$70unpack_sequence.38']
    v0.3 = $70unpack_sequence.34             ['$70unpack_sequence.34', 'v0.3']
    v1.3 = $70unpack_sequence.35             ['$70unpack_sequence.35', 'v1.3']
    v2.3 = $70unpack_sequence.36             ['$70unpack_sequence.36', 'v2.3']
    v3.3 = $70unpack_sequence.37             ['$70unpack_sequence.37', 'v3.3']
    $80load_global.39 = global(_HALF_ROUND: <function _HALF_ROUND at 0x0000025F3198DB80>) ['$80load_global.39']
    $const90.44 = const(int, 17)             ['$const90.44']
    $const92.45 = const(int, 21)             ['$const92.45']
    $94call_function.46 = call $80load_global.39(v2.3, v1.3, v0.3, v3.3, $const90.44, $const92.45, func=$80load_global.39, args=[Var(v2.3, hashing.py:593), Var(v1.3, hashing.py:593), Var(v0.3, hashing.py:593), Var(v3.3, hashing.py:593), Var($const90.44, hashing.py:594), Var($const92.45, hashing.py:594)], kws=(), vararg=None, target=None) ['$80load_global.39', '$94call_function.46', '$const90.44', '$const92.45', 'v0.3', 'v1.3', 'v2.3', 'v3.3']
    $96unpack_sequence.51 = exhaust_iter(value=$94call_function.46, count=4) ['$94call_function.46', '$96unpack_sequence.51']
    $96unpack_sequence.47 = static_getitem(value=$96unpack_sequence.51, index=0, index_var=None, fn=<built-in function getitem>) ['$96unpack_sequence.47', '$96unpack_sequence.51']
    $96unpack_sequence.48 = static_getitem(value=$96unpack_sequence.51, index=1, index_var=None, fn=<built-in function getitem>) ['$96unpack_sequence.48', '$96unpack_sequence.51']
    $96unpack_sequence.49 = static_getitem(value=$96unpack_sequence.51, index=2, index_var=None, fn=<built-in function getitem>) ['$96unpack_sequence.49', '$96unpack_sequence.51']
    $96unpack_sequence.50 = static_getitem(value=$96unpack_sequence.51, index=3, index_var=None, fn=<built-in function getitem>) ['$96unpack_sequence.50', '$96unpack_sequence.51']
    v2.4 = $96unpack_sequence.47             ['$96unpack_sequence.47', 'v2.4']
    v1.4 = $96unpack_sequence.48             ['$96unpack_sequence.48', 'v1.4']
    v0.4 = $96unpack_sequence.49             ['$96unpack_sequence.49', 'v0.4']
    v3.4 = $96unpack_sequence.50             ['$96unpack_sequence.50', 'v3.4']
    $114build_tuple.56 = build_tuple(items=[Var(v0.4, hashing.py:594), Var(v1.4, hashing.py:594), Var(v2.4, hashing.py:594), Var(v3.4, hashing.py:594)]) ['$114build_tuple.56', 'v0.4', 'v1.4', 'v2.4', 'v3.4']
    $116return_value.57 = cast(value=$114build_tuple.56) ['$114build_tuple.56', '$116return_value.57']
    return $116return_value.57               ['$116return_value.57']

DEBUG    2023-08-19 15:21:00,222: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:00,222: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3327FEB0>
DEBUG    2023-08-19 15:21:00,222: on stmt: v0 = arg(0, name=v0)
DEBUG    2023-08-19 15:21:00,222: on stmt: v1 = arg(1, name=v1)
DEBUG    2023-08-19 15:21:00,222: on stmt: v2 = arg(2, name=v2)
DEBUG    2023-08-19 15:21:00,222: on stmt: v3 = arg(3, name=v3)
DEBUG    2023-08-19 15:21:00,222: on stmt: $2load_global.0 = global(_HALF_ROUND: <function _HALF_ROUND at 0x0000025F3198DB80>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $const12.5 = const(int, 13)
DEBUG    2023-08-19 15:21:00,222: on stmt: $const14.6 = const(int, 16)
DEBUG    2023-08-19 15:21:00,222: on stmt: $16call_function.7 = call $2load_global.0(v0, v1, v2, v3, $const12.5, $const14.6, func=$2load_global.0, args=[Var(v0, hashing.py:591), Var(v1, hashing.py:591), Var(v2, hashing.py:591), Var(v3, hashing.py:591), Var($const12.5, hashing.py:591), Var($const14.6, hashing.py:591)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,222: on stmt: $18unpack_sequence.12 = exhaust_iter(value=$16call_function.7, count=4)
DEBUG    2023-08-19 15:21:00,222: on stmt: $18unpack_sequence.8 = static_getitem(value=$18unpack_sequence.12, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $18unpack_sequence.9 = static_getitem(value=$18unpack_sequence.12, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $18unpack_sequence.10 = static_getitem(value=$18unpack_sequence.12, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $18unpack_sequence.11 = static_getitem(value=$18unpack_sequence.12, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: v0.1 = $18unpack_sequence.8
DEBUG    2023-08-19 15:21:00,222: on stmt: v1.1 = $18unpack_sequence.9
DEBUG    2023-08-19 15:21:00,222: on stmt: v2.1 = $18unpack_sequence.10
DEBUG    2023-08-19 15:21:00,222: on stmt: v3.1 = $18unpack_sequence.11
DEBUG    2023-08-19 15:21:00,222: on stmt: $28load_global.13 = global(_HALF_ROUND: <function _HALF_ROUND at 0x0000025F3198DB80>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $const38.18 = const(int, 17)
DEBUG    2023-08-19 15:21:00,222: on stmt: $const40.19 = const(int, 21)
DEBUG    2023-08-19 15:21:00,222: on stmt: $42call_function.20 = call $28load_global.13(v2.1, v1.1, v0.1, v3.1, $const38.18, $const40.19, func=$28load_global.13, args=[Var(v2.1, hashing.py:591), Var(v1.1, hashing.py:591), Var(v0.1, hashing.py:591), Var(v3.1, hashing.py:591), Var($const38.18, hashing.py:592), Var($const40.19, hashing.py:592)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,222: on stmt: $44unpack_sequence.25 = exhaust_iter(value=$42call_function.20, count=4)
DEBUG    2023-08-19 15:21:00,222: on stmt: $44unpack_sequence.21 = static_getitem(value=$44unpack_sequence.25, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $44unpack_sequence.22 = static_getitem(value=$44unpack_sequence.25, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $44unpack_sequence.23 = static_getitem(value=$44unpack_sequence.25, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $44unpack_sequence.24 = static_getitem(value=$44unpack_sequence.25, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: v2.2 = $44unpack_sequence.21
DEBUG    2023-08-19 15:21:00,222: on stmt: v1.2 = $44unpack_sequence.22
DEBUG    2023-08-19 15:21:00,222: on stmt: v0.2 = $44unpack_sequence.23
DEBUG    2023-08-19 15:21:00,222: on stmt: v3.2 = $44unpack_sequence.24
DEBUG    2023-08-19 15:21:00,222: on stmt: $54load_global.26 = global(_HALF_ROUND: <function _HALF_ROUND at 0x0000025F3198DB80>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $const64.31 = const(int, 13)
DEBUG    2023-08-19 15:21:00,222: on stmt: $const66.32 = const(int, 16)
DEBUG    2023-08-19 15:21:00,222: on stmt: $68call_function.33 = call $54load_global.26(v0.2, v1.2, v2.2, v3.2, $const64.31, $const66.32, func=$54load_global.26, args=[Var(v0.2, hashing.py:592), Var(v1.2, hashing.py:592), Var(v2.2, hashing.py:592), Var(v3.2, hashing.py:592), Var($const64.31, hashing.py:593), Var($const66.32, hashing.py:593)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,222: on stmt: $70unpack_sequence.38 = exhaust_iter(value=$68call_function.33, count=4)
DEBUG    2023-08-19 15:21:00,222: on stmt: $70unpack_sequence.34 = static_getitem(value=$70unpack_sequence.38, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $70unpack_sequence.35 = static_getitem(value=$70unpack_sequence.38, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $70unpack_sequence.36 = static_getitem(value=$70unpack_sequence.38, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $70unpack_sequence.37 = static_getitem(value=$70unpack_sequence.38, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: v0.3 = $70unpack_sequence.34
DEBUG    2023-08-19 15:21:00,222: on stmt: v1.3 = $70unpack_sequence.35
DEBUG    2023-08-19 15:21:00,222: on stmt: v2.3 = $70unpack_sequence.36
DEBUG    2023-08-19 15:21:00,222: on stmt: v3.3 = $70unpack_sequence.37
DEBUG    2023-08-19 15:21:00,222: on stmt: $80load_global.39 = global(_HALF_ROUND: <function _HALF_ROUND at 0x0000025F3198DB80>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $const90.44 = const(int, 17)
DEBUG    2023-08-19 15:21:00,222: on stmt: $const92.45 = const(int, 21)
DEBUG    2023-08-19 15:21:00,222: on stmt: $94call_function.46 = call $80load_global.39(v2.3, v1.3, v0.3, v3.3, $const90.44, $const92.45, func=$80load_global.39, args=[Var(v2.3, hashing.py:593), Var(v1.3, hashing.py:593), Var(v0.3, hashing.py:593), Var(v3.3, hashing.py:593), Var($const90.44, hashing.py:594), Var($const92.45, hashing.py:594)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,222: on stmt: $96unpack_sequence.51 = exhaust_iter(value=$94call_function.46, count=4)
DEBUG    2023-08-19 15:21:00,222: on stmt: $96unpack_sequence.47 = static_getitem(value=$96unpack_sequence.51, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $96unpack_sequence.48 = static_getitem(value=$96unpack_sequence.51, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $96unpack_sequence.49 = static_getitem(value=$96unpack_sequence.51, index=2, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: $96unpack_sequence.50 = static_getitem(value=$96unpack_sequence.51, index=3, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:00,222: on stmt: v2.4 = $96unpack_sequence.47
DEBUG    2023-08-19 15:21:00,222: on stmt: v1.4 = $96unpack_sequence.48
DEBUG    2023-08-19 15:21:00,222: on stmt: v0.4 = $96unpack_sequence.49
DEBUG    2023-08-19 15:21:00,222: on stmt: v3.4 = $96unpack_sequence.50
DEBUG    2023-08-19 15:21:00,222: on stmt: $114build_tuple.56 = build_tuple(items=[Var(v0.4, hashing.py:594), Var(v1.4, hashing.py:594), Var(v2.4, hashing.py:594), Var(v3.4, hashing.py:594)])
DEBUG    2023-08-19 15:21:00,222: on stmt: $116return_value.57 = cast(value=$114build_tuple.56)
DEBUG    2023-08-19 15:21:00,222: on stmt: return $116return_value.57
DEBUG    2023-08-19 15:21:00,222: defs defaultdict(<class 'list'>,
            {'$114build_tuple.56': [<numba.core.ir.Assign object at 0x0000025F33154CD0>],
             '$116return_value.57': [<numba.core.ir.Assign object at 0x0000025F33154E50>],
             '$16call_function.7': [<numba.core.ir.Assign object at 0x0000025F33279520>],
             '$18unpack_sequence.10': [<numba.core.ir.Assign object at 0x0000025F33279D90>],
             '$18unpack_sequence.11': [<numba.core.ir.Assign object at 0x0000025F332792B0>],
             '$18unpack_sequence.12': [<numba.core.ir.Assign object at 0x0000025F332799A0>],
             '$18unpack_sequence.8': [<numba.core.ir.Assign object at 0x0000025F332797F0>],
             '$18unpack_sequence.9': [<numba.core.ir.Assign object at 0x0000025F332798E0>],
             '$28load_global.13': [<numba.core.ir.Assign object at 0x0000025F33279910>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F332610A0>],
             '$42call_function.20': [<numba.core.ir.Assign object at 0x0000025F33208AC0>],
             '$44unpack_sequence.21': [<numba.core.ir.Assign object at 0x0000025F332087F0>],
             '$44unpack_sequence.22': [<numba.core.ir.Assign object at 0x0000025F33208640>],
             '$44unpack_sequence.23': [<numba.core.ir.Assign object at 0x0000025F33208610>],
             '$44unpack_sequence.24': [<numba.core.ir.Assign object at 0x0000025F331B2B20>],
             '$44unpack_sequence.25': [<numba.core.ir.Assign object at 0x0000025F33208370>],
             '$54load_global.26': [<numba.core.ir.Assign object at 0x0000025F331B28E0>],
             '$68call_function.33': [<numba.core.ir.Assign object at 0x0000025F33261640>],
             '$70unpack_sequence.34': [<numba.core.ir.Assign object at 0x0000025F33261220>],
             '$70unpack_sequence.35': [<numba.core.ir.Assign object at 0x0000025F3329BAC0>],
             '$70unpack_sequence.36': [<numba.core.ir.Assign object at 0x0000025F3327F0A0>],
             '$70unpack_sequence.37': [<numba.core.ir.Assign object at 0x0000025F3327F250>],
             '$70unpack_sequence.38': [<numba.core.ir.Assign object at 0x0000025F332616D0>],
             '$80load_global.39': [<numba.core.ir.Assign object at 0x0000025F331FAD30>],
             '$94call_function.46': [<numba.core.ir.Assign object at 0x0000025F33269880>],
             '$96unpack_sequence.47': [<numba.core.ir.Assign object at 0x0000025F33194EB0>],
             '$96unpack_sequence.48': [<numba.core.ir.Assign object at 0x0000025F33194580>],
             '$96unpack_sequence.49': [<numba.core.ir.Assign object at 0x0000025F33166E50>],
             '$96unpack_sequence.50': [<numba.core.ir.Assign object at 0x0000025F331660D0>],
             '$96unpack_sequence.51': [<numba.core.ir.Assign object at 0x0000025F331945B0>],
             '$const12.5': [<numba.core.ir.Assign object at 0x0000025F33261430>],
             '$const14.6': [<numba.core.ir.Assign object at 0x0000025F332794C0>],
             '$const38.18': [<numba.core.ir.Assign object at 0x0000025F33208F70>],
             '$const40.19': [<numba.core.ir.Assign object at 0x0000025F33208F10>],
             '$const64.31': [<numba.core.ir.Assign object at 0x0000025F331FA3D0>],
             '$const66.32': [<numba.core.ir.Assign object at 0x0000025F331FAC70>],
             '$const90.44': [<numba.core.ir.Assign object at 0x0000025F33269490>],
             '$const92.45': [<numba.core.ir.Assign object at 0x0000025F33269310>],
             'v0': [<numba.core.ir.Assign object at 0x0000025F33261520>],
             'v0.1': [<numba.core.ir.Assign object at 0x0000025F33279E50>],
             'v0.2': [<numba.core.ir.Assign object at 0x0000025F331B2C40>],
             'v0.3': [<numba.core.ir.Assign object at 0x0000025F331FC760>],
             'v0.4': [<numba.core.ir.Assign object at 0x0000025F331451C0>],
             'v1': [<numba.core.ir.Assign object at 0x0000025F33261160>],
             'v1.1': [<numba.core.ir.Assign object at 0x0000025F33279730>],
             'v1.2': [<numba.core.ir.Assign object at 0x0000025F331B29A0>],
             'v1.3': [<numba.core.ir.Assign object at 0x0000025F331FC6D0>],
             'v1.4': [<numba.core.ir.Assign object at 0x0000025F33145730>],
             'v2': [<numba.core.ir.Assign object at 0x0000025F33261880>],
             'v2.1': [<numba.core.ir.Assign object at 0x0000025F332790D0>],
             'v2.2': [<numba.core.ir.Assign object at 0x0000025F331B2670>],
             'v2.3': [<numba.core.ir.Assign object at 0x0000025F331FA580>],
             'v2.4': [<numba.core.ir.Assign object at 0x0000025F33166EE0>],
             'v3': [<numba.core.ir.Assign object at 0x0000025F33261BE0>],
             'v3.1': [<numba.core.ir.Assign object at 0x0000025F332791C0>],
             'v3.2': [<numba.core.ir.Assign object at 0x0000025F331B2460>],
             'v3.3': [<numba.core.ir.Assign object at 0x0000025F331FA070>],
             'v3.4': [<numba.core.ir.Assign object at 0x0000025F331459A0>]})
DEBUG    2023-08-19 15:21:00,222: SSA violators set()
DEBUG    2023-08-19 15:21:00,232: bytecode dump:
>          0	NOP(arg=None, lineno=579)
           2	LOAD_FAST(arg=0, lineno=579)
           4	LOAD_FAST(arg=1, lineno=579)
           6	INPLACE_ADD(arg=None, lineno=579)
           8	STORE_FAST(arg=0, lineno=579)
          10	LOAD_FAST(arg=2, lineno=580)
          12	LOAD_FAST(arg=3, lineno=580)
          14	INPLACE_ADD(arg=None, lineno=580)
          16	STORE_FAST(arg=2, lineno=580)
          18	LOAD_GLOBAL(arg=0, lineno=581)
          20	LOAD_FAST(arg=1, lineno=581)
          22	LOAD_FAST(arg=4, lineno=581)
          24	CALL_FUNCTION(arg=2, lineno=581)
          26	LOAD_FAST(arg=0, lineno=581)
          28	BINARY_XOR(arg=None, lineno=581)
          30	STORE_FAST(arg=1, lineno=581)
          32	LOAD_GLOBAL(arg=0, lineno=582)
          34	LOAD_FAST(arg=3, lineno=582)
          36	LOAD_FAST(arg=5, lineno=582)
          38	CALL_FUNCTION(arg=2, lineno=582)
          40	LOAD_FAST(arg=2, lineno=582)
          42	BINARY_XOR(arg=None, lineno=582)
          44	STORE_FAST(arg=3, lineno=582)
          46	LOAD_GLOBAL(arg=0, lineno=583)
          48	LOAD_FAST(arg=0, lineno=583)
          50	LOAD_CONST(arg=1, lineno=583)
          52	CALL_FUNCTION(arg=2, lineno=583)
          54	STORE_FAST(arg=0, lineno=583)
          56	LOAD_FAST(arg=0, lineno=584)
          58	LOAD_FAST(arg=1, lineno=584)
          60	LOAD_FAST(arg=2, lineno=584)
          62	LOAD_FAST(arg=3, lineno=584)
          64	BUILD_TUPLE(arg=4, lineno=584)
          66	RETURN_VALUE(arg=None, lineno=584)
DEBUG    2023-08-19 15:21:00,232: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,232: stack: []
DEBUG    2023-08-19 15:21:00,232: dispatch pc=0, inst=NOP(arg=None, lineno=579)
DEBUG    2023-08-19 15:21:00,232: stack []
DEBUG    2023-08-19 15:21:00,232: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=579)
DEBUG    2023-08-19 15:21:00,232: stack []
DEBUG    2023-08-19 15:21:00,232: dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=579)
DEBUG    2023-08-19 15:21:00,232: stack ['$a2.0']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=6, inst=INPLACE_ADD(arg=None, lineno=579)
DEBUG    2023-08-19 15:21:00,232: stack ['$a2.0', '$b4.1']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=8, inst=STORE_FAST(arg=0, lineno=579)
DEBUG    2023-08-19 15:21:00,232: stack ['$6inplace_add.2']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=10, inst=LOAD_FAST(arg=2, lineno=580)
DEBUG    2023-08-19 15:21:00,232: stack []
DEBUG    2023-08-19 15:21:00,232: dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=580)
DEBUG    2023-08-19 15:21:00,232: stack ['$c10.3']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=14, inst=INPLACE_ADD(arg=None, lineno=580)
DEBUG    2023-08-19 15:21:00,232: stack ['$c10.3', '$d12.4']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=16, inst=STORE_FAST(arg=2, lineno=580)
DEBUG    2023-08-19 15:21:00,232: stack ['$14inplace_add.5']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=581)
DEBUG    2023-08-19 15:21:00,232: stack []
DEBUG    2023-08-19 15:21:00,232: dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=581)
DEBUG    2023-08-19 15:21:00,232: stack ['$18load_global.6']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=22, inst=LOAD_FAST(arg=4, lineno=581)
DEBUG    2023-08-19 15:21:00,232: stack ['$18load_global.6', '$b20.7']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=24, inst=CALL_FUNCTION(arg=2, lineno=581)
DEBUG    2023-08-19 15:21:00,232: stack ['$18load_global.6', '$b20.7', '$s22.8']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=581)
DEBUG    2023-08-19 15:21:00,232: stack ['$24call_function.9']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=28, inst=BINARY_XOR(arg=None, lineno=581)
DEBUG    2023-08-19 15:21:00,232: stack ['$24call_function.9', '$a26.10']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=30, inst=STORE_FAST(arg=1, lineno=581)
DEBUG    2023-08-19 15:21:00,232: stack ['$28binary_xor.11']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=582)
DEBUG    2023-08-19 15:21:00,232: stack []
DEBUG    2023-08-19 15:21:00,232: dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=582)
DEBUG    2023-08-19 15:21:00,232: stack ['$32load_global.12']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=36, inst=LOAD_FAST(arg=5, lineno=582)
DEBUG    2023-08-19 15:21:00,232: stack ['$32load_global.12', '$d34.13']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=38, inst=CALL_FUNCTION(arg=2, lineno=582)
DEBUG    2023-08-19 15:21:00,232: stack ['$32load_global.12', '$d34.13', '$t36.14']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=40, inst=LOAD_FAST(arg=2, lineno=582)
DEBUG    2023-08-19 15:21:00,232: stack ['$38call_function.15']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=42, inst=BINARY_XOR(arg=None, lineno=582)
DEBUG    2023-08-19 15:21:00,232: stack ['$38call_function.15', '$c40.16']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=44, inst=STORE_FAST(arg=3, lineno=582)
DEBUG    2023-08-19 15:21:00,232: stack ['$42binary_xor.17']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=46, inst=LOAD_GLOBAL(arg=0, lineno=583)
DEBUG    2023-08-19 15:21:00,232: stack []
DEBUG    2023-08-19 15:21:00,232: dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=583)
DEBUG    2023-08-19 15:21:00,232: stack ['$46load_global.18']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=583)
DEBUG    2023-08-19 15:21:00,232: stack ['$46load_global.18', '$a48.19']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=52, inst=CALL_FUNCTION(arg=2, lineno=583)
DEBUG    2023-08-19 15:21:00,232: stack ['$46load_global.18', '$a48.19', '$const50.20']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=54, inst=STORE_FAST(arg=0, lineno=583)
DEBUG    2023-08-19 15:21:00,232: stack ['$52call_function.21']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=56, inst=LOAD_FAST(arg=0, lineno=584)
DEBUG    2023-08-19 15:21:00,232: stack []
DEBUG    2023-08-19 15:21:00,232: dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=584)
DEBUG    2023-08-19 15:21:00,232: stack ['$a56.22']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=584)
DEBUG    2023-08-19 15:21:00,232: stack ['$a56.22', '$b58.23']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=584)
DEBUG    2023-08-19 15:21:00,232: stack ['$a56.22', '$b58.23', '$c60.24']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=64, inst=BUILD_TUPLE(arg=4, lineno=584)
DEBUG    2023-08-19 15:21:00,232: stack ['$a56.22', '$b58.23', '$c60.24', '$d62.25']
DEBUG    2023-08-19 15:21:00,232: dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=584)
DEBUG    2023-08-19 15:21:00,232: stack ['$64build_tuple.26']
DEBUG    2023-08-19 15:21:00,232: end state. edges=[]
DEBUG    2023-08-19 15:21:00,232: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:00,232: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:00,232: defmap: {}
DEBUG    2023-08-19 15:21:00,240: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,240: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,240: keep phismap: {}
DEBUG    2023-08-19 15:21:00,240: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:00,240: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:00,240: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$b4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$b4.1', 'res': '$6inplace_add.2'}), (8, {'value': '$6inplace_add.2'}), (10, {'res': '$c10.3'}), (12, {'res': '$d12.4'}), (14, {'lhs': '$c10.3', 'rhs': '$d12.4', 'res': '$14inplace_add.5'}), (16, {'value': '$14inplace_add.5'}), (18, {'res': '$18load_global.6'}), (20, {'res': '$b20.7'}), (22, {'res': '$s22.8'}), (24, {'func': '$18load_global.6', 'args': ['$b20.7', '$s22.8'], 'res': '$24call_function.9'}), (26, {'res': '$a26.10'}), (28, {'lhs': '$24call_function.9', 'rhs': '$a26.10', 'res': '$28binary_xor.11'}), (30, {'value': '$28binary_xor.11'}), (32, {'res': '$32load_global.12'}), (34, {'res': '$d34.13'}), (36, {'res': '$t36.14'}), (38, {'func': '$32load_global.12', 'args': ['$d34.13', '$t36.14'], 'res': '$38call_function.15'}), (40, {'res': '$c40.16'}), (42, {'lhs': '$38call_function.15', 'rhs': '$c40.16', 'res': '$42binary_xor.17'}), (44, {'value': '$42binary_xor.17'}), (46, {'res': '$46load_global.18'}), (48, {'res': '$a48.19'}), (50, {'res': '$const50.20'}), (52, {'func': '$46load_global.18', 'args': ['$a48.19', '$const50.20'], 'res': '$52call_function.21'}), (54, {'value': '$52call_function.21'}), (56, {'res': '$a56.22'}), (58, {'res': '$b58.23'}), (60, {'res': '$c60.24'}), (62, {'res': '$d62.25'}), (64, {'items': ['$a56.22', '$b58.23', '$c60.24', '$d62.25'], 'res': '$64build_tuple.26'}), (66, {'retval': '$64build_tuple.26', 'castval': '$66return_value.27'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:00,242: label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    c = arg(2, name=c)                       ['c']
    d = arg(3, name=d)                       ['d']
    s = arg(4, name=s)                       ['s']
    t = arg(5, name=t)                       ['t']
    a.1 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=a, rhs=b, static_lhs=Undefined, static_rhs=Undefined) ['a', 'a.1', 'b']
    c.1 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=d, static_lhs=Undefined, static_rhs=Undefined) ['c', 'c.1', 'd']
    $18load_global.6 = global(_ROTATE: <function _ROTATE at 0x0000025F3198DAF0>) ['$18load_global.6']
    $24call_function.9 = call $18load_global.6(b, s, func=$18load_global.6, args=[Var(b, hashing.py:579), Var(s, hashing.py:579)], kws=(), vararg=None, target=None) ['$18load_global.6', '$24call_function.9', 'b', 's']
    b.1 = $24call_function.9 ^ a.1           ['$24call_function.9', 'a.1', 'b.1']
    $32load_global.12 = global(_ROTATE: <function _ROTATE at 0x0000025F3198DAF0>) ['$32load_global.12']
    $38call_function.15 = call $32load_global.12(d, t, func=$32load_global.12, args=[Var(d, hashing.py:579), Var(t, hashing.py:579)], kws=(), vararg=None, target=None) ['$32load_global.12', '$38call_function.15', 'd', 't']
    d.1 = $38call_function.15 ^ c.1          ['$38call_function.15', 'c.1', 'd.1']
    $46load_global.18 = global(_ROTATE: <function _ROTATE at 0x0000025F3198DAF0>) ['$46load_global.18']
    $const50.20 = const(int, 32)             ['$const50.20']
    a.2 = call $46load_global.18(a.1, $const50.20, func=$46load_global.18, args=[Var(a.1, hashing.py:579), Var($const50.20, hashing.py:583)], kws=(), vararg=None, target=None) ['$46load_global.18', '$const50.20', 'a.1', 'a.2']
    $64build_tuple.26 = build_tuple(items=[Var(a.2, hashing.py:583), Var(b.1, hashing.py:581), Var(c.1, hashing.py:580), Var(d.1, hashing.py:582)]) ['$64build_tuple.26', 'a.2', 'b.1', 'c.1', 'd.1']
    $66return_value.27 = cast(value=$64build_tuple.26) ['$64build_tuple.26', '$66return_value.27']
    return $66return_value.27                ['$66return_value.27']

DEBUG    2023-08-19 15:21:00,242: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:00,242: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3312AC40>
DEBUG    2023-08-19 15:21:00,242: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:00,242: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:00,242: on stmt: c = arg(2, name=c)
DEBUG    2023-08-19 15:21:00,242: on stmt: d = arg(3, name=d)
DEBUG    2023-08-19 15:21:00,242: on stmt: s = arg(4, name=s)
DEBUG    2023-08-19 15:21:00,242: on stmt: t = arg(5, name=t)
DEBUG    2023-08-19 15:21:00,242: on stmt: a.1 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=a, rhs=b, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,242: on stmt: c.1 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=d, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:00,242: on stmt: $18load_global.6 = global(_ROTATE: <function _ROTATE at 0x0000025F3198DAF0>)
DEBUG    2023-08-19 15:21:00,242: on stmt: $24call_function.9 = call $18load_global.6(b, s, func=$18load_global.6, args=[Var(b, hashing.py:579), Var(s, hashing.py:579)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,242: on stmt: b.1 = $24call_function.9 ^ a.1
DEBUG    2023-08-19 15:21:00,242: on stmt: $32load_global.12 = global(_ROTATE: <function _ROTATE at 0x0000025F3198DAF0>)
DEBUG    2023-08-19 15:21:00,242: on stmt: $38call_function.15 = call $32load_global.12(d, t, func=$32load_global.12, args=[Var(d, hashing.py:579), Var(t, hashing.py:579)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,242: on stmt: d.1 = $38call_function.15 ^ c.1
DEBUG    2023-08-19 15:21:00,242: on stmt: $46load_global.18 = global(_ROTATE: <function _ROTATE at 0x0000025F3198DAF0>)
DEBUG    2023-08-19 15:21:00,242: on stmt: $const50.20 = const(int, 32)
DEBUG    2023-08-19 15:21:00,242: on stmt: a.2 = call $46load_global.18(a.1, $const50.20, func=$46load_global.18, args=[Var(a.1, hashing.py:579), Var($const50.20, hashing.py:583)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,242: on stmt: $64build_tuple.26 = build_tuple(items=[Var(a.2, hashing.py:583), Var(b.1, hashing.py:581), Var(c.1, hashing.py:580), Var(d.1, hashing.py:582)])
DEBUG    2023-08-19 15:21:00,242: on stmt: $66return_value.27 = cast(value=$64build_tuple.26)
DEBUG    2023-08-19 15:21:00,242: on stmt: return $66return_value.27
DEBUG    2023-08-19 15:21:00,242: defs defaultdict(<class 'list'>,
            {'$18load_global.6': [<numba.core.ir.Assign object at 0x0000025F3312A910>],
             '$24call_function.9': [<numba.core.ir.Assign object at 0x0000025F3312AFA0>],
             '$32load_global.12': [<numba.core.ir.Assign object at 0x0000025F3312A490>],
             '$38call_function.15': [<numba.core.ir.Assign object at 0x0000025F330E97C0>],
             '$46load_global.18': [<numba.core.ir.Assign object at 0x0000025F330A6940>],
             '$64build_tuple.26': [<numba.core.ir.Assign object at 0x0000025F3355B610>],
             '$66return_value.27': [<numba.core.ir.Assign object at 0x0000025F3355BD00>],
             '$const50.20': [<numba.core.ir.Assign object at 0x0000025F333EF640>],
             'a': [<numba.core.ir.Assign object at 0x0000025F33333820>],
             'a.1': [<numba.core.ir.Assign object at 0x0000025F33102CD0>],
             'a.2': [<numba.core.ir.Assign object at 0x0000025F333EF730>],
             'b': [<numba.core.ir.Assign object at 0x0000025F33119B20>],
             'b.1': [<numba.core.ir.Assign object at 0x0000025F3312A2B0>],
             'c': [<numba.core.ir.Assign object at 0x0000025F3315A280>],
             'c.1': [<numba.core.ir.Assign object at 0x0000025F3312AA00>],
             'd': [<numba.core.ir.Assign object at 0x0000025F331643A0>],
             'd.1': [<numba.core.ir.Assign object at 0x0000025F330E95B0>],
             's': [<numba.core.ir.Assign object at 0x0000025F330F5E20>],
             't': [<numba.core.ir.Assign object at 0x0000025F330F59D0>]})
DEBUG    2023-08-19 15:21:00,242: SSA violators set()
DEBUG    2023-08-19 15:21:00,252: bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_GLOBAL(arg=0, lineno=570)
           4	LOAD_METHOD(arg=1, lineno=570)
           6	LOAD_FAST(arg=0, lineno=570)
           8	LOAD_FAST(arg=1, lineno=570)
          10	BINARY_LSHIFT(arg=None, lineno=570)
          12	LOAD_FAST(arg=0, lineno=570)
          14	LOAD_GLOBAL(arg=0, lineno=570)
          16	LOAD_METHOD(arg=1, lineno=570)
          18	LOAD_CONST(arg=1, lineno=570)
          20	CALL_METHOD(arg=1, lineno=570)
          22	LOAD_FAST(arg=1, lineno=570)
          24	BINARY_SUBTRACT(arg=None, lineno=570)
          26	BINARY_RSHIFT(arg=None, lineno=570)
          28	BINARY_OR(arg=None, lineno=570)
          30	CALL_METHOD(arg=1, lineno=570)
          32	RETURN_VALUE(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,252: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,252: stack: []
DEBUG    2023-08-19 15:21:00,252: dispatch pc=0, inst=NOP(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack []
DEBUG    2023-08-19 15:21:00,252: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack []
DEBUG    2023-08-19 15:21:00,252: dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$x6.2']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=10, inst=BINARY_LSHIFT(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$x6.2', '$b8.3']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=16, inst=LOAD_METHOD(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$14load_global.6']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$16load_method.7']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=20, inst=CALL_METHOD(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$16load_method.7', '$const18.8']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$20call_method.9']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=24, inst=BINARY_SUBTRACT(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$20call_method.9', '$b22.10']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=26, inst=BINARY_RSHIFT(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$24binary_subtract.11']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=28, inst=BINARY_OR(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$10binary_lshift.4', '$26binary_rshift.12']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=30, inst=CALL_METHOD(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$4load_method.1', '$28binary_or.13']
DEBUG    2023-08-19 15:21:00,252: dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,252: stack ['$30call_method.14']
DEBUG    2023-08-19 15:21:00,252: end state. edges=[]
DEBUG    2023-08-19 15:21:00,252: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:00,252: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:00,252: defmap: {}
DEBUG    2023-08-19 15:21:00,252: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,252: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,252: keep phismap: {}
DEBUG    2023-08-19 15:21:00,252: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:00,252: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:00,252: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'res': '$b8.3'}), (10, {'lhs': '$x6.2', 'rhs': '$b8.3', 'res': '$10binary_lshift.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$14load_global.6'}), (16, {'item': '$14load_global.6', 'res': '$16load_method.7'}), (18, {'res': '$const18.8'}), (20, {'func': '$16load_method.7', 'args': ['$const18.8'], 'res': '$20call_method.9'}), (22, {'res': '$b22.10'}), (24, {'lhs': '$20call_method.9', 'rhs': '$b22.10', 'res': '$24binary_subtract.11'}), (26, {'lhs': '$x12.5', 'rhs': '$24binary_subtract.11', 'res': '$26binary_rshift.12'}), (28, {'lhs': '$10binary_lshift.4', 'rhs': '$26binary_rshift.12', 'res': '$28binary_or.13'}), (30, {'func': '$4load_method.1', 'args': ['$28binary_or.13'], 'res': '$30call_method.14'}), (32, {'retval': '$30call_method.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:00,252: label 0:
    x = arg(0, name=x)                       ['x']
    b = arg(1, name=b)                       ['b']
    $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=uint64) ['$2load_global.0', '$4load_method.1']
    $10binary_lshift.4 = x << b              ['$10binary_lshift.4', 'b', 'x']
    $14load_global.6 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$14load_global.6']
    $16load_method.7 = getattr(value=$14load_global.6, attr=uint64) ['$14load_global.6', '$16load_method.7']
    $const18.8 = const(int, 64)              ['$const18.8']
    $20call_method.9 = call $16load_method.7($const18.8, func=$16load_method.7, args=[Var($const18.8, hashing.py:570)], kws=(), vararg=None, target=None) ['$16load_method.7', '$20call_method.9', '$const18.8']
    $24binary_subtract.11 = $20call_method.9 - b ['$20call_method.9', '$24binary_subtract.11', 'b']
    $26binary_rshift.12 = x >> $24binary_subtract.11 ['$24binary_subtract.11', '$26binary_rshift.12', 'x']
    $28binary_or.13 = $10binary_lshift.4 | $26binary_rshift.12 ['$10binary_lshift.4', '$26binary_rshift.12', '$28binary_or.13']
    $30call_method.14 = call $4load_method.1($28binary_or.13, func=$4load_method.1, args=[Var($28binary_or.13, hashing.py:570)], kws=(), vararg=None, target=None) ['$28binary_or.13', '$30call_method.14', '$4load_method.1']
    $32return_value.15 = cast(value=$30call_method.14) ['$30call_method.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

DEBUG    2023-08-19 15:21:00,263: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:00,263: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33426C70>
DEBUG    2023-08-19 15:21:00,263: on stmt: x = arg(0, name=x)
DEBUG    2023-08-19 15:21:00,263: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:00,263: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,263: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,263: on stmt: $10binary_lshift.4 = x << b
DEBUG    2023-08-19 15:21:00,263: on stmt: $14load_global.6 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,263: on stmt: $16load_method.7 = getattr(value=$14load_global.6, attr=uint64)
DEBUG    2023-08-19 15:21:00,263: on stmt: $const18.8 = const(int, 64)
DEBUG    2023-08-19 15:21:00,263: on stmt: $20call_method.9 = call $16load_method.7($const18.8, func=$16load_method.7, args=[Var($const18.8, hashing.py:570)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,263: on stmt: $24binary_subtract.11 = $20call_method.9 - b
DEBUG    2023-08-19 15:21:00,263: on stmt: $26binary_rshift.12 = x >> $24binary_subtract.11
DEBUG    2023-08-19 15:21:00,263: on stmt: $28binary_or.13 = $10binary_lshift.4 | $26binary_rshift.12
DEBUG    2023-08-19 15:21:00,263: on stmt: $30call_method.14 = call $4load_method.1($28binary_or.13, func=$4load_method.1, args=[Var($28binary_or.13, hashing.py:570)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,263: on stmt: $32return_value.15 = cast(value=$30call_method.14)
DEBUG    2023-08-19 15:21:00,263: on stmt: return $32return_value.15
DEBUG    2023-08-19 15:21:00,263: defs defaultdict(<class 'list'>,
            {'$10binary_lshift.4': [<numba.core.ir.Assign object at 0x0000025F334D3760>],
             '$14load_global.6': [<numba.core.ir.Assign object at 0x0000025F334D39D0>],
             '$16load_method.7': [<numba.core.ir.Assign object at 0x0000025F334D3B20>],
             '$20call_method.9': [<numba.core.ir.Assign object at 0x0000025F334D3280>],
             '$24binary_subtract.11': [<numba.core.ir.Assign object at 0x0000025F334D3D00>],
             '$26binary_rshift.12': [<numba.core.ir.Assign object at 0x0000025F334D3E80>],
             '$28binary_or.13': [<numba.core.ir.Assign object at 0x0000025F334D3CA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F33426700>],
             '$30call_method.14': [<numba.core.ir.Assign object at 0x0000025F333F9F40>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x0000025F333F9FA0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000025F33426610>],
             '$const18.8': [<numba.core.ir.Assign object at 0x0000025F334D3100>],
             'b': [<numba.core.ir.Assign object at 0x0000025F333E7E80>],
             'x': [<numba.core.ir.Assign object at 0x0000025F333E7550>]})
DEBUG    2023-08-19 15:21:00,263: SSA violators set()
DEBUG    2023-08-19 15:21:00,303: bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_GLOBAL(arg=0, lineno=570)
           4	LOAD_METHOD(arg=1, lineno=570)
           6	LOAD_FAST(arg=0, lineno=570)
           8	LOAD_FAST(arg=1, lineno=570)
          10	BINARY_LSHIFT(arg=None, lineno=570)
          12	LOAD_FAST(arg=0, lineno=570)
          14	LOAD_GLOBAL(arg=0, lineno=570)
          16	LOAD_METHOD(arg=1, lineno=570)
          18	LOAD_CONST(arg=1, lineno=570)
          20	CALL_METHOD(arg=1, lineno=570)
          22	LOAD_FAST(arg=1, lineno=570)
          24	BINARY_SUBTRACT(arg=None, lineno=570)
          26	BINARY_RSHIFT(arg=None, lineno=570)
          28	BINARY_OR(arg=None, lineno=570)
          30	CALL_METHOD(arg=1, lineno=570)
          32	RETURN_VALUE(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,303: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,303: stack: []
DEBUG    2023-08-19 15:21:00,303: dispatch pc=0, inst=NOP(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,303: stack []
DEBUG    2023-08-19 15:21:00,303: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=570)
DEBUG    2023-08-19 15:21:00,303: stack []
DEBUG    2023-08-19 15:21:00,303: dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,303: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:00,303: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=570)
DEBUG    2023-08-19 15:21:00,303: stack ['$4load_method.1']
DEBUG    2023-08-19 15:21:00,303: dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,303: stack ['$4load_method.1', '$x6.2']
DEBUG    2023-08-19 15:21:00,303: dispatch pc=10, inst=BINARY_LSHIFT(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,303: stack ['$4load_method.1', '$x6.2', '$b8.3']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=570)
DEBUG    2023-08-19 15:21:00,311: stack ['$4load_method.1', '$10binary_lshift.4']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=570)
DEBUG    2023-08-19 15:21:00,311: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=16, inst=LOAD_METHOD(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,311: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$14load_global.6']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,311: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$16load_method.7']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=20, inst=CALL_METHOD(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,311: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$16load_method.7', '$const18.8']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,311: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$20call_method.9']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=24, inst=BINARY_SUBTRACT(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,311: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$20call_method.9', '$b22.10']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=26, inst=BINARY_RSHIFT(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,311: stack ['$4load_method.1', '$10binary_lshift.4', '$x12.5', '$24binary_subtract.11']
DEBUG    2023-08-19 15:21:00,311: dispatch pc=28, inst=BINARY_OR(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,313: stack ['$4load_method.1', '$10binary_lshift.4', '$26binary_rshift.12']
DEBUG    2023-08-19 15:21:00,313: dispatch pc=30, inst=CALL_METHOD(arg=1, lineno=570)
DEBUG    2023-08-19 15:21:00,313: stack ['$4load_method.1', '$28binary_or.13']
DEBUG    2023-08-19 15:21:00,313: dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=570)
DEBUG    2023-08-19 15:21:00,313: stack ['$30call_method.14']
DEBUG    2023-08-19 15:21:00,313: end state. edges=[]
DEBUG    2023-08-19 15:21:00,313: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:00,313: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:00,313: defmap: {}
DEBUG    2023-08-19 15:21:00,313: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,313: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,313: keep phismap: {}
DEBUG    2023-08-19 15:21:00,313: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:00,313: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:00,313: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'res': '$b8.3'}), (10, {'lhs': '$x6.2', 'rhs': '$b8.3', 'res': '$10binary_lshift.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$14load_global.6'}), (16, {'item': '$14load_global.6', 'res': '$16load_method.7'}), (18, {'res': '$const18.8'}), (20, {'func': '$16load_method.7', 'args': ['$const18.8'], 'res': '$20call_method.9'}), (22, {'res': '$b22.10'}), (24, {'lhs': '$20call_method.9', 'rhs': '$b22.10', 'res': '$24binary_subtract.11'}), (26, {'lhs': '$x12.5', 'rhs': '$24binary_subtract.11', 'res': '$26binary_rshift.12'}), (28, {'lhs': '$10binary_lshift.4', 'rhs': '$26binary_rshift.12', 'res': '$28binary_or.13'}), (30, {'func': '$4load_method.1', 'args': ['$28binary_or.13'], 'res': '$30call_method.14'}), (32, {'retval': '$30call_method.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:00,313: label 0:
    x = arg(0, name=x)                       ['x']
    b = arg(1, name=b)                       ['b']
    $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=uint64) ['$2load_global.0', '$4load_method.1']
    $10binary_lshift.4 = x << b              ['$10binary_lshift.4', 'b', 'x']
    $14load_global.6 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$14load_global.6']
    $16load_method.7 = getattr(value=$14load_global.6, attr=uint64) ['$14load_global.6', '$16load_method.7']
    $const18.8 = const(int, 64)              ['$const18.8']
    $20call_method.9 = call $16load_method.7($const18.8, func=$16load_method.7, args=[Var($const18.8, hashing.py:570)], kws=(), vararg=None, target=None) ['$16load_method.7', '$20call_method.9', '$const18.8']
    $24binary_subtract.11 = $20call_method.9 - b ['$20call_method.9', '$24binary_subtract.11', 'b']
    $26binary_rshift.12 = x >> $24binary_subtract.11 ['$24binary_subtract.11', '$26binary_rshift.12', 'x']
    $28binary_or.13 = $10binary_lshift.4 | $26binary_rshift.12 ['$10binary_lshift.4', '$26binary_rshift.12', '$28binary_or.13']
    $30call_method.14 = call $4load_method.1($28binary_or.13, func=$4load_method.1, args=[Var($28binary_or.13, hashing.py:570)], kws=(), vararg=None, target=None) ['$28binary_or.13', '$30call_method.14', '$4load_method.1']
    $32return_value.15 = cast(value=$30call_method.14) ['$30call_method.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

DEBUG    2023-08-19 15:21:00,321: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:00,321: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33520190>
DEBUG    2023-08-19 15:21:00,321: on stmt: x = arg(0, name=x)
DEBUG    2023-08-19 15:21:00,321: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:00,321: on stmt: $2load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,321: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=uint64)
DEBUG    2023-08-19 15:21:00,321: on stmt: $10binary_lshift.4 = x << b
DEBUG    2023-08-19 15:21:00,321: on stmt: $14load_global.6 = global(types: <module 'numba.core.types' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\core\\types\\__init__.py'>)
DEBUG    2023-08-19 15:21:00,321: on stmt: $16load_method.7 = getattr(value=$14load_global.6, attr=uint64)
DEBUG    2023-08-19 15:21:00,321: on stmt: $const18.8 = const(int, 64)
DEBUG    2023-08-19 15:21:00,321: on stmt: $20call_method.9 = call $16load_method.7($const18.8, func=$16load_method.7, args=[Var($const18.8, hashing.py:570)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,321: on stmt: $24binary_subtract.11 = $20call_method.9 - b
DEBUG    2023-08-19 15:21:00,321: on stmt: $26binary_rshift.12 = x >> $24binary_subtract.11
DEBUG    2023-08-19 15:21:00,323: on stmt: $28binary_or.13 = $10binary_lshift.4 | $26binary_rshift.12
DEBUG    2023-08-19 15:21:00,323: on stmt: $30call_method.14 = call $4load_method.1($28binary_or.13, func=$4load_method.1, args=[Var($28binary_or.13, hashing.py:570)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,323: on stmt: $32return_value.15 = cast(value=$30call_method.14)
DEBUG    2023-08-19 15:21:00,323: on stmt: return $32return_value.15
DEBUG    2023-08-19 15:21:00,323: defs defaultdict(<class 'list'>,
            {'$10binary_lshift.4': [<numba.core.ir.Assign object at 0x0000025F33520B50>],
             '$14load_global.6': [<numba.core.ir.Assign object at 0x0000025F33520DC0>],
             '$16load_method.7': [<numba.core.ir.Assign object at 0x0000025F33520F40>],
             '$20call_method.9': [<numba.core.ir.Assign object at 0x0000025F3355F310>],
             '$24binary_subtract.11': [<numba.core.ir.Assign object at 0x0000025F3355F550>],
             '$26binary_rshift.12': [<numba.core.ir.Assign object at 0x0000025F3355F6D0>],
             '$28binary_or.13': [<numba.core.ir.Assign object at 0x0000025F3355F850>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F335205E0>],
             '$30call_method.14': [<numba.core.ir.Assign object at 0x0000025F3355FA30>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x0000025F3355FB20>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000025F33520760>],
             '$const18.8': [<numba.core.ir.Assign object at 0x0000025F3355F100>],
             'b': [<numba.core.ir.Assign object at 0x0000025F334D7220>],
             'x': [<numba.core.ir.Assign object at 0x0000025F334E8610>]})
DEBUG    2023-08-19 15:21:00,323: SSA violators set()
DEBUG    2023-08-19 15:21:00,930: bytecode dump:
>          0	NOP(arg=None, lineno=58)
           2	LOAD_GLOBAL(arg=0, lineno=58)
           4	LOAD_FAST(arg=0, lineno=58)
           6	CALL_FUNCTION(arg=1, lineno=58)
           8	STORE_FAST(arg=1, lineno=58)
          10	LOAD_FAST(arg=1, lineno=59)
          12	LOAD_GLOBAL(arg=1, lineno=59)
          14	LOAD_CONST(arg=1, lineno=59)
          16	CALL_FUNCTION(arg=1, lineno=59)
          18	COMPARE_OP(arg=2, lineno=59)
          20	POP_JUMP_IF_FALSE(arg=30, lineno=59)
          22	LOAD_GLOBAL(arg=1, lineno=60)
          24	LOAD_CONST(arg=2, lineno=60)
          26	CALL_FUNCTION(arg=1, lineno=60)
          28	STORE_FAST(arg=1, lineno=60)
>         30	LOAD_FAST(arg=1, lineno=61)
          32	RETURN_VALUE(arg=None, lineno=61)
DEBUG    2023-08-19 15:21:00,930: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,930: stack: []
DEBUG    2023-08-19 15:21:00,930: dispatch pc=0, inst=NOP(arg=None, lineno=58)
DEBUG    2023-08-19 15:21:00,930: stack []
DEBUG    2023-08-19 15:21:00,930: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=58)
DEBUG    2023-08-19 15:21:00,930: stack []
DEBUG    2023-08-19 15:21:00,930: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=58)
DEBUG    2023-08-19 15:21:00,930: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=58)
DEBUG    2023-08-19 15:21:00,930: stack ['$2load_global.0', '$val4.1']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=8, inst=STORE_FAST(arg=1, lineno=58)
DEBUG    2023-08-19 15:21:00,930: stack ['$6call_function.2']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=59)
DEBUG    2023-08-19 15:21:00,930: stack []
DEBUG    2023-08-19 15:21:00,930: dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=59)
DEBUG    2023-08-19 15:21:00,930: stack ['$asint10.3']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=59)
DEBUG    2023-08-19 15:21:00,930: stack ['$asint10.3', '$12load_global.4']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=59)
DEBUG    2023-08-19 15:21:00,930: stack ['$asint10.3', '$12load_global.4', '$const14.5']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=18, inst=COMPARE_OP(arg=2, lineno=59)
DEBUG    2023-08-19 15:21:00,930: stack ['$asint10.3', '$16call_function.6']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=30, lineno=59)
DEBUG    2023-08-19 15:21:00,930: stack ['$18compare_op.7']
DEBUG    2023-08-19 15:21:00,930: end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:00,930: pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,930: stack: []
DEBUG    2023-08-19 15:21:00,930: dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=60)
DEBUG    2023-08-19 15:21:00,930: stack []
DEBUG    2023-08-19 15:21:00,930: dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=60)
DEBUG    2023-08-19 15:21:00,930: stack ['$22load_global.0']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=26, inst=CALL_FUNCTION(arg=1, lineno=60)
DEBUG    2023-08-19 15:21:00,930: stack ['$22load_global.0', '$const24.1']
DEBUG    2023-08-19 15:21:00,930: dispatch pc=28, inst=STORE_FAST(arg=1, lineno=60)
DEBUG    2023-08-19 15:21:00,930: stack ['$26call_function.2']
DEBUG    2023-08-19 15:21:00,930: end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:00,930: pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,930: stack: []
DEBUG    2023-08-19 15:21:00,930: dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=61)
DEBUG    2023-08-19 15:21:00,930: stack []
DEBUG    2023-08-19 15:21:00,930: dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=61)
DEBUG    2023-08-19 15:21:00,930: stack ['$asint30.0']
DEBUG    2023-08-19 15:21:00,930: end state. edges=[]
DEBUG    2023-08-19 15:21:00,930: pending: deque([State(pc_initial=30 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,930: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:00,930: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:00,930: defmap: {}
DEBUG    2023-08-19 15:21:00,930: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,930: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,930: keep phismap: {}
DEBUG    2023-08-19 15:21:00,930: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:00,930: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:00,930: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$val4.1'}), (6, {'func': '$2load_global.0', 'args': ['$val4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$asint10.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$const14.5'}), (16, {'func': '$12load_global.4', 'args': ['$const14.5'], 'res': '$16call_function.6'}), (18, {'lhs': '$asint10.3', 'rhs': '$16call_function.6', 'res': '$18compare_op.7'}), (20, {'pred': '$18compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 30: ()})
DEBUG    2023-08-19 15:21:00,930: block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$22load_global.0'}), (24, {'res': '$const24.1'}), (26, {'func': '$22load_global.0', 'args': ['$const24.1'], 'res': '$26call_function.2'}), (28, {'value': '$26call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
DEBUG    2023-08-19 15:21:00,930: block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$asint30.0'}), (32, {'retval': '$asint30.0', 'castval': '$32return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:00,930: label 0:
    val = arg(0, name=val)                   ['val']
    $2load_global.0 = global(_Py_hash_t: int64) ['$2load_global.0']
    asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None) ['$2load_global.0', 'asint', 'val']
    $12load_global.4 = global(int: <class 'int'>) ['$12load_global.4']
    $const14.5 = const(int, -1)              ['$const14.5']
    $16call_function.6 = call $12load_global.4($const14.5, func=$12load_global.4, args=[Var($const14.5, hashing.py:59)], kws=(), vararg=None, target=None) ['$12load_global.4', '$16call_function.6', '$const14.5']
    $18compare_op.7 = asint == $16call_function.6 ['$16call_function.6', '$18compare_op.7', 'asint']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, hashing.py:59),), kws=(), vararg=None, target=None) ['$18compare_op.7', '$20pred', 'bool20']
    branch $20pred, 22, 30                   ['$20pred']
label 22:
    $22load_global.0 = global(int: <class 'int'>) ['$22load_global.0']
    $const24.1 = const(int, -2)              ['$const24.1']
    asint = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None) ['$22load_global.0', '$const24.1', 'asint']
    jump 30                                  []
label 30:
    $32return_value.1 = cast(value=asint)    ['$32return_value.1', 'asint']
    return $32return_value.1                 ['$32return_value.1']

DEBUG    2023-08-19 15:21:00,940: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332C5310>
DEBUG    2023-08-19 15:21:00,940: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:21:00,940: on stmt: $2load_global.0 = global(_Py_hash_t: int64)
DEBUG    2023-08-19 15:21:00,940: on stmt: asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: $12load_global.4 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $const14.5 = const(int, -1)
DEBUG    2023-08-19 15:21:00,940: on stmt: $16call_function.6 = call $12load_global.4($const14.5, func=$12load_global.4, args=[Var($const14.5, hashing.py:59)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: $18compare_op.7 = asint == $16call_function.6
DEBUG    2023-08-19 15:21:00,940: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, hashing.py:59),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: branch $20pred, 22, 30
DEBUG    2023-08-19 15:21:00,940: ==== SSA block analysis pass on 22
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332C5310>
DEBUG    2023-08-19 15:21:00,940: on stmt: $22load_global.0 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $const24.1 = const(int, -2)
DEBUG    2023-08-19 15:21:00,940: on stmt: asint = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: jump 30
DEBUG    2023-08-19 15:21:00,940: ==== SSA block analysis pass on 30
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F332C5310>
DEBUG    2023-08-19 15:21:00,940: on stmt: $32return_value.1 = cast(value=asint)
DEBUG    2023-08-19 15:21:00,940: on stmt: return $32return_value.1
DEBUG    2023-08-19 15:21:00,940: defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x0000025F3354F400>],
             '$16call_function.6': [<numba.core.ir.Assign object at 0x0000025F335457F0>],
             '$18compare_op.7': [<numba.core.ir.Assign object at 0x0000025F33548370>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000025F33543190>],
             '$22load_global.0': [<numba.core.ir.Assign object at 0x0000025F3353D370>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F3354D7F0>],
             '$32return_value.1': [<numba.core.ir.Assign object at 0x0000025F3353C4C0>],
             '$const14.5': [<numba.core.ir.Assign object at 0x0000025F3354F310>],
             '$const24.1': [<numba.core.ir.Assign object at 0x0000025F3353DA60>],
             'asint': [<numba.core.ir.Assign object at 0x0000025F3354A280>,
                       <numba.core.ir.Assign object at 0x0000025F3353FC10>],
             'bool20': [<numba.core.ir.Assign object at 0x0000025F33548D60>],
             'val': [<numba.core.ir.Assign object at 0x0000025F332B70A0>]})
DEBUG    2023-08-19 15:21:00,940: SSA violators {'asint'}
DEBUG    2023-08-19 15:21:00,940: Fix SSA violator on var asint
DEBUG    2023-08-19 15:21:00,940: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F332C50D0>
DEBUG    2023-08-19 15:21:00,940: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:21:00,940: on stmt: $2load_global.0 = global(_Py_hash_t: int64)
DEBUG    2023-08-19 15:21:00,940: on stmt: asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: first assign: asint
DEBUG    2023-08-19 15:21:00,940: replaced with: asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: $12load_global.4 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $const14.5 = const(int, -1)
DEBUG    2023-08-19 15:21:00,940: on stmt: $16call_function.6 = call $12load_global.4($const14.5, func=$12load_global.4, args=[Var($const14.5, hashing.py:59)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: $18compare_op.7 = asint == $16call_function.6
DEBUG    2023-08-19 15:21:00,940: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, hashing.py:59),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: branch $20pred, 22, 30
DEBUG    2023-08-19 15:21:00,940: ==== SSA block rewrite pass on 22
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F332C50D0>
DEBUG    2023-08-19 15:21:00,940: on stmt: $22load_global.0 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $const24.1 = const(int, -2)
DEBUG    2023-08-19 15:21:00,940: on stmt: asint = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: replaced with: asint.1 = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: jump 30
DEBUG    2023-08-19 15:21:00,940: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F332C50D0>
DEBUG    2023-08-19 15:21:00,940: on stmt: $32return_value.1 = cast(value=asint)
DEBUG    2023-08-19 15:21:00,940: on stmt: return $32return_value.1
DEBUG    2023-08-19 15:21:00,940: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F33534820>],
             22: [<numba.core.ir.Assign object at 0x0000025F33537580>]})
DEBUG    2023-08-19 15:21:00,940: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C50D0>
DEBUG    2023-08-19 15:21:00,940: on stmt: val = arg(0, name=val)
DEBUG    2023-08-19 15:21:00,940: on stmt: $2load_global.0 = global(_Py_hash_t: int64)
DEBUG    2023-08-19 15:21:00,940: on stmt: asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: $12load_global.4 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $const14.5 = const(int, -1)
DEBUG    2023-08-19 15:21:00,940: on stmt: $16call_function.6 = call $12load_global.4($const14.5, func=$12load_global.4, args=[Var($const14.5, hashing.py:59)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: $18compare_op.7 = asint == $16call_function.6
DEBUG    2023-08-19 15:21:00,940: find_def var='asint' stmt=$18compare_op.7 = asint == $16call_function.6
DEBUG    2023-08-19 15:21:00,940: on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, hashing.py:59),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: branch $20pred, 22, 30
DEBUG    2023-08-19 15:21:00,940: ==== SSA block rewrite pass on 22
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C50D0>
DEBUG    2023-08-19 15:21:00,940: on stmt: $22load_global.0 = global(int: <class 'int'>)
DEBUG    2023-08-19 15:21:00,940: on stmt: $const24.1 = const(int, -2)
DEBUG    2023-08-19 15:21:00,940: on stmt: asint.1 = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,940: on stmt: jump 30
DEBUG    2023-08-19 15:21:00,940: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:21:00,940: Running <numba.core.ssa._FixSSAVars object at 0x0000025F332C50D0>
DEBUG    2023-08-19 15:21:00,940: on stmt: $32return_value.1 = cast(value=asint)
DEBUG    2023-08-19 15:21:00,940: find_def var='asint' stmt=$32return_value.1 = cast(value=asint)
DEBUG    2023-08-19 15:21:00,940: find_def_from_top label 30
DEBUG    2023-08-19 15:21:00,940: insert phi node asint.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
DEBUG    2023-08-19 15:21:00,940: find_def_from_bottom label 0
DEBUG    2023-08-19 15:21:00,948: incoming_def asint = call $2load_global.0(val, func=$2load_global.0, args=[Var(val, hashing.py:58)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,948: find_def_from_bottom label 22
DEBUG    2023-08-19 15:21:00,948: incoming_def asint.1 = call $22load_global.0($const24.1, func=$22load_global.0, args=[Var($const24.1, hashing.py:60)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,948: replaced with: $32return_value.1 = cast(value=asint.2)
DEBUG    2023-08-19 15:21:00,948: on stmt: return $32return_value.1
DEBUG    2023-08-19 15:21:00,989: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:00,989: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:00,989: stack: []
DEBUG    2023-08-19 15:21:00,989: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:00,989: stack []
DEBUG    2023-08-19 15:21:00,989: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:21:00,989: stack []
DEBUG    2023-08-19 15:21:00,989: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:21:00,989: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:00,989: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:21:00,989: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:21:00,989: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:00,989: stack ['$6call_function.2']
DEBUG    2023-08-19 15:21:00,989: end state. edges=[]
DEBUG    2023-08-19 15:21:00,989: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:00,989: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:00,991: defmap: {}
DEBUG    2023-08-19 15:21:00,991: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,991: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:00,991: keep phismap: {}
DEBUG    2023-08-19 15:21:00,991: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:00,991: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:00,991: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:00,991: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:21:00,991: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:00,991: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F334E4E80>
DEBUG    2023-08-19 15:21:00,991: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:21:00,991: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:21:00,991: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:00,991: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:21:00,991: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:21:00,991: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F335220D0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F335228E0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F33522A00>],
             'name': [<numba.core.ir.Assign object at 0x0000025F33573550>]})
DEBUG    2023-08-19 15:21:00,991: SSA violators set()
DEBUG    2023-08-19 15:21:00,999: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
        With argument(s): '(unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:21:01,001: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
        With argument(s): '(unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:21:01,011: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:01,011: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,011: stack: []
DEBUG    2023-08-19 15:21:01,011: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:01,011: stack []
DEBUG    2023-08-19 15:21:01,011: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:21:01,011: stack []
DEBUG    2023-08-19 15:21:01,011: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:21:01,011: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:01,011: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:21:01,011: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:21:01,011: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:01,011: stack ['$6call_function.2']
DEBUG    2023-08-19 15:21:01,011: end state. edges=[]
DEBUG    2023-08-19 15:21:01,011: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,011: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,011: defmap: {}
DEBUG    2023-08-19 15:21:01,011: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,011: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,011: keep phismap: {}
DEBUG    2023-08-19 15:21:01,011: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:01,011: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,011: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,011: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:21:01,011: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,011: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335BA610>
DEBUG    2023-08-19 15:21:01,011: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:21:01,011: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:21:01,011: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,011: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:21:01,011: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:21:01,011: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F335790A0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F335C43D0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F335C44F0>],
             'name': [<numba.core.ir.Assign object at 0x0000025F335BAEB0>]})
DEBUG    2023-08-19 15:21:01,011: SSA violators set()
DEBUG    2023-08-19 15:21:01,019: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
        With argument(s): '(unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:21:01,021: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
        With argument(s): '(unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:21:01,029: bytecode dump:
>          0	NOP(arg=None, lineno=711)
           2	LOAD_GLOBAL(arg=0, lineno=711)
           4	LOAD_FAST(arg=0, lineno=711)
           6	CALL_FUNCTION(arg=1, lineno=711)
           8	RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:01,029: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,029: stack: []
DEBUG    2023-08-19 15:21:01,029: dispatch pc=0, inst=NOP(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:01,029: stack []
DEBUG    2023-08-19 15:21:01,029: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=711)
DEBUG    2023-08-19 15:21:01,029: stack []
DEBUG    2023-08-19 15:21:01,029: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=711)
DEBUG    2023-08-19 15:21:01,029: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:01,031: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=711)
DEBUG    2023-08-19 15:21:01,031: stack ['$2load_global.0', '$name4.1']
DEBUG    2023-08-19 15:21:01,031: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=711)
DEBUG    2023-08-19 15:21:01,031: stack ['$6call_function.2']
DEBUG    2023-08-19 15:21:01,031: end state. edges=[]
DEBUG    2023-08-19 15:21:01,031: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,031: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,031: defmap: {}
DEBUG    2023-08-19 15:21:01,031: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,031: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,031: keep phismap: {}
DEBUG    2023-08-19 15:21:01,031: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:01,031: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,031: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$name4.1'}), (6, {'func': '$2load_global.0', 'args': ['$name4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,031: label 0:
    name = arg(0, name=name)                 ['name']
    $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'name']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:21:01,031: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,031: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335D0A30>
DEBUG    2023-08-19 15:21:01,031: on stmt: name = arg(0, name=name)
DEBUG    2023-08-19 15:21:01,031: on stmt: $2load_global.0 = global(_inject_hashsecret_read: <intrinsic _inject_hashsecret_read>)
DEBUG    2023-08-19 15:21:01,031: on stmt: $6call_function.2 = call $2load_global.0(name, func=$2load_global.0, args=[Var(name, hashing.py:711)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,031: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:21:01,031: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:21:01,031: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F335D0130>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F335D0E20>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F335D0F40>],
             'name': [<numba.core.ir.Assign object at 0x0000025F335D02E0>]})
DEBUG    2023-08-19 15:21:01,031: SSA violators set()
DEBUG    2023-08-19 15:21:01,041: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
        With argument(s): '(unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:21:01,041: captured error
Traceback (most recent call last):
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typeinfer.py", line 1555, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 213, in resolve_function_type
    raise last_exception
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\typing\context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 331, in get_call_type
    failures.raise_error()
  File "C:\Anaconda3\envs\DLL\lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic _inject_hashsecret_read>) found for signature:
 
 >>> _inject_hashsecret_read(unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function '_inject_hashsecret_read': File: numba\cpython\hashing.py: Line 679.
        With argument(s): '(unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         TypingError: [1mrequires literal string[0m[0m
  raised from C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py:684
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic _inject_hashsecret_read>)[0m
[0m[1mDuring: typing of call at C:\Anaconda3\envs\DLL\lib\site-packages\numba\cpython\hashing.py (711)
[0m
DEBUG    2023-08-19 15:21:01,476: bytecode dump:
>          0	NOP(arg=None, lineno=278)
           2	LOAD_GLOBAL(arg=0, lineno=278)
           4	LOAD_METHOD(arg=1, lineno=278)
           6	LOAD_FAST(arg=0, lineno=278)
           8	LOAD_FAST(arg=1, lineno=278)
          10	CALL_METHOD(arg=2, lineno=278)
          12	RETURN_VALUE(arg=None, lineno=278)
DEBUG    2023-08-19 15:21:01,476: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,476: stack: []
DEBUG    2023-08-19 15:21:01,476: dispatch pc=0, inst=NOP(arg=None, lineno=278)
DEBUG    2023-08-19 15:21:01,476: stack []
DEBUG    2023-08-19 15:21:01,476: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=278)
DEBUG    2023-08-19 15:21:01,476: stack []
DEBUG    2023-08-19 15:21:01,476: dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=278)
DEBUG    2023-08-19 15:21:01,476: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:01,476: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=278)
DEBUG    2023-08-19 15:21:01,476: stack ['$4load_method.1']
DEBUG    2023-08-19 15:21:01,476: dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=278)
DEBUG    2023-08-19 15:21:01,476: stack ['$4load_method.1', '$mi6.2']
DEBUG    2023-08-19 15:21:01,476: dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=278)
DEBUG    2023-08-19 15:21:01,476: stack ['$4load_method.1', '$mi6.2', '$typ8.3']
DEBUG    2023-08-19 15:21:01,476: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=278)
DEBUG    2023-08-19 15:21:01,476: stack ['$10call_method.4']
DEBUG    2023-08-19 15:21:01,476: end state. edges=[]
DEBUG    2023-08-19 15:21:01,476: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,476: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,476: defmap: {}
DEBUG    2023-08-19 15:21:01,476: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,476: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,476: keep phismap: {}
DEBUG    2023-08-19 15:21:01,476: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:01,476: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,476: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$mi6.2'}), (8, {'res': '$typ8.3'}), (10, {'func': '$4load_method.1', 'args': ['$mi6.2', '$typ8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,476: label 0:
    mi = arg(0, name=mi)                     ['mi']
    typ = arg(1, name=typ)                   ['typ']
    $2load_global.0 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=_from_meminfo) ['$2load_global.0', '$4load_method.1']
    $10call_method.4 = call $4load_method.1(mi, typ, func=$4load_method.1, args=[Var(mi, typeddict.py:278), Var(typ, typeddict.py:278)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'mi', 'typ']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG    2023-08-19 15:21:01,476: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,476: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33653310>
DEBUG    2023-08-19 15:21:01,476: on stmt: mi = arg(0, name=mi)
DEBUG    2023-08-19 15:21:01,476: on stmt: typ = arg(1, name=typ)
DEBUG    2023-08-19 15:21:01,484: on stmt: $2load_global.0 = global(dictobject: <module 'numba.typed.dictobject' from 'C:\\Anaconda3\\envs\\DLL\\lib\\site-packages\\numba\\typed\\dictobject.py'>)
DEBUG    2023-08-19 15:21:01,484: on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=_from_meminfo)
DEBUG    2023-08-19 15:21:01,484: on stmt: $10call_method.4 = call $4load_method.1(mi, typ, func=$4load_method.1, args=[Var(mi, typeddict.py:278), Var(typ, typeddict.py:278)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,484: on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG    2023-08-19 15:21:01,484: on stmt: return $12return_value.5
DEBUG    2023-08-19 15:21:01,484: defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x0000025F3365F370>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000025F3365F460>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F3365AD60>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000025F3365AEE0>],
             'mi': [<numba.core.ir.Assign object at 0x0000025F3365A400>],
             'typ': [<numba.core.ir.Assign object at 0x0000025F3365A280>]})
DEBUG    2023-08-19 15:21:01,484: SSA violators set()
DEBUG    2023-08-19 15:21:01,609: bytecode dump:
>          0	NOP(arg=None, lineno=63)
           2	LOAD_GLOBAL(arg=0, lineno=63)
           4	LOAD_FAST(arg=0, lineno=63)
           6	LOAD_METHOD(arg=1, lineno=63)
           8	CALL_METHOD(arg=0, lineno=63)
          10	CALL_FUNCTION(arg=1, lineno=63)
          12	RETURN_VALUE(arg=None, lineno=63)
DEBUG    2023-08-19 15:21:01,609: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,609: stack: []
DEBUG    2023-08-19 15:21:01,609: dispatch pc=0, inst=NOP(arg=None, lineno=63)
DEBUG    2023-08-19 15:21:01,609: stack []
DEBUG    2023-08-19 15:21:01,609: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=63)
DEBUG    2023-08-19 15:21:01,609: stack []
DEBUG    2023-08-19 15:21:01,609: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=63)
DEBUG    2023-08-19 15:21:01,609: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:01,609: dispatch pc=6, inst=LOAD_METHOD(arg=1, lineno=63)
DEBUG    2023-08-19 15:21:01,609: stack ['$2load_global.0', '$d4.1']
DEBUG    2023-08-19 15:21:01,609: dispatch pc=8, inst=CALL_METHOD(arg=0, lineno=63)
DEBUG    2023-08-19 15:21:01,609: stack ['$2load_global.0', '$6load_method.2']
DEBUG    2023-08-19 15:21:01,609: dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=63)
DEBUG    2023-08-19 15:21:01,609: stack ['$2load_global.0', '$8call_method.3']
DEBUG    2023-08-19 15:21:01,609: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=63)
DEBUG    2023-08-19 15:21:01,609: stack ['$10call_function.4']
DEBUG    2023-08-19 15:21:01,609: end state. edges=[]
DEBUG    2023-08-19 15:21:01,609: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,609: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,609: defmap: {}
DEBUG    2023-08-19 15:21:01,609: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,609: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,609: keep phismap: {}
DEBUG    2023-08-19 15:21:01,609: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:01,609: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,609: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$d4.1'}), (6, {'item': '$d4.1', 'res': '$6load_method.2'}), (8, {'func': '$6load_method.2', 'args': [], 'res': '$8call_method.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_method.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,617: label 0:
    d = arg(0, name=d)                       ['d']
    $2load_global.0 = global(list: <class 'list'>) ['$2load_global.0']
    $6load_method.2 = getattr(value=d, attr=keys) ['$6load_method.2', 'd']
    $8call_method.3 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, target=None) ['$6load_method.2', '$8call_method.3']
    $10call_function.4 = call $2load_global.0($8call_method.3, func=$2load_global.0, args=[Var($8call_method.3, typeddict.py:63)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8call_method.3']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG    2023-08-19 15:21:01,619: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,619: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33649B80>
DEBUG    2023-08-19 15:21:01,619: on stmt: d = arg(0, name=d)
DEBUG    2023-08-19 15:21:01,619: on stmt: $2load_global.0 = global(list: <class 'list'>)
DEBUG    2023-08-19 15:21:01,619: on stmt: $6load_method.2 = getattr(value=d, attr=keys)
DEBUG    2023-08-19 15:21:01,619: on stmt: $8call_method.3 = call $6load_method.2(func=$6load_method.2, args=[], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,619: on stmt: $10call_function.4 = call $2load_global.0($8call_method.3, func=$2load_global.0, args=[Var($8call_method.3, typeddict.py:63)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,619: on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG    2023-08-19 15:21:01,619: on stmt: return $12return_value.5
DEBUG    2023-08-19 15:21:01,619: defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000025F336498B0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000025F33649E50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F33646760>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x0000025F33649190>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x0000025F33649580>],
             'd': [<numba.core.ir.Assign object at 0x0000025F33646A90>]})
DEBUG    2023-08-19 15:21:01,619: SSA violators set()
DEBUG    2023-08-19 15:21:01,627: bytecode dump:
>          0	NOP(arg=None, lineno=878)
           2	LOAD_GLOBAL(arg=0, lineno=878)
           4	LOAD_FAST(arg=0, lineno=878)
           6	CALL_FUNCTION(arg=1, lineno=878)
           8	RETURN_VALUE(arg=None, lineno=878)
DEBUG    2023-08-19 15:21:01,627: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,627: stack: []
DEBUG    2023-08-19 15:21:01,629: dispatch pc=0, inst=NOP(arg=None, lineno=878)
DEBUG    2023-08-19 15:21:01,629: stack []
DEBUG    2023-08-19 15:21:01,629: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=878)
DEBUG    2023-08-19 15:21:01,629: stack []
DEBUG    2023-08-19 15:21:01,629: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=878)
DEBUG    2023-08-19 15:21:01,629: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:01,629: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=878)
DEBUG    2023-08-19 15:21:01,629: stack ['$2load_global.0', '$d4.1']
DEBUG    2023-08-19 15:21:01,629: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=878)
DEBUG    2023-08-19 15:21:01,629: stack ['$6call_function.2']
DEBUG    2023-08-19 15:21:01,629: end state. edges=[]
DEBUG    2023-08-19 15:21:01,629: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,629: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,629: defmap: {}
DEBUG    2023-08-19 15:21:01,629: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,629: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,629: keep phismap: {}
DEBUG    2023-08-19 15:21:01,629: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:01,629: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,629: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$d4.1'}), (6, {'func': '$2load_global.0', 'args': ['$d4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,629: label 0:
    d = arg(0, name=d)                       ['d']
    $2load_global.0 = global(_dict_keys: <intrinsic _dict_keys>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(d, func=$2load_global.0, args=[Var(d, dictobject.py:878)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'd']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:21:01,629: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,629: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3360D340>
DEBUG    2023-08-19 15:21:01,629: on stmt: d = arg(0, name=d)
DEBUG    2023-08-19 15:21:01,629: on stmt: $2load_global.0 = global(_dict_keys: <intrinsic _dict_keys>)
DEBUG    2023-08-19 15:21:01,629: on stmt: $6call_function.2 = call $2load_global.0(d, func=$2load_global.0, args=[Var(d, dictobject.py:878)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,629: on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG    2023-08-19 15:21:01,629: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:21:01,629: defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F3365BA00>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000025F3368CA30>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F3368CB50>],
             'd': [<numba.core.ir.Assign object at 0x0000025F3365BAF0>]})
DEBUG    2023-08-19 15:21:01,629: SSA violators set()
DEBUG    2023-08-19 15:21:01,673: bytecode dump:
>          0	NOP(arg=None, lineno=468)
           2	BUILD_LIST(arg=0, lineno=468)
           4	STORE_FAST(arg=1, lineno=468)
           6	LOAD_FAST(arg=1, lineno=469)
           8	LOAD_METHOD(arg=0, lineno=469)
          10	LOAD_FAST(arg=0, lineno=469)
          12	CALL_METHOD(arg=1, lineno=469)
          14	POP_TOP(arg=None, lineno=469)
          16	LOAD_FAST(arg=1, lineno=470)
          18	RETURN_VALUE(arg=None, lineno=470)
DEBUG    2023-08-19 15:21:01,673: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,673: stack: []
DEBUG    2023-08-19 15:21:01,673: dispatch pc=0, inst=NOP(arg=None, lineno=468)
DEBUG    2023-08-19 15:21:01,673: stack []
DEBUG    2023-08-19 15:21:01,673: dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=468)
DEBUG    2023-08-19 15:21:01,674: stack []
DEBUG    2023-08-19 15:21:01,674: dispatch pc=4, inst=STORE_FAST(arg=1, lineno=468)
DEBUG    2023-08-19 15:21:01,674: stack ['$2build_list.0']
DEBUG    2023-08-19 15:21:01,674: dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=469)
DEBUG    2023-08-19 15:21:01,674: stack []
DEBUG    2023-08-19 15:21:01,674: dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=469)
DEBUG    2023-08-19 15:21:01,674: stack ['$res6.1']
DEBUG    2023-08-19 15:21:01,674: dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=469)
DEBUG    2023-08-19 15:21:01,674: stack ['$8load_method.2']
DEBUG    2023-08-19 15:21:01,674: dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=469)
DEBUG    2023-08-19 15:21:01,674: stack ['$8load_method.2', '$iterable10.3']
DEBUG    2023-08-19 15:21:01,674: dispatch pc=14, inst=POP_TOP(arg=None, lineno=469)
DEBUG    2023-08-19 15:21:01,674: stack ['$12call_method.4']
DEBUG    2023-08-19 15:21:01,674: dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=470)
DEBUG    2023-08-19 15:21:01,675: stack []
DEBUG    2023-08-19 15:21:01,675: dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=470)
DEBUG    2023-08-19 15:21:01,675: stack ['$res16.5']
DEBUG    2023-08-19 15:21:01,675: end state. edges=[]
DEBUG    2023-08-19 15:21:01,675: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,675: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,675: defmap: {}
DEBUG    2023-08-19 15:21:01,675: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,675: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,675: keep phismap: {}
DEBUG    2023-08-19 15:21:01,675: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:01,675: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,675: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'value': '$2build_list.0'}), (6, {'res': '$res6.1'}), (8, {'item': '$res6.1', 'res': '$8load_method.2'}), (10, {'res': '$iterable10.3'}), (12, {'func': '$8load_method.2', 'args': ['$iterable10.3'], 'res': '$12call_method.4'}), (16, {'res': '$res16.5'}), (18, {'retval': '$res16.5', 'castval': '$18return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,676: label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    res = build_list(items=[])               ['res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:468)], kws=(), vararg=None, target=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

DEBUG    2023-08-19 15:21:01,685: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,685: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F336CFBB0>
DEBUG    2023-08-19 15:21:01,685: on stmt: iterable = arg(0, name=iterable)
DEBUG    2023-08-19 15:21:01,685: on stmt: res = build_list(items=[])
DEBUG    2023-08-19 15:21:01,685: on stmt: $8load_method.2 = getattr(value=res, attr=extend)
DEBUG    2023-08-19 15:21:01,685: on stmt: $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:468)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,685: on stmt: $18return_value.6 = cast(value=res)
DEBUG    2023-08-19 15:21:01,685: on stmt: return $18return_value.6
DEBUG    2023-08-19 15:21:01,686: defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x0000025F336D1460>],
             '$18return_value.6': [<numba.core.ir.Assign object at 0x0000025F336D1670>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x0000025F336D1130>],
             'iterable': [<numba.core.ir.Assign object at 0x0000025F336CF4C0>],
             'res': [<numba.core.ir.Assign object at 0x0000025F336CF430>]})
DEBUG    2023-08-19 15:21:01,686: SSA violators set()
DEBUG    2023-08-19 15:21:01,696: bytecode dump:
>          0	NOP(arg=None, lineno=912)
           2	LOAD_FAST(arg=0, lineno=912)
           4	LOAD_ATTR(arg=0, lineno=912)
           6	STORE_FAST(arg=2, lineno=912)
           8	LOAD_FAST(arg=1, lineno=913)
          10	GET_ITER(arg=None, lineno=913)
>         12	FOR_ITER(arg=12, lineno=913)
          14	STORE_FAST(arg=3, lineno=913)
          16	LOAD_FAST(arg=2, lineno=914)
          18	LOAD_FAST(arg=3, lineno=914)
          20	CALL_FUNCTION(arg=1, lineno=914)
          22	POP_TOP(arg=None, lineno=914)
          24	JUMP_ABSOLUTE(arg=12, lineno=914)
>         26	LOAD_CONST(arg=0, lineno=914)
          28	RETURN_VALUE(arg=None, lineno=914)
DEBUG    2023-08-19 15:21:01,696: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,696: stack: []
DEBUG    2023-08-19 15:21:01,696: dispatch pc=0, inst=NOP(arg=None, lineno=912)
DEBUG    2023-08-19 15:21:01,696: stack []
DEBUG    2023-08-19 15:21:01,697: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=912)
DEBUG    2023-08-19 15:21:01,697: stack []
DEBUG    2023-08-19 15:21:01,697: dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=912)
DEBUG    2023-08-19 15:21:01,697: stack ['$lst2.0']
DEBUG    2023-08-19 15:21:01,697: dispatch pc=6, inst=STORE_FAST(arg=2, lineno=912)
DEBUG    2023-08-19 15:21:01,697: stack ['$4load_attr.1']
DEBUG    2023-08-19 15:21:01,697: dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=913)
DEBUG    2023-08-19 15:21:01,697: stack []
DEBUG    2023-08-19 15:21:01,697: dispatch pc=10, inst=GET_ITER(arg=None, lineno=913)
DEBUG    2023-08-19 15:21:01,697: stack ['$iterable8.2']
DEBUG    2023-08-19 15:21:01,697: end state. edges=[Edge(pc=12, stack=('$10get_iter.3',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:01,697: pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG    2023-08-19 15:21:01,697: stack: ['$phi12.0']
DEBUG    2023-08-19 15:21:01,698: dispatch pc=12, inst=FOR_ITER(arg=12, lineno=913)
DEBUG    2023-08-19 15:21:01,698: stack ['$phi12.0']
DEBUG    2023-08-19 15:21:01,698: end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:01,698: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
DEBUG    2023-08-19 15:21:01,698: stack: []
DEBUG    2023-08-19 15:21:01,698: dispatch pc=26, inst=LOAD_CONST(arg=0, lineno=914)
DEBUG    2023-08-19 15:21:01,698: stack []
DEBUG    2023-08-19 15:21:01,698: dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=914)
DEBUG    2023-08-19 15:21:01,698: stack ['$const26.0']
DEBUG    2023-08-19 15:21:01,698: end state. edges=[]
DEBUG    2023-08-19 15:21:01,698: pending: deque([State(pc_initial=14 nstack_initial=2)])
DEBUG    2023-08-19 15:21:01,698: stack: ['$phi14.0', '$phi14.1']
DEBUG    2023-08-19 15:21:01,698: dispatch pc=14, inst=STORE_FAST(arg=3, lineno=913)
DEBUG    2023-08-19 15:21:01,698: stack ['$phi14.0', '$phi14.1']
DEBUG    2023-08-19 15:21:01,699: dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=914)
DEBUG    2023-08-19 15:21:01,699: stack ['$phi14.0']
DEBUG    2023-08-19 15:21:01,699: dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=914)
DEBUG    2023-08-19 15:21:01,699: stack ['$phi14.0', '$meth16.2']
DEBUG    2023-08-19 15:21:01,699: dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=914)
DEBUG    2023-08-19 15:21:01,699: stack ['$phi14.0', '$meth16.2', '$v18.3']
DEBUG    2023-08-19 15:21:01,699: dispatch pc=22, inst=POP_TOP(arg=None, lineno=914)
DEBUG    2023-08-19 15:21:01,699: stack ['$phi14.0', '$20call_function.4']
DEBUG    2023-08-19 15:21:01,699: dispatch pc=24, inst=JUMP_ABSOLUTE(arg=12, lineno=914)
DEBUG    2023-08-19 15:21:01,699: stack ['$phi14.0']
DEBUG    2023-08-19 15:21:01,700: end state. edges=[Edge(pc=12, stack=('$phi14.0',), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:01,700: pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG    2023-08-19 15:21:01,700: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,700: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=26 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,700: defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1)}
DEBUG    2023-08-19 15:21:01,700: phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG    2023-08-19 15:21:01,701: changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG    2023-08-19 15:21:01,701: changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG    2023-08-19 15:21:01,701: changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG    2023-08-19 15:21:01,701: keep phismap: {'$phi12.0': {('$10get_iter.3', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))}}
DEBUG    2023-08-19 15:21:01,702: new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.3'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'}})
DEBUG    2023-08-19 15:21:01,702: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,702: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$lst2.0'}), (4, {'item': '$lst2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$iterable8.2'}), (10, {'value': '$iterable8.2', 'res': '$10get_iter.3'})), outgoing_phis={'$phi12.0': '$10get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.3',)})
DEBUG    2023-08-19 15:21:01,702: block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 14: ('$phi12.0', '$12for_iter.2')})
DEBUG    2023-08-19 15:21:01,702: block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'value': '$phi14.1'}), (16, {'res': '$meth16.2'}), (18, {'res': '$v18.3'}), (20, {'func': '$meth16.2', 'args': ['$v18.3'], 'res': '$20call_function.4'}), (24, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi14.0',)})
DEBUG    2023-08-19 15:21:01,702: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'retval': '$const26.0', 'castval': '$28return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,704: label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    meth = getattr(value=lst, attr=append)   ['lst', 'meth']
    $10get_iter.3 = getiter(value=iterable)  ['$10get_iter.3', 'iterable']
    $phi12.0 = $10get_iter.3                 ['$10get_iter.3', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 26             ['$12for_iter.3']
label 14:
    v = $phi14.1                             ['$phi14.1', 'v']
    $20call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:913)], kws=(), vararg=None, target=None) ['$20call_function.4', 'meth', 'v']
    jump 12                                  []
label 26:
    $const26.0 = const(NoneType, None)       ['$const26.0']
    $28return_value.1 = cast(value=$const26.0) ['$28return_value.1', '$const26.0']
    return $28return_value.1                 ['$28return_value.1']

DEBUG    2023-08-19 15:21:01,712: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,712: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F336344F0>
DEBUG    2023-08-19 15:21:01,712: on stmt: lst = arg(0, name=lst)
DEBUG    2023-08-19 15:21:01,712: on stmt: iterable = arg(1, name=iterable)
DEBUG    2023-08-19 15:21:01,712: on stmt: meth = getattr(value=lst, attr=append)
DEBUG    2023-08-19 15:21:01,712: on stmt: $10get_iter.3 = getiter(value=iterable)
DEBUG    2023-08-19 15:21:01,712: on stmt: $phi12.0 = $10get_iter.3
DEBUG    2023-08-19 15:21:01,712: on stmt: jump 12
DEBUG    2023-08-19 15:21:01,712: ==== SSA block analysis pass on 12
DEBUG    2023-08-19 15:21:01,712: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F336344F0>
DEBUG    2023-08-19 15:21:01,713: on stmt: $12for_iter.1 = iternext(value=$phi12.0)
DEBUG    2023-08-19 15:21:01,713: on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
DEBUG    2023-08-19 15:21:01,713: on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
DEBUG    2023-08-19 15:21:01,713: on stmt: $phi14.1 = $12for_iter.2
DEBUG    2023-08-19 15:21:01,713: on stmt: branch $12for_iter.3, 14, 26
DEBUG    2023-08-19 15:21:01,713: ==== SSA block analysis pass on 14
DEBUG    2023-08-19 15:21:01,713: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F336344F0>
DEBUG    2023-08-19 15:21:01,713: on stmt: v = $phi14.1
DEBUG    2023-08-19 15:21:01,713: on stmt: $20call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:913)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,713: on stmt: jump 12
DEBUG    2023-08-19 15:21:01,713: ==== SSA block analysis pass on 26
DEBUG    2023-08-19 15:21:01,713: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F336344F0>
DEBUG    2023-08-19 15:21:01,713: on stmt: $const26.0 = const(NoneType, None)
DEBUG    2023-08-19 15:21:01,713: on stmt: $28return_value.1 = cast(value=$const26.0)
DEBUG    2023-08-19 15:21:01,713: on stmt: return $28return_value.1
DEBUG    2023-08-19 15:21:01,714: defs defaultdict(<class 'list'>,
            {'$10get_iter.3': [<numba.core.ir.Assign object at 0x0000025F336AC2E0>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x0000025F336AC550>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x0000025F336D1B50>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x0000025F336D1CD0>],
             '$20call_function.4': [<numba.core.ir.Assign object at 0x0000025F33634F10>],
             '$28return_value.1': [<numba.core.ir.Assign object at 0x0000025F336AC8E0>],
             '$const26.0': [<numba.core.ir.Assign object at 0x0000025F336AC760>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x0000025F336D1760>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x0000025F336D1D90>],
             'iterable': [<numba.core.ir.Assign object at 0x0000025F336D1AF0>],
             'lst': [<numba.core.ir.Assign object at 0x0000025F336341C0>],
             'meth': [<numba.core.ir.Assign object at 0x0000025F336D1EE0>],
             'v': [<numba.core.ir.Assign object at 0x0000025F33634D30>]})
DEBUG    2023-08-19 15:21:01,714: SSA violators set()
DEBUG    2023-08-19 15:21:01,891: bytecode dump:
>          0	NOP(arg=None, lineno=38)
           2	LOAD_FAST(arg=0, lineno=38)
           4	LOAD_FAST(arg=1, lineno=38)
           6	BINARY_SUBSCR(arg=None, lineno=38)
           8	RETURN_VALUE(arg=None, lineno=38)
DEBUG    2023-08-19 15:21:01,891: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,891: stack: []
DEBUG    2023-08-19 15:21:01,891: dispatch pc=0, inst=NOP(arg=None, lineno=38)
DEBUG    2023-08-19 15:21:01,891: stack []
DEBUG    2023-08-19 15:21:01,891: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=38)
DEBUG    2023-08-19 15:21:01,891: stack []
DEBUG    2023-08-19 15:21:01,891: dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=38)
DEBUG    2023-08-19 15:21:01,891: stack ['$d2.0']
DEBUG    2023-08-19 15:21:01,891: dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=38)
DEBUG    2023-08-19 15:21:01,891: stack ['$d2.0', '$key4.1']
DEBUG    2023-08-19 15:21:01,891: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=38)
DEBUG    2023-08-19 15:21:01,891: stack ['$6binary_subscr.2']
DEBUG    2023-08-19 15:21:01,891: end state. edges=[]
DEBUG    2023-08-19 15:21:01,891: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,891: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,891: defmap: {}
DEBUG    2023-08-19 15:21:01,891: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,891: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,891: keep phismap: {}
DEBUG    2023-08-19 15:21:01,891: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:01,891: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,891: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$d2.0'}), (4, {'res': '$key4.1'}), (6, {'index': '$key4.1', 'target': '$d2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,891: label 0:
    d = arg(0, name=d)                       ['d']
    key = arg(1, name=key)                   ['key']
    $6binary_subscr.2 = getitem(value=d, index=key, fn=<built-in function getitem>) ['$6binary_subscr.2', 'd', 'key']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:21:01,902: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,902: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3373B280>
DEBUG    2023-08-19 15:21:01,902: on stmt: d = arg(0, name=d)
DEBUG    2023-08-19 15:21:01,902: on stmt: key = arg(1, name=key)
DEBUG    2023-08-19 15:21:01,902: on stmt: $6binary_subscr.2 = getitem(value=d, index=key, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:01,902: on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
DEBUG    2023-08-19 15:21:01,902: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:21:01,902: defs defaultdict(<class 'list'>,
            {'$6binary_subscr.2': [<numba.core.ir.Assign object at 0x0000025F3373B910>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F3373BA60>],
             'd': [<numba.core.ir.Assign object at 0x0000025F33616280>],
             'key': [<numba.core.ir.Assign object at 0x0000025F3373B130>]})
DEBUG    2023-08-19 15:21:01,902: SSA violators set()
DEBUG    2023-08-19 15:21:01,902: bytecode dump:
>          0	NOP(arg=None, lineno=736)
           2	LOAD_GLOBAL(arg=0, lineno=736)
           4	LOAD_FAST(arg=1, lineno=736)
           6	LOAD_DEREF(arg=0, lineno=736)
           8	CALL_FUNCTION(arg=2, lineno=736)
          10	STORE_FAST(arg=2, lineno=736)
          12	LOAD_GLOBAL(arg=1, lineno=737)
          14	LOAD_FAST(arg=0, lineno=737)
          16	LOAD_FAST(arg=2, lineno=737)
          18	LOAD_GLOBAL(arg=2, lineno=737)
          20	LOAD_FAST(arg=2, lineno=737)
          22	CALL_FUNCTION(arg=1, lineno=737)
          24	CALL_FUNCTION(arg=3, lineno=737)
          26	UNPACK_SEQUENCE(arg=2, lineno=737)
          28	STORE_FAST(arg=3, lineno=737)
          30	STORE_FAST(arg=4, lineno=737)
          32	LOAD_FAST(arg=3, lineno=738)
          34	LOAD_GLOBAL(arg=3, lineno=738)
          36	LOAD_ATTR(arg=4, lineno=738)
          38	COMPARE_OP(arg=2, lineno=738)
          40	POP_JUMP_IF_FALSE(arg=50, lineno=738)
          42	LOAD_GLOBAL(arg=5, lineno=739)
          44	CALL_FUNCTION(arg=0, lineno=739)
          46	RAISE_VARARGS(arg=1, lineno=739)
          48	JUMP_FORWARD(arg=28, lineno=739)
>         50	LOAD_FAST(arg=3, lineno=740)
          52	LOAD_GLOBAL(arg=3, lineno=740)
          54	LOAD_ATTR(arg=4, lineno=740)
          56	COMPARE_OP(arg=0, lineno=740)
          58	POP_JUMP_IF_FALSE(arg=70, lineno=740)
          60	LOAD_GLOBAL(arg=6, lineno=741)
          62	LOAD_CONST(arg=1, lineno=741)
          64	CALL_FUNCTION(arg=1, lineno=741)
          66	RAISE_VARARGS(arg=1, lineno=741)
          68	JUMP_FORWARD(arg=8, lineno=741)
>         70	LOAD_GLOBAL(arg=7, lineno=743)
          72	LOAD_FAST(arg=4, lineno=743)
          74	CALL_FUNCTION(arg=1, lineno=743)
          76	RETURN_VALUE(arg=None, lineno=743)
>         78	LOAD_CONST(arg=0, lineno=743)
          80	RETURN_VALUE(arg=None, lineno=743)
DEBUG    2023-08-19 15:21:01,902: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,902: stack: []
DEBUG    2023-08-19 15:21:01,902: dispatch pc=0, inst=NOP(arg=None, lineno=736)
DEBUG    2023-08-19 15:21:01,902: stack []
DEBUG    2023-08-19 15:21:01,902: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=736)
DEBUG    2023-08-19 15:21:01,902: stack []
DEBUG    2023-08-19 15:21:01,902: dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=736)
DEBUG    2023-08-19 15:21:01,902: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=6, inst=LOAD_DEREF(arg=0, lineno=736)
DEBUG    2023-08-19 15:21:01,902: stack ['$2load_global.0', '$key4.1']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=736)
DEBUG    2023-08-19 15:21:01,902: stack ['$2load_global.0', '$key4.1', '$6load_deref.2']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=10, inst=STORE_FAST(arg=2, lineno=736)
DEBUG    2023-08-19 15:21:01,902: stack ['$8call_function.3']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack []
DEBUG    2023-08-19 15:21:01,902: dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$12load_global.4']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$12load_global.4', '$d14.5']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$12load_global.4', '$d14.5', '$castedkey16.6']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$12load_global.4', '$d14.5', '$castedkey16.6', '$18load_global.7']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$12load_global.4', '$d14.5', '$castedkey16.6', '$18load_global.7', '$castedkey20.8']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=24, inst=CALL_FUNCTION(arg=3, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$12load_global.4', '$d14.5', '$castedkey16.6', '$22call_function.9']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=26, inst=UNPACK_SEQUENCE(arg=2, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$24call_function.10']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=28, inst=STORE_FAST(arg=3, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$26unpack_sequence.12', '$26unpack_sequence.11']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=30, inst=STORE_FAST(arg=4, lineno=737)
DEBUG    2023-08-19 15:21:01,902: stack ['$26unpack_sequence.12']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=738)
DEBUG    2023-08-19 15:21:01,902: stack []
DEBUG    2023-08-19 15:21:01,902: dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=738)
DEBUG    2023-08-19 15:21:01,902: stack ['$ix32.14']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=36, inst=LOAD_ATTR(arg=4, lineno=738)
DEBUG    2023-08-19 15:21:01,902: stack ['$ix32.14', '$34load_global.15']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=38, inst=COMPARE_OP(arg=2, lineno=738)
DEBUG    2023-08-19 15:21:01,902: stack ['$ix32.14', '$36load_attr.16']
DEBUG    2023-08-19 15:21:01,902: dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=50, lineno=738)
DEBUG    2023-08-19 15:21:01,902: stack ['$38compare_op.17']
DEBUG    2023-08-19 15:21:01,902: end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:01,902: pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,910: stack: []
DEBUG    2023-08-19 15:21:01,910: dispatch pc=42, inst=LOAD_GLOBAL(arg=5, lineno=739)
DEBUG    2023-08-19 15:21:01,910: stack []
DEBUG    2023-08-19 15:21:01,910: dispatch pc=44, inst=CALL_FUNCTION(arg=0, lineno=739)
DEBUG    2023-08-19 15:21:01,910: stack ['$42load_global.0']
DEBUG    2023-08-19 15:21:01,910: dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=739)
DEBUG    2023-08-19 15:21:01,910: stack ['$44call_function.1']
DEBUG    2023-08-19 15:21:01,910: end state. edges=[]
DEBUG    2023-08-19 15:21:01,910: pending: deque([State(pc_initial=50 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,910: stack: []
DEBUG    2023-08-19 15:21:01,910: dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=740)
DEBUG    2023-08-19 15:21:01,910: stack []
DEBUG    2023-08-19 15:21:01,910: dispatch pc=52, inst=LOAD_GLOBAL(arg=3, lineno=740)
DEBUG    2023-08-19 15:21:01,910: stack ['$ix50.0']
DEBUG    2023-08-19 15:21:01,910: dispatch pc=54, inst=LOAD_ATTR(arg=4, lineno=740)
DEBUG    2023-08-19 15:21:01,910: stack ['$ix50.0', '$52load_global.1']
DEBUG    2023-08-19 15:21:01,910: dispatch pc=56, inst=COMPARE_OP(arg=0, lineno=740)
DEBUG    2023-08-19 15:21:01,910: stack ['$ix50.0', '$54load_attr.2']
DEBUG    2023-08-19 15:21:01,910: dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=70, lineno=740)
DEBUG    2023-08-19 15:21:01,910: stack ['$56compare_op.3']
DEBUG    2023-08-19 15:21:01,910: end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:01,910: pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,910: stack: []
DEBUG    2023-08-19 15:21:01,910: dispatch pc=60, inst=LOAD_GLOBAL(arg=6, lineno=741)
DEBUG    2023-08-19 15:21:01,910: stack []
DEBUG    2023-08-19 15:21:01,910: dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=741)
DEBUG    2023-08-19 15:21:01,910: stack ['$60load_global.0']
DEBUG    2023-08-19 15:21:01,910: dispatch pc=64, inst=CALL_FUNCTION(arg=1, lineno=741)
DEBUG    2023-08-19 15:21:01,910: stack ['$60load_global.0', '$const62.1']
DEBUG    2023-08-19 15:21:01,910: dispatch pc=66, inst=RAISE_VARARGS(arg=1, lineno=741)
DEBUG    2023-08-19 15:21:01,912: stack ['$64call_function.2']
DEBUG    2023-08-19 15:21:01,912: end state. edges=[]
DEBUG    2023-08-19 15:21:01,912: pending: deque([State(pc_initial=70 nstack_initial=0)])
DEBUG    2023-08-19 15:21:01,912: stack: []
DEBUG    2023-08-19 15:21:01,912: dispatch pc=70, inst=LOAD_GLOBAL(arg=7, lineno=743)
DEBUG    2023-08-19 15:21:01,912: stack []
DEBUG    2023-08-19 15:21:01,912: dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=743)
DEBUG    2023-08-19 15:21:01,912: stack ['$70load_global.0']
DEBUG    2023-08-19 15:21:01,912: dispatch pc=74, inst=CALL_FUNCTION(arg=1, lineno=743)
DEBUG    2023-08-19 15:21:01,912: stack ['$70load_global.0', '$val72.1']
DEBUG    2023-08-19 15:21:01,912: dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=743)
DEBUG    2023-08-19 15:21:01,912: stack ['$74call_function.2']
DEBUG    2023-08-19 15:21:01,912: end state. edges=[]
DEBUG    2023-08-19 15:21:01,912: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:01,912: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:01,912: defmap: {}
DEBUG    2023-08-19 15:21:01,912: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,912: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:01,912: keep phismap: {}
DEBUG    2023-08-19 15:21:01,912: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:01,912: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:01,912: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$key4.1'}), (6, {'res': '$6load_deref.2'}), (8, {'func': '$2load_global.0', 'args': ['$key4.1', '$6load_deref.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$d14.5'}), (16, {'res': '$castedkey16.6'}), (18, {'res': '$18load_global.7'}), (20, {'res': '$castedkey20.8'}), (22, {'func': '$18load_global.7', 'args': ['$castedkey20.8'], 'res': '$22call_function.9'}), (24, {'func': '$12load_global.4', 'args': ['$d14.5', '$castedkey16.6', '$22call_function.9'], 'res': '$24call_function.10'}), (26, {'iterable': '$24call_function.10', 'stores': ['$26unpack_sequence.11', '$26unpack_sequence.12'], 'tupleobj': '$26unpack_sequence.13'}), (28, {'value': '$26unpack_sequence.11'}), (30, {'value': '$26unpack_sequence.12'}), (32, {'res': '$ix32.14'}), (34, {'res': '$34load_global.15'}), (36, {'item': '$34load_global.15', 'res': '$36load_attr.16'}), (38, {'lhs': '$ix32.14', 'rhs': '$36load_attr.16', 'res': '$38compare_op.17'}), (40, {'pred': '$38compare_op.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 50: ()})
DEBUG    2023-08-19 15:21:01,912: block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'func': '$42load_global.0', 'args': [], 'res': '$44call_function.1'}), (46, {'exc': '$44call_function.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,912: block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$ix50.0'}), (52, {'res': '$52load_global.1'}), (54, {'item': '$52load_global.1', 'res': '$54load_attr.2'}), (56, {'lhs': '$ix50.0', 'rhs': '$54load_attr.2', 'res': '$56compare_op.3'}), (58, {'pred': '$56compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 70: ()})
DEBUG    2023-08-19 15:21:01,912: block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_global.0'}), (62, {'res': '$const62.1'}), (64, {'func': '$60load_global.0', 'args': ['$const62.1'], 'res': '$64call_function.2'}), (66, {'exc': '$64call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,912: block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$70load_global.0'}), (72, {'res': '$val72.1'}), (74, {'func': '$70load_global.0', 'args': ['$val72.1'], 'res': '$74call_function.2'}), (76, {'retval': '$74call_function.2', 'castval': '$76return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:01,912: label 0:
    d = arg(0, name=d)                       ['d']
    key = arg(1, name=key)                   ['key']
    $2load_global.0 = global(_cast: <intrinsic _cast>) ['$2load_global.0']
    $6load_deref.2 = freevar(keyty: unicode_type) ['$6load_deref.2']
    castedkey = call $2load_global.0(key, $6load_deref.2, func=$2load_global.0, args=[Var(key, dictobject.py:736), Var($6load_deref.2, dictobject.py:736)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6load_deref.2', 'castedkey', 'key']
    $12load_global.4 = global(_dict_lookup: <intrinsic _dict_lookup>) ['$12load_global.4']
    $18load_global.7 = global(hash: <built-in function hash>) ['$18load_global.7']
    $22call_function.9 = call $18load_global.7(castedkey, func=$18load_global.7, args=[Var(castedkey, dictobject.py:736)], kws=(), vararg=None, target=None) ['$18load_global.7', '$22call_function.9', 'castedkey']
    $24call_function.10 = call $12load_global.4(d, castedkey, $22call_function.9, func=$12load_global.4, args=[Var(d, dictobject.py:736), Var(castedkey, dictobject.py:736), Var($22call_function.9, dictobject.py:737)], kws=(), vararg=None, target=None) ['$12load_global.4', '$22call_function.9', '$24call_function.10', 'castedkey', 'd']
    $26unpack_sequence.13 = exhaust_iter(value=$24call_function.10, count=2) ['$24call_function.10', '$26unpack_sequence.13']
    $26unpack_sequence.11 = static_getitem(value=$26unpack_sequence.13, index=0, index_var=None, fn=<built-in function getitem>) ['$26unpack_sequence.11', '$26unpack_sequence.13']
    $26unpack_sequence.12 = static_getitem(value=$26unpack_sequence.13, index=1, index_var=None, fn=<built-in function getitem>) ['$26unpack_sequence.12', '$26unpack_sequence.13']
    ix = $26unpack_sequence.11               ['$26unpack_sequence.11', 'ix']
    val = $26unpack_sequence.12              ['$26unpack_sequence.12', 'val']
    $34load_global.15 = global(DKIX: <enum 'DKIX'>) ['$34load_global.15']
    $36load_attr.16 = getattr(value=$34load_global.15, attr=EMPTY) ['$34load_global.15', '$36load_attr.16']
    $38compare_op.17 = ix == $36load_attr.16 ['$36load_attr.16', '$38compare_op.17', 'ix']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.17, func=bool40, args=(Var($38compare_op.17, dictobject.py:738),), kws=(), vararg=None, target=None) ['$38compare_op.17', '$40pred', 'bool40']
    branch $40pred, 42, 50                   ['$40pred']
label 42:
    $42load_global.0 = global(KeyError: <class 'KeyError'>) ['$42load_global.0']
    $44call_function.1 = call $42load_global.0(func=$42load_global.0, args=[], kws=(), vararg=None, target=None) ['$42load_global.0', '$44call_function.1']
    raise $44call_function.1                 ['$44call_function.1']
label 50:
    $52load_global.1 = global(DKIX: <enum 'DKIX'>) ['$52load_global.1']
    $54load_attr.2 = getattr(value=$52load_global.1, attr=EMPTY) ['$52load_global.1', '$54load_attr.2']
    $56compare_op.3 = ix < $54load_attr.2    ['$54load_attr.2', '$56compare_op.3', 'ix']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.3, func=bool58, args=(Var($56compare_op.3, dictobject.py:740),), kws=(), vararg=None, target=None) ['$56compare_op.3', '$58pred', 'bool58']
    branch $58pred, 60, 70                   ['$58pred']
label 60:
    $60load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$60load_global.0']
    $const62.1 = const(str, internal dict error during lookup) ['$const62.1']
    $64call_function.2 = call $60load_global.0($const62.1, func=$60load_global.0, args=[Var($const62.1, dictobject.py:741)], kws=(), vararg=None, target=None) ['$60load_global.0', '$64call_function.2', '$const62.1']
    raise $64call_function.2                 ['$64call_function.2']
label 70:
    $70load_global.0 = global(_nonoptional: <intrinsic _nonoptional>) ['$70load_global.0']
    $74call_function.2 = call $70load_global.0(val, func=$70load_global.0, args=[Var(val, dictobject.py:737)], kws=(), vararg=None, target=None) ['$70load_global.0', '$74call_function.2', 'val']
    $76return_value.3 = cast(value=$74call_function.2) ['$74call_function.2', '$76return_value.3']
    return $76return_value.3                 ['$76return_value.3']

DEBUG    2023-08-19 15:21:01,922: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:01,922: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33732F10>
DEBUG    2023-08-19 15:21:01,923: on stmt: d = arg(0, name=d)
DEBUG    2023-08-19 15:21:01,923: on stmt: key = arg(1, name=key)
DEBUG    2023-08-19 15:21:01,923: on stmt: $2load_global.0 = global(_cast: <intrinsic _cast>)
DEBUG    2023-08-19 15:21:01,923: on stmt: $6load_deref.2 = freevar(keyty: unicode_type)
DEBUG    2023-08-19 15:21:01,923: on stmt: castedkey = call $2load_global.0(key, $6load_deref.2, func=$2load_global.0, args=[Var(key, dictobject.py:736), Var($6load_deref.2, dictobject.py:736)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,923: on stmt: $12load_global.4 = global(_dict_lookup: <intrinsic _dict_lookup>)
DEBUG    2023-08-19 15:21:01,923: on stmt: $18load_global.7 = global(hash: <built-in function hash>)
DEBUG    2023-08-19 15:21:01,923: on stmt: $22call_function.9 = call $18load_global.7(castedkey, func=$18load_global.7, args=[Var(castedkey, dictobject.py:736)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,923: on stmt: $24call_function.10 = call $12load_global.4(d, castedkey, $22call_function.9, func=$12load_global.4, args=[Var(d, dictobject.py:736), Var(castedkey, dictobject.py:736), Var($22call_function.9, dictobject.py:737)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,923: on stmt: $26unpack_sequence.13 = exhaust_iter(value=$24call_function.10, count=2)
DEBUG    2023-08-19 15:21:01,923: on stmt: $26unpack_sequence.11 = static_getitem(value=$26unpack_sequence.13, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:01,923: on stmt: $26unpack_sequence.12 = static_getitem(value=$26unpack_sequence.13, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG    2023-08-19 15:21:01,923: on stmt: ix = $26unpack_sequence.11
DEBUG    2023-08-19 15:21:01,924: on stmt: val = $26unpack_sequence.12
DEBUG    2023-08-19 15:21:01,924: on stmt: $34load_global.15 = global(DKIX: <enum 'DKIX'>)
DEBUG    2023-08-19 15:21:01,924: on stmt: $36load_attr.16 = getattr(value=$34load_global.15, attr=EMPTY)
DEBUG    2023-08-19 15:21:01,924: on stmt: $38compare_op.17 = ix == $36load_attr.16
DEBUG    2023-08-19 15:21:01,924: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:01,924: on stmt: $40pred = call bool40($38compare_op.17, func=bool40, args=(Var($38compare_op.17, dictobject.py:738),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,924: on stmt: branch $40pred, 42, 50
DEBUG    2023-08-19 15:21:01,924: ==== SSA block analysis pass on 42
DEBUG    2023-08-19 15:21:01,924: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33732F10>
DEBUG    2023-08-19 15:21:01,924: on stmt: $42load_global.0 = global(KeyError: <class 'KeyError'>)
DEBUG    2023-08-19 15:21:01,924: on stmt: $44call_function.1 = call $42load_global.0(func=$42load_global.0, args=[], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,924: on stmt: <static> raise <class 'KeyError'>()
DEBUG    2023-08-19 15:21:01,924: ==== SSA block analysis pass on 50
DEBUG    2023-08-19 15:21:01,924: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33732F10>
DEBUG    2023-08-19 15:21:01,924: on stmt: $52load_global.1 = global(DKIX: <enum 'DKIX'>)
DEBUG    2023-08-19 15:21:01,925: on stmt: $54load_attr.2 = getattr(value=$52load_global.1, attr=EMPTY)
DEBUG    2023-08-19 15:21:01,925: on stmt: $56compare_op.3 = ix < $54load_attr.2
DEBUG    2023-08-19 15:21:01,925: on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:01,925: on stmt: $58pred = call bool58($56compare_op.3, func=bool58, args=(Var($56compare_op.3, dictobject.py:740),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,925: on stmt: branch $58pred, 60, 70
DEBUG    2023-08-19 15:21:01,925: ==== SSA block analysis pass on 60
DEBUG    2023-08-19 15:21:01,925: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33732F10>
DEBUG    2023-08-19 15:21:01,925: on stmt: $60load_global.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG    2023-08-19 15:21:01,925: on stmt: $const62.1 = const(str, internal dict error during lookup)
DEBUG    2023-08-19 15:21:01,925: on stmt: $64call_function.2 = call $60load_global.0($const62.1, func=$60load_global.0, args=[Var($const62.1, dictobject.py:741)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,925: on stmt: <static> raise <class 'AssertionError'>('internal dict error during lookup')
DEBUG    2023-08-19 15:21:01,925: ==== SSA block analysis pass on 70
DEBUG    2023-08-19 15:21:01,925: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33732F10>
DEBUG    2023-08-19 15:21:01,925: on stmt: $70load_global.0 = global(_nonoptional: <intrinsic _nonoptional>)
DEBUG    2023-08-19 15:21:01,926: on stmt: $74call_function.2 = call $70load_global.0(val, func=$70load_global.0, args=[Var(val, dictobject.py:737)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:01,926: on stmt: $76return_value.3 = cast(value=$74call_function.2)
DEBUG    2023-08-19 15:21:01,926: on stmt: return $76return_value.3
DEBUG    2023-08-19 15:21:01,926: defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x0000025F33759190>],
             '$18load_global.7': [<numba.core.ir.Assign object at 0x0000025F33759550>],
             '$22call_function.9': [<numba.core.ir.Assign object at 0x0000025F33759850>],
             '$24call_function.10': [<numba.core.ir.Assign object at 0x0000025F337599D0>],
             '$26unpack_sequence.11': [<numba.core.ir.Assign object at 0x0000025F33759C70>],
             '$26unpack_sequence.12': [<numba.core.ir.Assign object at 0x0000025F33759D90>],
             '$26unpack_sequence.13': [<numba.core.ir.Assign object at 0x0000025F33759B20>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F3373D370>],
             '$34load_global.15': [<numba.core.ir.Assign object at 0x0000025F3376A250>],
             '$36load_attr.16': [<numba.core.ir.Assign object at 0x0000025F3376A3D0>],
             '$38compare_op.17': [<numba.core.ir.Assign object at 0x0000025F3376A580>],
             '$40pred': [<numba.core.ir.Assign object at 0x0000025F3376A7F0>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x0000025F3373D670>],
             '$44call_function.1': [<numba.core.ir.Assign object at 0x0000025F3376AA30>],
             '$52load_global.1': [<numba.core.ir.Assign object at 0x0000025F3376ADF0>],
             '$54load_attr.2': [<numba.core.ir.Assign object at 0x0000025F3376AF70>],
             '$56compare_op.3': [<numba.core.ir.Assign object at 0x0000025F3372D160>],
             '$58pred': [<numba.core.ir.Assign object at 0x0000025F3372D3D0>],
             '$60load_global.0': [<numba.core.ir.Assign object at 0x0000025F3372D610>],
             '$64call_function.2': [<numba.core.ir.Assign object at 0x0000025F3372D970>],
             '$6load_deref.2': [<numba.core.ir.Assign object at 0x0000025F3373DD30>],
             '$70load_global.0': [<numba.core.ir.Assign object at 0x0000025F3372DC10>],
             '$74call_function.2': [<numba.core.ir.Assign object at 0x0000025F3372DF10>],
             '$76return_value.3': [<numba.core.ir.Assign object at 0x0000025F33722070>],
             '$const62.1': [<numba.core.ir.Assign object at 0x0000025F3372D790>],
             'bool40': [<numba.core.ir.Assign object at 0x0000025F3376A6D0>],
             'bool58': [<numba.core.ir.Assign object at 0x0000025F3372D2B0>],
             'castedkey': [<numba.core.ir.Assign object at 0x0000025F3373DF10>],
             'd': [<numba.core.ir.Assign object at 0x0000025F3373D220>],
             'ix': [<numba.core.ir.Assign object at 0x0000025F33759E50>],
             'key': [<numba.core.ir.Assign object at 0x0000025F3373D4F0>],
             'val': [<numba.core.ir.Assign object at 0x0000025F33759F70>]})
DEBUG    2023-08-19 15:21:01,926: SSA violators set()
DEBUG    2023-08-19 15:21:02,197: bytecode dump:
>          0	NOP(arg=None, lineno=156)
           2	LOAD_FAST(arg=0, lineno=156)
           4	LOAD_CONST(arg=1, lineno=156)
           6	BINARY_ADD(arg=None, lineno=156)
           8	RETURN_VALUE(arg=None, lineno=156)
DEBUG    2023-08-19 15:21:02,197: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,197: stack: []
DEBUG    2023-08-19 15:21:02,198: dispatch pc=0, inst=NOP(arg=None, lineno=156)
DEBUG    2023-08-19 15:21:02,198: stack []
DEBUG    2023-08-19 15:21:02,198: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG    2023-08-19 15:21:02,198: stack []
DEBUG    2023-08-19 15:21:02,198: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=156)
DEBUG    2023-08-19 15:21:02,198: stack ['$tempc2.0']
DEBUG    2023-08-19 15:21:02,198: dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=156)
DEBUG    2023-08-19 15:21:02,198: stack ['$tempc2.0', '$const4.1']
DEBUG    2023-08-19 15:21:02,198: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=156)
DEBUG    2023-08-19 15:21:02,199: stack ['$6binary_add.2']
DEBUG    2023-08-19 15:21:02,199: end state. edges=[]
DEBUG    2023-08-19 15:21:02,199: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:02,199: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:02,199: defmap: {}
DEBUG    2023-08-19 15:21:02,199: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,199: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,200: keep phismap: {}
DEBUG    2023-08-19 15:21:02,200: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:02,200: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:02,200: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$tempc2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$tempc2.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,200: label 0:
    tempc = arg(0, name=tempc)               ['tempc']
    $const4.1 = const(float, 273.16)         ['$const4.1']
    $6binary_add.2 = tempc + $const4.1       ['$6binary_add.2', '$const4.1', 'tempc']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:21:02,202: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:02,202: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335325B0>
DEBUG    2023-08-19 15:21:02,202: on stmt: tempc = arg(0, name=tempc)
DEBUG    2023-08-19 15:21:02,202: on stmt: $const4.1 = const(float, 273.16)
DEBUG    2023-08-19 15:21:02,202: on stmt: $6binary_add.2 = tempc + $const4.1
DEBUG    2023-08-19 15:21:02,202: on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG    2023-08-19 15:21:02,202: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:21:02,203: defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x0000025F33562B80>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F33562940>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F33562070>],
             'tempc': [<numba.core.ir.Assign object at 0x0000025F335D0280>]})
DEBUG    2023-08-19 15:21:02,203: SSA violators set()
DEBUG    2023-08-19 15:21:02,235: bytecode dump:
>          0	NOP(arg=None, lineno=156)
           2	LOAD_FAST(arg=0, lineno=156)
           4	LOAD_CONST(arg=1, lineno=156)
           6	BINARY_ADD(arg=None, lineno=156)
           8	RETURN_VALUE(arg=None, lineno=156)
DEBUG    2023-08-19 15:21:02,235: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,235: stack: []
DEBUG    2023-08-19 15:21:02,235: dispatch pc=0, inst=NOP(arg=None, lineno=156)
DEBUG    2023-08-19 15:21:02,235: stack []
DEBUG    2023-08-19 15:21:02,235: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=156)
DEBUG    2023-08-19 15:21:02,235: stack []
DEBUG    2023-08-19 15:21:02,243: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=156)
DEBUG    2023-08-19 15:21:02,243: stack ['$tempc2.0']
DEBUG    2023-08-19 15:21:02,243: dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=156)
DEBUG    2023-08-19 15:21:02,243: stack ['$tempc2.0', '$const4.1']
DEBUG    2023-08-19 15:21:02,243: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=156)
DEBUG    2023-08-19 15:21:02,243: stack ['$6binary_add.2']
DEBUG    2023-08-19 15:21:02,243: end state. edges=[]
DEBUG    2023-08-19 15:21:02,243: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:02,243: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:02,243: defmap: {}
DEBUG    2023-08-19 15:21:02,243: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,243: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,243: keep phismap: {}
DEBUG    2023-08-19 15:21:02,243: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:02,243: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:02,243: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$tempc2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$tempc2.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,243: label 0:
    tempc = arg(0, name=tempc)               ['tempc']
    $const4.1 = const(float, 273.16)         ['$const4.1']
    $6binary_add.2 = tempc + $const4.1       ['$6binary_add.2', '$const4.1', 'tempc']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2023-08-19 15:21:02,245: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:02,245: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33632D90>
DEBUG    2023-08-19 15:21:02,245: on stmt: tempc = arg(0, name=tempc)
DEBUG    2023-08-19 15:21:02,245: on stmt: $const4.1 = const(float, 273.16)
DEBUG    2023-08-19 15:21:02,245: on stmt: $6binary_add.2 = tempc + $const4.1
DEBUG    2023-08-19 15:21:02,245: on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG    2023-08-19 15:21:02,245: on stmt: return $8return_value.3
DEBUG    2023-08-19 15:21:02,245: defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x0000025F33632190>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000025F33632F70>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F336327C0>],
             'tempc': [<numba.core.ir.Assign object at 0x0000025F33632100>]})
DEBUG    2023-08-19 15:21:02,245: SSA violators set()
DEBUG    2023-08-19 15:21:02,286: bytecode dump:
>          0	NOP(arg=None, lineno=124)
           2	LOAD_CONST(arg=1, lineno=124)
           4	LOAD_CONST(arg=2, lineno=124)
           6	LOAD_FAST(arg=2, lineno=124)
           8	LOAD_CONST(arg=3, lineno=124)
          10	BINARY_POWER(arg=None, lineno=124)
          12	BINARY_MULTIPLY(arg=None, lineno=124)
          14	BINARY_ADD(arg=None, lineno=124)
          16	LOAD_FAST(arg=1, lineno=124)
          18	BINARY_MULTIPLY(arg=None, lineno=124)
          20	LOAD_FAST(arg=3, lineno=124)
          22	BINARY_MULTIPLY(arg=None, lineno=124)
          24	LOAD_FAST(arg=0, lineno=124)
          26	LOAD_CONST(arg=4, lineno=124)
          28	BINARY_POWER(arg=None, lineno=124)
          30	BINARY_MULTIPLY(arg=None, lineno=124)
          32	RETURN_VALUE(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,286: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,286: stack: []
DEBUG    2023-08-19 15:21:02,286: dispatch pc=0, inst=NOP(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,286: stack []
DEBUG    2023-08-19 15:21:02,286: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=124)
DEBUG    2023-08-19 15:21:02,286: stack []
DEBUG    2023-08-19 15:21:02,286: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=124)
DEBUG    2023-08-19 15:21:02,287: stack ['$const2.0']
DEBUG    2023-08-19 15:21:02,287: dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=124)
DEBUG    2023-08-19 15:21:02,287: stack ['$const2.0', '$const4.1']
DEBUG    2023-08-19 15:21:02,287: dispatch pc=8, inst=LOAD_CONST(arg=3, lineno=124)
DEBUG    2023-08-19 15:21:02,287: stack ['$const2.0', '$const4.1', '$cloudiness6.2']
DEBUG    2023-08-19 15:21:02,287: dispatch pc=10, inst=BINARY_POWER(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,287: stack ['$const2.0', '$const4.1', '$cloudiness6.2', '$const8.3']
DEBUG    2023-08-19 15:21:02,287: dispatch pc=12, inst=BINARY_MULTIPLY(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,287: stack ['$const2.0', '$const4.1', '$10binary_power.4']
DEBUG    2023-08-19 15:21:02,287: dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,287: stack ['$const2.0', '$12binary_multiply.5']
DEBUG    2023-08-19 15:21:02,288: dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=124)
DEBUG    2023-08-19 15:21:02,288: stack ['$14binary_add.6']
DEBUG    2023-08-19 15:21:02,288: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,288: stack ['$14binary_add.6', '$emissivity_air16.7']
DEBUG    2023-08-19 15:21:02,288: dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=124)
DEBUG    2023-08-19 15:21:02,288: stack ['$18binary_multiply.8']
DEBUG    2023-08-19 15:21:02,288: dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,288: stack ['$18binary_multiply.8', '$stefan_boltzmann20.9']
DEBUG    2023-08-19 15:21:02,288: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=124)
DEBUG    2023-08-19 15:21:02,288: stack ['$22binary_multiply.10']
DEBUG    2023-08-19 15:21:02,288: dispatch pc=26, inst=LOAD_CONST(arg=4, lineno=124)
DEBUG    2023-08-19 15:21:02,288: stack ['$22binary_multiply.10', '$TairK24.11']
DEBUG    2023-08-19 15:21:02,289: dispatch pc=28, inst=BINARY_POWER(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,289: stack ['$22binary_multiply.10', '$TairK24.11', '$const26.12']
DEBUG    2023-08-19 15:21:02,289: dispatch pc=30, inst=BINARY_MULTIPLY(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,289: stack ['$22binary_multiply.10', '$28binary_power.13']
DEBUG    2023-08-19 15:21:02,289: dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=124)
DEBUG    2023-08-19 15:21:02,289: stack ['$30binary_multiply.14']
DEBUG    2023-08-19 15:21:02,289: end state. edges=[]
DEBUG    2023-08-19 15:21:02,289: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:02,289: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:02,289: defmap: {}
DEBUG    2023-08-19 15:21:02,289: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,290: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,290: keep phismap: {}
DEBUG    2023-08-19 15:21:02,290: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:02,290: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:02,290: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$cloudiness6.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$cloudiness6.2', 'rhs': '$const8.3', 'res': '$10binary_power.4'}), (12, {'lhs': '$const4.1', 'rhs': '$10binary_power.4', 'res': '$12binary_multiply.5'}), (14, {'lhs': '$const2.0', 'rhs': '$12binary_multiply.5', 'res': '$14binary_add.6'}), (16, {'res': '$emissivity_air16.7'}), (18, {'lhs': '$14binary_add.6', 'rhs': '$emissivity_air16.7', 'res': '$18binary_multiply.8'}), (20, {'res': '$stefan_boltzmann20.9'}), (22, {'lhs': '$18binary_multiply.8', 'rhs': '$stefan_boltzmann20.9', 'res': '$22binary_multiply.10'}), (24, {'res': '$TairK24.11'}), (26, {'res': '$const26.12'}), (28, {'lhs': '$TairK24.11', 'rhs': '$const26.12', 'res': '$28binary_power.13'}), (30, {'lhs': '$22binary_multiply.10', 'rhs': '$28binary_power.13', 'res': '$30binary_multiply.14'}), (32, {'retval': '$30binary_multiply.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,291: label 0:
    TairK = arg(0, name=TairK)               ['TairK']
    emissivity_air = arg(1, name=emissivity_air) ['emissivity_air']
    cloudiness = arg(2, name=cloudiness)     ['cloudiness']
    stefan_boltzmann = arg(3, name=stefan_boltzmann) ['stefan_boltzmann']
    $const2.0 = const(float, 1.0)            ['$const2.0']
    $const4.1 = const(float, 0.17)           ['$const4.1']
    $const8.3 = const(int, 2)                ['$const8.3']
    $10binary_power.4 = cloudiness ** $const8.3 ['$10binary_power.4', '$const8.3', 'cloudiness']
    $12binary_multiply.5 = $const4.1 * $10binary_power.4 ['$10binary_power.4', '$12binary_multiply.5', '$const4.1']
    $14binary_add.6 = $const2.0 + $12binary_multiply.5 ['$12binary_multiply.5', '$14binary_add.6', '$const2.0']
    $18binary_multiply.8 = $14binary_add.6 * emissivity_air ['$14binary_add.6', '$18binary_multiply.8', 'emissivity_air']
    $22binary_multiply.10 = $18binary_multiply.8 * stefan_boltzmann ['$18binary_multiply.8', '$22binary_multiply.10', 'stefan_boltzmann']
    $const26.12 = const(float, 4.0)          ['$const26.12']
    $28binary_power.13 = TairK ** $const26.12 ['$28binary_power.13', '$const26.12', 'TairK']
    $30binary_multiply.14 = $22binary_multiply.10 * $28binary_power.13 ['$22binary_multiply.10', '$28binary_power.13', '$30binary_multiply.14']
    $32return_value.15 = cast(value=$30binary_multiply.14) ['$30binary_multiply.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

DEBUG    2023-08-19 15:21:02,294: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:02,294: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F336CA550>
DEBUG    2023-08-19 15:21:02,294: on stmt: TairK = arg(0, name=TairK)
DEBUG    2023-08-19 15:21:02,294: on stmt: emissivity_air = arg(1, name=emissivity_air)
DEBUG    2023-08-19 15:21:02,294: on stmt: cloudiness = arg(2, name=cloudiness)
DEBUG    2023-08-19 15:21:02,294: on stmt: stefan_boltzmann = arg(3, name=stefan_boltzmann)
DEBUG    2023-08-19 15:21:02,294: on stmt: $const2.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,295: on stmt: $const4.1 = const(float, 0.17)
DEBUG    2023-08-19 15:21:02,295: on stmt: $const8.3 = const(int, 2)
DEBUG    2023-08-19 15:21:02,295: on stmt: $10binary_power.4 = cloudiness ** $const8.3
DEBUG    2023-08-19 15:21:02,295: on stmt: $12binary_multiply.5 = $const4.1 * $10binary_power.4
DEBUG    2023-08-19 15:21:02,295: on stmt: $14binary_add.6 = $const2.0 + $12binary_multiply.5
DEBUG    2023-08-19 15:21:02,295: on stmt: $18binary_multiply.8 = $14binary_add.6 * emissivity_air
DEBUG    2023-08-19 15:21:02,295: on stmt: $22binary_multiply.10 = $18binary_multiply.8 * stefan_boltzmann
DEBUG    2023-08-19 15:21:02,295: on stmt: $const26.12 = const(float, 4.0)
DEBUG    2023-08-19 15:21:02,295: on stmt: $28binary_power.13 = TairK ** $const26.12
DEBUG    2023-08-19 15:21:02,296: on stmt: $30binary_multiply.14 = $22binary_multiply.10 * $28binary_power.13
DEBUG    2023-08-19 15:21:02,296: on stmt: $32return_value.15 = cast(value=$30binary_multiply.14)
DEBUG    2023-08-19 15:21:02,296: on stmt: return $32return_value.15
DEBUG    2023-08-19 15:21:02,296: defs defaultdict(<class 'list'>,
            {'$10binary_power.4': [<numba.core.ir.Assign object at 0x0000025F336F2100>],
             '$12binary_multiply.5': [<numba.core.ir.Assign object at 0x0000025F336F27C0>],
             '$14binary_add.6': [<numba.core.ir.Assign object at 0x0000025F336F28B0>],
             '$18binary_multiply.8': [<numba.core.ir.Assign object at 0x0000025F3360C160>],
             '$22binary_multiply.10': [<numba.core.ir.Assign object at 0x0000025F33646DC0>],
             '$28binary_power.13': [<numba.core.ir.Assign object at 0x0000025F3319AF70>],
             '$30binary_multiply.14': [<numba.core.ir.Assign object at 0x0000025F3319A9D0>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x0000025F3319AF40>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000025F33774D00>],
             '$const26.12': [<numba.core.ir.Assign object at 0x0000025F3319AFD0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F33774B20>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000025F336FE190>],
             'TairK': [<numba.core.ir.Assign object at 0x0000025F33774310>],
             'cloudiness': [<numba.core.ir.Assign object at 0x0000025F33774DC0>],
             'emissivity_air': [<numba.core.ir.Assign object at 0x0000025F337743A0>],
             'stefan_boltzmann': [<numba.core.ir.Assign object at 0x0000025F337748B0>]})
DEBUG    2023-08-19 15:21:02,297: SSA violators set()
DEBUG    2023-08-19 15:21:02,316: bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG    2023-08-19 15:21:02,316: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,316: stack: []
DEBUG    2023-08-19 15:21:02,316: dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG    2023-08-19 15:21:02,316: stack []
DEBUG    2023-08-19 15:21:02,324: dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG    2023-08-19 15:21:02,324: stack []
DEBUG    2023-08-19 15:21:02,324: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG    2023-08-19 15:21:02,324: stack ['$2load_deref.0']
DEBUG    2023-08-19 15:21:02,324: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG    2023-08-19 15:21:02,324: stack ['$2load_deref.0', '$const4.1']
DEBUG    2023-08-19 15:21:02,324: dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG    2023-08-19 15:21:02,324: stack ['$6call_function.2']
DEBUG    2023-08-19 15:21:02,324: dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG    2023-08-19 15:21:02,324: stack []
DEBUG    2023-08-19 15:21:02,324: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG    2023-08-19 15:21:02,324: stack ['$10load_deref.3']
DEBUG    2023-08-19 15:21:02,324: dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG    2023-08-19 15:21:02,324: stack ['$10load_deref.3', '$a12.4']
DEBUG    2023-08-19 15:21:02,324: dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG    2023-08-19 15:21:02,324: stack ['$14call_function.5']
DEBUG    2023-08-19 15:21:02,324: dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG    2023-08-19 15:21:02,324: stack []
DEBUG    2023-08-19 15:21:02,324: dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG    2023-08-19 15:21:02,324: stack ['$b18.6']
DEBUG    2023-08-19 15:21:02,324: dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG    2023-08-19 15:21:02,324: stack ['$b18.6', '$const20.7']
DEBUG    2023-08-19 15:21:02,324: dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG    2023-08-19 15:21:02,324: stack ['$22compare_op.8']
DEBUG    2023-08-19 15:21:02,324: end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,324: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,324: stack: []
DEBUG    2023-08-19 15:21:02,324: dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG    2023-08-19 15:21:02,326: stack ['$const26.0']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG    2023-08-19 15:21:02,326: stack ['$b30.1']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG    2023-08-19 15:21:02,326: stack ['$32unary_negative.2']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG    2023-08-19 15:21:02,326: stack ['$exp36.3']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG    2023-08-19 15:21:02,326: stack ['$exp36.3', '$const38.4']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG    2023-08-19 15:21:02,326: stack ['$40compare_op.5']
DEBUG    2023-08-19 15:21:02,326: end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: stack: []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG    2023-08-19 15:21:02,326: stack ['$const98.0']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG    2023-08-19 15:21:02,326: stack ['$b102.1']
DEBUG    2023-08-19 15:21:02,326: end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: stack: []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG    2023-08-19 15:21:02,326: stack ['$44load_global.0']
DEBUG    2023-08-19 15:21:02,326: end state. edges=[]
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: stack: []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG    2023-08-19 15:21:02,326: stack ['$48load_deref.0']
DEBUG    2023-08-19 15:21:02,326: end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: stack: []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG    2023-08-19 15:21:02,326: stack ['$exp106.0']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG    2023-08-19 15:21:02,326: stack ['$exp106.0', '$const108.1']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG    2023-08-19 15:21:02,326: stack ['$110compare_op.2']
DEBUG    2023-08-19 15:21:02,326: end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: stack: []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG    2023-08-19 15:21:02,326: stack ['$a52.0']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG    2023-08-19 15:21:02,326: stack ['$a52.0', '$const54.1']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG    2023-08-19 15:21:02,326: stack ['$56compare_op.2']
DEBUG    2023-08-19 15:21:02,326: end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: stack: []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG    2023-08-19 15:21:02,326: stack ['$114load_global.0']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG    2023-08-19 15:21:02,326: stack ['$116load_method.1']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG    2023-08-19 15:21:02,326: stack ['$116load_method.1', '$a118.2']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG    2023-08-19 15:21:02,326: stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG    2023-08-19 15:21:02,326: stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG    2023-08-19 15:21:02,326: stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG    2023-08-19 15:21:02,326: stack ['$126call_method.6']
DEBUG    2023-08-19 15:21:02,326: end state. edges=[]
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: stack: []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG    2023-08-19 15:21:02,326: stack ['$exp130.0']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG    2023-08-19 15:21:02,326: stack ['$exp130.0', '$const132.1']
DEBUG    2023-08-19 15:21:02,326: dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG    2023-08-19 15:21:02,326: stack ['$134compare_op.2']
DEBUG    2023-08-19 15:21:02,326: end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,326: pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,326: stack: []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG    2023-08-19 15:21:02,326: stack []
DEBUG    2023-08-19 15:21:02,326: dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG    2023-08-19 15:21:02,334: stack ['$60load_deref.0']
DEBUG    2023-08-19 15:21:02,334: end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,334: pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,334: stack: []
DEBUG    2023-08-19 15:21:02,334: dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG    2023-08-19 15:21:02,334: stack []
DEBUG    2023-08-19 15:21:02,334: dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG    2023-08-19 15:21:02,334: stack ['$a76.0']
DEBUG    2023-08-19 15:21:02,334: dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG    2023-08-19 15:21:02,334: stack ['$a76.0', '$const78.1']
DEBUG    2023-08-19 15:21:02,334: dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG    2023-08-19 15:21:02,334: stack ['$80compare_op.2']
DEBUG    2023-08-19 15:21:02,334: end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,334: pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,334: stack: []
DEBUG    2023-08-19 15:21:02,334: dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG    2023-08-19 15:21:02,334: stack []
DEBUG    2023-08-19 15:21:02,334: dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG    2023-08-19 15:21:02,334: stack ['$exp138.0']
DEBUG    2023-08-19 15:21:02,334: dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG    2023-08-19 15:21:02,336: stack ['$exp138.0', '$const140.1']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG    2023-08-19 15:21:02,336: stack ['$142binary_and.2']
DEBUG    2023-08-19 15:21:02,336: end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,336: pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,336: stack: []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG    2023-08-19 15:21:02,336: stack []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG    2023-08-19 15:21:02,336: stack ['$invert172.0']
DEBUG    2023-08-19 15:21:02,336: end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,336: pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,336: stack: []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG    2023-08-19 15:21:02,336: stack []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG    2023-08-19 15:21:02,336: stack ['$64load_deref.0']
DEBUG    2023-08-19 15:21:02,336: end state. edges=[]
DEBUG    2023-08-19 15:21:02,336: pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,336: stack: []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG    2023-08-19 15:21:02,336: stack []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG    2023-08-19 15:21:02,336: stack ['$68load_global.0']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG    2023-08-19 15:21:02,336: stack ['$68load_global.0', '$const70.1']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG    2023-08-19 15:21:02,336: stack ['$72call_function.2']
DEBUG    2023-08-19 15:21:02,336: end state. edges=[]
DEBUG    2023-08-19 15:21:02,336: pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,336: stack: []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG    2023-08-19 15:21:02,336: stack []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG    2023-08-19 15:21:02,336: stack ['$a84.0']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG    2023-08-19 15:21:02,336: stack ['$a84.0', '$const86.1']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG    2023-08-19 15:21:02,336: stack ['$88compare_op.2']
DEBUG    2023-08-19 15:21:02,336: end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,336: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,336: pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,336: stack: []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG    2023-08-19 15:21:02,336: stack []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG    2023-08-19 15:21:02,336: stack ['$r146.0']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG    2023-08-19 15:21:02,336: stack ['$r146.0', '$a148.1']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG    2023-08-19 15:21:02,336: stack ['$150inplace_multiply.2']
DEBUG    2023-08-19 15:21:02,336: end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,336: pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,336: stack: []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG    2023-08-19 15:21:02,336: stack []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG    2023-08-19 15:21:02,336: stack ['$exp154.0']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG    2023-08-19 15:21:02,336: stack ['$exp154.0', '$const156.1']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG    2023-08-19 15:21:02,336: stack ['$158inplace_rshift.2']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG    2023-08-19 15:21:02,336: stack []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG    2023-08-19 15:21:02,336: stack ['$a162.3']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG    2023-08-19 15:21:02,336: stack ['$a162.3', '$a164.4']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG    2023-08-19 15:21:02,336: stack ['$166inplace_multiply.5']
DEBUG    2023-08-19 15:21:02,336: dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG    2023-08-19 15:21:02,336: stack []
DEBUG    2023-08-19 15:21:02,336: end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,336: pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,336: stack: []
DEBUG    2023-08-19 15:21:02,336: dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG    2023-08-19 15:21:02,344: stack []
DEBUG    2023-08-19 15:21:02,344: dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG    2023-08-19 15:21:02,344: stack ['$const176.0']
DEBUG    2023-08-19 15:21:02,344: dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG    2023-08-19 15:21:02,344: stack ['$const176.0', '$r178.1']
DEBUG    2023-08-19 15:21:02,344: dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG    2023-08-19 15:21:02,344: stack ['$180binary_true_divide.2']
DEBUG    2023-08-19 15:21:02,344: end state. edges=[]
DEBUG    2023-08-19 15:21:02,344: pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,344: stack: []
DEBUG    2023-08-19 15:21:02,344: dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG    2023-08-19 15:21:02,344: stack []
DEBUG    2023-08-19 15:21:02,344: dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG    2023-08-19 15:21:02,344: stack ['$r184.0']
DEBUG    2023-08-19 15:21:02,344: end state. edges=[]
DEBUG    2023-08-19 15:21:02,344: pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,344: stack: []
DEBUG    2023-08-19 15:21:02,344: dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG    2023-08-19 15:21:02,344: stack []
DEBUG    2023-08-19 15:21:02,344: dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG    2023-08-19 15:21:02,344: stack ['$const92.0']
DEBUG    2023-08-19 15:21:02,344: end state. edges=[]
DEBUG    2023-08-19 15:21:02,346: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,346: pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,346: pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,346: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:02,346: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:02,346: defmap: {}
DEBUG    2023-08-19 15:21:02,346: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,346: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,346: keep phismap: {}
DEBUG    2023-08-19 15:21:02,346: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:02,346: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,346: block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,346: label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG    2023-08-19 15:21:02,366: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:02,366: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,366: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,366: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,366: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,366: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,375: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,375: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,375: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,375: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,375: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,375: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,375: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,375: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,375: ==== SSA block analysis pass on 26
DEBUG    2023-08-19 15:21:02,375: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,375: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,375: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,375: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,375: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,375: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,375: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,375: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,375: ==== SSA block analysis pass on 44
DEBUG    2023-08-19 15:21:02,375: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,375: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,375: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,375: ==== SSA block analysis pass on 48
DEBUG    2023-08-19 15:21:02,375: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,375: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,375: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,375: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,375: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,375: ==== SSA block analysis pass on 98
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: invert = const(bool, False)
DEBUG    2023-08-19 15:21:02,377: on stmt: exp = b
DEBUG    2023-08-19 15:21:02,377: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 106
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,377: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,377: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,377: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 114
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,377: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,377: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,377: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,377: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 130
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,377: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,377: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,377: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 138
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,377: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,377: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,377: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 146
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,377: on stmt: r = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,377: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 154
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,377: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,377: on stmt: exp = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,377: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,377: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,377: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 172
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,377: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 176
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,377: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2023-08-19 15:21:02,377: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,377: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,377: ==== SSA block analysis pass on 184
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335DC190>
DEBUG    2023-08-19 15:21:02,377: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2023-08-19 15:21:02,377: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,377: defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x0000025F337485B0>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x0000025F336C4700>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000025F33637F10>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000025F33637220>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000025F336378B0>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000025F336373D0>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000025F33637A90>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000025F33637790>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x0000025F336376D0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x0000025F3368C2B0>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000025F3368C8E0>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x0000025F3368C190>],
             '$144pred': [<numba.core.ir.Assign object at 0x0000025F3368CDF0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000025F33621D30>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000025F336211F0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000025F33628E20>],
             '$174pred': [<numba.core.ir.Assign object at 0x0000025F336288B0>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000025F3369A1F0>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x0000025F3369A9D0>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x0000025F33608AC0>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x0000025F336CFF70>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000025F337837F0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000025F33748370>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x0000025F3372EFD0>],
             '$42pred': [<numba.core.ir.Assign object at 0x0000025F33711F70>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000025F3373B1F0>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x0000025F33732D90>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000025F336BD700>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000025F336C4910>],
             '$const132.1': [<numba.core.ir.Assign object at 0x0000025F3368C370>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000025F3368C310>],
             '$const156.1': [<numba.core.ir.Assign object at 0x0000025F336211C0>],
             '$const176.0': [<numba.core.ir.Assign object at 0x0000025F3369A2B0>],
             '$const20.7': [<numba.core.ir.Assign object at 0x0000025F336CFE50>],
             '$const38.4': [<numba.core.ir.Assign object at 0x0000025F337160A0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F33748C40>],
             'a': [<numba.core.ir.Assign object at 0x0000025F33748310>],
             'a.1': [<numba.core.ir.Assign object at 0x0000025F336B4D90>,
                     <numba.core.ir.Assign object at 0x0000025F336289A0>],
             'b': [<numba.core.ir.Assign object at 0x0000025F33748A00>],
             'bool112': [<numba.core.ir.Assign object at 0x0000025F336C45E0>],
             'bool136': [<numba.core.ir.Assign object at 0x0000025F3368C5B0>],
             'bool144': [<numba.core.ir.Assign object at 0x0000025F3368CE80>],
             'bool174': [<numba.core.ir.Assign object at 0x0000025F336283A0>],
             'bool24': [<numba.core.ir.Assign object at 0x0000025F336CF190>],
             'bool42': [<numba.core.ir.Assign object at 0x0000025F3372EE80>],
             'bool50': [<numba.core.ir.Assign object at 0x0000025F337329A0>],
             'exp': [<numba.core.ir.Assign object at 0x0000025F33783250>,
                     <numba.core.ir.Assign object at 0x0000025F336C4F10>,
                     <numba.core.ir.Assign object at 0x0000025F33621700>],
             'invert': [<numba.core.ir.Assign object at 0x0000025F33783580>,
                        <numba.core.ir.Assign object at 0x0000025F336C4430>],
             'r': [<numba.core.ir.Assign object at 0x0000025F33748250>,
                   <numba.core.ir.Assign object at 0x0000025F33621340>]})
DEBUG    2023-08-19 15:21:02,377: SSA violators {'r', 'a.1', 'invert', 'exp'}
DEBUG    2023-08-19 15:21:02,377: Fix SSA violator on var r
DEBUG    2023-08-19 15:21:02,377: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,377: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,377: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,377: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,377: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,377: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: first assign: r
DEBUG    2023-08-19 15:21:02,377: replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,377: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,377: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,377: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,377: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,377: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,377: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,377: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,377: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,377: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,377: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,377: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,377: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,377: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,377: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,385: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,385: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,385: ==== SSA block rewrite pass on 48
DEBUG    2023-08-19 15:21:02,385: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,385: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,385: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,385: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,385: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,385: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:02,385: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,385: on stmt: invert = const(bool, False)
DEBUG    2023-08-19 15:21:02,385: on stmt: exp = b
DEBUG    2023-08-19 15:21:02,385: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,385: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:02,385: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,385: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,385: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,385: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,385: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,385: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,385: ==== SSA block rewrite pass on 114
DEBUG    2023-08-19 15:21:02,385: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,385: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,385: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,387: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,387: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 130
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,387: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,387: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 138
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,387: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,387: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 146
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,387: on stmt: r = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,387: replaced with: r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,387: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 154
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,387: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,387: on stmt: exp = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,387: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,387: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,387: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 172
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 176
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,387: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2023-08-19 15:21:02,387: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,387: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 184
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2023-08-19 15:21:02,387: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,387: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F335DCE20>],
             146: [<numba.core.ir.Assign object at 0x0000025F335DCBE0>]})
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,387: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,387: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,387: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,387: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,387: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,387: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,387: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,387: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,387: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,387: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,387: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 48
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,387: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: invert = const(bool, False)
DEBUG    2023-08-19 15:21:02,387: on stmt: exp = b
DEBUG    2023-08-19 15:21:02,387: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,387: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:02,387: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,387: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,387: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,387: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,387: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,387: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,395: ==== SSA block rewrite pass on 114
DEBUG    2023-08-19 15:21:02,395: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,395: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,395: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,395: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,395: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,395: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,395: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,395: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,395: ==== SSA block rewrite pass on 130
DEBUG    2023-08-19 15:21:02,395: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,395: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,395: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,395: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,395: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,395: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,395: ==== SSA block rewrite pass on 138
DEBUG    2023-08-19 15:21:02,395: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,395: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,395: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,395: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,395: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,397: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,397: ==== SSA block rewrite pass on 146
DEBUG    2023-08-19 15:21:02,397: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,397: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,397: find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 146
DEBUG    2023-08-19 15:21:02,397: idom 138 from label 146
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 138
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 138
DEBUG    2023-08-19 15:21:02,397: idom 130 from label 138
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 130
DEBUG    2023-08-19 15:21:02,397: insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 106
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 106
DEBUG    2023-08-19 15:21:02,397: idom 0 from label 106
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 0
DEBUG    2023-08-19 15:21:02,397: incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 154
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 154
DEBUG    2023-08-19 15:21:02,397: insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 138
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 138
DEBUG    2023-08-19 15:21:02,397: idom 130 from label 138
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,397: incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 146
DEBUG    2023-08-19 15:21:02,397: incoming_def r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,397: incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2023-08-19 15:21:02,397: replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,397: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,397: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,397: ==== SSA block rewrite pass on 154
DEBUG    2023-08-19 15:21:02,397: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,397: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,397: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,397: on stmt: exp = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,397: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,397: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,397: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,397: ==== SSA block rewrite pass on 172
DEBUG    2023-08-19 15:21:02,397: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,397: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,397: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,397: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,397: ==== SSA block rewrite pass on 176
DEBUG    2023-08-19 15:21:02,397: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,397: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,397: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2023-08-19 15:21:02,397: find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 176
DEBUG    2023-08-19 15:21:02,397: idom 172 from label 176
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 172
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 172
DEBUG    2023-08-19 15:21:02,397: idom 130 from label 172
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,397: replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2023-08-19 15:21:02,397: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,397: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,397: ==== SSA block rewrite pass on 184
DEBUG    2023-08-19 15:21:02,397: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,397: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2023-08-19 15:21:02,397: find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 184
DEBUG    2023-08-19 15:21:02,397: idom 172 from label 184
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 172
DEBUG    2023-08-19 15:21:02,397: find_def_from_top label 172
DEBUG    2023-08-19 15:21:02,397: idom 130 from label 172
DEBUG    2023-08-19 15:21:02,397: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,397: replaced with: $186return_value.1 = cast(value=r.2)
DEBUG    2023-08-19 15:21:02,397: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,397: Fix SSA violator on var a.1
DEBUG    2023-08-19 15:21:02,397: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,397: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,397: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,397: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,397: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,397: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,397: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,397: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,397: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,405: first assign: a.1
DEBUG    2023-08-19 15:21:02,405: replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,405: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,405: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,405: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,405: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,405: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,405: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:21:02,405: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,405: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,405: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,405: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,405: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,405: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,405: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,405: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,405: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,405: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 48
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,407: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: invert = const(bool, False)
DEBUG    2023-08-19 15:21:02,407: on stmt: exp = b
DEBUG    2023-08-19 15:21:02,407: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,407: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,407: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 114
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,407: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,407: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 130
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,407: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,407: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,407: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 138
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,407: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,407: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 146
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,407: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,407: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 154
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2023-08-19 15:21:02,407: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,407: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,407: on stmt: exp = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,407: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,407: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,407: replaced with: a.1.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,407: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 172
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 176
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,407: on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2023-08-19 15:21:02,407: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,407: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 184
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F335DCEB0>
DEBUG    2023-08-19 15:21:02,407: on stmt: $186return_value.1 = cast(value=r.2)
DEBUG    2023-08-19 15:21:02,407: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,407: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F335DC880>],
             154: [<numba.core.ir.Assign object at 0x0000025F33608910>]})
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,407: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,407: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,407: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,407: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,407: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,407: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,407: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,407: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,407: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,407: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,407: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,407: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,407: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,407: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 48
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,407: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,407: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,407: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,407: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,407: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:02,407: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,407: on stmt: invert = const(bool, False)
DEBUG    2023-08-19 15:21:02,415: on stmt: exp = b
DEBUG    2023-08-19 15:21:02,415: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,415: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:02,415: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,415: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,415: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,415: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,415: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,415: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,415: ==== SSA block rewrite pass on 114
DEBUG    2023-08-19 15:21:02,415: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,415: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,415: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,415: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,415: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,415: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,415: find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,415: find_def_from_top label 114
DEBUG    2023-08-19 15:21:02,415: idom 106 from label 114
DEBUG    2023-08-19 15:21:02,415: find_def_from_bottom label 106
DEBUG    2023-08-19 15:21:02,415: find_def_from_top label 106
DEBUG    2023-08-19 15:21:02,417: idom 0 from label 106
DEBUG    2023-08-19 15:21:02,417: find_def_from_bottom label 0
DEBUG    2023-08-19 15:21:02,417: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,417: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 130
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,417: on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,417: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,417: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,417: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,417: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 138
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,417: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,417: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,417: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,417: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 146
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,417: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,417: find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,417: find_def_from_top label 146
DEBUG    2023-08-19 15:21:02,417: idom 138 from label 146
DEBUG    2023-08-19 15:21:02,417: find_def_from_bottom label 138
DEBUG    2023-08-19 15:21:02,417: find_def_from_top label 138
DEBUG    2023-08-19 15:21:02,417: idom 130 from label 138
DEBUG    2023-08-19 15:21:02,417: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,417: find_def_from_top label 130
DEBUG    2023-08-19 15:21:02,417: insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2023-08-19 15:21:02,417: find_def_from_bottom label 106
DEBUG    2023-08-19 15:21:02,417: find_def_from_top label 106
DEBUG    2023-08-19 15:21:02,417: idom 0 from label 106
DEBUG    2023-08-19 15:21:02,417: find_def_from_bottom label 0
DEBUG    2023-08-19 15:21:02,417: incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: find_def_from_bottom label 154
DEBUG    2023-08-19 15:21:02,417: incoming_def a.1.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,417: replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,417: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,417: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 154
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,417: on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2023-08-19 15:21:02,417: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,417: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,417: on stmt: exp = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,417: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,417: find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,417: find_def_from_top label 154
DEBUG    2023-08-19 15:21:02,417: idom 138 from label 154
DEBUG    2023-08-19 15:21:02,417: find_def_from_bottom label 138
DEBUG    2023-08-19 15:21:02,417: find_def_from_top label 138
DEBUG    2023-08-19 15:21:02,417: idom 130 from label 138
DEBUG    2023-08-19 15:21:02,417: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,417: replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,417: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,417: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 172
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,417: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,417: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 176
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,417: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,417: on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2023-08-19 15:21:02,417: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,417: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 184
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FixSSAVars object at 0x0000025F335DC400>
DEBUG    2023-08-19 15:21:02,417: on stmt: $186return_value.1 = cast(value=r.2)
DEBUG    2023-08-19 15:21:02,417: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,417: Fix SSA violator on var invert
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,417: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,417: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,417: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,417: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,417: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,417: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,417: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,417: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,417: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,417: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,417: first assign: invert
DEBUG    2023-08-19 15:21:02,417: replaced with: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,417: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,417: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,417: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,417: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,417: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,417: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,417: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 48
DEBUG    2023-08-19 15:21:02,417: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,417: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,417: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,417: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,417: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,417: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:02,425: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,425: on stmt: invert = const(bool, False)
DEBUG    2023-08-19 15:21:02,425: replaced with: invert.1 = const(bool, False)
DEBUG    2023-08-19 15:21:02,425: on stmt: exp = b
DEBUG    2023-08-19 15:21:02,425: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,425: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:02,425: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,425: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,425: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,425: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,425: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,425: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,425: ==== SSA block rewrite pass on 114
DEBUG    2023-08-19 15:21:02,425: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,425: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,425: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,425: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,425: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,425: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,425: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,427: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 130
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,427: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,427: on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,427: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,427: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,427: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,427: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,427: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 138
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,427: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,427: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,427: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,427: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,427: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 146
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,427: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,427: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,427: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 154
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,427: on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2023-08-19 15:21:02,427: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,427: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,427: on stmt: exp = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,427: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,427: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,427: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 172
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,427: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,427: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,427: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 176
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,427: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,427: on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2023-08-19 15:21:02,427: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,427: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 184
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33608160>
DEBUG    2023-08-19 15:21:02,427: on stmt: $186return_value.1 = cast(value=r.2)
DEBUG    2023-08-19 15:21:02,427: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,427: Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000025F336085E0>],
             98: [<numba.core.ir.Assign object at 0x0000025F335DCD60>]})
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,427: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,427: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,427: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,427: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,427: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,427: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,427: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,427: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,427: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,427: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,427: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,427: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,427: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,427: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,427: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,427: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,427: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,427: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,427: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,427: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,427: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 48
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,427: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,427: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,427: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,427: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,427: on stmt: invert.1 = const(bool, False)
DEBUG    2023-08-19 15:21:02,427: on stmt: exp = b
DEBUG    2023-08-19 15:21:02,427: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,427: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:02,427: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,435: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,435: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,435: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,435: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,435: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,435: ==== SSA block rewrite pass on 114
DEBUG    2023-08-19 15:21:02,435: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,435: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,435: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,435: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,435: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,435: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,435: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,435: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,435: ==== SSA block rewrite pass on 130
DEBUG    2023-08-19 15:21:02,435: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,435: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,435: on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,435: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,435: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,435: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,435: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 138
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,437: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,437: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,437: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,437: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 146
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,437: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,437: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,437: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 154
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,437: on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2023-08-19 15:21:02,437: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,437: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,437: on stmt: exp = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,437: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,437: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,437: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 172
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,437: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,437: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: find_def_from_top label 172
DEBUG    2023-08-19 15:21:02,437: idom 130 from label 172
DEBUG    2023-08-19 15:21:02,437: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,437: find_def_from_top label 130
DEBUG    2023-08-19 15:21:02,437: idom 106 from label 130
DEBUG    2023-08-19 15:21:02,437: find_def_from_bottom label 106
DEBUG    2023-08-19 15:21:02,437: find_def_from_top label 106
DEBUG    2023-08-19 15:21:02,437: insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG    2023-08-19 15:21:02,437: find_def_from_bottom label 48
DEBUG    2023-08-19 15:21:02,437: find_def_from_top label 48
DEBUG    2023-08-19 15:21:02,437: idom 26 from label 48
DEBUG    2023-08-19 15:21:02,437: find_def_from_bottom label 26
DEBUG    2023-08-19 15:21:02,437: incoming_def invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,437: find_def_from_bottom label 98
DEBUG    2023-08-19 15:21:02,437: incoming_def invert.1 = const(bool, False)
DEBUG    2023-08-19 15:21:02,437: replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 176
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,437: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,437: on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2023-08-19 15:21:02,437: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,437: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 184
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,437: on stmt: $186return_value.1 = cast(value=r.2)
DEBUG    2023-08-19 15:21:02,437: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,437: Fix SSA violator on var exp
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,437: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,437: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,437: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,437: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,437: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,437: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,437: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,437: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,437: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,437: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,437: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,437: first assign: exp
DEBUG    2023-08-19 15:21:02,437: replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,437: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,437: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,437: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,437: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,437: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,437: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 48
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,437: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,437: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,437: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,437: on stmt: invert.1 = const(bool, False)
DEBUG    2023-08-19 15:21:02,437: on stmt: exp = b
DEBUG    2023-08-19 15:21:02,437: replaced with: exp.1 = b
DEBUG    2023-08-19 15:21:02,437: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:02,437: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,437: on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG    2023-08-19 15:21:02,437: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,437: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,437: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,437: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,437: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,437: ==== SSA block rewrite pass on 114
DEBUG    2023-08-19 15:21:02,446: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,446: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,446: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,446: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,446: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,446: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,446: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,446: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,446: ==== SSA block rewrite pass on 130
DEBUG    2023-08-19 15:21:02,446: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,446: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,446: on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,446: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,446: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,446: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,446: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,448: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,448: ==== SSA block rewrite pass on 138
DEBUG    2023-08-19 15:21:02,448: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,448: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,448: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,448: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,448: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,448: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,449: ==== SSA block rewrite pass on 146
DEBUG    2023-08-19 15:21:02,449: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,449: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,449: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,449: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,449: ==== SSA block rewrite pass on 154
DEBUG    2023-08-19 15:21:02,449: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,449: on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2023-08-19 15:21:02,449: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,450: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,450: on stmt: exp = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,450: replaced with: exp.2 = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,450: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,450: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,450: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,450: ==== SSA block rewrite pass on 172
DEBUG    2023-08-19 15:21:02,450: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,450: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,451: on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,451: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,451: ==== SSA block rewrite pass on 176
DEBUG    2023-08-19 15:21:02,451: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,451: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,451: on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2023-08-19 15:21:02,451: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,451: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,451: ==== SSA block rewrite pass on 184
DEBUG    2023-08-19 15:21:02,451: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33748970>
DEBUG    2023-08-19 15:21:02,451: on stmt: $186return_value.1 = cast(value=r.2)
DEBUG    2023-08-19 15:21:02,452: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,452: Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000025F335DCF70>],
             98: [<numba.core.ir.Assign object at 0x0000025F335DCB50>],
             154: [<numba.core.ir.Assign object at 0x0000025F336CA3D0>]})
DEBUG    2023-08-19 15:21:02,452: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,452: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,452: on stmt: a = arg(0, name=a)
DEBUG    2023-08-19 15:21:02,452: on stmt: b = arg(1, name=b)
DEBUG    2023-08-19 15:21:02,452: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,452: on stmt: $const4.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,452: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,452: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2023-08-19 15:21:02,453: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,453: on stmt: $const20.7 = const(int, 0)
DEBUG    2023-08-19 15:21:02,453: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2023-08-19 15:21:02,453: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,453: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,453: on stmt: branch $24pred, 26, 98
DEBUG    2023-08-19 15:21:02,453: ==== SSA block rewrite pass on 26
DEBUG    2023-08-19 15:21:02,453: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,453: on stmt: invert = const(bool, True)
DEBUG    2023-08-19 15:21:02,453: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,453: on stmt: $const38.4 = const(int, 0)
DEBUG    2023-08-19 15:21:02,454: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,454: find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG    2023-08-19 15:21:02,454: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,454: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,454: on stmt: branch $42pred, 44, 48
DEBUG    2023-08-19 15:21:02,454: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,454: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,454: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2023-08-19 15:21:02,454: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2023-08-19 15:21:02,454: ==== SSA block rewrite pass on 48
DEBUG    2023-08-19 15:21:02,454: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,454: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2023-08-19 15:21:02,455: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,455: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,455: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,455: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:02,455: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,455: on stmt: invert.1 = const(bool, False)
DEBUG    2023-08-19 15:21:02,455: on stmt: exp.1 = b
DEBUG    2023-08-19 15:21:02,455: on stmt: jump 106
DEBUG    2023-08-19 15:21:02,455: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:02,455: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,455: on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG    2023-08-19 15:21:02,456: on stmt: $const108.1 = const(int, 65536)
DEBUG    2023-08-19 15:21:02,456: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,456: find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG    2023-08-19 15:21:02,456: find_def_from_top label 106
DEBUG    2023-08-19 15:21:02,456: insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG    2023-08-19 15:21:02,456: find_def_from_bottom label 48
DEBUG    2023-08-19 15:21:02,456: find_def_from_top label 48
DEBUG    2023-08-19 15:21:02,456: idom 26 from label 48
DEBUG    2023-08-19 15:21:02,456: find_def_from_bottom label 26
DEBUG    2023-08-19 15:21:02,457: incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2023-08-19 15:21:02,457: find_def_from_bottom label 98
DEBUG    2023-08-19 15:21:02,457: incoming_def exp.1 = b
DEBUG    2023-08-19 15:21:02,457: replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2023-08-19 15:21:02,457: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,457: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,457: on stmt: branch $112pred, 114, 130
DEBUG    2023-08-19 15:21:02,457: ==== SSA block rewrite pass on 114
DEBUG    2023-08-19 15:21:02,457: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,457: on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG    2023-08-19 15:21:02,458: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2023-08-19 15:21:02,458: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2023-08-19 15:21:02,458: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,458: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,458: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2023-08-19 15:21:02,458: on stmt: return $128return_value.7
DEBUG    2023-08-19 15:21:02,458: ==== SSA block rewrite pass on 130
DEBUG    2023-08-19 15:21:02,458: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,458: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,459: on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG    2023-08-19 15:21:02,459: on stmt: $const132.1 = const(int, 0)
DEBUG    2023-08-19 15:21:02,459: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,459: find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG    2023-08-19 15:21:02,459: find_def_from_top label 130
DEBUG    2023-08-19 15:21:02,459: insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2023-08-19 15:21:02,459: find_def_from_bottom label 106
DEBUG    2023-08-19 15:21:02,459: incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2023-08-19 15:21:02,460: find_def_from_bottom label 154
DEBUG    2023-08-19 15:21:02,460: incoming_def exp.2 = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,460: replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2023-08-19 15:21:02,460: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,460: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,460: on stmt: branch $136pred, 138, 172
DEBUG    2023-08-19 15:21:02,460: ==== SSA block rewrite pass on 138
DEBUG    2023-08-19 15:21:02,460: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,460: on stmt: $const140.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,460: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,460: find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG    2023-08-19 15:21:02,461: find_def_from_top label 138
DEBUG    2023-08-19 15:21:02,461: idom 130 from label 138
DEBUG    2023-08-19 15:21:02,461: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,461: replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2023-08-19 15:21:02,461: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,461: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,461: on stmt: branch $144pred, 146, 154
DEBUG    2023-08-19 15:21:02,461: ==== SSA block rewrite pass on 146
DEBUG    2023-08-19 15:21:02,462: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,462: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,462: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2023-08-19 15:21:02,462: on stmt: jump 154
DEBUG    2023-08-19 15:21:02,462: ==== SSA block rewrite pass on 154
DEBUG    2023-08-19 15:21:02,462: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,462: on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2023-08-19 15:21:02,462: on stmt: $const156.1 = const(int, 1)
DEBUG    2023-08-19 15:21:02,462: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,463: find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,463: find_def_from_top label 154
DEBUG    2023-08-19 15:21:02,463: idom 138 from label 154
DEBUG    2023-08-19 15:21:02,463: find_def_from_bottom label 138
DEBUG    2023-08-19 15:21:02,463: find_def_from_top label 138
DEBUG    2023-08-19 15:21:02,463: idom 130 from label 138
DEBUG    2023-08-19 15:21:02,463: find_def_from_bottom label 130
DEBUG    2023-08-19 15:21:02,463: replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,463: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2023-08-19 15:21:02,463: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2023-08-19 15:21:02,463: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2023-08-19 15:21:02,464: on stmt: jump 130
DEBUG    2023-08-19 15:21:02,464: ==== SSA block rewrite pass on 172
DEBUG    2023-08-19 15:21:02,464: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,464: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,464: on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,464: on stmt: branch $174pred, 176, 184
DEBUG    2023-08-19 15:21:02,464: ==== SSA block rewrite pass on 176
DEBUG    2023-08-19 15:21:02,464: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,464: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,464: on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2023-08-19 15:21:02,465: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2023-08-19 15:21:02,465: on stmt: return $182return_value.3
DEBUG    2023-08-19 15:21:02,465: ==== SSA block rewrite pass on 184
DEBUG    2023-08-19 15:21:02,465: Running <numba.core.ssa._FixSSAVars object at 0x0000025F3369A2E0>
DEBUG    2023-08-19 15:21:02,465: on stmt: $186return_value.1 = cast(value=r.2)
DEBUG    2023-08-19 15:21:02,465: on stmt: return $186return_value.1
DEBUG    2023-08-19 15:21:02,660: bytecode dump:
>          0	NOP(arg=None, lineno=221)
           2	LOAD_CONST(arg=1, lineno=221)
           4	LOAD_CONST(arg=2, lineno=221)
           6	LOAD_FAST(arg=0, lineno=221)
           8	BINARY_MULTIPLY(arg=None, lineno=221)
          10	BINARY_SUBTRACT(arg=None, lineno=221)
          12	RETURN_VALUE(arg=None, lineno=221)
DEBUG    2023-08-19 15:21:02,660: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,660: stack: []
DEBUG    2023-08-19 15:21:02,660: dispatch pc=0, inst=NOP(arg=None, lineno=221)
DEBUG    2023-08-19 15:21:02,660: stack []
DEBUG    2023-08-19 15:21:02,660: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=221)
DEBUG    2023-08-19 15:21:02,660: stack []
DEBUG    2023-08-19 15:21:02,660: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG    2023-08-19 15:21:02,660: stack ['$const2.0']
DEBUG    2023-08-19 15:21:02,660: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=221)
DEBUG    2023-08-19 15:21:02,660: stack ['$const2.0', '$const4.1']
DEBUG    2023-08-19 15:21:02,660: dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=221)
DEBUG    2023-08-19 15:21:02,660: stack ['$const2.0', '$const4.1', '$TwaterK6.2']
DEBUG    2023-08-19 15:21:02,660: dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=221)
DEBUG    2023-08-19 15:21:02,660: stack ['$const2.0', '$8binary_multiply.3']
DEBUG    2023-08-19 15:21:02,660: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=221)
DEBUG    2023-08-19 15:21:02,660: stack ['$10binary_subtract.4']
DEBUG    2023-08-19 15:21:02,660: end state. edges=[]
DEBUG    2023-08-19 15:21:02,660: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:02,660: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:02,660: defmap: {}
DEBUG    2023-08-19 15:21:02,660: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,660: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,660: keep phismap: {}
DEBUG    2023-08-19 15:21:02,660: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:02,660: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:02,660: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$TwaterK6.2'}), (8, {'lhs': '$const4.1', 'rhs': '$TwaterK6.2', 'res': '$8binary_multiply.3'}), (10, {'lhs': '$const2.0', 'rhs': '$8binary_multiply.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,660: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    $const2.0 = const(int, 2499999)          ['$const2.0']
    $const4.1 = const(float, 2385.74)        ['$const4.1']
    $8binary_multiply.3 = $const4.1 * TwaterK ['$8binary_multiply.3', '$const4.1', 'TwaterK']
    $10binary_subtract.4 = $const2.0 - $8binary_multiply.3 ['$10binary_subtract.4', '$8binary_multiply.3', '$const2.0']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG    2023-08-19 15:21:02,666: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:02,666: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333511F0>
DEBUG    2023-08-19 15:21:02,666: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2023-08-19 15:21:02,666: on stmt: $const2.0 = const(int, 2499999)
DEBUG    2023-08-19 15:21:02,666: on stmt: $const4.1 = const(float, 2385.74)
DEBUG    2023-08-19 15:21:02,666: on stmt: $8binary_multiply.3 = $const4.1 * TwaterK
DEBUG    2023-08-19 15:21:02,667: on stmt: $10binary_subtract.4 = $const2.0 - $8binary_multiply.3
DEBUG    2023-08-19 15:21:02,667: on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
DEBUG    2023-08-19 15:21:02,667: on stmt: return $12return_value.5
DEBUG    2023-08-19 15:21:02,667: defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x0000025F33357FD0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000025F33357490>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x0000025F333571C0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000025F333578E0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F33357CD0>],
             'TwaterK': [<numba.core.ir.Assign object at 0x0000025F333576A0>]})
DEBUG    2023-08-19 15:21:02,667: SSA violators set()
DEBUG    2023-08-19 15:21:02,719: bytecode dump:
>          0	NOP(arg=None, lineno=232)
           2	LOAD_CONST(arg=1, lineno=232)
           4	LOAD_CONST(arg=2, lineno=232)
           6	LOAD_FAST(arg=0, lineno=233)
           8	LOAD_CONST(arg=3, lineno=233)
          10	BINARY_SUBTRACT(arg=None, lineno=233)
          12	LOAD_FAST(arg=0, lineno=233)
          14	LOAD_CONST(arg=3, lineno=233)
          16	BINARY_SUBTRACT(arg=None, lineno=233)
          18	BINARY_MULTIPLY(arg=None, lineno=233)
          20	LOAD_FAST(arg=0, lineno=233)
          22	LOAD_CONST(arg=4, lineno=233)
          24	BINARY_ADD(arg=None, lineno=233)
          26	BINARY_MULTIPLY(arg=None, lineno=233)
          28	LOAD_CONST(arg=5, lineno=234)
          30	LOAD_FAST(arg=0, lineno=234)
          32	LOAD_CONST(arg=6, lineno=234)
          34	BINARY_ADD(arg=None, lineno=234)
          36	BINARY_MULTIPLY(arg=None, lineno=234)
          38	BINARY_TRUE_DIVIDE(arg=None, lineno=233)
          40	BINARY_SUBTRACT(arg=None, lineno=232)
          42	BINARY_MULTIPLY(arg=None, lineno=232)
          44	RETURN_VALUE(arg=None, lineno=232)
DEBUG    2023-08-19 15:21:02,720: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,720: stack: []
DEBUG    2023-08-19 15:21:02,720: dispatch pc=0, inst=NOP(arg=None, lineno=232)
DEBUG    2023-08-19 15:21:02,720: stack []
DEBUG    2023-08-19 15:21:02,720: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=232)
DEBUG    2023-08-19 15:21:02,720: stack []
DEBUG    2023-08-19 15:21:02,720: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=232)
DEBUG    2023-08-19 15:21:02,720: stack ['$const2.0']
DEBUG    2023-08-19 15:21:02,721: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG    2023-08-19 15:21:02,721: stack ['$const2.0', '$const4.1']
DEBUG    2023-08-19 15:21:02,721: dispatch pc=8, inst=LOAD_CONST(arg=3, lineno=233)
DEBUG    2023-08-19 15:21:02,721: stack ['$const2.0', '$const4.1', '$TwaterC6.2']
DEBUG    2023-08-19 15:21:02,721: dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=233)
DEBUG    2023-08-19 15:21:02,721: stack ['$const2.0', '$const4.1', '$TwaterC6.2', '$const8.3']
DEBUG    2023-08-19 15:21:02,721: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG    2023-08-19 15:21:02,721: stack ['$const2.0', '$const4.1', '$10binary_subtract.4']
DEBUG    2023-08-19 15:21:02,721: dispatch pc=14, inst=LOAD_CONST(arg=3, lineno=233)
DEBUG    2023-08-19 15:21:02,722: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$TwaterC12.5']
DEBUG    2023-08-19 15:21:02,722: dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=233)
DEBUG    2023-08-19 15:21:02,722: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$TwaterC12.5', '$const14.6']
DEBUG    2023-08-19 15:21:02,722: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=233)
DEBUG    2023-08-19 15:21:02,722: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$16binary_subtract.7']
DEBUG    2023-08-19 15:21:02,722: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=233)
DEBUG    2023-08-19 15:21:02,722: stack ['$const2.0', '$const4.1', '$18binary_multiply.8']
DEBUG    2023-08-19 15:21:02,723: dispatch pc=22, inst=LOAD_CONST(arg=4, lineno=233)
DEBUG    2023-08-19 15:21:02,723: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$TwaterC20.9']
DEBUG    2023-08-19 15:21:02,723: dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=233)
DEBUG    2023-08-19 15:21:02,723: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$TwaterC20.9', '$const22.10']
DEBUG    2023-08-19 15:21:02,723: dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=233)
DEBUG    2023-08-19 15:21:02,723: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$24binary_add.11']
DEBUG    2023-08-19 15:21:02,723: dispatch pc=28, inst=LOAD_CONST(arg=5, lineno=234)
DEBUG    2023-08-19 15:21:02,723: stack ['$const2.0', '$const4.1', '$26binary_multiply.12']
DEBUG    2023-08-19 15:21:02,723: dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=234)
DEBUG    2023-08-19 15:21:02,723: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13']
DEBUG    2023-08-19 15:21:02,723: dispatch pc=32, inst=LOAD_CONST(arg=6, lineno=234)
DEBUG    2023-08-19 15:21:02,723: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$TwaterC30.14']
DEBUG    2023-08-19 15:21:02,724: dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=234)
DEBUG    2023-08-19 15:21:02,724: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$TwaterC30.14', '$const32.15']
DEBUG    2023-08-19 15:21:02,724: dispatch pc=36, inst=BINARY_MULTIPLY(arg=None, lineno=234)
DEBUG    2023-08-19 15:21:02,724: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$34binary_add.16']
DEBUG    2023-08-19 15:21:02,724: dispatch pc=38, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=233)
DEBUG    2023-08-19 15:21:02,724: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$36binary_multiply.17']
DEBUG    2023-08-19 15:21:02,724: dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=232)
DEBUG    2023-08-19 15:21:02,724: stack ['$const2.0', '$const4.1', '$38binary_true_divide.18']
DEBUG    2023-08-19 15:21:02,724: dispatch pc=42, inst=BINARY_MULTIPLY(arg=None, lineno=232)
DEBUG    2023-08-19 15:21:02,724: stack ['$const2.0', '$40binary_subtract.19']
DEBUG    2023-08-19 15:21:02,724: dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=232)
DEBUG    2023-08-19 15:21:02,725: stack ['$42binary_multiply.20']
DEBUG    2023-08-19 15:21:02,725: end state. edges=[]
DEBUG    2023-08-19 15:21:02,725: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:02,725: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:02,725: defmap: {}
DEBUG    2023-08-19 15:21:02,725: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,725: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,725: keep phismap: {}
DEBUG    2023-08-19 15:21:02,725: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:02,725: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:02,725: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$TwaterC6.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$TwaterC6.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'res': '$TwaterC12.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$TwaterC12.5', 'rhs': '$const14.6', 'res': '$16binary_subtract.7'}), (18, {'lhs': '$10binary_subtract.4', 'rhs': '$16binary_subtract.7', 'res': '$18binary_multiply.8'}), (20, {'res': '$TwaterC20.9'}), (22, {'res': '$const22.10'}), (24, {'lhs': '$TwaterC20.9', 'rhs': '$const22.10', 'res': '$24binary_add.11'}), (26, {'lhs': '$18binary_multiply.8', 'rhs': '$24binary_add.11', 'res': '$26binary_multiply.12'}), (28, {'res': '$const28.13'}), (30, {'res': '$TwaterC30.14'}), (32, {'res': '$const32.15'}), (34, {'lhs': '$TwaterC30.14', 'rhs': '$const32.15', 'res': '$34binary_add.16'}), (36, {'lhs': '$const28.13', 'rhs': '$34binary_add.16', 'res': '$36binary_multiply.17'}), (38, {'lhs': '$26binary_multiply.12', 'rhs': '$36binary_multiply.17', 'res': '$38binary_true_divide.18'}), (40, {'lhs': '$const4.1', 'rhs': '$38binary_true_divide.18', 'res': '$40binary_subtract.19'}), (42, {'lhs': '$const2.0', 'rhs': '$40binary_subtract.19', 'res': '$42binary_multiply.20'}), (44, {'retval': '$42binary_multiply.20', 'castval': '$44return_value.21'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,727: label 0:
    TwaterC = arg(0, name=TwaterC)           ['TwaterC']
    $const2.0 = const(float, 999.973)        ['$const2.0']
    $const4.1 = const(float, 1.0)            ['$const4.1']
    $const8.3 = const(float, 3.9863)         ['$const8.3']
    $10binary_subtract.4 = TwaterC - $const8.3 ['$10binary_subtract.4', '$const8.3', 'TwaterC']
    $const14.6 = const(float, 3.9863)        ['$const14.6']
    $16binary_subtract.7 = TwaterC - $const14.6 ['$16binary_subtract.7', '$const14.6', 'TwaterC']
    $18binary_multiply.8 = $10binary_subtract.4 * $16binary_subtract.7 ['$10binary_subtract.4', '$16binary_subtract.7', '$18binary_multiply.8']
    $const22.10 = const(float, 288.9414)     ['$const22.10']
    $24binary_add.11 = TwaterC + $const22.10 ['$24binary_add.11', '$const22.10', 'TwaterC']
    $26binary_multiply.12 = $18binary_multiply.8 * $24binary_add.11 ['$18binary_multiply.8', '$24binary_add.11', '$26binary_multiply.12']
    $const28.13 = const(float, 508929.2)     ['$const28.13']
    $const32.15 = const(float, 68.12963)     ['$const32.15']
    $34binary_add.16 = TwaterC + $const32.15 ['$34binary_add.16', '$const32.15', 'TwaterC']
    $36binary_multiply.17 = $const28.13 * $34binary_add.16 ['$34binary_add.16', '$36binary_multiply.17', '$const28.13']
    $38binary_true_divide.18 = $26binary_multiply.12 / $36binary_multiply.17 ['$26binary_multiply.12', '$36binary_multiply.17', '$38binary_true_divide.18']
    $40binary_subtract.19 = $const4.1 - $38binary_true_divide.18 ['$38binary_true_divide.18', '$40binary_subtract.19', '$const4.1']
    $42binary_multiply.20 = $const2.0 * $40binary_subtract.19 ['$40binary_subtract.19', '$42binary_multiply.20', '$const2.0']
    $44return_value.21 = cast(value=$42binary_multiply.20) ['$42binary_multiply.20', '$44return_value.21']
    return $44return_value.21                ['$44return_value.21']

DEBUG    2023-08-19 15:21:02,731: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:02,731: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33504640>
DEBUG    2023-08-19 15:21:02,732: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2023-08-19 15:21:02,732: on stmt: $const2.0 = const(float, 999.973)
DEBUG    2023-08-19 15:21:02,732: on stmt: $const4.1 = const(float, 1.0)
DEBUG    2023-08-19 15:21:02,732: on stmt: $const8.3 = const(float, 3.9863)
DEBUG    2023-08-19 15:21:02,732: on stmt: $10binary_subtract.4 = TwaterC - $const8.3
DEBUG    2023-08-19 15:21:02,732: on stmt: $const14.6 = const(float, 3.9863)
DEBUG    2023-08-19 15:21:02,732: on stmt: $16binary_subtract.7 = TwaterC - $const14.6
DEBUG    2023-08-19 15:21:02,733: on stmt: $18binary_multiply.8 = $10binary_subtract.4 * $16binary_subtract.7
DEBUG    2023-08-19 15:21:02,733: on stmt: $const22.10 = const(float, 288.9414)
DEBUG    2023-08-19 15:21:02,733: on stmt: $24binary_add.11 = TwaterC + $const22.10
DEBUG    2023-08-19 15:21:02,733: on stmt: $26binary_multiply.12 = $18binary_multiply.8 * $24binary_add.11
DEBUG    2023-08-19 15:21:02,733: on stmt: $const28.13 = const(float, 508929.2)
DEBUG    2023-08-19 15:21:02,733: on stmt: $const32.15 = const(float, 68.12963)
DEBUG    2023-08-19 15:21:02,733: on stmt: $34binary_add.16 = TwaterC + $const32.15
DEBUG    2023-08-19 15:21:02,733: on stmt: $36binary_multiply.17 = $const28.13 * $34binary_add.16
DEBUG    2023-08-19 15:21:02,734: on stmt: $38binary_true_divide.18 = $26binary_multiply.12 / $36binary_multiply.17
DEBUG    2023-08-19 15:21:02,734: on stmt: $40binary_subtract.19 = $const4.1 - $38binary_true_divide.18
DEBUG    2023-08-19 15:21:02,734: on stmt: $42binary_multiply.20 = $const2.0 * $40binary_subtract.19
DEBUG    2023-08-19 15:21:02,734: on stmt: $44return_value.21 = cast(value=$42binary_multiply.20)
DEBUG    2023-08-19 15:21:02,734: on stmt: return $44return_value.21
DEBUG    2023-08-19 15:21:02,735: defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x0000025F33518E50>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x0000025F335181F0>],
             '$18binary_multiply.8': [<numba.core.ir.Assign object at 0x0000025F335189A0>],
             '$24binary_add.11': [<numba.core.ir.Assign object at 0x0000025F335180D0>],
             '$26binary_multiply.12': [<numba.core.ir.Assign object at 0x0000025F334EBDC0>],
             '$34binary_add.16': [<numba.core.ir.Assign object at 0x0000025F334EBA90>],
             '$36binary_multiply.17': [<numba.core.ir.Assign object at 0x0000025F334EB700>],
             '$38binary_true_divide.18': [<numba.core.ir.Assign object at 0x0000025F334EB520>],
             '$40binary_subtract.19': [<numba.core.ir.Assign object at 0x0000025F334EB370>],
             '$42binary_multiply.20': [<numba.core.ir.Assign object at 0x0000025F334EB910>],
             '$44return_value.21': [<numba.core.ir.Assign object at 0x0000025F334EB3D0>],
             '$const14.6': [<numba.core.ir.Assign object at 0x0000025F33518970>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000025F335049D0>],
             '$const22.10': [<numba.core.ir.Assign object at 0x0000025F33518220>],
             '$const28.13': [<numba.core.ir.Assign object at 0x0000025F334EBAC0>],
             '$const32.15': [<numba.core.ir.Assign object at 0x0000025F334EBC70>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F33504A90>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000025F33518E20>],
             'TwaterC': [<numba.core.ir.Assign object at 0x0000025F33504B50>]})
DEBUG    2023-08-19 15:21:02,735: SSA violators set()
DEBUG    2023-08-19 15:21:02,826: bytecode dump:
>          0	NOP(arg=None, lineno=266)
           2	LOAD_FAST(arg=0, lineno=266)
           4	LOAD_CONST(arg=1, lineno=266)
           6	COMPARE_OP(arg=1, lineno=266)
           8	POP_JUMP_IF_FALSE(arg=16, lineno=266)
          10	LOAD_CONST(arg=2, lineno=267)
          12	STORE_FAST(arg=1, lineno=267)
          14	JUMP_FORWARD(arg=74, lineno=267)
>         16	LOAD_FAST(arg=0, lineno=268)
          18	LOAD_CONST(arg=3, lineno=268)
          20	COMPARE_OP(arg=1, lineno=268)
          22	POP_JUMP_IF_FALSE(arg=30, lineno=268)
          24	LOAD_CONST(arg=4, lineno=269)
          26	STORE_FAST(arg=1, lineno=269)
          28	JUMP_FORWARD(arg=60, lineno=269)
>         30	LOAD_FAST(arg=0, lineno=270)
          32	LOAD_CONST(arg=5, lineno=270)
          34	COMPARE_OP(arg=1, lineno=270)
          36	POP_JUMP_IF_FALSE(arg=44, lineno=270)
          38	LOAD_CONST(arg=6, lineno=271)
          40	STORE_FAST(arg=1, lineno=271)
          42	JUMP_FORWARD(arg=46, lineno=271)
>         44	LOAD_FAST(arg=0, lineno=272)
          46	LOAD_CONST(arg=7, lineno=272)
          48	COMPARE_OP(arg=1, lineno=272)
          50	POP_JUMP_IF_FALSE(arg=58, lineno=272)
          52	LOAD_CONST(arg=8, lineno=273)
          54	STORE_FAST(arg=1, lineno=273)
          56	JUMP_FORWARD(arg=32, lineno=273)
>         58	LOAD_FAST(arg=0, lineno=274)
          60	LOAD_CONST(arg=9, lineno=274)
          62	COMPARE_OP(arg=1, lineno=274)
          64	POP_JUMP_IF_FALSE(arg=72, lineno=274)
          66	LOAD_CONST(arg=10, lineno=275)
          68	STORE_FAST(arg=1, lineno=275)
          70	JUMP_FORWARD(arg=18, lineno=275)
>         72	LOAD_FAST(arg=0, lineno=276)
          74	LOAD_CONST(arg=11, lineno=276)
          76	COMPARE_OP(arg=1, lineno=276)
          78	POP_JUMP_IF_FALSE(arg=86, lineno=276)
          80	LOAD_CONST(arg=12, lineno=277)
          82	STORE_FAST(arg=1, lineno=277)
          84	JUMP_FORWARD(arg=4, lineno=277)
>         86	LOAD_CONST(arg=13, lineno=279)
          88	STORE_FAST(arg=1, lineno=279)
>         90	LOAD_FAST(arg=1, lineno=280)
          92	RETURN_VALUE(arg=None, lineno=280)
DEBUG    2023-08-19 15:21:02,826: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,826: stack: []
DEBUG    2023-08-19 15:21:02,826: dispatch pc=0, inst=NOP(arg=None, lineno=266)
DEBUG    2023-08-19 15:21:02,826: stack []
DEBUG    2023-08-19 15:21:02,826: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=266)
DEBUG    2023-08-19 15:21:02,826: stack []
DEBUG    2023-08-19 15:21:02,827: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=266)
DEBUG    2023-08-19 15:21:02,827: stack ['$TwaterC2.0']
DEBUG    2023-08-19 15:21:02,827: dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=266)
DEBUG    2023-08-19 15:21:02,827: stack ['$TwaterC2.0', '$const4.1']
DEBUG    2023-08-19 15:21:02,827: dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=16, lineno=266)
DEBUG    2023-08-19 15:21:02,827: stack ['$6compare_op.2']
DEBUG    2023-08-19 15:21:02,827: end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,827: pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=16 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,827: stack: []
DEBUG    2023-08-19 15:21:02,827: dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=267)
DEBUG    2023-08-19 15:21:02,827: stack []
DEBUG    2023-08-19 15:21:02,828: dispatch pc=12, inst=STORE_FAST(arg=1, lineno=267)
DEBUG    2023-08-19 15:21:02,828: stack ['$const10.0']
DEBUG    2023-08-19 15:21:02,828: dispatch pc=14, inst=JUMP_FORWARD(arg=74, lineno=267)
DEBUG    2023-08-19 15:21:02,828: stack []
DEBUG    2023-08-19 15:21:02,828: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,828: pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,828: stack: []
DEBUG    2023-08-19 15:21:02,828: dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=268)
DEBUG    2023-08-19 15:21:02,828: stack []
DEBUG    2023-08-19 15:21:02,828: dispatch pc=18, inst=LOAD_CONST(arg=3, lineno=268)
DEBUG    2023-08-19 15:21:02,828: stack ['$TwaterC16.0']
DEBUG    2023-08-19 15:21:02,828: dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=268)
DEBUG    2023-08-19 15:21:02,829: stack ['$TwaterC16.0', '$const18.1']
DEBUG    2023-08-19 15:21:02,829: dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=30, lineno=268)
DEBUG    2023-08-19 15:21:02,829: stack ['$20compare_op.2']
DEBUG    2023-08-19 15:21:02,829: end state. edges=[Edge(pc=24, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,829: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,829: stack: []
DEBUG    2023-08-19 15:21:02,829: dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=280)
DEBUG    2023-08-19 15:21:02,829: stack []
DEBUG    2023-08-19 15:21:02,829: dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=280)
DEBUG    2023-08-19 15:21:02,830: stack ['$Cp_water90.0']
DEBUG    2023-08-19 15:21:02,830: end state. edges=[]
DEBUG    2023-08-19 15:21:02,830: pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,830: stack: []
DEBUG    2023-08-19 15:21:02,830: dispatch pc=24, inst=LOAD_CONST(arg=4, lineno=269)
DEBUG    2023-08-19 15:21:02,830: stack []
DEBUG    2023-08-19 15:21:02,830: dispatch pc=26, inst=STORE_FAST(arg=1, lineno=269)
DEBUG    2023-08-19 15:21:02,830: stack ['$const24.0']
DEBUG    2023-08-19 15:21:02,830: dispatch pc=28, inst=JUMP_FORWARD(arg=60, lineno=269)
DEBUG    2023-08-19 15:21:02,830: stack []
DEBUG    2023-08-19 15:21:02,831: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,831: pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,831: stack: []
DEBUG    2023-08-19 15:21:02,831: dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=270)
DEBUG    2023-08-19 15:21:02,831: stack []
DEBUG    2023-08-19 15:21:02,831: dispatch pc=32, inst=LOAD_CONST(arg=5, lineno=270)
DEBUG    2023-08-19 15:21:02,831: stack ['$TwaterC30.0']
DEBUG    2023-08-19 15:21:02,831: dispatch pc=34, inst=COMPARE_OP(arg=1, lineno=270)
DEBUG    2023-08-19 15:21:02,831: stack ['$TwaterC30.0', '$const32.1']
DEBUG    2023-08-19 15:21:02,831: dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=44, lineno=270)
DEBUG    2023-08-19 15:21:02,832: stack ['$34compare_op.2']
DEBUG    2023-08-19 15:21:02,832: end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: stack: []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=38, inst=LOAD_CONST(arg=6, lineno=271)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=40, inst=STORE_FAST(arg=1, lineno=271)
DEBUG    2023-08-19 15:21:02,832: stack ['$const38.0']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=42, inst=JUMP_FORWARD(arg=46, lineno=271)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: stack: []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=272)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=46, inst=LOAD_CONST(arg=7, lineno=272)
DEBUG    2023-08-19 15:21:02,832: stack ['$TwaterC44.0']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=48, inst=COMPARE_OP(arg=1, lineno=272)
DEBUG    2023-08-19 15:21:02,832: stack ['$TwaterC44.0', '$const46.1']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=58, lineno=272)
DEBUG    2023-08-19 15:21:02,832: stack ['$48compare_op.2']
DEBUG    2023-08-19 15:21:02,832: end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: stack: []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=52, inst=LOAD_CONST(arg=8, lineno=273)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=54, inst=STORE_FAST(arg=1, lineno=273)
DEBUG    2023-08-19 15:21:02,832: stack ['$const52.0']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=56, inst=JUMP_FORWARD(arg=32, lineno=273)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: stack: []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=58, inst=LOAD_FAST(arg=0, lineno=274)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=60, inst=LOAD_CONST(arg=9, lineno=274)
DEBUG    2023-08-19 15:21:02,832: stack ['$TwaterC58.0']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=62, inst=COMPARE_OP(arg=1, lineno=274)
DEBUG    2023-08-19 15:21:02,832: stack ['$TwaterC58.0', '$const60.1']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=72, lineno=274)
DEBUG    2023-08-19 15:21:02,832: stack ['$62compare_op.2']
DEBUG    2023-08-19 15:21:02,832: end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: stack: []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=66, inst=LOAD_CONST(arg=10, lineno=275)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=68, inst=STORE_FAST(arg=1, lineno=275)
DEBUG    2023-08-19 15:21:02,832: stack ['$const66.0']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=70, inst=JUMP_FORWARD(arg=18, lineno=275)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,832: pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,832: stack: []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=276)
DEBUG    2023-08-19 15:21:02,832: stack []
DEBUG    2023-08-19 15:21:02,832: dispatch pc=74, inst=LOAD_CONST(arg=11, lineno=276)
DEBUG    2023-08-19 15:21:02,832: stack ['$TwaterC72.0']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=76, inst=COMPARE_OP(arg=1, lineno=276)
DEBUG    2023-08-19 15:21:02,832: stack ['$TwaterC72.0', '$const74.1']
DEBUG    2023-08-19 15:21:02,832: dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=86, lineno=276)
DEBUG    2023-08-19 15:21:02,832: stack ['$76compare_op.2']
DEBUG    2023-08-19 15:21:02,832: end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,839: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,839: pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,839: stack: []
DEBUG    2023-08-19 15:21:02,839: dispatch pc=80, inst=LOAD_CONST(arg=12, lineno=277)
DEBUG    2023-08-19 15:21:02,839: stack []
DEBUG    2023-08-19 15:21:02,839: dispatch pc=82, inst=STORE_FAST(arg=1, lineno=277)
DEBUG    2023-08-19 15:21:02,839: stack ['$const80.0']
DEBUG    2023-08-19 15:21:02,839: dispatch pc=84, inst=JUMP_FORWARD(arg=4, lineno=277)
DEBUG    2023-08-19 15:21:02,839: stack []
DEBUG    2023-08-19 15:21:02,839: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,839: pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,839: stack: []
DEBUG    2023-08-19 15:21:02,839: dispatch pc=86, inst=LOAD_CONST(arg=13, lineno=279)
DEBUG    2023-08-19 15:21:02,839: stack []
DEBUG    2023-08-19 15:21:02,839: dispatch pc=88, inst=STORE_FAST(arg=1, lineno=279)
DEBUG    2023-08-19 15:21:02,839: stack ['$const86.0']
DEBUG    2023-08-19 15:21:02,839: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:02,841: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,841: pending: deque([State(pc_initial=90 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,841: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:02,841: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:02,841: defmap: {}
DEBUG    2023-08-19 15:21:02,841: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,841: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,841: keep phismap: {}
DEBUG    2023-08-19 15:21:02,841: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:02,841: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$TwaterC2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$TwaterC2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 16: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'value': '$const10.0'}), (14, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$TwaterC16.0'}), (18, {'res': '$const18.1'}), (20, {'lhs': '$TwaterC16.0', 'rhs': '$const18.1', 'res': '$20compare_op.2'}), (22, {'pred': '$20compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: (), 30: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$const24.0'}), (26, {'value': '$const24.0'}), (28, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$TwaterC30.0'}), (32, {'res': '$const32.1'}), (34, {'lhs': '$TwaterC30.0', 'rhs': '$const32.1', 'res': '$34compare_op.2'}), (36, {'pred': '$34compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 44: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$const38.0'}), (40, {'value': '$const38.0'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$TwaterC44.0'}), (46, {'res': '$const46.1'}), (48, {'lhs': '$TwaterC44.0', 'rhs': '$const46.1', 'res': '$48compare_op.2'}), (50, {'pred': '$48compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 58: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$const52.0'}), (54, {'value': '$const52.0'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$TwaterC58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$TwaterC58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 72: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$const66.0'}), (68, {'value': '$const66.0'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$TwaterC72.0'}), (74, {'res': '$const74.1'}), (76, {'lhs': '$TwaterC72.0', 'rhs': '$const74.1', 'res': '$76compare_op.2'}), (78, {'pred': '$76compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 86: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$const80.0'}), (82, {'value': '$const80.0'}), (84, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$const86.0'}), (88, {'value': '$const86.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2023-08-19 15:21:02,841: block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$Cp_water90.0'}), (92, {'retval': '$Cp_water90.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,841: label 0:
    TwaterC = arg(0, name=TwaterC)           ['TwaterC']
    $const4.1 = const(float, 0.0)            ['$const4.1']
    $6compare_op.2 = TwaterC <= $const4.1    ['$6compare_op.2', '$const4.1', 'TwaterC']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, water_quality_functions.py:266),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 16                    ['$8pred']
label 10:
    Cp_water = const(float, 4218.0)          ['Cp_water']
    jump 90                                  []
label 16:
    $const18.1 = const(float, 5.0)           ['$const18.1']
    $20compare_op.2 = TwaterC <= $const18.1  ['$20compare_op.2', '$const18.1', 'TwaterC']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, water_quality_functions.py:268),), kws=(), vararg=None, target=None) ['$20compare_op.2', '$22pred', 'bool22']
    branch $22pred, 24, 30                   ['$22pred']
label 24:
    Cp_water = const(float, 4202.0)          ['Cp_water']
    jump 90                                  []
label 30:
    $const32.1 = const(float, 10.0)          ['$const32.1']
    $34compare_op.2 = TwaterC <= $const32.1  ['$34compare_op.2', '$const32.1', 'TwaterC']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, water_quality_functions.py:270),), kws=(), vararg=None, target=None) ['$34compare_op.2', '$36pred', 'bool36']
    branch $36pred, 38, 44                   ['$36pred']
label 38:
    Cp_water = const(float, 4192.0)          ['Cp_water']
    jump 90                                  []
label 44:
    $const46.1 = const(float, 15.0)          ['$const46.1']
    $48compare_op.2 = TwaterC <= $const46.1  ['$48compare_op.2', '$const46.1', 'TwaterC']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, water_quality_functions.py:272),), kws=(), vararg=None, target=None) ['$48compare_op.2', '$50pred', 'bool50']
    branch $50pred, 52, 58                   ['$50pred']
label 52:
    Cp_water = const(float, 4186.0)          ['Cp_water']
    jump 90                                  []
label 58:
    $const60.1 = const(float, 20.0)          ['$const60.1']
    $62compare_op.2 = TwaterC <= $const60.1  ['$62compare_op.2', '$const60.1', 'TwaterC']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:274),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 72                   ['$64pred']
label 66:
    Cp_water = const(float, 4182.0)          ['Cp_water']
    jump 90                                  []
label 72:
    $const74.1 = const(float, 25.0)          ['$const74.1']
    $76compare_op.2 = TwaterC <= $const74.1  ['$76compare_op.2', '$const74.1', 'TwaterC']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, water_quality_functions.py:276),), kws=(), vararg=None, target=None) ['$76compare_op.2', '$78pred', 'bool78']
    branch $78pred, 80, 86                   ['$78pred']
label 80:
    Cp_water = const(float, 4180.0)          ['Cp_water']
    jump 90                                  []
label 86:
    Cp_water = const(float, 4178.0)          ['Cp_water']
    jump 90                                  []
label 90:
    $92return_value.1 = cast(value=Cp_water) ['$92return_value.1', 'Cp_water']
    return $92return_value.1                 ['$92return_value.1']

DEBUG    2023-08-19 15:21:02,851: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:02,851: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,851: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2023-08-19 15:21:02,851: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2023-08-19 15:21:02,851: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2023-08-19 15:21:02,851: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,851: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, water_quality_functions.py:266),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,851: on stmt: branch $8pred, 10, 16
DEBUG    2023-08-19 15:21:02,851: ==== SSA block analysis pass on 10
DEBUG    2023-08-19 15:21:02,851: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,851: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2023-08-19 15:21:02,851: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,851: ==== SSA block analysis pass on 16
DEBUG    2023-08-19 15:21:02,851: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,851: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2023-08-19 15:21:02,851: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2023-08-19 15:21:02,851: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,851: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, water_quality_functions.py:268),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,851: on stmt: branch $22pred, 24, 30
DEBUG    2023-08-19 15:21:02,851: ==== SSA block analysis pass on 24
DEBUG    2023-08-19 15:21:02,851: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,851: on stmt: Cp_water = const(float, 4202.0)
DEBUG    2023-08-19 15:21:02,851: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,851: ==== SSA block analysis pass on 30
DEBUG    2023-08-19 15:21:02,851: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,851: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2023-08-19 15:21:02,851: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2023-08-19 15:21:02,851: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,851: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, water_quality_functions.py:270),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,851: on stmt: branch $36pred, 38, 44
DEBUG    2023-08-19 15:21:02,851: ==== SSA block analysis pass on 38
DEBUG    2023-08-19 15:21:02,859: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,859: on stmt: Cp_water = const(float, 4192.0)
DEBUG    2023-08-19 15:21:02,859: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,859: ==== SSA block analysis pass on 44
DEBUG    2023-08-19 15:21:02,859: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,859: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2023-08-19 15:21:02,859: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2023-08-19 15:21:02,859: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,859: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, water_quality_functions.py:272),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,859: on stmt: branch $50pred, 52, 58
DEBUG    2023-08-19 15:21:02,859: ==== SSA block analysis pass on 52
DEBUG    2023-08-19 15:21:02,859: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,859: on stmt: Cp_water = const(float, 4186.0)
DEBUG    2023-08-19 15:21:02,859: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,859: ==== SSA block analysis pass on 58
DEBUG    2023-08-19 15:21:02,859: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,859: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2023-08-19 15:21:02,859: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2023-08-19 15:21:02,859: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,859: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:274),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,859: on stmt: branch $64pred, 66, 72
DEBUG    2023-08-19 15:21:02,859: ==== SSA block analysis pass on 66
DEBUG    2023-08-19 15:21:02,859: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,859: on stmt: Cp_water = const(float, 4182.0)
DEBUG    2023-08-19 15:21:02,859: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,861: ==== SSA block analysis pass on 72
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,861: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2023-08-19 15:21:02,861: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,861: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, water_quality_functions.py:276),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,861: on stmt: branch $78pred, 80, 86
DEBUG    2023-08-19 15:21:02,861: ==== SSA block analysis pass on 80
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,861: on stmt: Cp_water = const(float, 4180.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,861: ==== SSA block analysis pass on 86
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,861: on stmt: Cp_water = const(float, 4178.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,861: ==== SSA block analysis pass on 90
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F335FA400>
DEBUG    2023-08-19 15:21:02,861: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2023-08-19 15:21:02,861: on stmt: return $92return_value.1
DEBUG    2023-08-19 15:21:02,861: defs defaultdict(<class 'list'>,
            {'$20compare_op.2': [<numba.core.ir.Assign object at 0x0000025F33575AF0>],
             '$22pred': [<numba.core.ir.Assign object at 0x0000025F33575CA0>],
             '$34compare_op.2': [<numba.core.ir.Assign object at 0x0000025F3357AC70>],
             '$36pred': [<numba.core.ir.Assign object at 0x0000025F3357A310>],
             '$48compare_op.2': [<numba.core.ir.Assign object at 0x0000025F33351310>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000025F33351100>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x0000025F33517D90>],
             '$64pred': [<numba.core.ir.Assign object at 0x0000025F33517340>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000025F335FA2E0>],
             '$76compare_op.2': [<numba.core.ir.Assign object at 0x0000025F33517700>],
             '$78pred': [<numba.core.ir.Assign object at 0x0000025F335173A0>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000025F335FA7C0>],
             '$92return_value.1': [<numba.core.ir.Assign object at 0x0000025F33510C10>],
             '$const18.1': [<numba.core.ir.Assign object at 0x0000025F33575610>],
             '$const32.1': [<numba.core.ir.Assign object at 0x0000025F3357AB20>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000025F335FA370>],
             '$const46.1': [<numba.core.ir.Assign object at 0x0000025F33357D30>],
             '$const60.1': [<numba.core.ir.Assign object at 0x0000025F333512B0>],
             '$const74.1': [<numba.core.ir.Assign object at 0x0000025F33517610>],
             'Cp_water': [<numba.core.ir.Assign object at 0x0000025F33575A60>,
                          <numba.core.ir.Assign object at 0x0000025F33575550>,
                          <numba.core.ir.Assign object at 0x0000025F3357A550>,
                          <numba.core.ir.Assign object at 0x0000025F333511C0>,
                          <numba.core.ir.Assign object at 0x0000025F33517DF0>,
                          <numba.core.ir.Assign object at 0x0000025F33517400>,
                          <numba.core.ir.Assign object at 0x0000025F33510DF0>],
             'TwaterC': [<numba.core.ir.Assign object at 0x0000025F335FABB0>],
             'bool22': [<numba.core.ir.Assign object at 0x0000025F33575C70>],
             'bool36': [<numba.core.ir.Assign object at 0x0000025F3357AA90>],
             'bool50': [<numba.core.ir.Assign object at 0x0000025F33351370>],
             'bool64': [<numba.core.ir.Assign object at 0x0000025F33517A60>],
             'bool78': [<numba.core.ir.Assign object at 0x0000025F335175B0>],
             'bool8': [<numba.core.ir.Assign object at 0x0000025F335FA6A0>]})
DEBUG    2023-08-19 15:21:02,861: SSA violators {'Cp_water'}
DEBUG    2023-08-19 15:21:02,861: Fix SSA violator on var Cp_water
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2023-08-19 15:21:02,861: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2023-08-19 15:21:02,861: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,861: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, water_quality_functions.py:266),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,861: on stmt: branch $8pred, 10, 16
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 10
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2023-08-19 15:21:02,861: first assign: Cp_water
DEBUG    2023-08-19 15:21:02,861: replaced with: Cp_water = const(float, 4218.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 16
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2023-08-19 15:21:02,861: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,861: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, water_quality_functions.py:268),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,861: on stmt: branch $22pred, 24, 30
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 24
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: Cp_water = const(float, 4202.0)
DEBUG    2023-08-19 15:21:02,861: replaced with: Cp_water.1 = const(float, 4202.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2023-08-19 15:21:02,861: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,861: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, water_quality_functions.py:270),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,861: on stmt: branch $36pred, 38, 44
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 38
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: Cp_water = const(float, 4192.0)
DEBUG    2023-08-19 15:21:02,861: replaced with: Cp_water.2 = const(float, 4192.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2023-08-19 15:21:02,861: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,861: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, water_quality_functions.py:272),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,861: on stmt: branch $50pred, 52, 58
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 52
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: Cp_water = const(float, 4186.0)
DEBUG    2023-08-19 15:21:02,861: replaced with: Cp_water.3 = const(float, 4186.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 58
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2023-08-19 15:21:02,861: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2023-08-19 15:21:02,861: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,861: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:274),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,861: on stmt: branch $64pred, 66, 72
DEBUG    2023-08-19 15:21:02,861: ==== SSA block rewrite pass on 66
DEBUG    2023-08-19 15:21:02,861: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,861: on stmt: Cp_water = const(float, 4182.0)
DEBUG    2023-08-19 15:21:02,861: replaced with: Cp_water.4 = const(float, 4182.0)
DEBUG    2023-08-19 15:21:02,869: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,869: ==== SSA block rewrite pass on 72
DEBUG    2023-08-19 15:21:02,869: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,869: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2023-08-19 15:21:02,869: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2023-08-19 15:21:02,869: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,869: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, water_quality_functions.py:276),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,869: on stmt: branch $78pred, 80, 86
DEBUG    2023-08-19 15:21:02,869: ==== SSA block rewrite pass on 80
DEBUG    2023-08-19 15:21:02,869: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,869: on stmt: Cp_water = const(float, 4180.0)
DEBUG    2023-08-19 15:21:02,869: replaced with: Cp_water.5 = const(float, 4180.0)
DEBUG    2023-08-19 15:21:02,869: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,869: ==== SSA block rewrite pass on 86
DEBUG    2023-08-19 15:21:02,869: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,869: on stmt: Cp_water = const(float, 4178.0)
DEBUG    2023-08-19 15:21:02,869: replaced with: Cp_water.6 = const(float, 4178.0)
DEBUG    2023-08-19 15:21:02,869: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,869: ==== SSA block rewrite pass on 90
DEBUG    2023-08-19 15:21:02,869: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2023-08-19 15:21:02,871: on stmt: return $92return_value.1
DEBUG    2023-08-19 15:21:02,871: Replaced assignments: defaultdict(<class 'list'>,
            {10: [<numba.core.ir.Assign object at 0x0000025F33510FD0>],
             24: [<numba.core.ir.Assign object at 0x0000025F33510EB0>],
             38: [<numba.core.ir.Assign object at 0x0000025F33510F40>],
             52: [<numba.core.ir.Assign object at 0x0000025F33510C40>],
             66: [<numba.core.ir.Assign object at 0x0000025F33510130>],
             80: [<numba.core.ir.Assign object at 0x0000025F33510250>],
             86: [<numba.core.ir.Assign object at 0x0000025F33573E20>]})
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2023-08-19 15:21:02,871: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2023-08-19 15:21:02,871: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,871: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, water_quality_functions.py:266),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,871: on stmt: branch $8pred, 10, 16
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 10
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 16
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2023-08-19 15:21:02,871: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,871: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, water_quality_functions.py:268),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,871: on stmt: branch $22pred, 24, 30
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 24
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: Cp_water.1 = const(float, 4202.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 30
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2023-08-19 15:21:02,871: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,871: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, water_quality_functions.py:270),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,871: on stmt: branch $36pred, 38, 44
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 38
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: Cp_water.2 = const(float, 4192.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 44
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2023-08-19 15:21:02,871: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,871: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, water_quality_functions.py:272),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,871: on stmt: branch $50pred, 52, 58
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 52
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: Cp_water.3 = const(float, 4186.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 58
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2023-08-19 15:21:02,871: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,871: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:274),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,871: on stmt: branch $64pred, 66, 72
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 66
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: Cp_water.4 = const(float, 4182.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 72
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2023-08-19 15:21:02,871: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:02,871: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, water_quality_functions.py:276),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:02,871: on stmt: branch $78pred, 80, 86
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 80
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: Cp_water.5 = const(float, 4180.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 86
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: Cp_water.6 = const(float, 4178.0)
DEBUG    2023-08-19 15:21:02,871: on stmt: jump 90
DEBUG    2023-08-19 15:21:02,871: ==== SSA block rewrite pass on 90
DEBUG    2023-08-19 15:21:02,871: Running <numba.core.ssa._FixSSAVars object at 0x0000025F331B2FA0>
DEBUG    2023-08-19 15:21:02,871: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2023-08-19 15:21:02,871: find_def var='Cp_water' stmt=$92return_value.1 = cast(value=Cp_water)
DEBUG    2023-08-19 15:21:02,871: find_def_from_top label 90
DEBUG    2023-08-19 15:21:02,871: insert phi node Cp_water.7 = phi(incoming_values=[], incoming_blocks=[]) at 90
DEBUG    2023-08-19 15:21:02,879: find_def_from_bottom label 66
DEBUG    2023-08-19 15:21:02,879: incoming_def Cp_water.4 = const(float, 4182.0)
DEBUG    2023-08-19 15:21:02,879: find_def_from_bottom label 38
DEBUG    2023-08-19 15:21:02,879: incoming_def Cp_water.2 = const(float, 4192.0)
DEBUG    2023-08-19 15:21:02,879: find_def_from_bottom label 10
DEBUG    2023-08-19 15:21:02,879: incoming_def Cp_water = const(float, 4218.0)
DEBUG    2023-08-19 15:21:02,879: find_def_from_bottom label 80
DEBUG    2023-08-19 15:21:02,879: incoming_def Cp_water.5 = const(float, 4180.0)
DEBUG    2023-08-19 15:21:02,879: find_def_from_bottom label 52
DEBUG    2023-08-19 15:21:02,879: incoming_def Cp_water.3 = const(float, 4186.0)
DEBUG    2023-08-19 15:21:02,879: find_def_from_bottom label 86
DEBUG    2023-08-19 15:21:02,879: incoming_def Cp_water.6 = const(float, 4178.0)
DEBUG    2023-08-19 15:21:02,879: find_def_from_bottom label 24
DEBUG    2023-08-19 15:21:02,879: incoming_def Cp_water.1 = const(float, 4202.0)
DEBUG    2023-08-19 15:21:02,879: replaced with: $92return_value.1 = cast(value=Cp_water.7)
DEBUG    2023-08-19 15:21:02,879: on stmt: return $92return_value.1
DEBUG    2023-08-19 15:21:02,980: bytecode dump:
>          0	NOP(arg=None, lineno=149)
           2	LOAD_FAST(arg=1, lineno=149)
           4	LOAD_FAST(arg=0, lineno=149)
           6	LOAD_FAST(arg=2, lineno=149)
           8	LOAD_FAST(arg=0, lineno=149)
          10	LOAD_FAST(arg=3, lineno=149)
          12	LOAD_FAST(arg=0, lineno=149)
          14	LOAD_FAST(arg=4, lineno=149)
          16	LOAD_FAST(arg=0, lineno=149)
          18	LOAD_FAST(arg=5, lineno=149)
          20	LOAD_FAST(arg=0, lineno=149)
          22	LOAD_FAST(arg=6, lineno=149)
          24	LOAD_FAST(arg=0, lineno=149)
          26	LOAD_FAST(arg=7, lineno=149)
          28	BINARY_MULTIPLY(arg=None, lineno=149)
          30	BINARY_ADD(arg=None, lineno=149)
          32	BINARY_MULTIPLY(arg=None, lineno=149)
          34	BINARY_ADD(arg=None, lineno=149)
          36	BINARY_MULTIPLY(arg=None, lineno=149)
          38	BINARY_ADD(arg=None, lineno=149)
          40	BINARY_MULTIPLY(arg=None, lineno=149)
          42	BINARY_ADD(arg=None, lineno=149)
          44	BINARY_MULTIPLY(arg=None, lineno=149)
          46	BINARY_ADD(arg=None, lineno=149)
          48	BINARY_MULTIPLY(arg=None, lineno=149)
          50	BINARY_ADD(arg=None, lineno=149)
          52	RETURN_VALUE(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,980: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:02,980: stack: []
DEBUG    2023-08-19 15:21:02,980: dispatch pc=0, inst=NOP(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,980: stack []
DEBUG    2023-08-19 15:21:02,980: dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=149)
DEBUG    2023-08-19 15:21:02,980: stack []
DEBUG    2023-08-19 15:21:02,980: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2023-08-19 15:21:02,980: stack ['$a02.0']
DEBUG    2023-08-19 15:21:02,980: dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=149)
DEBUG    2023-08-19 15:21:02,981: stack ['$a02.0', '$TwaterK4.1']
DEBUG    2023-08-19 15:21:02,981: dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2023-08-19 15:21:02,981: stack ['$a02.0', '$TwaterK4.1', '$a16.2']
DEBUG    2023-08-19 15:21:02,981: dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=149)
DEBUG    2023-08-19 15:21:02,981: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3']
DEBUG    2023-08-19 15:21:02,981: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2023-08-19 15:21:02,981: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4']
DEBUG    2023-08-19 15:21:02,982: dispatch pc=14, inst=LOAD_FAST(arg=4, lineno=149)
DEBUG    2023-08-19 15:21:02,982: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5']
DEBUG    2023-08-19 15:21:02,982: dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2023-08-19 15:21:02,982: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6']
DEBUG    2023-08-19 15:21:02,982: dispatch pc=18, inst=LOAD_FAST(arg=5, lineno=149)
DEBUG    2023-08-19 15:21:02,982: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7']
DEBUG    2023-08-19 15:21:02,982: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2023-08-19 15:21:02,982: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8']
DEBUG    2023-08-19 15:21:02,983: dispatch pc=22, inst=LOAD_FAST(arg=6, lineno=149)
DEBUG    2023-08-19 15:21:02,983: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9']
DEBUG    2023-08-19 15:21:02,983: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG    2023-08-19 15:21:02,983: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$a522.10']
DEBUG    2023-08-19 15:21:02,983: dispatch pc=26, inst=LOAD_FAST(arg=7, lineno=149)
DEBUG    2023-08-19 15:21:02,983: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$a522.10', '$TwaterK24.11']
DEBUG    2023-08-19 15:21:02,983: dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,983: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$a522.10', '$TwaterK24.11', '$a626.12']
DEBUG    2023-08-19 15:21:02,984: dispatch pc=30, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,984: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$a522.10', '$28binary_multiply.13']
DEBUG    2023-08-19 15:21:02,984: dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,984: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$TwaterK20.9', '$30binary_add.14']
DEBUG    2023-08-19 15:21:02,984: dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,984: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$a418.8', '$32binary_multiply.15']
DEBUG    2023-08-19 15:21:02,984: dispatch pc=36, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,985: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$TwaterK16.7', '$34binary_add.16']
DEBUG    2023-08-19 15:21:02,985: dispatch pc=38, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,985: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$a314.6', '$36binary_multiply.17']
DEBUG    2023-08-19 15:21:02,985: dispatch pc=40, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,985: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$TwaterK12.5', '$38binary_add.18']
DEBUG    2023-08-19 15:21:02,985: dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,985: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$a210.4', '$40binary_multiply.19']
DEBUG    2023-08-19 15:21:02,985: dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,985: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$TwaterK8.3', '$42binary_add.20']
DEBUG    2023-08-19 15:21:02,985: dispatch pc=46, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,985: stack ['$a02.0', '$TwaterK4.1', '$a16.2', '$44binary_multiply.21']
DEBUG    2023-08-19 15:21:02,986: dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,986: stack ['$a02.0', '$TwaterK4.1', '$46binary_add.22']
DEBUG    2023-08-19 15:21:02,986: dispatch pc=50, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,986: stack ['$a02.0', '$48binary_multiply.23']
DEBUG    2023-08-19 15:21:02,986: dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=149)
DEBUG    2023-08-19 15:21:02,986: stack ['$50binary_add.24']
DEBUG    2023-08-19 15:21:02,986: end state. edges=[]
DEBUG    2023-08-19 15:21:02,986: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:02,987: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:02,987: defmap: {}
DEBUG    2023-08-19 15:21:02,987: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,987: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:02,987: keep phismap: {}
DEBUG    2023-08-19 15:21:02,987: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:02,987: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:02,987: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a02.0'}), (4, {'res': '$TwaterK4.1'}), (6, {'res': '$a16.2'}), (8, {'res': '$TwaterK8.3'}), (10, {'res': '$a210.4'}), (12, {'res': '$TwaterK12.5'}), (14, {'res': '$a314.6'}), (16, {'res': '$TwaterK16.7'}), (18, {'res': '$a418.8'}), (20, {'res': '$TwaterK20.9'}), (22, {'res': '$a522.10'}), (24, {'res': '$TwaterK24.11'}), (26, {'res': '$a626.12'}), (28, {'lhs': '$TwaterK24.11', 'rhs': '$a626.12', 'res': '$28binary_multiply.13'}), (30, {'lhs': '$a522.10', 'rhs': '$28binary_multiply.13', 'res': '$30binary_add.14'}), (32, {'lhs': '$TwaterK20.9', 'rhs': '$30binary_add.14', 'res': '$32binary_multiply.15'}), (34, {'lhs': '$a418.8', 'rhs': '$32binary_multiply.15', 'res': '$34binary_add.16'}), (36, {'lhs': '$TwaterK16.7', 'rhs': '$34binary_add.16', 'res': '$36binary_multiply.17'}), (38, {'lhs': '$a314.6', 'rhs': '$36binary_multiply.17', 'res': '$38binary_add.18'}), (40, {'lhs': '$TwaterK12.5', 'rhs': '$38binary_add.18', 'res': '$40binary_multiply.19'}), (42, {'lhs': '$a210.4', 'rhs': '$40binary_multiply.19', 'res': '$42binary_add.20'}), (44, {'lhs': '$TwaterK8.3', 'rhs': '$42binary_add.20', 'res': '$44binary_multiply.21'}), (46, {'lhs': '$a16.2', 'rhs': '$44binary_multiply.21', 'res': '$46binary_add.22'}), (48, {'lhs': '$TwaterK4.1', 'rhs': '$46binary_add.22', 'res': '$48binary_multiply.23'}), (50, {'lhs': '$a02.0', 'rhs': '$48binary_multiply.23', 'res': '$50binary_add.24'}), (52, {'retval': '$50binary_add.24', 'castval': '$52return_value.25'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:02,989: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    a0 = arg(1, name=a0)                     ['a0']
    a1 = arg(2, name=a1)                     ['a1']
    a2 = arg(3, name=a2)                     ['a2']
    a3 = arg(4, name=a3)                     ['a3']
    a4 = arg(5, name=a4)                     ['a4']
    a5 = arg(6, name=a5)                     ['a5']
    a6 = arg(7, name=a6)                     ['a6']
    $28binary_multiply.13 = TwaterK * a6     ['$28binary_multiply.13', 'TwaterK', 'a6']
    $30binary_add.14 = a5 + $28binary_multiply.13 ['$28binary_multiply.13', '$30binary_add.14', 'a5']
    $32binary_multiply.15 = TwaterK * $30binary_add.14 ['$30binary_add.14', '$32binary_multiply.15', 'TwaterK']
    $34binary_add.16 = a4 + $32binary_multiply.15 ['$32binary_multiply.15', '$34binary_add.16', 'a4']
    $36binary_multiply.17 = TwaterK * $34binary_add.16 ['$34binary_add.16', '$36binary_multiply.17', 'TwaterK']
    $38binary_add.18 = a3 + $36binary_multiply.17 ['$36binary_multiply.17', '$38binary_add.18', 'a3']
    $40binary_multiply.19 = TwaterK * $38binary_add.18 ['$38binary_add.18', '$40binary_multiply.19', 'TwaterK']
    $42binary_add.20 = a2 + $40binary_multiply.19 ['$40binary_multiply.19', '$42binary_add.20', 'a2']
    $44binary_multiply.21 = TwaterK * $42binary_add.20 ['$42binary_add.20', '$44binary_multiply.21', 'TwaterK']
    $46binary_add.22 = a1 + $44binary_multiply.21 ['$44binary_multiply.21', '$46binary_add.22', 'a1']
    $48binary_multiply.23 = TwaterK * $46binary_add.22 ['$46binary_add.22', '$48binary_multiply.23', 'TwaterK']
    $50binary_add.24 = a0 + $48binary_multiply.23 ['$48binary_multiply.23', '$50binary_add.24', 'a0']
    $52return_value.25 = cast(value=$50binary_add.24) ['$50binary_add.24', '$52return_value.25']
    return $52return_value.25                ['$52return_value.25']

DEBUG    2023-08-19 15:21:02,993: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:02,994: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3319A7C0>
DEBUG    2023-08-19 15:21:02,994: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2023-08-19 15:21:02,994: on stmt: a0 = arg(1, name=a0)
DEBUG    2023-08-19 15:21:02,994: on stmt: a1 = arg(2, name=a1)
DEBUG    2023-08-19 15:21:02,994: on stmt: a2 = arg(3, name=a2)
DEBUG    2023-08-19 15:21:02,994: on stmt: a3 = arg(4, name=a3)
DEBUG    2023-08-19 15:21:02,994: on stmt: a4 = arg(5, name=a4)
DEBUG    2023-08-19 15:21:02,994: on stmt: a5 = arg(6, name=a5)
DEBUG    2023-08-19 15:21:02,994: on stmt: a6 = arg(7, name=a6)
DEBUG    2023-08-19 15:21:02,995: on stmt: $28binary_multiply.13 = TwaterK * a6
DEBUG    2023-08-19 15:21:02,995: on stmt: $30binary_add.14 = a5 + $28binary_multiply.13
DEBUG    2023-08-19 15:21:02,995: on stmt: $32binary_multiply.15 = TwaterK * $30binary_add.14
DEBUG    2023-08-19 15:21:02,995: on stmt: $34binary_add.16 = a4 + $32binary_multiply.15
DEBUG    2023-08-19 15:21:02,995: on stmt: $36binary_multiply.17 = TwaterK * $34binary_add.16
DEBUG    2023-08-19 15:21:02,995: on stmt: $38binary_add.18 = a3 + $36binary_multiply.17
DEBUG    2023-08-19 15:21:02,995: on stmt: $40binary_multiply.19 = TwaterK * $38binary_add.18
DEBUG    2023-08-19 15:21:02,995: on stmt: $42binary_add.20 = a2 + $40binary_multiply.19
DEBUG    2023-08-19 15:21:02,996: on stmt: $44binary_multiply.21 = TwaterK * $42binary_add.20
DEBUG    2023-08-19 15:21:02,996: on stmt: $46binary_add.22 = a1 + $44binary_multiply.21
DEBUG    2023-08-19 15:21:02,996: on stmt: $48binary_multiply.23 = TwaterK * $46binary_add.22
DEBUG    2023-08-19 15:21:02,996: on stmt: $50binary_add.24 = a0 + $48binary_multiply.23
DEBUG    2023-08-19 15:21:02,996: on stmt: $52return_value.25 = cast(value=$50binary_add.24)
DEBUG    2023-08-19 15:21:02,996: on stmt: return $52return_value.25
DEBUG    2023-08-19 15:21:02,997: defs defaultdict(<class 'list'>,
            {'$28binary_multiply.13': [<numba.core.ir.Assign object at 0x0000025F336CA160>],
             '$30binary_add.14': [<numba.core.ir.Assign object at 0x0000025F336CABB0>],
             '$32binary_multiply.15': [<numba.core.ir.Assign object at 0x0000025F33575EB0>],
             '$34binary_add.16': [<numba.core.ir.Assign object at 0x0000025F33275D60>],
             '$36binary_multiply.17': [<numba.core.ir.Assign object at 0x0000025F3357A550>],
             '$38binary_add.18': [<numba.core.ir.Assign object at 0x0000025F33573910>],
             '$40binary_multiply.19': [<numba.core.ir.Assign object at 0x0000025F33573F10>],
             '$42binary_add.20': [<numba.core.ir.Assign object at 0x0000025F3327DD60>],
             '$44binary_multiply.21': [<numba.core.ir.Assign object at 0x0000025F335D06A0>],
             '$46binary_add.22': [<numba.core.ir.Assign object at 0x0000025F336CAD60>],
             '$48binary_multiply.23': [<numba.core.ir.Assign object at 0x0000025F336CAAF0>],
             '$50binary_add.24': [<numba.core.ir.Assign object at 0x0000025F3376C400>],
             '$52return_value.25': [<numba.core.ir.Assign object at 0x0000025F3376CA00>],
             'TwaterK': [<numba.core.ir.Assign object at 0x0000025F33154A90>],
             'a0': [<numba.core.ir.Assign object at 0x0000025F3327DA60>],
             'a1': [<numba.core.ir.Assign object at 0x0000025F335756A0>],
             'a2': [<numba.core.ir.Assign object at 0x0000025F335FACD0>],
             'a3': [<numba.core.ir.Assign object at 0x0000025F334F2A60>],
             'a4': [<numba.core.ir.Assign object at 0x0000025F332C66A0>],
             'a5': [<numba.core.ir.Assign object at 0x0000025F332C6E20>],
             'a6': [<numba.core.ir.Assign object at 0x0000025F33748A60>]})
DEBUG    2023-08-19 15:21:02,997: SSA violators set()
DEBUG    2023-08-19 15:21:03,083: bytecode dump:
>          0	NOP(arg=None, lineno=135)
           2	LOAD_FAST(arg=1, lineno=135)
           4	LOAD_FAST(arg=2, lineno=135)
           6	BINARY_MULTIPLY(arg=None, lineno=135)
           8	LOAD_FAST(arg=0, lineno=135)
          10	LOAD_CONST(arg=1, lineno=135)
          12	BINARY_POWER(arg=None, lineno=135)
          14	BINARY_MULTIPLY(arg=None, lineno=135)
          16	RETURN_VALUE(arg=None, lineno=135)
DEBUG    2023-08-19 15:21:03,083: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,083: stack: []
DEBUG    2023-08-19 15:21:03,083: dispatch pc=0, inst=NOP(arg=None, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack []
DEBUG    2023-08-19 15:21:03,083: dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack []
DEBUG    2023-08-19 15:21:03,083: dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack ['$emissivity_water2.0']
DEBUG    2023-08-19 15:21:03,083: dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack ['$emissivity_water2.0', '$stefan_boltzmann4.1']
DEBUG    2023-08-19 15:21:03,083: dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack ['$6binary_multiply.2']
DEBUG    2023-08-19 15:21:03,083: dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack ['$6binary_multiply.2', '$TwaterK8.3']
DEBUG    2023-08-19 15:21:03,083: dispatch pc=12, inst=BINARY_POWER(arg=None, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack ['$6binary_multiply.2', '$TwaterK8.3', '$const10.4']
DEBUG    2023-08-19 15:21:03,083: dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack ['$6binary_multiply.2', '$12binary_power.5']
DEBUG    2023-08-19 15:21:03,083: dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=135)
DEBUG    2023-08-19 15:21:03,083: stack ['$14binary_multiply.6']
DEBUG    2023-08-19 15:21:03,083: end state. edges=[]
DEBUG    2023-08-19 15:21:03,092: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:03,092: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:03,092: defmap: {}
DEBUG    2023-08-19 15:21:03,092: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,092: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,092: keep phismap: {}
DEBUG    2023-08-19 15:21:03,092: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:03,092: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:03,092: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$emissivity_water2.0'}), (4, {'res': '$stefan_boltzmann4.1'}), (6, {'lhs': '$emissivity_water2.0', 'rhs': '$stefan_boltzmann4.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$TwaterK8.3'}), (10, {'res': '$const10.4'}), (12, {'lhs': '$TwaterK8.3', 'rhs': '$const10.4', 'res': '$12binary_power.5'}), (14, {'lhs': '$6binary_multiply.2', 'rhs': '$12binary_power.5', 'res': '$14binary_multiply.6'}), (16, {'retval': '$14binary_multiply.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:03,092: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    emissivity_water = arg(1, name=emissivity_water) ['emissivity_water']
    stefan_boltzmann = arg(2, name=stefan_boltzmann) ['stefan_boltzmann']
    $6binary_multiply.2 = emissivity_water * stefan_boltzmann ['$6binary_multiply.2', 'emissivity_water', 'stefan_boltzmann']
    $const10.4 = const(float, 4.0)           ['$const10.4']
    $12binary_power.5 = TwaterK ** $const10.4 ['$12binary_power.5', '$const10.4', 'TwaterK']
    $14binary_multiply.6 = $6binary_multiply.2 * $12binary_power.5 ['$12binary_power.5', '$14binary_multiply.6', '$6binary_multiply.2']
    $16return_value.7 = cast(value=$14binary_multiply.6) ['$14binary_multiply.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

DEBUG    2023-08-19 15:21:03,094: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:03,094: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3357A790>
DEBUG    2023-08-19 15:21:03,094: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2023-08-19 15:21:03,094: on stmt: emissivity_water = arg(1, name=emissivity_water)
DEBUG    2023-08-19 15:21:03,094: on stmt: stefan_boltzmann = arg(2, name=stefan_boltzmann)
DEBUG    2023-08-19 15:21:03,094: on stmt: $6binary_multiply.2 = emissivity_water * stefan_boltzmann
DEBUG    2023-08-19 15:21:03,094: on stmt: $const10.4 = const(float, 4.0)
DEBUG    2023-08-19 15:21:03,094: on stmt: $12binary_power.5 = TwaterK ** $const10.4
DEBUG    2023-08-19 15:21:03,094: on stmt: $14binary_multiply.6 = $6binary_multiply.2 * $12binary_power.5
DEBUG    2023-08-19 15:21:03,094: on stmt: $16return_value.7 = cast(value=$14binary_multiply.6)
DEBUG    2023-08-19 15:21:03,094: on stmt: return $16return_value.7
DEBUG    2023-08-19 15:21:03,094: defs defaultdict(<class 'list'>,
            {'$12binary_power.5': [<numba.core.ir.Assign object at 0x0000025F3337C9A0>],
             '$14binary_multiply.6': [<numba.core.ir.Assign object at 0x0000025F3337CC40>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x0000025F3337CB80>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x0000025F3366F6D0>],
             '$const10.4': [<numba.core.ir.Assign object at 0x0000025F3337CE50>],
             'TwaterK': [<numba.core.ir.Assign object at 0x0000025F3366FDF0>],
             'emissivity_water': [<numba.core.ir.Assign object at 0x0000025F3366FE50>],
             'stefan_boltzmann': [<numba.core.ir.Assign object at 0x0000025F3366FD00>]})
DEBUG    2023-08-19 15:21:03,094: SSA violators set()
DEBUG    2023-08-19 15:21:03,149: bytecode dump:
>          0	NOP(arg=None, lineno=253)
           2	LOAD_CONST(arg=1, lineno=253)
           4	LOAD_FAST(arg=1, lineno=253)
           6	BINARY_MULTIPLY(arg=None, lineno=253)
           8	LOAD_FAST(arg=2, lineno=253)
          10	LOAD_FAST(arg=1, lineno=253)
          12	BINARY_SUBTRACT(arg=None, lineno=253)
          14	BINARY_TRUE_DIVIDE(arg=None, lineno=253)
          16	STORE_FAST(arg=3, lineno=253)
          18	LOAD_CONST(arg=2, lineno=254)
          20	LOAD_FAST(arg=2, lineno=254)
          22	LOAD_FAST(arg=0, lineno=254)
          24	BINARY_TRUE_DIVIDE(arg=None, lineno=254)
          26	BINARY_MULTIPLY(arg=None, lineno=254)
          28	LOAD_CONST(arg=3, lineno=254)
          30	LOAD_FAST(arg=3, lineno=254)
          32	BINARY_ADD(arg=None, lineno=254)
          34	BINARY_MULTIPLY(arg=None, lineno=254)
          36	LOAD_CONST(arg=3, lineno=254)
          38	LOAD_CONST(arg=4, lineno=254)
          40	LOAD_FAST(arg=3, lineno=254)
          42	BINARY_MULTIPLY(arg=None, lineno=254)
          44	BINARY_ADD(arg=None, lineno=254)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=254)
          48	RETURN_VALUE(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,149: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,149: stack: []
DEBUG    2023-08-19 15:21:03,149: dispatch pc=0, inst=NOP(arg=None, lineno=253)
DEBUG    2023-08-19 15:21:03,149: stack []
DEBUG    2023-08-19 15:21:03,149: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=253)
DEBUG    2023-08-19 15:21:03,149: stack []
DEBUG    2023-08-19 15:21:03,149: dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=253)
DEBUG    2023-08-19 15:21:03,150: stack ['$const2.0']
DEBUG    2023-08-19 15:21:03,150: dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=253)
DEBUG    2023-08-19 15:21:03,150: stack ['$const2.0', '$esat_mb4.1']
DEBUG    2023-08-19 15:21:03,150: dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=253)
DEBUG    2023-08-19 15:21:03,150: stack ['$6binary_multiply.2']
DEBUG    2023-08-19 15:21:03,150: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=253)
DEBUG    2023-08-19 15:21:03,150: stack ['$6binary_multiply.2', '$pressure_mb8.3']
DEBUG    2023-08-19 15:21:03,150: dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=253)
DEBUG    2023-08-19 15:21:03,150: stack ['$6binary_multiply.2', '$pressure_mb8.3', '$esat_mb10.4']
DEBUG    2023-08-19 15:21:03,150: dispatch pc=14, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=253)
DEBUG    2023-08-19 15:21:03,150: stack ['$6binary_multiply.2', '$12binary_subtract.5']
DEBUG    2023-08-19 15:21:03,150: dispatch pc=16, inst=STORE_FAST(arg=3, lineno=253)
DEBUG    2023-08-19 15:21:03,150: stack ['$14binary_true_divide.6']
DEBUG    2023-08-19 15:21:03,151: dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=254)
DEBUG    2023-08-19 15:21:03,151: stack []
DEBUG    2023-08-19 15:21:03,151: dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=254)
DEBUG    2023-08-19 15:21:03,151: stack ['$const18.7']
DEBUG    2023-08-19 15:21:03,151: dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=254)
DEBUG    2023-08-19 15:21:03,151: stack ['$const18.7', '$pressure_mb20.8']
DEBUG    2023-08-19 15:21:03,151: dispatch pc=24, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,151: stack ['$const18.7', '$pressure_mb20.8', '$TwaterK22.9']
DEBUG    2023-08-19 15:21:03,151: dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,151: stack ['$const18.7', '$24binary_true_divide.10']
DEBUG    2023-08-19 15:21:03,151: dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=254)
DEBUG    2023-08-19 15:21:03,151: stack ['$26binary_multiply.11']
DEBUG    2023-08-19 15:21:03,151: dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=254)
DEBUG    2023-08-19 15:21:03,151: stack ['$26binary_multiply.11', '$const28.12']
DEBUG    2023-08-19 15:21:03,152: dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,152: stack ['$26binary_multiply.11', '$const28.12', '$mixing_ratio_sat30.13']
DEBUG    2023-08-19 15:21:03,152: dispatch pc=34, inst=BINARY_MULTIPLY(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,152: stack ['$26binary_multiply.11', '$32binary_add.14']
DEBUG    2023-08-19 15:21:03,152: dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=254)
DEBUG    2023-08-19 15:21:03,152: stack ['$34binary_multiply.15']
DEBUG    2023-08-19 15:21:03,152: dispatch pc=38, inst=LOAD_CONST(arg=4, lineno=254)
DEBUG    2023-08-19 15:21:03,152: stack ['$34binary_multiply.15', '$const36.16']
DEBUG    2023-08-19 15:21:03,152: dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=254)
DEBUG    2023-08-19 15:21:03,152: stack ['$34binary_multiply.15', '$const36.16', '$const38.17']
DEBUG    2023-08-19 15:21:03,152: dispatch pc=42, inst=BINARY_MULTIPLY(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,152: stack ['$34binary_multiply.15', '$const36.16', '$const38.17', '$mixing_ratio_sat40.18']
DEBUG    2023-08-19 15:21:03,152: dispatch pc=44, inst=BINARY_ADD(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,153: stack ['$34binary_multiply.15', '$const36.16', '$42binary_multiply.19']
DEBUG    2023-08-19 15:21:03,153: dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,153: stack ['$34binary_multiply.15', '$44binary_add.20']
DEBUG    2023-08-19 15:21:03,153: dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=254)
DEBUG    2023-08-19 15:21:03,153: stack ['$46binary_true_divide.21']
DEBUG    2023-08-19 15:21:03,153: end state. edges=[]
DEBUG    2023-08-19 15:21:03,153: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:03,153: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:03,153: defmap: {}
DEBUG    2023-08-19 15:21:03,153: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,153: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,153: keep phismap: {}
DEBUG    2023-08-19 15:21:03,153: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:03,154: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:03,154: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$esat_mb4.1'}), (6, {'lhs': '$const2.0', 'rhs': '$esat_mb4.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$pressure_mb8.3'}), (10, {'res': '$esat_mb10.4'}), (12, {'lhs': '$pressure_mb8.3', 'rhs': '$esat_mb10.4', 'res': '$12binary_subtract.5'}), (14, {'lhs': '$6binary_multiply.2', 'rhs': '$12binary_subtract.5', 'res': '$14binary_true_divide.6'}), (16, {'value': '$14binary_true_divide.6'}), (18, {'res': '$const18.7'}), (20, {'res': '$pressure_mb20.8'}), (22, {'res': '$TwaterK22.9'}), (24, {'lhs': '$pressure_mb20.8', 'rhs': '$TwaterK22.9', 'res': '$24binary_true_divide.10'}), (26, {'lhs': '$const18.7', 'rhs': '$24binary_true_divide.10', 'res': '$26binary_multiply.11'}), (28, {'res': '$const28.12'}), (30, {'res': '$mixing_ratio_sat30.13'}), (32, {'lhs': '$const28.12', 'rhs': '$mixing_ratio_sat30.13', 'res': '$32binary_add.14'}), (34, {'lhs': '$26binary_multiply.11', 'rhs': '$32binary_add.14', 'res': '$34binary_multiply.15'}), (36, {'res': '$const36.16'}), (38, {'res': '$const38.17'}), (40, {'res': '$mixing_ratio_sat40.18'}), (42, {'lhs': '$const38.17', 'rhs': '$mixing_ratio_sat40.18', 'res': '$42binary_multiply.19'}), (44, {'lhs': '$const36.16', 'rhs': '$42binary_multiply.19', 'res': '$44binary_add.20'}), (46, {'lhs': '$34binary_multiply.15', 'rhs': '$44binary_add.20', 'res': '$46binary_true_divide.21'}), (48, {'retval': '$46binary_true_divide.21', 'castval': '$48return_value.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:03,155: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    esat_mb = arg(1, name=esat_mb)           ['esat_mb']
    pressure_mb = arg(2, name=pressure_mb)   ['pressure_mb']
    $const2.0 = const(float, 0.622)          ['$const2.0']
    $6binary_multiply.2 = $const2.0 * esat_mb ['$6binary_multiply.2', '$const2.0', 'esat_mb']
    $12binary_subtract.5 = pressure_mb - esat_mb ['$12binary_subtract.5', 'esat_mb', 'pressure_mb']
    mixing_ratio_sat = $6binary_multiply.2 / $12binary_subtract.5 ['$12binary_subtract.5', '$6binary_multiply.2', 'mixing_ratio_sat']
    $const18.7 = const(float, 0.348)         ['$const18.7']
    $24binary_true_divide.10 = pressure_mb / TwaterK ['$24binary_true_divide.10', 'TwaterK', 'pressure_mb']
    $26binary_multiply.11 = $const18.7 * $24binary_true_divide.10 ['$24binary_true_divide.10', '$26binary_multiply.11', '$const18.7']
    $const28.12 = const(float, 1.0)          ['$const28.12']
    $32binary_add.14 = $const28.12 + mixing_ratio_sat ['$32binary_add.14', '$const28.12', 'mixing_ratio_sat']
    $34binary_multiply.15 = $26binary_multiply.11 * $32binary_add.14 ['$26binary_multiply.11', '$32binary_add.14', '$34binary_multiply.15']
    $const36.16 = const(float, 1.0)          ['$const36.16']
    $const38.17 = const(float, 1.61)         ['$const38.17']
    $42binary_multiply.19 = $const38.17 * mixing_ratio_sat ['$42binary_multiply.19', '$const38.17', 'mixing_ratio_sat']
    $44binary_add.20 = $const36.16 + $42binary_multiply.19 ['$42binary_multiply.19', '$44binary_add.20', '$const36.16']
    $46binary_true_divide.21 = $34binary_multiply.15 / $44binary_add.20 ['$34binary_multiply.15', '$44binary_add.20', '$46binary_true_divide.21']
    $48return_value.22 = cast(value=$46binary_true_divide.21) ['$46binary_true_divide.21', '$48return_value.22']
    return $48return_value.22                ['$48return_value.22']

DEBUG    2023-08-19 15:21:03,157: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:03,158: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F3365B0D0>
DEBUG    2023-08-19 15:21:03,158: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2023-08-19 15:21:03,158: on stmt: esat_mb = arg(1, name=esat_mb)
DEBUG    2023-08-19 15:21:03,158: on stmt: pressure_mb = arg(2, name=pressure_mb)
DEBUG    2023-08-19 15:21:03,158: on stmt: $const2.0 = const(float, 0.622)
DEBUG    2023-08-19 15:21:03,158: on stmt: $6binary_multiply.2 = $const2.0 * esat_mb
DEBUG    2023-08-19 15:21:03,158: on stmt: $12binary_subtract.5 = pressure_mb - esat_mb
DEBUG    2023-08-19 15:21:03,158: on stmt: mixing_ratio_sat = $6binary_multiply.2 / $12binary_subtract.5
DEBUG    2023-08-19 15:21:03,158: on stmt: $const18.7 = const(float, 0.348)
DEBUG    2023-08-19 15:21:03,158: on stmt: $24binary_true_divide.10 = pressure_mb / TwaterK
DEBUG    2023-08-19 15:21:03,158: on stmt: $26binary_multiply.11 = $const18.7 * $24binary_true_divide.10
DEBUG    2023-08-19 15:21:03,158: on stmt: $const28.12 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,159: on stmt: $32binary_add.14 = $const28.12 + mixing_ratio_sat
DEBUG    2023-08-19 15:21:03,159: on stmt: $34binary_multiply.15 = $26binary_multiply.11 * $32binary_add.14
DEBUG    2023-08-19 15:21:03,159: on stmt: $const36.16 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,159: on stmt: $const38.17 = const(float, 1.61)
DEBUG    2023-08-19 15:21:03,159: on stmt: $42binary_multiply.19 = $const38.17 * mixing_ratio_sat
DEBUG    2023-08-19 15:21:03,159: on stmt: $44binary_add.20 = $const36.16 + $42binary_multiply.19
DEBUG    2023-08-19 15:21:03,159: on stmt: $46binary_true_divide.21 = $34binary_multiply.15 / $44binary_add.20
DEBUG    2023-08-19 15:21:03,159: on stmt: $48return_value.22 = cast(value=$46binary_true_divide.21)
DEBUG    2023-08-19 15:21:03,159: on stmt: return $48return_value.22
DEBUG    2023-08-19 15:21:03,160: defs defaultdict(<class 'list'>,
            {'$12binary_subtract.5': [<numba.core.ir.Assign object at 0x0000025F336A3160>],
             '$24binary_true_divide.10': [<numba.core.ir.Assign object at 0x0000025F335FF6D0>],
             '$26binary_multiply.11': [<numba.core.ir.Assign object at 0x0000025F335FFAC0>],
             '$32binary_add.14': [<numba.core.ir.Assign object at 0x0000025F3326B550>],
             '$34binary_multiply.15': [<numba.core.ir.Assign object at 0x0000025F3326B310>],
             '$42binary_multiply.19': [<numba.core.ir.Assign object at 0x0000025F33042C10>],
             '$44binary_add.20': [<numba.core.ir.Assign object at 0x0000025F31679670>],
             '$46binary_true_divide.21': [<numba.core.ir.Assign object at 0x0000025F336ADD00>],
             '$48return_value.22': [<numba.core.ir.Assign object at 0x0000025F336AD550>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x0000025F336A35B0>],
             '$const18.7': [<numba.core.ir.Assign object at 0x0000025F336A3BE0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000025F336A3970>],
             '$const28.12': [<numba.core.ir.Assign object at 0x0000025F3326B700>],
             '$const36.16': [<numba.core.ir.Assign object at 0x0000025F3326B1C0>],
             '$const38.17': [<numba.core.ir.Assign object at 0x0000025F3336D3D0>],
             'TwaterK': [<numba.core.ir.Assign object at 0x0000025F33706D00>],
             'esat_mb': [<numba.core.ir.Assign object at 0x0000025F33706850>],
             'mixing_ratio_sat': [<numba.core.ir.Assign object at 0x0000025F336A31F0>],
             'pressure_mb': [<numba.core.ir.Assign object at 0x0000025F3366FCA0>]})
DEBUG    2023-08-19 15:21:03,160: SSA violators set()
DEBUG    2023-08-19 15:21:03,246: bytecode dump:
>          0	NOP(arg=None, lineno=186)
           2	LOAD_CONST(arg=1, lineno=186)
           4	STORE_FAST(arg=4, lineno=186)
           6	LOAD_FAST(arg=3, lineno=187)
           8	LOAD_FAST(arg=2, lineno=187)
          10	LOAD_FAST(arg=1, lineno=187)
          12	BINARY_SUBTRACT(arg=None, lineno=187)
          14	BINARY_MULTIPLY(arg=None, lineno=187)
          16	LOAD_CONST(arg=2, lineno=188)
          18	BINARY_MULTIPLY(arg=None, lineno=187)
          20	LOAD_FAST(arg=2, lineno=188)
          22	LOAD_FAST(arg=0, lineno=188)
          24	LOAD_CONST(arg=2, lineno=188)
          26	BINARY_POWER(arg=None, lineno=188)
          28	BINARY_MULTIPLY(arg=None, lineno=188)
          30	BINARY_TRUE_DIVIDE(arg=None, lineno=187)
          32	STORE_FAST(arg=5, lineno=187)
          34	LOAD_FAST(arg=5, lineno=191)
          36	LOAD_CONST(arg=2, lineno=191)
          38	COMPARE_OP(arg=4, lineno=191)
          40	POP_JUMP_IF_FALSE(arg=46, lineno=191)
          42	LOAD_CONST(arg=2, lineno=192)
          44	STORE_FAST(arg=5, lineno=192)
>         46	LOAD_FAST(arg=5, lineno=193)
          48	LOAD_CONST(arg=3, lineno=193)
          50	COMPARE_OP(arg=0, lineno=193)
          52	POP_JUMP_IF_FALSE(arg=58, lineno=193)
          54	LOAD_CONST(arg=3, lineno=194)
          56	STORE_FAST(arg=5, lineno=194)
>         58	LOAD_FAST(arg=5, lineno=196)
          60	LOAD_CONST(arg=1, lineno=196)
          62	COMPARE_OP(arg=0, lineno=196)
          64	POP_JUMP_IF_FALSE(arg=98, lineno=196)
          66	LOAD_FAST(arg=5, lineno=197)
          68	LOAD_CONST(arg=4, lineno=197)
          70	COMPARE_OP(arg=5, lineno=197)
          72	POP_JUMP_IF_FALSE(arg=80, lineno=197)
          74	LOAD_CONST(arg=5, lineno=199)
          76	STORE_FAST(arg=4, lineno=199)
          78	JUMP_ABSOLUTE(arg=128, lineno=199)
>         80	LOAD_CONST(arg=5, lineno=202)
          82	LOAD_CONST(arg=6, lineno=202)
          84	LOAD_FAST(arg=5, lineno=202)
          86	BINARY_MULTIPLY(arg=None, lineno=202)
          88	BINARY_SUBTRACT(arg=None, lineno=202)
          90	LOAD_CONST(arg=7, lineno=202)
          92	BINARY_POWER(arg=None, lineno=202)
          94	STORE_FAST(arg=4, lineno=202)
          96	JUMP_FORWARD(arg=30, lineno=202)
>         98	LOAD_FAST(arg=5, lineno=204)
         100	LOAD_CONST(arg=8, lineno=204)
         102	COMPARE_OP(arg=1, lineno=204)
         104	POP_JUMP_IF_FALSE(arg=112, lineno=204)
         106	LOAD_CONST(arg=5, lineno=206)
         108	STORE_FAST(arg=4, lineno=206)
         110	JUMP_FORWARD(arg=16, lineno=206)
>        112	LOAD_CONST(arg=5, lineno=209)
         114	LOAD_CONST(arg=9, lineno=209)
         116	LOAD_FAST(arg=5, lineno=209)
         118	BINARY_MULTIPLY(arg=None, lineno=209)
         120	BINARY_ADD(arg=None, lineno=209)
         122	LOAD_CONST(arg=10, lineno=209)
         124	BINARY_POWER(arg=None, lineno=209)
         126	STORE_FAST(arg=4, lineno=209)
>        128	LOAD_FAST(arg=5, lineno=210)
         130	LOAD_FAST(arg=4, lineno=210)
         132	BUILD_TUPLE(arg=2, lineno=210)
         134	RETURN_VALUE(arg=None, lineno=210)
DEBUG    2023-08-19 15:21:03,246: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,246: stack: []
DEBUG    2023-08-19 15:21:03,246: dispatch pc=0, inst=NOP(arg=None, lineno=186)
DEBUG    2023-08-19 15:21:03,246: stack []
DEBUG    2023-08-19 15:21:03,246: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=186)
DEBUG    2023-08-19 15:21:03,246: stack []
DEBUG    2023-08-19 15:21:03,247: dispatch pc=4, inst=STORE_FAST(arg=4, lineno=186)
DEBUG    2023-08-19 15:21:03,247: stack ['$const2.0']
DEBUG    2023-08-19 15:21:03,247: dispatch pc=6, inst=LOAD_FAST(arg=3, lineno=187)
DEBUG    2023-08-19 15:21:03,247: stack []
DEBUG    2023-08-19 15:21:03,247: dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=187)
DEBUG    2023-08-19 15:21:03,247: stack ['$gravity6.1']
DEBUG    2023-08-19 15:21:03,247: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=187)
DEBUG    2023-08-19 15:21:03,247: stack ['$gravity6.1', '$density_air8.2']
DEBUG    2023-08-19 15:21:03,248: dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=187)
DEBUG    2023-08-19 15:21:03,248: stack ['$gravity6.1', '$density_air8.2', '$density_air_sat10.3']
DEBUG    2023-08-19 15:21:03,248: dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=187)
DEBUG    2023-08-19 15:21:03,248: stack ['$gravity6.1', '$12binary_subtract.4']
DEBUG    2023-08-19 15:21:03,248: dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=188)
DEBUG    2023-08-19 15:21:03,248: stack ['$14binary_multiply.5']
DEBUG    2023-08-19 15:21:03,248: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=187)
DEBUG    2023-08-19 15:21:03,248: stack ['$14binary_multiply.5', '$const16.6']
DEBUG    2023-08-19 15:21:03,248: dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=188)
DEBUG    2023-08-19 15:21:03,248: stack ['$18binary_multiply.7']
DEBUG    2023-08-19 15:21:03,248: dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=188)
DEBUG    2023-08-19 15:21:03,249: stack ['$18binary_multiply.7', '$density_air20.8']
DEBUG    2023-08-19 15:21:03,249: dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=188)
DEBUG    2023-08-19 15:21:03,249: stack ['$18binary_multiply.7', '$density_air20.8', '$wind_speed22.9']
DEBUG    2023-08-19 15:21:03,249: dispatch pc=26, inst=BINARY_POWER(arg=None, lineno=188)
DEBUG    2023-08-19 15:21:03,249: stack ['$18binary_multiply.7', '$density_air20.8', '$wind_speed22.9', '$const24.10']
DEBUG    2023-08-19 15:21:03,249: dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=188)
DEBUG    2023-08-19 15:21:03,249: stack ['$18binary_multiply.7', '$density_air20.8', '$26binary_power.11']
DEBUG    2023-08-19 15:21:03,249: dispatch pc=30, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=187)
DEBUG    2023-08-19 15:21:03,249: stack ['$18binary_multiply.7', '$28binary_multiply.12']
DEBUG    2023-08-19 15:21:03,249: dispatch pc=32, inst=STORE_FAST(arg=5, lineno=187)
DEBUG    2023-08-19 15:21:03,249: stack ['$30binary_true_divide.13']
DEBUG    2023-08-19 15:21:03,249: dispatch pc=34, inst=LOAD_FAST(arg=5, lineno=191)
DEBUG    2023-08-19 15:21:03,249: stack []
DEBUG    2023-08-19 15:21:03,250: dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=191)
DEBUG    2023-08-19 15:21:03,250: stack ['$Ri_No34.14']
DEBUG    2023-08-19 15:21:03,250: dispatch pc=38, inst=COMPARE_OP(arg=4, lineno=191)
DEBUG    2023-08-19 15:21:03,250: stack ['$Ri_No34.14', '$const36.15']
DEBUG    2023-08-19 15:21:03,250: dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=46, lineno=191)
DEBUG    2023-08-19 15:21:03,250: stack ['$38compare_op.16']
DEBUG    2023-08-19 15:21:03,250: end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,250: pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,250: stack: []
DEBUG    2023-08-19 15:21:03,250: dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=192)
DEBUG    2023-08-19 15:21:03,250: stack []
DEBUG    2023-08-19 15:21:03,250: dispatch pc=44, inst=STORE_FAST(arg=5, lineno=192)
DEBUG    2023-08-19 15:21:03,250: stack ['$const42.0']
DEBUG    2023-08-19 15:21:03,250: end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,251: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,251: stack: []
DEBUG    2023-08-19 15:21:03,251: dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=193)
DEBUG    2023-08-19 15:21:03,251: stack []
DEBUG    2023-08-19 15:21:03,251: dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=193)
DEBUG    2023-08-19 15:21:03,251: stack ['$Ri_No46.0']
DEBUG    2023-08-19 15:21:03,251: dispatch pc=50, inst=COMPARE_OP(arg=0, lineno=193)
DEBUG    2023-08-19 15:21:03,251: stack ['$Ri_No46.0', '$const48.1']
DEBUG    2023-08-19 15:21:03,251: dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=58, lineno=193)
DEBUG    2023-08-19 15:21:03,251: stack ['$50compare_op.2']
DEBUG    2023-08-19 15:21:03,251: end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,251: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,252: pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,252: stack: []
DEBUG    2023-08-19 15:21:03,252: dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=194)
DEBUG    2023-08-19 15:21:03,252: stack []
DEBUG    2023-08-19 15:21:03,252: dispatch pc=56, inst=STORE_FAST(arg=5, lineno=194)
DEBUG    2023-08-19 15:21:03,252: stack ['$const54.0']
DEBUG    2023-08-19 15:21:03,252: end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,252: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,252: stack: []
DEBUG    2023-08-19 15:21:03,252: dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=196)
DEBUG    2023-08-19 15:21:03,252: stack []
DEBUG    2023-08-19 15:21:03,252: dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=196)
DEBUG    2023-08-19 15:21:03,252: stack ['$Ri_No58.0']
DEBUG    2023-08-19 15:21:03,252: dispatch pc=62, inst=COMPARE_OP(arg=0, lineno=196)
DEBUG    2023-08-19 15:21:03,253: stack ['$Ri_No58.0', '$const60.1']
DEBUG    2023-08-19 15:21:03,253: dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=98, lineno=196)
DEBUG    2023-08-19 15:21:03,253: stack ['$62compare_op.2']
DEBUG    2023-08-19 15:21:03,253: end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,253: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,253: pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,253: stack: []
DEBUG    2023-08-19 15:21:03,253: dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=197)
DEBUG    2023-08-19 15:21:03,253: stack []
DEBUG    2023-08-19 15:21:03,253: dispatch pc=68, inst=LOAD_CONST(arg=4, lineno=197)
DEBUG    2023-08-19 15:21:03,253: stack ['$Ri_No66.0']
DEBUG    2023-08-19 15:21:03,253: dispatch pc=70, inst=COMPARE_OP(arg=5, lineno=197)
DEBUG    2023-08-19 15:21:03,253: stack ['$Ri_No66.0', '$const68.1']
DEBUG    2023-08-19 15:21:03,254: dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=80, lineno=197)
DEBUG    2023-08-19 15:21:03,254: stack ['$70compare_op.2']
DEBUG    2023-08-19 15:21:03,254: end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,254: pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,254: stack: []
DEBUG    2023-08-19 15:21:03,254: dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=204)
DEBUG    2023-08-19 15:21:03,254: stack []
DEBUG    2023-08-19 15:21:03,254: dispatch pc=100, inst=LOAD_CONST(arg=8, lineno=204)
DEBUG    2023-08-19 15:21:03,254: stack ['$Ri_No98.0']
DEBUG    2023-08-19 15:21:03,254: dispatch pc=102, inst=COMPARE_OP(arg=1, lineno=204)
DEBUG    2023-08-19 15:21:03,254: stack ['$Ri_No98.0', '$const100.1']
DEBUG    2023-08-19 15:21:03,254: dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=112, lineno=204)
DEBUG    2023-08-19 15:21:03,254: stack ['$102compare_op.2']
DEBUG    2023-08-19 15:21:03,254: end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,255: pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,255: stack: []
DEBUG    2023-08-19 15:21:03,255: dispatch pc=74, inst=LOAD_CONST(arg=5, lineno=199)
DEBUG    2023-08-19 15:21:03,255: stack []
DEBUG    2023-08-19 15:21:03,255: dispatch pc=76, inst=STORE_FAST(arg=4, lineno=199)
DEBUG    2023-08-19 15:21:03,255: stack ['$const74.0']
DEBUG    2023-08-19 15:21:03,255: dispatch pc=78, inst=JUMP_ABSOLUTE(arg=128, lineno=199)
DEBUG    2023-08-19 15:21:03,255: stack []
DEBUG    2023-08-19 15:21:03,255: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,255: pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,255: stack: []
DEBUG    2023-08-19 15:21:03,255: dispatch pc=80, inst=LOAD_CONST(arg=5, lineno=202)
DEBUG    2023-08-19 15:21:03,255: stack []
DEBUG    2023-08-19 15:21:03,256: dispatch pc=82, inst=LOAD_CONST(arg=6, lineno=202)
DEBUG    2023-08-19 15:21:03,256: stack ['$const80.0']
DEBUG    2023-08-19 15:21:03,256: dispatch pc=84, inst=LOAD_FAST(arg=5, lineno=202)
DEBUG    2023-08-19 15:21:03,256: stack ['$const80.0', '$const82.1']
DEBUG    2023-08-19 15:21:03,256: dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=202)
DEBUG    2023-08-19 15:21:03,256: stack ['$const80.0', '$const82.1', '$Ri_No84.2']
DEBUG    2023-08-19 15:21:03,256: dispatch pc=88, inst=BINARY_SUBTRACT(arg=None, lineno=202)
DEBUG    2023-08-19 15:21:03,256: stack ['$const80.0', '$86binary_multiply.3']
DEBUG    2023-08-19 15:21:03,256: dispatch pc=90, inst=LOAD_CONST(arg=7, lineno=202)
DEBUG    2023-08-19 15:21:03,256: stack ['$88binary_subtract.4']
DEBUG    2023-08-19 15:21:03,256: dispatch pc=92, inst=BINARY_POWER(arg=None, lineno=202)
DEBUG    2023-08-19 15:21:03,256: stack ['$88binary_subtract.4', '$const90.5']
DEBUG    2023-08-19 15:21:03,256: dispatch pc=94, inst=STORE_FAST(arg=4, lineno=202)
DEBUG    2023-08-19 15:21:03,256: stack ['$92binary_power.6']
DEBUG    2023-08-19 15:21:03,257: dispatch pc=96, inst=JUMP_FORWARD(arg=30, lineno=202)
DEBUG    2023-08-19 15:21:03,257: stack []
DEBUG    2023-08-19 15:21:03,257: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,257: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,257: stack: []
DEBUG    2023-08-19 15:21:03,257: dispatch pc=106, inst=LOAD_CONST(arg=5, lineno=206)
DEBUG    2023-08-19 15:21:03,257: stack []
DEBUG    2023-08-19 15:21:03,257: dispatch pc=108, inst=STORE_FAST(arg=4, lineno=206)
DEBUG    2023-08-19 15:21:03,257: stack ['$const106.0']
DEBUG    2023-08-19 15:21:03,257: dispatch pc=110, inst=JUMP_FORWARD(arg=16, lineno=206)
DEBUG    2023-08-19 15:21:03,257: stack []
DEBUG    2023-08-19 15:21:03,257: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,257: pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,257: stack: []
DEBUG    2023-08-19 15:21:03,258: dispatch pc=112, inst=LOAD_CONST(arg=5, lineno=209)
DEBUG    2023-08-19 15:21:03,258: stack []
DEBUG    2023-08-19 15:21:03,258: dispatch pc=114, inst=LOAD_CONST(arg=9, lineno=209)
DEBUG    2023-08-19 15:21:03,258: stack ['$const112.0']
DEBUG    2023-08-19 15:21:03,258: dispatch pc=116, inst=LOAD_FAST(arg=5, lineno=209)
DEBUG    2023-08-19 15:21:03,258: stack ['$const112.0', '$const114.1']
DEBUG    2023-08-19 15:21:03,258: dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=209)
DEBUG    2023-08-19 15:21:03,258: stack ['$const112.0', '$const114.1', '$Ri_No116.2']
DEBUG    2023-08-19 15:21:03,258: dispatch pc=120, inst=BINARY_ADD(arg=None, lineno=209)
DEBUG    2023-08-19 15:21:03,258: stack ['$const112.0', '$118binary_multiply.3']
DEBUG    2023-08-19 15:21:03,258: dispatch pc=122, inst=LOAD_CONST(arg=10, lineno=209)
DEBUG    2023-08-19 15:21:03,258: stack ['$120binary_add.4']
DEBUG    2023-08-19 15:21:03,258: dispatch pc=124, inst=BINARY_POWER(arg=None, lineno=209)
DEBUG    2023-08-19 15:21:03,258: stack ['$120binary_add.4', '$const122.5']
DEBUG    2023-08-19 15:21:03,259: dispatch pc=126, inst=STORE_FAST(arg=4, lineno=209)
DEBUG    2023-08-19 15:21:03,259: stack ['$124binary_power.6']
DEBUG    2023-08-19 15:21:03,259: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,259: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,259: stack: []
DEBUG    2023-08-19 15:21:03,259: dispatch pc=128, inst=LOAD_FAST(arg=5, lineno=210)
DEBUG    2023-08-19 15:21:03,259: stack []
DEBUG    2023-08-19 15:21:03,259: dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=210)
DEBUG    2023-08-19 15:21:03,259: stack ['$Ri_No128.0']
DEBUG    2023-08-19 15:21:03,259: dispatch pc=132, inst=BUILD_TUPLE(arg=2, lineno=210)
DEBUG    2023-08-19 15:21:03,259: stack ['$Ri_No128.0', '$Ri_fxn130.1']
DEBUG    2023-08-19 15:21:03,259: dispatch pc=134, inst=RETURN_VALUE(arg=None, lineno=210)
DEBUG    2023-08-19 15:21:03,259: stack ['$132build_tuple.2']
DEBUG    2023-08-19 15:21:03,260: end state. edges=[]
DEBUG    2023-08-19 15:21:03,260: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,260: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,260: pending: deque([State(pc_initial=128 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,260: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:03,260: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=128 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:03,260: defmap: {}
DEBUG    2023-08-19 15:21:03,260: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,260: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,261: keep phismap: {}
DEBUG    2023-08-19 15:21:03,261: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:03,261: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:03,261: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$gravity6.1'}), (8, {'res': '$density_air8.2'}), (10, {'res': '$density_air_sat10.3'}), (12, {'lhs': '$density_air8.2', 'rhs': '$density_air_sat10.3', 'res': '$12binary_subtract.4'}), (14, {'lhs': '$gravity6.1', 'rhs': '$12binary_subtract.4', 'res': '$14binary_multiply.5'}), (16, {'res': '$const16.6'}), (18, {'lhs': '$14binary_multiply.5', 'rhs': '$const16.6', 'res': '$18binary_multiply.7'}), (20, {'res': '$density_air20.8'}), (22, {'res': '$wind_speed22.9'}), (24, {'res': '$const24.10'}), (26, {'lhs': '$wind_speed22.9', 'rhs': '$const24.10', 'res': '$26binary_power.11'}), (28, {'lhs': '$density_air20.8', 'rhs': '$26binary_power.11', 'res': '$28binary_multiply.12'}), (30, {'lhs': '$18binary_multiply.7', 'rhs': '$28binary_multiply.12', 'res': '$30binary_true_divide.13'}), (32, {'value': '$30binary_true_divide.13'}), (34, {'res': '$Ri_No34.14'}), (36, {'res': '$const36.15'}), (38, {'lhs': '$Ri_No34.14', 'rhs': '$const36.15', 'res': '$38compare_op.16'}), (40, {'pred': '$38compare_op.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 46: ()})
DEBUG    2023-08-19 15:21:03,261: block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$const42.0'}), (44, {'value': '$const42.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ()})
DEBUG    2023-08-19 15:21:03,261: block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$Ri_No46.0'}), (48, {'res': '$const48.1'}), (50, {'lhs': '$Ri_No46.0', 'rhs': '$const48.1', 'res': '$50compare_op.2'}), (52, {'pred': '$50compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 58: ()})
DEBUG    2023-08-19 15:21:03,261: block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'value': '$const54.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ()})
DEBUG    2023-08-19 15:21:03,261: block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$Ri_No58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$Ri_No58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 98: ()})
DEBUG    2023-08-19 15:21:03,261: block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$Ri_No66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$Ri_No66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 80: ()})
DEBUG    2023-08-19 15:21:03,261: block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2023-08-19 15:21:03,261: block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$const80.0'}), (82, {'res': '$const82.1'}), (84, {'res': '$Ri_No84.2'}), (86, {'lhs': '$const82.1', 'rhs': '$Ri_No84.2', 'res': '$86binary_multiply.3'}), (88, {'lhs': '$const80.0', 'rhs': '$86binary_multiply.3', 'res': '$88binary_subtract.4'}), (90, {'res': '$const90.5'}), (92, {'lhs': '$88binary_subtract.4', 'rhs': '$const90.5', 'res': '$92binary_power.6'}), (94, {'value': '$92binary_power.6'}), (96, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2023-08-19 15:21:03,262: block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$Ri_No98.0'}), (100, {'res': '$const100.1'}), (102, {'lhs': '$Ri_No98.0', 'rhs': '$const100.1', 'res': '$102compare_op.2'}), (104, {'pred': '$102compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 112: ()})
DEBUG    2023-08-19 15:21:03,262: block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$const106.0'}), (108, {'value': '$const106.0'}), (110, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2023-08-19 15:21:03,262: block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$const112.0'}), (114, {'res': '$const114.1'}), (116, {'res': '$Ri_No116.2'}), (118, {'lhs': '$const114.1', 'rhs': '$Ri_No116.2', 'res': '$118binary_multiply.3'}), (120, {'lhs': '$const112.0', 'rhs': '$118binary_multiply.3', 'res': '$120binary_add.4'}), (122, {'res': '$const122.5'}), (124, {'lhs': '$120binary_add.4', 'rhs': '$const122.5', 'res': '$124binary_power.6'}), (126, {'value': '$124binary_power.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2023-08-19 15:21:03,262: block_infos State(pc_initial=128 nstack_initial=0):
AdaptBlockInfo(insts=((128, {'res': '$Ri_No128.0'}), (130, {'res': '$Ri_fxn130.1'}), (132, {'items': ['$Ri_No128.0', '$Ri_fxn130.1'], 'res': '$132build_tuple.2'}), (134, {'retval': '$132build_tuple.2', 'castval': '$134return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:03,266: label 0:
    wind_speed = arg(0, name=wind_speed)     ['wind_speed']
    density_air_sat = arg(1, name=density_air_sat) ['density_air_sat']
    density_air = arg(2, name=density_air)   ['density_air']
    gravity = arg(3, name=gravity)           ['gravity']
    Ri_fxn = const(float, 0.0)               ['Ri_fxn']
    $12binary_subtract.4 = density_air - density_air_sat ['$12binary_subtract.4', 'density_air', 'density_air_sat']
    $14binary_multiply.5 = gravity * $12binary_subtract.4 ['$12binary_subtract.4', '$14binary_multiply.5', 'gravity']
    $const16.6 = const(float, 2.0)           ['$const16.6']
    $18binary_multiply.7 = $14binary_multiply.5 * $const16.6 ['$14binary_multiply.5', '$18binary_multiply.7', '$const16.6']
    $const24.10 = const(float, 2.0)          ['$const24.10']
    $26binary_power.11 = wind_speed ** $const24.10 ['$26binary_power.11', '$const24.10', 'wind_speed']
    $28binary_multiply.12 = density_air * $26binary_power.11 ['$26binary_power.11', '$28binary_multiply.12', 'density_air']
    Ri_No = $18binary_multiply.7 / $28binary_multiply.12 ['$18binary_multiply.7', '$28binary_multiply.12', 'Ri_No']
    $const36.15 = const(float, 2.0)          ['$const36.15']
    $38compare_op.16 = Ri_No > $const36.15   ['$38compare_op.16', '$const36.15', 'Ri_No']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None) ['$38compare_op.16', '$40pred', 'bool40']
    branch $40pred, 42, 46                   ['$40pred']
label 42:
    Ri_No = const(float, 2.0)                ['Ri_No']
    jump 46                                  []
label 46:
    $const48.1 = const(float, -1.0)          ['$const48.1']
    $50compare_op.2 = Ri_No < $const48.1     ['$50compare_op.2', '$const48.1', 'Ri_No']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None) ['$50compare_op.2', '$52pred', 'bool52']
    branch $52pred, 54, 58                   ['$52pred']
label 54:
    Ri_No = const(float, -1.0)               ['Ri_No']
    jump 58                                  []
label 58:
    $const60.1 = const(float, 0.0)           ['$const60.1']
    $62compare_op.2 = Ri_No < $const60.1     ['$62compare_op.2', '$const60.1', 'Ri_No']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 98                   ['$64pred']
label 66:
    $const68.1 = const(float, -0.01)         ['$const68.1']
    $70compare_op.2 = Ri_No >= $const68.1    ['$70compare_op.2', '$const68.1', 'Ri_No']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 80                   ['$72pred']
label 74:
    Ri_fxn = const(float, 1.0)               ['Ri_fxn']
    jump 128                                 []
label 80:
    $const80.0 = const(float, 1.0)           ['$const80.0']
    $const82.1 = const(float, 22.0)          ['$const82.1']
    $86binary_multiply.3 = $const82.1 * Ri_No ['$86binary_multiply.3', '$const82.1', 'Ri_No']
    $88binary_subtract.4 = $const80.0 - $86binary_multiply.3 ['$86binary_multiply.3', '$88binary_subtract.4', '$const80.0']
    $const90.5 = const(float, 0.8)           ['$const90.5']
    Ri_fxn = $88binary_subtract.4 ** $const90.5 ['$88binary_subtract.4', '$const90.5', 'Ri_fxn']
    jump 128                                 []
label 98:
    $const100.1 = const(float, 0.01)         ['$const100.1']
    $102compare_op.2 = Ri_No <= $const100.1  ['$102compare_op.2', '$const100.1', 'Ri_No']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None) ['$102compare_op.2', '$104pred', 'bool104']
    branch $104pred, 106, 112                ['$104pred']
label 106:
    Ri_fxn = const(float, 1.0)               ['Ri_fxn']
    jump 128                                 []
label 112:
    $const112.0 = const(float, 1.0)          ['$const112.0']
    $const114.1 = const(float, 34.0)         ['$const114.1']
    $118binary_multiply.3 = $const114.1 * Ri_No ['$118binary_multiply.3', '$const114.1', 'Ri_No']
    $120binary_add.4 = $const112.0 + $118binary_multiply.3 ['$118binary_multiply.3', '$120binary_add.4', '$const112.0']
    $const122.5 = const(float, -0.8)         ['$const122.5']
    Ri_fxn = $120binary_add.4 ** $const122.5 ['$120binary_add.4', '$const122.5', 'Ri_fxn']
    jump 128                                 []
label 128:
    $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)]) ['$132build_tuple.2', 'Ri_No', 'Ri_fxn']
    $134return_value.3 = cast(value=$132build_tuple.2) ['$132build_tuple.2', '$134return_value.3']
    return $134return_value.3                ['$134return_value.3']

DEBUG    2023-08-19 15:21:03,274: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:03,275: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,275: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2023-08-19 15:21:03,275: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2023-08-19 15:21:03,275: on stmt: density_air = arg(2, name=density_air)
DEBUG    2023-08-19 15:21:03,275: on stmt: gravity = arg(3, name=gravity)
DEBUG    2023-08-19 15:21:03,275: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,275: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2023-08-19 15:21:03,275: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2023-08-19 15:21:03,275: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,275: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2023-08-19 15:21:03,275: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,275: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2023-08-19 15:21:03,275: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2023-08-19 15:21:03,276: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2023-08-19 15:21:03,276: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,276: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2023-08-19 15:21:03,276: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,276: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,276: on stmt: branch $40pred, 42, 46
DEBUG    2023-08-19 15:21:03,276: ==== SSA block analysis pass on 42
DEBUG    2023-08-19 15:21:03,276: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,276: on stmt: Ri_No = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,276: on stmt: jump 46
DEBUG    2023-08-19 15:21:03,276: ==== SSA block analysis pass on 46
DEBUG    2023-08-19 15:21:03,276: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,276: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,276: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2023-08-19 15:21:03,277: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,277: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,277: on stmt: branch $52pred, 54, 58
DEBUG    2023-08-19 15:21:03,277: ==== SSA block analysis pass on 54
DEBUG    2023-08-19 15:21:03,277: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,277: on stmt: Ri_No = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,277: on stmt: jump 58
DEBUG    2023-08-19 15:21:03,277: ==== SSA block analysis pass on 58
DEBUG    2023-08-19 15:21:03,277: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,277: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,277: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2023-08-19 15:21:03,277: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,277: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,278: on stmt: branch $64pred, 66, 98
DEBUG    2023-08-19 15:21:03,278: ==== SSA block analysis pass on 66
DEBUG    2023-08-19 15:21:03,278: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,278: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2023-08-19 15:21:03,278: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2023-08-19 15:21:03,278: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,278: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,278: on stmt: branch $72pred, 74, 80
DEBUG    2023-08-19 15:21:03,278: ==== SSA block analysis pass on 74
DEBUG    2023-08-19 15:21:03,278: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,278: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,279: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,279: ==== SSA block analysis pass on 80
DEBUG    2023-08-19 15:21:03,279: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,279: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,279: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2023-08-19 15:21:03,279: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2023-08-19 15:21:03,279: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2023-08-19 15:21:03,279: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2023-08-19 15:21:03,279: on stmt: Ri_fxn = $88binary_subtract.4 ** $const90.5
DEBUG    2023-08-19 15:21:03,280: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,280: ==== SSA block analysis pass on 98
DEBUG    2023-08-19 15:21:03,280: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,280: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2023-08-19 15:21:03,280: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2023-08-19 15:21:03,280: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,280: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,280: on stmt: branch $104pred, 106, 112
DEBUG    2023-08-19 15:21:03,280: ==== SSA block analysis pass on 106
DEBUG    2023-08-19 15:21:03,280: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,280: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,281: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,281: ==== SSA block analysis pass on 112
DEBUG    2023-08-19 15:21:03,281: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,281: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,281: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2023-08-19 15:21:03,281: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2023-08-19 15:21:03,281: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2023-08-19 15:21:03,281: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2023-08-19 15:21:03,281: on stmt: Ri_fxn = $120binary_add.4 ** $const122.5
DEBUG    2023-08-19 15:21:03,282: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,282: ==== SSA block analysis pass on 128
DEBUG    2023-08-19 15:21:03,282: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33418910>
DEBUG    2023-08-19 15:21:03,282: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)])
DEBUG    2023-08-19 15:21:03,282: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2023-08-19 15:21:03,282: on stmt: return $134return_value.3
DEBUG    2023-08-19 15:21:03,283: defs defaultdict(<class 'list'>,
            {'$102compare_op.2': [<numba.core.ir.Assign object at 0x0000025F332B3400>],
             '$104pred': [<numba.core.ir.Assign object at 0x0000025F332B3670>],
             '$118binary_multiply.3': [<numba.core.ir.Assign object at 0x0000025F332BB040>],
             '$120binary_add.4': [<numba.core.ir.Assign object at 0x0000025F332BB1C0>],
             '$12binary_subtract.4': [<numba.core.ir.Assign object at 0x0000025F335E2D60>],
             '$132build_tuple.2': [<numba.core.ir.Assign object at 0x0000025F332BB940>],
             '$134return_value.3': [<numba.core.ir.Assign object at 0x0000025F332BBA90>],
             '$14binary_multiply.5': [<numba.core.ir.Assign object at 0x0000025F335E24C0>],
             '$18binary_multiply.7': [<numba.core.ir.Assign object at 0x0000025F335D6490>],
             '$26binary_power.11': [<numba.core.ir.Assign object at 0x0000025F335D6340>],
             '$28binary_multiply.12': [<numba.core.ir.Assign object at 0x0000025F335D65E0>],
             '$38compare_op.16': [<numba.core.ir.Assign object at 0x0000025F33653520>],
             '$40pred': [<numba.core.ir.Assign object at 0x0000025F336539A0>],
             '$50compare_op.2': [<numba.core.ir.Assign object at 0x0000025F332BFEE0>],
             '$52pred': [<numba.core.ir.Assign object at 0x0000025F332BF160>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x0000025F332BF580>],
             '$64pred': [<numba.core.ir.Assign object at 0x0000025F332BF3D0>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x0000025F332C2280>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000025F332C24F0>],
             '$86binary_multiply.3': [<numba.core.ir.Assign object at 0x0000025F332C2E80>],
             '$88binary_subtract.4': [<numba.core.ir.Assign object at 0x0000025F332B3040>],
             '$const100.1': [<numba.core.ir.Assign object at 0x0000025F334F0790>],
             '$const112.0': [<numba.core.ir.Assign object at 0x0000025F332B3BB0>],
             '$const114.1': [<numba.core.ir.Assign object at 0x0000025F332B3D30>],
             '$const122.5': [<numba.core.ir.Assign object at 0x0000025F332BB310>],
             '$const16.6': [<numba.core.ir.Assign object at 0x0000025F335D6EB0>],
             '$const24.10': [<numba.core.ir.Assign object at 0x0000025F335D6400>],
             '$const36.15': [<numba.core.ir.Assign object at 0x0000025F333E7B80>],
             '$const48.1': [<numba.core.ir.Assign object at 0x0000025F336C9EB0>],
             '$const60.1': [<numba.core.ir.Assign object at 0x0000025F332BFD90>],
             '$const68.1': [<numba.core.ir.Assign object at 0x0000025F332C20D0>],
             '$const80.0': [<numba.core.ir.Assign object at 0x0000025F332C2A30>],
             '$const82.1': [<numba.core.ir.Assign object at 0x0000025F332C2BB0>],
             '$const90.5': [<numba.core.ir.Assign object at 0x0000025F332B3190>],
             'Ri_No': [<numba.core.ir.Assign object at 0x0000025F335D6640>,
                       <numba.core.ir.Assign object at 0x0000025F335D6760>,
                       <numba.core.ir.Assign object at 0x0000025F332BFA30>],
             'Ri_fxn': [<numba.core.ir.Assign object at 0x0000025F335E2A00>,
                        <numba.core.ir.Assign object at 0x0000025F332C2730>,
                        <numba.core.ir.Assign object at 0x0000025F332B3340>,
                        <numba.core.ir.Assign object at 0x0000025F332B38B0>,
                        <numba.core.ir.Assign object at 0x0000025F332BB4C0>],
             'bool104': [<numba.core.ir.Assign object at 0x0000025F332B3550>],
             'bool40': [<numba.core.ir.Assign object at 0x0000025F336539D0>],
             'bool52': [<numba.core.ir.Assign object at 0x0000025F332BF190>],
             'bool64': [<numba.core.ir.Assign object at 0x0000025F332BF670>],
             'bool72': [<numba.core.ir.Assign object at 0x0000025F332C23D0>],
             'density_air': [<numba.core.ir.Assign object at 0x0000025F335E2850>],
             'density_air_sat': [<numba.core.ir.Assign object at 0x0000025F332E0CD0>],
             'gravity': [<numba.core.ir.Assign object at 0x0000025F335E25E0>],
             'wind_speed': [<numba.core.ir.Assign object at 0x0000025F33418A30>]})
DEBUG    2023-08-19 15:21:03,284: SSA violators {'Ri_fxn', 'Ri_No'}
DEBUG    2023-08-19 15:21:03,284: Fix SSA violator on var Ri_fxn
DEBUG    2023-08-19 15:21:03,284: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:03,284: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,284: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2023-08-19 15:21:03,284: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2023-08-19 15:21:03,284: on stmt: density_air = arg(2, name=density_air)
DEBUG    2023-08-19 15:21:03,284: on stmt: gravity = arg(3, name=gravity)
DEBUG    2023-08-19 15:21:03,284: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,284: first assign: Ri_fxn
DEBUG    2023-08-19 15:21:03,285: replaced with: Ri_fxn = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,285: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2023-08-19 15:21:03,285: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2023-08-19 15:21:03,285: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,285: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2023-08-19 15:21:03,285: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,285: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2023-08-19 15:21:03,285: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2023-08-19 15:21:03,285: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2023-08-19 15:21:03,285: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,286: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2023-08-19 15:21:03,286: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,286: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,286: on stmt: branch $40pred, 42, 46
DEBUG    2023-08-19 15:21:03,286: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:21:03,286: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,286: on stmt: Ri_No = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,286: on stmt: jump 46
DEBUG    2023-08-19 15:21:03,286: ==== SSA block rewrite pass on 46
DEBUG    2023-08-19 15:21:03,287: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,287: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,287: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2023-08-19 15:21:03,287: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,287: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,287: on stmt: branch $52pred, 54, 58
DEBUG    2023-08-19 15:21:03,287: ==== SSA block rewrite pass on 54
DEBUG    2023-08-19 15:21:03,287: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,288: on stmt: Ri_No = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,288: on stmt: jump 58
DEBUG    2023-08-19 15:21:03,288: ==== SSA block rewrite pass on 58
DEBUG    2023-08-19 15:21:03,288: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,288: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,288: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2023-08-19 15:21:03,288: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,288: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,289: on stmt: branch $64pred, 66, 98
DEBUG    2023-08-19 15:21:03,289: ==== SSA block rewrite pass on 66
DEBUG    2023-08-19 15:21:03,289: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,289: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2023-08-19 15:21:03,289: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2023-08-19 15:21:03,289: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,289: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,289: on stmt: branch $72pred, 74, 80
DEBUG    2023-08-19 15:21:03,289: ==== SSA block rewrite pass on 74
DEBUG    2023-08-19 15:21:03,290: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,290: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,290: replaced with: Ri_fxn.1 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,290: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,290: ==== SSA block rewrite pass on 80
DEBUG    2023-08-19 15:21:03,290: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,290: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,290: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2023-08-19 15:21:03,290: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2023-08-19 15:21:03,291: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2023-08-19 15:21:03,291: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2023-08-19 15:21:03,291: on stmt: Ri_fxn = $88binary_subtract.4 ** $const90.5
DEBUG    2023-08-19 15:21:03,291: replaced with: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2023-08-19 15:21:03,291: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,291: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:03,291: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,291: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2023-08-19 15:21:03,291: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2023-08-19 15:21:03,291: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,291: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,292: on stmt: branch $104pred, 106, 112
DEBUG    2023-08-19 15:21:03,292: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:03,292: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,292: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,292: replaced with: Ri_fxn.3 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,292: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,292: ==== SSA block rewrite pass on 112
DEBUG    2023-08-19 15:21:03,292: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,292: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,292: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2023-08-19 15:21:03,293: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2023-08-19 15:21:03,293: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2023-08-19 15:21:03,293: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2023-08-19 15:21:03,293: on stmt: Ri_fxn = $120binary_add.4 ** $const122.5
DEBUG    2023-08-19 15:21:03,293: replaced with: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2023-08-19 15:21:03,293: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,293: ==== SSA block rewrite pass on 128
DEBUG    2023-08-19 15:21:03,293: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,293: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)])
DEBUG    2023-08-19 15:21:03,293: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2023-08-19 15:21:03,294: on stmt: return $134return_value.3
DEBUG    2023-08-19 15:21:03,294: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F3365F9A0>],
             74: [<numba.core.ir.Assign object at 0x0000025F332BBFD0>],
             80: [<numba.core.ir.Assign object at 0x0000025F332BBB80>],
             106: [<numba.core.ir.Assign object at 0x0000025F332BBF40>],
             112: [<numba.core.ir.Assign object at 0x0000025F3366FEE0>]})
DEBUG    2023-08-19 15:21:03,294: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:03,294: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,294: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2023-08-19 15:21:03,294: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2023-08-19 15:21:03,294: on stmt: density_air = arg(2, name=density_air)
DEBUG    2023-08-19 15:21:03,294: on stmt: gravity = arg(3, name=gravity)
DEBUG    2023-08-19 15:21:03,294: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,295: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2023-08-19 15:21:03,295: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2023-08-19 15:21:03,295: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,295: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2023-08-19 15:21:03,295: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,296: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2023-08-19 15:21:03,296: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2023-08-19 15:21:03,296: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2023-08-19 15:21:03,296: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,296: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2023-08-19 15:21:03,296: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,296: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,297: on stmt: branch $40pred, 42, 46
DEBUG    2023-08-19 15:21:03,297: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:21:03,297: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,297: on stmt: Ri_No = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,297: on stmt: jump 46
DEBUG    2023-08-19 15:21:03,297: ==== SSA block rewrite pass on 46
DEBUG    2023-08-19 15:21:03,297: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,297: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,297: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2023-08-19 15:21:03,298: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,298: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,298: on stmt: branch $52pred, 54, 58
DEBUG    2023-08-19 15:21:03,298: ==== SSA block rewrite pass on 54
DEBUG    2023-08-19 15:21:03,298: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,298: on stmt: Ri_No = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,298: on stmt: jump 58
DEBUG    2023-08-19 15:21:03,298: ==== SSA block rewrite pass on 58
DEBUG    2023-08-19 15:21:03,298: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,298: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,299: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2023-08-19 15:21:03,299: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,299: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,299: on stmt: branch $64pred, 66, 98
DEBUG    2023-08-19 15:21:03,299: ==== SSA block rewrite pass on 66
DEBUG    2023-08-19 15:21:03,299: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,299: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2023-08-19 15:21:03,299: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2023-08-19 15:21:03,300: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,300: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,300: on stmt: branch $72pred, 74, 80
DEBUG    2023-08-19 15:21:03,300: ==== SSA block rewrite pass on 74
DEBUG    2023-08-19 15:21:03,300: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,300: on stmt: Ri_fxn.1 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,300: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,300: ==== SSA block rewrite pass on 80
DEBUG    2023-08-19 15:21:03,300: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,300: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,300: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2023-08-19 15:21:03,301: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2023-08-19 15:21:03,301: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2023-08-19 15:21:03,301: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2023-08-19 15:21:03,301: on stmt: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2023-08-19 15:21:03,301: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,301: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:03,301: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,301: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2023-08-19 15:21:03,301: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2023-08-19 15:21:03,301: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,301: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,301: on stmt: branch $104pred, 106, 112
DEBUG    2023-08-19 15:21:03,301: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:03,302: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,302: on stmt: Ri_fxn.3 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,302: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,302: ==== SSA block rewrite pass on 112
DEBUG    2023-08-19 15:21:03,302: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,302: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,302: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2023-08-19 15:21:03,302: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2023-08-19 15:21:03,302: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2023-08-19 15:21:03,302: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2023-08-19 15:21:03,302: on stmt: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2023-08-19 15:21:03,302: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,303: ==== SSA block rewrite pass on 128
DEBUG    2023-08-19 15:21:03,303: Running <numba.core.ssa._FixSSAVars object at 0x0000025F33418F70>
DEBUG    2023-08-19 15:21:03,303: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)])
DEBUG    2023-08-19 15:21:03,303: find_def var='Ri_fxn' stmt=$132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn, water_quality_functions.py:186)])
DEBUG    2023-08-19 15:21:03,303: find_def_from_top label 128
DEBUG    2023-08-19 15:21:03,303: insert phi node Ri_fxn.5 = phi(incoming_values=[], incoming_blocks=[]) at 128
DEBUG    2023-08-19 15:21:03,303: find_def_from_bottom label 80
DEBUG    2023-08-19 15:21:03,303: incoming_def Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2023-08-19 15:21:03,303: find_def_from_bottom label 74
DEBUG    2023-08-19 15:21:03,303: incoming_def Ri_fxn.1 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,304: find_def_from_bottom label 112
DEBUG    2023-08-19 15:21:03,304: incoming_def Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2023-08-19 15:21:03,304: find_def_from_bottom label 106
DEBUG    2023-08-19 15:21:03,304: incoming_def Ri_fxn.3 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,304: replaced with: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2023-08-19 15:21:03,304: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2023-08-19 15:21:03,304: on stmt: return $134return_value.3
DEBUG    2023-08-19 15:21:03,304: Fix SSA violator on var Ri_No
DEBUG    2023-08-19 15:21:03,304: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:03,304: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,304: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2023-08-19 15:21:03,305: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2023-08-19 15:21:03,305: on stmt: density_air = arg(2, name=density_air)
DEBUG    2023-08-19 15:21:03,305: on stmt: gravity = arg(3, name=gravity)
DEBUG    2023-08-19 15:21:03,305: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,305: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2023-08-19 15:21:03,305: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2023-08-19 15:21:03,305: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,305: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2023-08-19 15:21:03,305: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,305: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2023-08-19 15:21:03,305: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2023-08-19 15:21:03,305: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2023-08-19 15:21:03,305: first assign: Ri_No
DEBUG    2023-08-19 15:21:03,305: replaced with: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2023-08-19 15:21:03,306: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,306: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2023-08-19 15:21:03,306: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,306: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,306: on stmt: branch $40pred, 42, 46
DEBUG    2023-08-19 15:21:03,306: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:21:03,306: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,306: on stmt: Ri_No = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,306: replaced with: Ri_No.1 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,306: on stmt: jump 46
DEBUG    2023-08-19 15:21:03,306: ==== SSA block rewrite pass on 46
DEBUG    2023-08-19 15:21:03,306: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,307: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,307: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2023-08-19 15:21:03,307: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,307: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,307: on stmt: branch $52pred, 54, 58
DEBUG    2023-08-19 15:21:03,307: ==== SSA block rewrite pass on 54
DEBUG    2023-08-19 15:21:03,307: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,307: on stmt: Ri_No = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,307: replaced with: Ri_No.2 = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,307: on stmt: jump 58
DEBUG    2023-08-19 15:21:03,307: ==== SSA block rewrite pass on 58
DEBUG    2023-08-19 15:21:03,307: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,307: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,307: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2023-08-19 15:21:03,308: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,308: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,308: on stmt: branch $64pred, 66, 98
DEBUG    2023-08-19 15:21:03,308: ==== SSA block rewrite pass on 66
DEBUG    2023-08-19 15:21:03,308: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,308: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2023-08-19 15:21:03,308: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2023-08-19 15:21:03,308: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,308: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,308: on stmt: branch $72pred, 74, 80
DEBUG    2023-08-19 15:21:03,308: ==== SSA block rewrite pass on 74
DEBUG    2023-08-19 15:21:03,308: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,308: on stmt: Ri_fxn.1 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,308: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,309: ==== SSA block rewrite pass on 80
DEBUG    2023-08-19 15:21:03,309: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,309: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,309: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2023-08-19 15:21:03,309: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2023-08-19 15:21:03,309: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2023-08-19 15:21:03,309: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2023-08-19 15:21:03,309: on stmt: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2023-08-19 15:21:03,309: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,309: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:03,309: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,309: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2023-08-19 15:21:03,309: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2023-08-19 15:21:03,309: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,310: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,310: on stmt: branch $104pred, 106, 112
DEBUG    2023-08-19 15:21:03,310: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:03,310: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,310: on stmt: Ri_fxn.3 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,310: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,310: ==== SSA block rewrite pass on 112
DEBUG    2023-08-19 15:21:03,310: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,310: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,310: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2023-08-19 15:21:03,310: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2023-08-19 15:21:03,310: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2023-08-19 15:21:03,310: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2023-08-19 15:21:03,310: on stmt: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2023-08-19 15:21:03,310: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,311: ==== SSA block rewrite pass on 128
DEBUG    2023-08-19 15:21:03,311: Running <numba.core.ssa._FreshVarHandler object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,311: on stmt: Ri_fxn.5 = phi(incoming_values=[Var(Ri_fxn.2, water_quality_functions.py:202), Var(Ri_fxn.1, water_quality_functions.py:199), Var(Ri_fxn.4, water_quality_functions.py:209), Var(Ri_fxn.3, water_quality_functions.py:206)], incoming_blocks=[80, 74, 112, 106])
DEBUG    2023-08-19 15:21:03,311: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2023-08-19 15:21:03,311: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2023-08-19 15:21:03,311: on stmt: return $134return_value.3
DEBUG    2023-08-19 15:21:03,311: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000025F332BBE50>],
             42: [<numba.core.ir.Assign object at 0x0000025F332BBBB0>],
             54: [<numba.core.ir.Assign object at 0x0000025F332BBBE0>]})
DEBUG    2023-08-19 15:21:03,311: ==== SSA block rewrite pass on 0
DEBUG    2023-08-19 15:21:03,311: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,311: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2023-08-19 15:21:03,311: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2023-08-19 15:21:03,311: on stmt: density_air = arg(2, name=density_air)
DEBUG    2023-08-19 15:21:03,312: on stmt: gravity = arg(3, name=gravity)
DEBUG    2023-08-19 15:21:03,312: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,312: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2023-08-19 15:21:03,312: on stmt: $14binary_multiply.5 = gravity * $12binary_subtract.4
DEBUG    2023-08-19 15:21:03,312: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,312: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2023-08-19 15:21:03,312: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,312: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2023-08-19 15:21:03,313: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2023-08-19 15:21:03,313: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2023-08-19 15:21:03,313: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,313: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2023-08-19 15:21:03,313: find_def var='Ri_No' stmt=$38compare_op.16 = Ri_No > $const36.15
DEBUG    2023-08-19 15:21:03,313: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,313: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, water_quality_functions.py:191),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,313: on stmt: branch $40pred, 42, 46
DEBUG    2023-08-19 15:21:03,314: ==== SSA block rewrite pass on 42
DEBUG    2023-08-19 15:21:03,314: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,314: on stmt: Ri_No.1 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,314: on stmt: jump 46
DEBUG    2023-08-19 15:21:03,314: ==== SSA block rewrite pass on 46
DEBUG    2023-08-19 15:21:03,314: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,314: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,314: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2023-08-19 15:21:03,314: find_def var='Ri_No' stmt=$50compare_op.2 = Ri_No < $const48.1
DEBUG    2023-08-19 15:21:03,314: find_def_from_top label 46
DEBUG    2023-08-19 15:21:03,315: insert phi node Ri_No.3 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG    2023-08-19 15:21:03,315: find_def_from_bottom label 0
DEBUG    2023-08-19 15:21:03,315: incoming_def Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2023-08-19 15:21:03,315: find_def_from_bottom label 42
DEBUG    2023-08-19 15:21:03,315: incoming_def Ri_No.1 = const(float, 2.0)
DEBUG    2023-08-19 15:21:03,315: replaced with: $50compare_op.2 = Ri_No.3 < $const48.1
DEBUG    2023-08-19 15:21:03,315: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,315: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, water_quality_functions.py:193),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,316: on stmt: branch $52pred, 54, 58
DEBUG    2023-08-19 15:21:03,316: ==== SSA block rewrite pass on 54
DEBUG    2023-08-19 15:21:03,316: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,316: on stmt: Ri_No.2 = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,316: on stmt: jump 58
DEBUG    2023-08-19 15:21:03,316: ==== SSA block rewrite pass on 58
DEBUG    2023-08-19 15:21:03,316: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,316: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2023-08-19 15:21:03,316: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2023-08-19 15:21:03,316: find_def var='Ri_No' stmt=$62compare_op.2 = Ri_No < $const60.1
DEBUG    2023-08-19 15:21:03,317: find_def_from_top label 58
DEBUG    2023-08-19 15:21:03,317: insert phi node Ri_No.4 = phi(incoming_values=[], incoming_blocks=[]) at 58
DEBUG    2023-08-19 15:21:03,317: find_def_from_bottom label 54
DEBUG    2023-08-19 15:21:03,317: incoming_def Ri_No.2 = const(float, -1.0)
DEBUG    2023-08-19 15:21:03,317: find_def_from_bottom label 46
DEBUG    2023-08-19 15:21:03,317: incoming_def Ri_No.3 = phi(incoming_values=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_No.1, water_quality_functions.py:192)], incoming_blocks=[0, 42])
DEBUG    2023-08-19 15:21:03,317: replaced with: $62compare_op.2 = Ri_No.4 < $const60.1
DEBUG    2023-08-19 15:21:03,317: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,317: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, water_quality_functions.py:196),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,317: on stmt: branch $64pred, 66, 98
DEBUG    2023-08-19 15:21:03,318: ==== SSA block rewrite pass on 66
DEBUG    2023-08-19 15:21:03,318: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,318: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2023-08-19 15:21:03,318: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2023-08-19 15:21:03,318: find_def var='Ri_No' stmt=$70compare_op.2 = Ri_No >= $const68.1
DEBUG    2023-08-19 15:21:03,318: find_def_from_top label 66
DEBUG    2023-08-19 15:21:03,318: idom 58 from label 66
DEBUG    2023-08-19 15:21:03,318: find_def_from_bottom label 58
DEBUG    2023-08-19 15:21:03,318: replaced with: $70compare_op.2 = Ri_No.4 >= $const68.1
DEBUG    2023-08-19 15:21:03,318: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,318: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, water_quality_functions.py:197),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,318: on stmt: branch $72pred, 74, 80
DEBUG    2023-08-19 15:21:03,318: ==== SSA block rewrite pass on 74
DEBUG    2023-08-19 15:21:03,318: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,319: on stmt: Ri_fxn.1 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,319: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,319: ==== SSA block rewrite pass on 80
DEBUG    2023-08-19 15:21:03,319: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,319: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,319: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2023-08-19 15:21:03,319: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2023-08-19 15:21:03,319: find_def var='Ri_No' stmt=$86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2023-08-19 15:21:03,319: find_def_from_top label 80
DEBUG    2023-08-19 15:21:03,319: idom 66 from label 80
DEBUG    2023-08-19 15:21:03,319: find_def_from_bottom label 66
DEBUG    2023-08-19 15:21:03,319: find_def_from_top label 66
DEBUG    2023-08-19 15:21:03,319: idom 58 from label 66
DEBUG    2023-08-19 15:21:03,319: find_def_from_bottom label 58
DEBUG    2023-08-19 15:21:03,320: replaced with: $86binary_multiply.3 = $const82.1 * Ri_No.4
DEBUG    2023-08-19 15:21:03,320: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2023-08-19 15:21:03,320: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2023-08-19 15:21:03,320: on stmt: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2023-08-19 15:21:03,320: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,320: ==== SSA block rewrite pass on 98
DEBUG    2023-08-19 15:21:03,320: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,320: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2023-08-19 15:21:03,320: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2023-08-19 15:21:03,320: find_def var='Ri_No' stmt=$102compare_op.2 = Ri_No <= $const100.1
DEBUG    2023-08-19 15:21:03,320: find_def_from_top label 98
DEBUG    2023-08-19 15:21:03,321: idom 58 from label 98
DEBUG    2023-08-19 15:21:03,321: find_def_from_bottom label 58
DEBUG    2023-08-19 15:21:03,321: replaced with: $102compare_op.2 = Ri_No.4 <= $const100.1
DEBUG    2023-08-19 15:21:03,321: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,321: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, water_quality_functions.py:204),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,321: on stmt: branch $104pred, 106, 112
DEBUG    2023-08-19 15:21:03,321: ==== SSA block rewrite pass on 106
DEBUG    2023-08-19 15:21:03,321: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,321: on stmt: Ri_fxn.3 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,322: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,322: ==== SSA block rewrite pass on 112
DEBUG    2023-08-19 15:21:03,322: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,322: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2023-08-19 15:21:03,322: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2023-08-19 15:21:03,322: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2023-08-19 15:21:03,322: find_def var='Ri_No' stmt=$118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2023-08-19 15:21:03,322: find_def_from_top label 112
DEBUG    2023-08-19 15:21:03,322: idom 98 from label 112
DEBUG    2023-08-19 15:21:03,322: find_def_from_bottom label 98
DEBUG    2023-08-19 15:21:03,322: find_def_from_top label 98
DEBUG    2023-08-19 15:21:03,322: idom 58 from label 98
DEBUG    2023-08-19 15:21:03,322: find_def_from_bottom label 58
DEBUG    2023-08-19 15:21:03,322: replaced with: $118binary_multiply.3 = $const114.1 * Ri_No.4
DEBUG    2023-08-19 15:21:03,323: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2023-08-19 15:21:03,323: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2023-08-19 15:21:03,323: on stmt: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2023-08-19 15:21:03,323: on stmt: jump 128
DEBUG    2023-08-19 15:21:03,323: ==== SSA block rewrite pass on 128
DEBUG    2023-08-19 15:21:03,323: Running <numba.core.ssa._FixSSAVars object at 0x0000025F336ADD30>
DEBUG    2023-08-19 15:21:03,323: on stmt: Ri_fxn.5 = phi(incoming_values=[Var(Ri_fxn.2, water_quality_functions.py:202), Var(Ri_fxn.1, water_quality_functions.py:199), Var(Ri_fxn.4, water_quality_functions.py:209), Var(Ri_fxn.3, water_quality_functions.py:206)], incoming_blocks=[80, 74, 112, 106])
DEBUG    2023-08-19 15:21:03,323: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2023-08-19 15:21:03,323: find_def var='Ri_No' stmt=$132build_tuple.2 = build_tuple(items=[Var(Ri_No, water_quality_functions.py:187), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2023-08-19 15:21:03,323: find_def_from_top label 128
DEBUG    2023-08-19 15:21:03,323: idom 58 from label 128
DEBUG    2023-08-19 15:21:03,323: find_def_from_bottom label 58
DEBUG    2023-08-19 15:21:03,324: replaced with: $132build_tuple.2 = build_tuple(items=[Var(Ri_No.4, water_quality_functions.py:196), Var(Ri_fxn.5, water_quality_functions.py:210)])
DEBUG    2023-08-19 15:21:03,324: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2023-08-19 15:21:03,324: on stmt: return $134return_value.3
DEBUG    2023-08-19 15:21:03,475: bytecode dump:
>          0	NOP(arg=None, lineno=33)
           2	LOAD_FAST(arg=2, lineno=33)
           4	LOAD_FAST(arg=0, lineno=33)
           6	LOAD_FAST(arg=1, lineno=33)
           8	STORE_SUBSCR(arg=None, lineno=33)
          10	LOAD_CONST(arg=0, lineno=33)
          12	RETURN_VALUE(arg=None, lineno=33)
DEBUG    2023-08-19 15:21:03,475: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,477: stack: []
DEBUG    2023-08-19 15:21:03,477: dispatch pc=0, inst=NOP(arg=None, lineno=33)
DEBUG    2023-08-19 15:21:03,477: stack []
DEBUG    2023-08-19 15:21:03,477: dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=33)
DEBUG    2023-08-19 15:21:03,477: stack []
DEBUG    2023-08-19 15:21:03,477: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=33)
DEBUG    2023-08-19 15:21:03,477: stack ['$value2.0']
DEBUG    2023-08-19 15:21:03,477: dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=33)
DEBUG    2023-08-19 15:21:03,477: stack ['$value2.0', '$d4.1']
DEBUG    2023-08-19 15:21:03,477: dispatch pc=8, inst=STORE_SUBSCR(arg=None, lineno=33)
DEBUG    2023-08-19 15:21:03,477: stack ['$value2.0', '$d4.1', '$key6.2']
DEBUG    2023-08-19 15:21:03,477: dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=33)
DEBUG    2023-08-19 15:21:03,477: stack []
DEBUG    2023-08-19 15:21:03,477: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=33)
DEBUG    2023-08-19 15:21:03,477: stack ['$const10.3']
DEBUG    2023-08-19 15:21:03,477: end state. edges=[]
DEBUG    2023-08-19 15:21:03,477: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:03,477: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:03,477: defmap: {}
DEBUG    2023-08-19 15:21:03,477: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,477: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,477: keep phismap: {}
DEBUG    2023-08-19 15:21:03,477: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:03,477: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:03,477: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$value2.0'}), (4, {'res': '$d4.1'}), (6, {'res': '$key6.2'}), (8, {'target': '$d4.1', 'index': '$key6.2', 'value': '$value2.0'}), (10, {'res': '$const10.3'}), (12, {'retval': '$const10.3', 'castval': '$12return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:03,477: label 0:
    d = arg(0, name=d)                       ['d']
    key = arg(1, name=key)                   ['key']
    value = arg(2, name=value)               ['value']
    d[key] = value                           ['d', 'key', 'value']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12return_value.4 = cast(value=$const10.3) ['$12return_value.4', '$const10.3']
    return $12return_value.4                 ['$12return_value.4']

DEBUG    2023-08-19 15:21:03,477: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:03,477: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F333F3490>
DEBUG    2023-08-19 15:21:03,477: on stmt: d = arg(0, name=d)
DEBUG    2023-08-19 15:21:03,477: on stmt: key = arg(1, name=key)
DEBUG    2023-08-19 15:21:03,477: on stmt: value = arg(2, name=value)
DEBUG    2023-08-19 15:21:03,477: on stmt: d[key] = value
DEBUG    2023-08-19 15:21:03,477: on stmt: $const10.3 = const(NoneType, None)
DEBUG    2023-08-19 15:21:03,485: on stmt: $12return_value.4 = cast(value=$const10.3)
DEBUG    2023-08-19 15:21:03,485: on stmt: return $12return_value.4
DEBUG    2023-08-19 15:21:03,485: defs defaultdict(<class 'list'>,
            {'$12return_value.4': [<numba.core.ir.Assign object at 0x0000025F334DD6A0>],
             '$const10.3': [<numba.core.ir.Assign object at 0x0000025F3371B370>],
             'd': [<numba.core.ir.Assign object at 0x0000025F336F7DC0>],
             'key': [<numba.core.ir.Assign object at 0x0000025F332C2E20>],
             'value': [<numba.core.ir.Assign object at 0x0000025F3371B5B0>]})
DEBUG    2023-08-19 15:21:03,485: SSA violators set()
DEBUG    2023-08-19 15:21:03,489: bytecode dump:
>          0	NOP(arg=None, lineno=683)
           2	LOAD_GLOBAL(arg=0, lineno=683)
           4	LOAD_FAST(arg=1, lineno=683)
           6	LOAD_DEREF(arg=0, lineno=683)
           8	CALL_FUNCTION(arg=2, lineno=683)
          10	STORE_FAST(arg=3, lineno=683)
          12	LOAD_GLOBAL(arg=0, lineno=684)
          14	LOAD_FAST(arg=2, lineno=684)
          16	LOAD_DEREF(arg=1, lineno=684)
          18	CALL_FUNCTION(arg=2, lineno=684)
          20	STORE_FAST(arg=4, lineno=684)
          22	LOAD_GLOBAL(arg=1, lineno=685)
          24	LOAD_FAST(arg=0, lineno=685)
          26	LOAD_FAST(arg=3, lineno=685)
          28	LOAD_GLOBAL(arg=2, lineno=685)
          30	LOAD_FAST(arg=3, lineno=685)
          32	CALL_FUNCTION(arg=1, lineno=685)
          34	LOAD_FAST(arg=4, lineno=685)
          36	CALL_FUNCTION(arg=4, lineno=685)
          38	STORE_FAST(arg=5, lineno=685)
          40	LOAD_FAST(arg=5, lineno=686)
          42	LOAD_GLOBAL(arg=3, lineno=686)
          44	LOAD_ATTR(arg=4, lineno=686)
          46	COMPARE_OP(arg=2, lineno=686)
          48	POP_JUMP_IF_FALSE(arg=54, lineno=686)
          50	LOAD_CONST(arg=0, lineno=687)
          52	RETURN_VALUE(arg=None, lineno=687)
>         54	LOAD_FAST(arg=5, lineno=688)
          56	LOAD_GLOBAL(arg=3, lineno=688)
          58	LOAD_ATTR(arg=5, lineno=688)
          60	COMPARE_OP(arg=2, lineno=688)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=688)
          64	LOAD_CONST(arg=0, lineno=691)
          66	RETURN_VALUE(arg=None, lineno=691)
>         68	LOAD_FAST(arg=5, lineno=692)
          70	LOAD_GLOBAL(arg=3, lineno=692)
          72	LOAD_ATTR(arg=6, lineno=692)
          74	COMPARE_OP(arg=2, lineno=692)
          76	POP_JUMP_IF_FALSE(arg=88, lineno=692)
          78	LOAD_GLOBAL(arg=7, lineno=693)
          80	LOAD_CONST(arg=1, lineno=693)
          82	CALL_FUNCTION(arg=1, lineno=693)
          84	RAISE_VARARGS(arg=1, lineno=693)
          86	JUMP_FORWARD(arg=8, lineno=693)
>         88	LOAD_GLOBAL(arg=8, lineno=695)
          90	LOAD_CONST(arg=2, lineno=695)
          92	CALL_FUNCTION(arg=1, lineno=695)
          94	RAISE_VARARGS(arg=1, lineno=695)
>         96	LOAD_CONST(arg=0, lineno=695)
          98	RETURN_VALUE(arg=None, lineno=695)
DEBUG    2023-08-19 15:21:03,489: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,489: stack: []
DEBUG    2023-08-19 15:21:03,489: dispatch pc=0, inst=NOP(arg=None, lineno=683)
DEBUG    2023-08-19 15:21:03,489: stack []
DEBUG    2023-08-19 15:21:03,489: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=683)
DEBUG    2023-08-19 15:21:03,489: stack []
DEBUG    2023-08-19 15:21:03,489: dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=683)
DEBUG    2023-08-19 15:21:03,490: stack ['$2load_global.0']
DEBUG    2023-08-19 15:21:03,490: dispatch pc=6, inst=LOAD_DEREF(arg=0, lineno=683)
DEBUG    2023-08-19 15:21:03,490: stack ['$2load_global.0', '$key4.1']
DEBUG    2023-08-19 15:21:03,490: dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=683)
DEBUG    2023-08-19 15:21:03,490: stack ['$2load_global.0', '$key4.1', '$6load_deref.2']
DEBUG    2023-08-19 15:21:03,490: dispatch pc=10, inst=STORE_FAST(arg=3, lineno=683)
DEBUG    2023-08-19 15:21:03,490: stack ['$8call_function.3']
DEBUG    2023-08-19 15:21:03,490: dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=684)
DEBUG    2023-08-19 15:21:03,490: stack []
DEBUG    2023-08-19 15:21:03,490: dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=684)
DEBUG    2023-08-19 15:21:03,490: stack ['$12load_global.4']
DEBUG    2023-08-19 15:21:03,491: dispatch pc=16, inst=LOAD_DEREF(arg=1, lineno=684)
DEBUG    2023-08-19 15:21:03,491: stack ['$12load_global.4', '$value14.5']
DEBUG    2023-08-19 15:21:03,491: dispatch pc=18, inst=CALL_FUNCTION(arg=2, lineno=684)
DEBUG    2023-08-19 15:21:03,491: stack ['$12load_global.4', '$value14.5', '$16load_deref.6']
DEBUG    2023-08-19 15:21:03,491: dispatch pc=20, inst=STORE_FAST(arg=4, lineno=684)
DEBUG    2023-08-19 15:21:03,491: stack ['$18call_function.7']
DEBUG    2023-08-19 15:21:03,491: dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=685)
DEBUG    2023-08-19 15:21:03,491: stack []
DEBUG    2023-08-19 15:21:03,491: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=685)
DEBUG    2023-08-19 15:21:03,491: stack ['$22load_global.8']
DEBUG    2023-08-19 15:21:03,491: dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=685)
DEBUG    2023-08-19 15:21:03,491: stack ['$22load_global.8', '$d24.9']
DEBUG    2023-08-19 15:21:03,492: dispatch pc=28, inst=LOAD_GLOBAL(arg=2, lineno=685)
DEBUG    2023-08-19 15:21:03,492: stack ['$22load_global.8', '$d24.9', '$castedkey26.10']
DEBUG    2023-08-19 15:21:03,492: dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=685)
DEBUG    2023-08-19 15:21:03,492: stack ['$22load_global.8', '$d24.9', '$castedkey26.10', '$28load_global.11']
DEBUG    2023-08-19 15:21:03,492: dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=685)
DEBUG    2023-08-19 15:21:03,492: stack ['$22load_global.8', '$d24.9', '$castedkey26.10', '$28load_global.11', '$castedkey30.12']
DEBUG    2023-08-19 15:21:03,492: dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=685)
DEBUG    2023-08-19 15:21:03,492: stack ['$22load_global.8', '$d24.9', '$castedkey26.10', '$32call_function.13']
DEBUG    2023-08-19 15:21:03,492: dispatch pc=36, inst=CALL_FUNCTION(arg=4, lineno=685)
DEBUG    2023-08-19 15:21:03,492: stack ['$22load_global.8', '$d24.9', '$castedkey26.10', '$32call_function.13', '$castedval34.14']
DEBUG    2023-08-19 15:21:03,492: dispatch pc=38, inst=STORE_FAST(arg=5, lineno=685)
DEBUG    2023-08-19 15:21:03,493: stack ['$36call_function.15']
DEBUG    2023-08-19 15:21:03,493: dispatch pc=40, inst=LOAD_FAST(arg=5, lineno=686)
DEBUG    2023-08-19 15:21:03,493: stack []
DEBUG    2023-08-19 15:21:03,493: dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=686)
DEBUG    2023-08-19 15:21:03,493: stack ['$status40.16']
DEBUG    2023-08-19 15:21:03,493: dispatch pc=44, inst=LOAD_ATTR(arg=4, lineno=686)
DEBUG    2023-08-19 15:21:03,493: stack ['$status40.16', '$42load_global.17']
DEBUG    2023-08-19 15:21:03,493: dispatch pc=46, inst=COMPARE_OP(arg=2, lineno=686)
DEBUG    2023-08-19 15:21:03,493: stack ['$status40.16', '$44load_attr.18']
DEBUG    2023-08-19 15:21:03,493: dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=54, lineno=686)
DEBUG    2023-08-19 15:21:03,493: stack ['$46compare_op.19']
DEBUG    2023-08-19 15:21:03,493: end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,493: pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,494: stack: []
DEBUG    2023-08-19 15:21:03,494: dispatch pc=50, inst=LOAD_CONST(arg=0, lineno=687)
DEBUG    2023-08-19 15:21:03,494: stack []
DEBUG    2023-08-19 15:21:03,494: dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=687)
DEBUG    2023-08-19 15:21:03,494: stack ['$const50.0']
DEBUG    2023-08-19 15:21:03,494: end state. edges=[]
DEBUG    2023-08-19 15:21:03,494: pending: deque([State(pc_initial=54 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,494: stack: []
DEBUG    2023-08-19 15:21:03,494: dispatch pc=54, inst=LOAD_FAST(arg=5, lineno=688)
DEBUG    2023-08-19 15:21:03,494: stack []
DEBUG    2023-08-19 15:21:03,494: dispatch pc=56, inst=LOAD_GLOBAL(arg=3, lineno=688)
DEBUG    2023-08-19 15:21:03,494: stack ['$status54.0']
DEBUG    2023-08-19 15:21:03,494: dispatch pc=58, inst=LOAD_ATTR(arg=5, lineno=688)
DEBUG    2023-08-19 15:21:03,494: stack ['$status54.0', '$56load_global.1']
DEBUG    2023-08-19 15:21:03,495: dispatch pc=60, inst=COMPARE_OP(arg=2, lineno=688)
DEBUG    2023-08-19 15:21:03,495: stack ['$status54.0', '$58load_attr.2']
DEBUG    2023-08-19 15:21:03,495: dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=688)
DEBUG    2023-08-19 15:21:03,495: stack ['$60compare_op.3']
DEBUG    2023-08-19 15:21:03,495: end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,495: pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,495: stack: []
DEBUG    2023-08-19 15:21:03,495: dispatch pc=64, inst=LOAD_CONST(arg=0, lineno=691)
DEBUG    2023-08-19 15:21:03,495: stack []
DEBUG    2023-08-19 15:21:03,496: dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=691)
DEBUG    2023-08-19 15:21:03,496: stack ['$const64.0']
DEBUG    2023-08-19 15:21:03,496: end state. edges=[]
DEBUG    2023-08-19 15:21:03,496: pending: deque([State(pc_initial=68 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,496: stack: []
DEBUG    2023-08-19 15:21:03,496: dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=692)
DEBUG    2023-08-19 15:21:03,496: stack []
DEBUG    2023-08-19 15:21:03,496: dispatch pc=70, inst=LOAD_GLOBAL(arg=3, lineno=692)
DEBUG    2023-08-19 15:21:03,496: stack ['$status68.0']
DEBUG    2023-08-19 15:21:03,496: dispatch pc=72, inst=LOAD_ATTR(arg=6, lineno=692)
DEBUG    2023-08-19 15:21:03,497: stack ['$status68.0', '$70load_global.1']
DEBUG    2023-08-19 15:21:03,497: dispatch pc=74, inst=COMPARE_OP(arg=2, lineno=692)
DEBUG    2023-08-19 15:21:03,497: stack ['$status68.0', '$72load_attr.2']
DEBUG    2023-08-19 15:21:03,497: dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=88, lineno=692)
DEBUG    2023-08-19 15:21:03,497: stack ['$74compare_op.3']
DEBUG    2023-08-19 15:21:03,497: end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
DEBUG    2023-08-19 15:21:03,497: pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,497: stack: []
DEBUG    2023-08-19 15:21:03,497: dispatch pc=78, inst=LOAD_GLOBAL(arg=7, lineno=693)
DEBUG    2023-08-19 15:21:03,497: stack []
DEBUG    2023-08-19 15:21:03,497: dispatch pc=80, inst=LOAD_CONST(arg=1, lineno=693)
DEBUG    2023-08-19 15:21:03,497: stack ['$78load_global.0']
DEBUG    2023-08-19 15:21:03,498: dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=693)
DEBUG    2023-08-19 15:21:03,498: stack ['$78load_global.0', '$const80.1']
DEBUG    2023-08-19 15:21:03,498: dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=693)
DEBUG    2023-08-19 15:21:03,498: stack ['$82call_function.2']
DEBUG    2023-08-19 15:21:03,498: end state. edges=[]
DEBUG    2023-08-19 15:21:03,498: pending: deque([State(pc_initial=88 nstack_initial=0)])
DEBUG    2023-08-19 15:21:03,498: stack: []
DEBUG    2023-08-19 15:21:03,498: dispatch pc=88, inst=LOAD_GLOBAL(arg=8, lineno=695)
DEBUG    2023-08-19 15:21:03,498: stack []
DEBUG    2023-08-19 15:21:03,498: dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=695)
DEBUG    2023-08-19 15:21:03,498: stack ['$88load_global.0']
DEBUG    2023-08-19 15:21:03,498: dispatch pc=92, inst=CALL_FUNCTION(arg=1, lineno=695)
DEBUG    2023-08-19 15:21:03,498: stack ['$88load_global.0', '$const90.1']
DEBUG    2023-08-19 15:21:03,499: dispatch pc=94, inst=RAISE_VARARGS(arg=1, lineno=695)
DEBUG    2023-08-19 15:21:03,499: stack ['$92call_function.2']
DEBUG    2023-08-19 15:21:03,499: end state. edges=[]
DEBUG    2023-08-19 15:21:03,499: -------------------------Prune PHIs-------------------------
DEBUG    2023-08-19 15:21:03,499: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set()})
DEBUG    2023-08-19 15:21:03,499: defmap: {}
DEBUG    2023-08-19 15:21:03,499: phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,499: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2023-08-19 15:21:03,499: keep phismap: {}
DEBUG    2023-08-19 15:21:03,500: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2023-08-19 15:21:03,500: ----------------------DONE Prune PHIs-----------------------
DEBUG    2023-08-19 15:21:03,500: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$key4.1'}), (6, {'res': '$6load_deref.2'}), (8, {'func': '$2load_global.0', 'args': ['$key4.1', '$6load_deref.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$value14.5'}), (16, {'res': '$16load_deref.6'}), (18, {'func': '$12load_global.4', 'args': ['$value14.5', '$16load_deref.6'], 'res': '$18call_function.7'}), (20, {'value': '$18call_function.7'}), (22, {'res': '$22load_global.8'}), (24, {'res': '$d24.9'}), (26, {'res': '$castedkey26.10'}), (28, {'res': '$28load_global.11'}), (30, {'res': '$castedkey30.12'}), (32, {'func': '$28load_global.11', 'args': ['$castedkey30.12'], 'res': '$32call_function.13'}), (34, {'res': '$castedval34.14'}), (36, {'func': '$22load_global.8', 'args': ['$d24.9', '$castedkey26.10', '$32call_function.13', '$castedval34.14'], 'res': '$36call_function.15'}), (38, {'value': '$36call_function.15'}), (40, {'res': '$status40.16'}), (42, {'res': '$42load_global.17'}), (44, {'item': '$42load_global.17', 'res': '$44load_attr.18'}), (46, {'lhs': '$status40.16', 'rhs': '$44load_attr.18', 'res': '$46compare_op.19'}), (48, {'pred': '$46compare_op.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 54: ()})
DEBUG    2023-08-19 15:21:03,500: block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}), (52, {'retval': '$const50.0', 'castval': '$52return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:03,500: block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$status54.0'}), (56, {'res': '$56load_global.1'}), (58, {'item': '$56load_global.1', 'res': '$58load_attr.2'}), (60, {'lhs': '$status54.0', 'rhs': '$58load_attr.2', 'res': '$60compare_op.3'}), (62, {'pred': '$60compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG    2023-08-19 15:21:03,500: block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$const64.0'}), (66, {'retval': '$const64.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:03,500: block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$status68.0'}), (70, {'res': '$70load_global.1'}), (72, {'item': '$70load_global.1', 'res': '$72load_attr.2'}), (74, {'lhs': '$status68.0', 'rhs': '$72load_attr.2', 'res': '$74compare_op.3'}), (76, {'pred': '$74compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 88: ()})
DEBUG    2023-08-19 15:21:03,500: block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:03,500: block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$88load_global.0'}), (90, {'res': '$const90.1'}), (92, {'func': '$88load_global.0', 'args': ['$const90.1'], 'res': '$92call_function.2'}), (94, {'exc': '$92call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2023-08-19 15:21:03,503: label 0:
    d = arg(0, name=d)                       ['d']
    key = arg(1, name=key)                   ['key']
    value = arg(2, name=value)               ['value']
    $2load_global.0 = global(_cast: <intrinsic _cast>) ['$2load_global.0']
    $6load_deref.2 = freevar(keyty: unicode_type) ['$6load_deref.2']
    castedkey = call $2load_global.0(key, $6load_deref.2, func=$2load_global.0, args=[Var(key, dictobject.py:683), Var($6load_deref.2, dictobject.py:683)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6load_deref.2', 'castedkey', 'key']
    $12load_global.4 = global(_cast: <intrinsic _cast>) ['$12load_global.4']
    $16load_deref.6 = freevar(valty: float64) ['$16load_deref.6']
    castedval = call $12load_global.4(value, $16load_deref.6, func=$12load_global.4, args=[Var(value, dictobject.py:683), Var($16load_deref.6, dictobject.py:684)], kws=(), vararg=None, target=None) ['$12load_global.4', '$16load_deref.6', 'castedval', 'value']
    $22load_global.8 = global(_dict_insert: <intrinsic _dict_insert>) ['$22load_global.8']
    $28load_global.11 = global(hash: <built-in function hash>) ['$28load_global.11']
    $32call_function.13 = call $28load_global.11(castedkey, func=$28load_global.11, args=[Var(castedkey, dictobject.py:683)], kws=(), vararg=None, target=None) ['$28load_global.11', '$32call_function.13', 'castedkey']
    status = call $22load_global.8(d, castedkey, $32call_function.13, castedval, func=$22load_global.8, args=[Var(d, dictobject.py:683), Var(castedkey, dictobject.py:683), Var($32call_function.13, dictobject.py:685), Var(castedval, dictobject.py:684)], kws=(), vararg=None, target=None) ['$22load_global.8', '$32call_function.13', 'castedkey', 'castedval', 'd', 'status']
    $42load_global.17 = global(Status: <enum 'Status'>) ['$42load_global.17']
    $44load_attr.18 = getattr(value=$42load_global.17, attr=OK) ['$42load_global.17', '$44load_attr.18']
    $46compare_op.19 = status == $44load_attr.18 ['$44load_attr.18', '$46compare_op.19', 'status']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.19, func=bool48, args=(Var($46compare_op.19, dictobject.py:686),), kws=(), vararg=None, target=None) ['$46compare_op.19', '$48pred', 'bool48']
    branch $48pred, 50, 54                   ['$48pred']
label 50:
    $const50.0 = const(NoneType, None)       ['$const50.0']
    $52return_value.1 = cast(value=$const50.0) ['$52return_value.1', '$const50.0']
    return $52return_value.1                 ['$52return_value.1']
label 54:
    $56load_global.1 = global(Status: <enum 'Status'>) ['$56load_global.1']
    $58load_attr.2 = getattr(value=$56load_global.1, attr=OK_REPLACED) ['$56load_global.1', '$58load_attr.2']
    $60compare_op.3 = status == $58load_attr.2 ['$58load_attr.2', '$60compare_op.3', 'status']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60compare_op.3, func=bool62, args=(Var($60compare_op.3, dictobject.py:688),), kws=(), vararg=None, target=None) ['$60compare_op.3', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $const64.0 = const(NoneType, None)       ['$const64.0']
    $66return_value.1 = cast(value=$const64.0) ['$66return_value.1', '$const64.0']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $70load_global.1 = global(Status: <enum 'Status'>) ['$70load_global.1']
    $72load_attr.2 = getattr(value=$70load_global.1, attr=ERR_CMP_FAILED) ['$70load_global.1', '$72load_attr.2']
    $74compare_op.3 = status == $72load_attr.2 ['$72load_attr.2', '$74compare_op.3', 'status']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.3, func=bool76, args=(Var($74compare_op.3, dictobject.py:692),), kws=(), vararg=None, target=None) ['$74compare_op.3', '$76pred', 'bool76']
    branch $76pred, 78, 88                   ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, key comparison failed) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, dictobject.py:693)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $88load_global.0 = global(RuntimeError: <class 'RuntimeError'>) ['$88load_global.0']
    $const90.1 = const(str, dict.__setitem__ failed unexpectedly) ['$const90.1']
    $92call_function.2 = call $88load_global.0($const90.1, func=$88load_global.0, args=[Var($const90.1, dictobject.py:695)], kws=(), vararg=None, target=None) ['$88load_global.0', '$92call_function.2', '$const90.1']
    raise $92call_function.2                 ['$92call_function.2']

DEBUG    2023-08-19 15:21:03,513: ==== SSA block analysis pass on 0
DEBUG    2023-08-19 15:21:03,514: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33664EE0>
DEBUG    2023-08-19 15:21:03,514: on stmt: d = arg(0, name=d)
DEBUG    2023-08-19 15:21:03,514: on stmt: key = arg(1, name=key)
DEBUG    2023-08-19 15:21:03,514: on stmt: value = arg(2, name=value)
DEBUG    2023-08-19 15:21:03,514: on stmt: $2load_global.0 = global(_cast: <intrinsic _cast>)
DEBUG    2023-08-19 15:21:03,514: on stmt: $6load_deref.2 = freevar(keyty: unicode_type)
DEBUG    2023-08-19 15:21:03,514: on stmt: castedkey = call $2load_global.0(key, $6load_deref.2, func=$2load_global.0, args=[Var(key, dictobject.py:683), Var($6load_deref.2, dictobject.py:683)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,514: on stmt: $12load_global.4 = global(_cast: <intrinsic _cast>)
DEBUG    2023-08-19 15:21:03,514: on stmt: $16load_deref.6 = freevar(valty: float64)
DEBUG    2023-08-19 15:21:03,514: on stmt: castedval = call $12load_global.4(value, $16load_deref.6, func=$12load_global.4, args=[Var(value, dictobject.py:683), Var($16load_deref.6, dictobject.py:684)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,514: on stmt: $22load_global.8 = global(_dict_insert: <intrinsic _dict_insert>)
DEBUG    2023-08-19 15:21:03,515: on stmt: $28load_global.11 = global(hash: <built-in function hash>)
DEBUG    2023-08-19 15:21:03,515: on stmt: $32call_function.13 = call $28load_global.11(castedkey, func=$28load_global.11, args=[Var(castedkey, dictobject.py:683)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,515: on stmt: status = call $22load_global.8(d, castedkey, $32call_function.13, castedval, func=$22load_global.8, args=[Var(d, dictobject.py:683), Var(castedkey, dictobject.py:683), Var($32call_function.13, dictobject.py:685), Var(castedval, dictobject.py:684)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,515: on stmt: $42load_global.17 = global(Status: <enum 'Status'>)
DEBUG    2023-08-19 15:21:03,515: on stmt: $44load_attr.18 = getattr(value=$42load_global.17, attr=OK)
DEBUG    2023-08-19 15:21:03,515: on stmt: $46compare_op.19 = status == $44load_attr.18
DEBUG    2023-08-19 15:21:03,515: on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,515: on stmt: $48pred = call bool48($46compare_op.19, func=bool48, args=(Var($46compare_op.19, dictobject.py:686),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,515: on stmt: branch $48pred, 50, 54
DEBUG    2023-08-19 15:21:03,515: ==== SSA block analysis pass on 50
DEBUG    2023-08-19 15:21:03,515: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33664EE0>
DEBUG    2023-08-19 15:21:03,515: on stmt: $const50.0 = const(NoneType, None)
DEBUG    2023-08-19 15:21:03,515: on stmt: $52return_value.1 = cast(value=$const50.0)
DEBUG    2023-08-19 15:21:03,516: on stmt: return $52return_value.1
DEBUG    2023-08-19 15:21:03,516: ==== SSA block analysis pass on 54
DEBUG    2023-08-19 15:21:03,516: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33664EE0>
DEBUG    2023-08-19 15:21:03,516: on stmt: $56load_global.1 = global(Status: <enum 'Status'>)
DEBUG    2023-08-19 15:21:03,516: on stmt: $58load_attr.2 = getattr(value=$56load_global.1, attr=OK_REPLACED)
DEBUG    2023-08-19 15:21:03,516: on stmt: $60compare_op.3 = status == $58load_attr.2
DEBUG    2023-08-19 15:21:03,516: on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,516: on stmt: $62pred = call bool62($60compare_op.3, func=bool62, args=(Var($60compare_op.3, dictobject.py:688),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,516: on stmt: branch $62pred, 64, 68
DEBUG    2023-08-19 15:21:03,516: ==== SSA block analysis pass on 64
DEBUG    2023-08-19 15:21:03,516: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33664EE0>
DEBUG    2023-08-19 15:21:03,516: on stmt: $const64.0 = const(NoneType, None)
DEBUG    2023-08-19 15:21:03,517: on stmt: $66return_value.1 = cast(value=$const64.0)
DEBUG    2023-08-19 15:21:03,517: on stmt: return $66return_value.1
DEBUG    2023-08-19 15:21:03,517: ==== SSA block analysis pass on 68
DEBUG    2023-08-19 15:21:03,517: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33664EE0>
DEBUG    2023-08-19 15:21:03,517: on stmt: $70load_global.1 = global(Status: <enum 'Status'>)
DEBUG    2023-08-19 15:21:03,517: on stmt: $72load_attr.2 = getattr(value=$70load_global.1, attr=ERR_CMP_FAILED)
DEBUG    2023-08-19 15:21:03,517: on stmt: $74compare_op.3 = status == $72load_attr.2
DEBUG    2023-08-19 15:21:03,517: on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG    2023-08-19 15:21:03,518: on stmt: $76pred = call bool76($74compare_op.3, func=bool76, args=(Var($74compare_op.3, dictobject.py:692),), kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,518: on stmt: branch $76pred, 78, 88
DEBUG    2023-08-19 15:21:03,518: ==== SSA block analysis pass on 78
DEBUG    2023-08-19 15:21:03,518: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33664EE0>
DEBUG    2023-08-19 15:21:03,518: on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG    2023-08-19 15:21:03,518: on stmt: $const80.1 = const(str, key comparison failed)
DEBUG    2023-08-19 15:21:03,518: on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, dictobject.py:693)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,518: on stmt: <static> raise <class 'ValueError'>('key comparison failed')
DEBUG    2023-08-19 15:21:03,518: ==== SSA block analysis pass on 88
DEBUG    2023-08-19 15:21:03,518: Running <numba.core.ssa._GatherDefsHandler object at 0x0000025F33664EE0>
DEBUG    2023-08-19 15:21:03,518: on stmt: $88load_global.0 = global(RuntimeError: <class 'RuntimeError'>)
DEBUG    2023-08-19 15:21:03,519: on stmt: $const90.1 = const(str, dict.__setitem__ failed unexpectedly)
DEBUG    2023-08-19 15:21:03,519: on stmt: $92call_function.2 = call $88load_global.0($const90.1, func=$88load_global.0, args=[Var($const90.1, dictobject.py:695)], kws=(), vararg=None, target=None)
DEBUG    2023-08-19 15:21:03,519: on stmt: <static> raise <class 'RuntimeError'>('dict.__setitem__ failed unexpectedly')
DEBUG    2023-08-19 15:21:03,520: defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x0000025F3335A4F0>],
             '$16load_deref.6': [<numba.core.ir.Assign object at 0x0000025F3335A790>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x0000025F3335ABB0>],
             '$28load_global.11': [<numba.core.ir.Assign object at 0x0000025F3335AF70>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000025F33664100>],
             '$32call_function.13': [<numba.core.ir.Assign object at 0x0000025F333532B0>],
             '$42load_global.17': [<numba.core.ir.Assign object at 0x0000025F333538B0>],
             '$44load_attr.18': [<numba.core.ir.Assign object at 0x0000025F33353A30>],
             '$46compare_op.19': [<numba.core.ir.Assign object at 0x0000025F33664580>],
             '$48pred': [<numba.core.ir.Assign object at 0x0000025F33664910>],
             '$52return_value.1': [<numba.core.ir.Assign object at 0x0000025F33656B20>],
             '$56load_global.1': [<numba.core.ir.Assign object at 0x0000025F33353160>],
             '$58load_attr.2': [<numba.core.ir.Assign object at 0x0000025F33353AF0>],
             '$60compare_op.3': [<numba.core.ir.Assign object at 0x0000025F33353CA0>],
             '$62pred': [<numba.core.ir.Assign object at 0x0000025F33353F10>],
             '$66return_value.1': [<numba.core.ir.Assign object at 0x0000025F3335D310>],
             '$6load_deref.2': [<numba.core.ir.Assign object at 0x0000025F3335A0D0>],
             '$70load_global.1': [<numba.core.ir.Assign object at 0x0000025F3335D6D0>],
             '$72load_attr.2': [<numba.core.ir.Assign object at 0x0000025F3335D850>],
             '$74compare_op.3': [<numba.core.ir.Assign object at 0x0000025F3335DA00>],
             '$76pred': [<numba.core.ir.Assign object at 0x0000025F3335DC70>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x0000025F3335DEB0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x0000025F333569D0>],
             '$88load_global.0': [<numba.core.ir.Assign object at 0x0000025F33356250>],
             '$92call_function.2': [<numba.core.ir.Assign object at 0x0000025F33356AC0>],
             '$const50.0': [<numba.core.ir.Assign object at 0x0000025F33664B80>],
             '$const64.0': [<numba.core.ir.Assign object at 0x0000025F3335D190>],
             '$const80.1': [<numba.core.ir.Assign object at 0x0000025F33356280>],
             '$const90.1': [<numba.core.ir.Assign object at 0x0000025F33356160>],
             'bool48': [<numba.core.ir.Assign object at 0x0000025F33664760>],
             'bool62': [<numba.core.ir.Assign object at 0x0000025F33353DF0>],
             'bool76': [<numba.core.ir.Assign object at 0x0000025F3335DB50>],
             'castedkey': [<numba.core.ir.Assign object at 0x0000025F3335A2B0>],
             'castedval': [<numba.core.ir.Assign object at 0x0000025F3335A970>],
             'd': [<numba.core.ir.Assign object at 0x0000025F336644F0>],
             'key': [<numba.core.ir.Assign object at 0x0000025F33664400>],
             'status': [<numba.core.ir.Assign object at 0x0000025F33353550>],
             'value': [<numba.core.ir.Assign object at 0x0000025F33664280>]})
DEBUG    2023-08-19 15:21:03,520: SSA violators set()
