DEBUG    2021-09-22 21:51:27,309: bytecode dump:
>          0	NOP(arg=None, lineno=482)
           2	LOAD_FAST(arg=0, lineno=482)
           4	LOAD_CONST(arg=1, lineno=482)
           6	BINARY_ADD(arg=None, lineno=482)
           8	RETURN_VALUE(arg=None, lineno=482)
DEBUG    2021-09-22 21:51:27,309: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,310: stack: []
DEBUG    2021-09-22 21:51:27,310: dispatch pc=0, inst=NOP(arg=None, lineno=482)
DEBUG    2021-09-22 21:51:27,310: stack []
DEBUG    2021-09-22 21:51:27,310: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=482)
DEBUG    2021-09-22 21:51:27,310: stack []
DEBUG    2021-09-22 21:51:27,310: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=482)
DEBUG    2021-09-22 21:51:27,310: stack ['$tempc2.0']
DEBUG    2021-09-22 21:51:27,310: dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=482)
DEBUG    2021-09-22 21:51:27,310: stack ['$tempc2.0', '$const4.1']
DEBUG    2021-09-22 21:51:27,310: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=482)
DEBUG    2021-09-22 21:51:27,310: stack ['$6binary_add.2']
DEBUG    2021-09-22 21:51:27,310: end state. edges=[]
DEBUG    2021-09-22 21:51:27,310: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,311: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,311: defmap: {}
DEBUG    2021-09-22 21:51:27,311: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,311: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,311: keep phismap: {}
DEBUG    2021-09-22 21:51:27,311: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,311: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,311: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$tempc2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$tempc2.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,312: label 0:
    tempc = arg(0, name=tempc)               ['tempc']
    $const4.1 = const(float, 273.16)         ['$const4.1']
    $6binary_add.2 = tempc + $const4.1       ['$6binary_add.2', '$const4.1', 'tempc']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2021-09-22 21:51:27,314: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,315: Running <numba.core.ssa._GatherDefsHandler object at 0x7f911055cca0>
DEBUG    2021-09-22 21:51:27,315: on stmt: tempc = arg(0, name=tempc)
DEBUG    2021-09-22 21:51:27,315: on stmt: $const4.1 = const(float, 273.16)
DEBUG    2021-09-22 21:51:27,315: on stmt: $6binary_add.2 = tempc + $const4.1
DEBUG    2021-09-22 21:51:27,315: on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG    2021-09-22 21:51:27,315: on stmt: return $8return_value.3
DEBUG    2021-09-22 21:51:27,316: defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f9110564520>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f91105646a0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f91105643a0>],
             'tempc': [<numba.core.ir.Assign object at 0x7f911055c460>]})
DEBUG    2021-09-22 21:51:27,316: SSA violators set()
DEBUG    2021-09-22 21:51:27,349: bytecode dump:
>          0	NOP(arg=None, lineno=452)
           2	LOAD_CONST(arg=1, lineno=452)
           4	LOAD_CONST(arg=2, lineno=452)
           6	LOAD_FAST(arg=2, lineno=452)
           8	LOAD_CONST(arg=3, lineno=452)
          10	BINARY_POWER(arg=None, lineno=452)
          12	BINARY_MULTIPLY(arg=None, lineno=452)
          14	BINARY_ADD(arg=None, lineno=452)
          16	LOAD_FAST(arg=1, lineno=452)
          18	BINARY_MULTIPLY(arg=None, lineno=452)
          20	LOAD_FAST(arg=3, lineno=452)
          22	BINARY_MULTIPLY(arg=None, lineno=452)
          24	LOAD_FAST(arg=0, lineno=452)
          26	LOAD_CONST(arg=4, lineno=452)
          28	BINARY_POWER(arg=None, lineno=452)
          30	BINARY_MULTIPLY(arg=None, lineno=452)
          32	RETURN_VALUE(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,349: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,349: stack: []
DEBUG    2021-09-22 21:51:27,349: dispatch pc=0, inst=NOP(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack []
DEBUG    2021-09-22 21:51:27,350: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack []
DEBUG    2021-09-22 21:51:27,350: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack ['$const2.0']
DEBUG    2021-09-22 21:51:27,350: dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack ['$const2.0', '$const4.1']
DEBUG    2021-09-22 21:51:27,350: dispatch pc=8, inst=LOAD_CONST(arg=3, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack ['$const2.0', '$const4.1', '$cloudiness6.2']
DEBUG    2021-09-22 21:51:27,350: dispatch pc=10, inst=BINARY_POWER(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack ['$const2.0', '$const4.1', '$cloudiness6.2', '$const8.3']
DEBUG    2021-09-22 21:51:27,350: dispatch pc=12, inst=BINARY_MULTIPLY(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack ['$const2.0', '$const4.1', '$10binary_power.4']
DEBUG    2021-09-22 21:51:27,350: dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack ['$const2.0', '$12binary_multiply.5']
DEBUG    2021-09-22 21:51:27,350: dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack ['$14binary_add.6']
DEBUG    2021-09-22 21:51:27,350: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,350: stack ['$14binary_add.6', '$emissivity_air16.7']
DEBUG    2021-09-22 21:51:27,351: dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=452)
DEBUG    2021-09-22 21:51:27,351: stack ['$18binary_multiply.8']
DEBUG    2021-09-22 21:51:27,351: dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,351: stack ['$18binary_multiply.8', '$stefan_boltzmann20.9']
DEBUG    2021-09-22 21:51:27,351: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=452)
DEBUG    2021-09-22 21:51:27,351: stack ['$22binary_multiply.10']
DEBUG    2021-09-22 21:51:27,351: dispatch pc=26, inst=LOAD_CONST(arg=4, lineno=452)
DEBUG    2021-09-22 21:51:27,351: stack ['$22binary_multiply.10', '$TairK24.11']
DEBUG    2021-09-22 21:51:27,351: dispatch pc=28, inst=BINARY_POWER(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,351: stack ['$22binary_multiply.10', '$TairK24.11', '$const26.12']
DEBUG    2021-09-22 21:51:27,351: dispatch pc=30, inst=BINARY_MULTIPLY(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,351: stack ['$22binary_multiply.10', '$28binary_power.13']
DEBUG    2021-09-22 21:51:27,351: dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=452)
DEBUG    2021-09-22 21:51:27,351: stack ['$30binary_multiply.14']
DEBUG    2021-09-22 21:51:27,351: end state. edges=[]
DEBUG    2021-09-22 21:51:27,351: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,351: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,351: defmap: {}
DEBUG    2021-09-22 21:51:27,352: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,352: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,352: keep phismap: {}
DEBUG    2021-09-22 21:51:27,352: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,352: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,352: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$cloudiness6.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$cloudiness6.2', 'rhs': '$const8.3', 'res': '$10binary_power.4'}), (12, {'lhs': '$const4.1', 'rhs': '$10binary_power.4', 'res': '$12binary_multiply.5'}), (14, {'lhs': '$const2.0', 'rhs': '$12binary_multiply.5', 'res': '$14binary_add.6'}), (16, {'res': '$emissivity_air16.7'}), (18, {'lhs': '$14binary_add.6', 'rhs': '$emissivity_air16.7', 'res': '$18binary_multiply.8'}), (20, {'res': '$stefan_boltzmann20.9'}), (22, {'lhs': '$18binary_multiply.8', 'rhs': '$stefan_boltzmann20.9', 'res': '$22binary_multiply.10'}), (24, {'res': '$TairK24.11'}), (26, {'res': '$const26.12'}), (28, {'lhs': '$TairK24.11', 'rhs': '$const26.12', 'res': '$28binary_power.13'}), (30, {'lhs': '$22binary_multiply.10', 'rhs': '$28binary_power.13', 'res': '$30binary_multiply.14'}), (32, {'retval': '$30binary_multiply.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,353: label 0:
    TairK = arg(0, name=TairK)               ['TairK']
    emissivity_air = arg(1, name=emissivity_air) ['emissivity_air']
    cloudiness = arg(2, name=cloudiness)     ['cloudiness']
    stefan_boltzmann = arg(3, name=stefan_boltzmann) ['stefan_boltzmann']
    $const2.0 = const(float, 1.0)            ['$const2.0']
    $const4.1 = const(float, 0.17)           ['$const4.1']
    $const8.3 = const(int, 2)                ['$const8.3']
    $10binary_power.4 = cloudiness ** $const8.3 ['$10binary_power.4', '$const8.3', 'cloudiness']
    $12binary_multiply.5 = $const4.1 * $10binary_power.4 ['$10binary_power.4', '$12binary_multiply.5', '$const4.1']
    $14binary_add.6 = $const2.0 + $12binary_multiply.5 ['$12binary_multiply.5', '$14binary_add.6', '$const2.0']
    $18binary_multiply.8 = $14binary_add.6 * emissivity_air ['$14binary_add.6', '$18binary_multiply.8', 'emissivity_air']
    $22binary_multiply.10 = $18binary_multiply.8 * stefan_boltzmann ['$18binary_multiply.8', '$22binary_multiply.10', 'stefan_boltzmann']
    $const26.12 = const(float, 4.0)          ['$const26.12']
    $28binary_power.13 = TairK ** $const26.12 ['$28binary_power.13', '$const26.12', 'TairK']
    $30binary_multiply.14 = $22binary_multiply.10 * $28binary_power.13 ['$22binary_multiply.10', '$28binary_power.13', '$30binary_multiply.14']
    $32return_value.15 = cast(value=$30binary_multiply.14) ['$30binary_multiply.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

DEBUG    2021-09-22 21:51:27,355: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,355: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120793ca0>
DEBUG    2021-09-22 21:51:27,355: on stmt: TairK = arg(0, name=TairK)
DEBUG    2021-09-22 21:51:27,355: on stmt: emissivity_air = arg(1, name=emissivity_air)
DEBUG    2021-09-22 21:51:27,355: on stmt: cloudiness = arg(2, name=cloudiness)
DEBUG    2021-09-22 21:51:27,355: on stmt: stefan_boltzmann = arg(3, name=stefan_boltzmann)
DEBUG    2021-09-22 21:51:27,355: on stmt: $const2.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,355: on stmt: $const4.1 = const(float, 0.17)
DEBUG    2021-09-22 21:51:27,355: on stmt: $const8.3 = const(int, 2)
DEBUG    2021-09-22 21:51:27,355: on stmt: $10binary_power.4 = cloudiness ** $const8.3
DEBUG    2021-09-22 21:51:27,355: on stmt: $12binary_multiply.5 = $const4.1 * $10binary_power.4
DEBUG    2021-09-22 21:51:27,355: on stmt: $14binary_add.6 = $const2.0 + $12binary_multiply.5
DEBUG    2021-09-22 21:51:27,355: on stmt: $18binary_multiply.8 = $14binary_add.6 * emissivity_air
DEBUG    2021-09-22 21:51:27,355: on stmt: $22binary_multiply.10 = $18binary_multiply.8 * stefan_boltzmann
DEBUG    2021-09-22 21:51:27,356: on stmt: $const26.12 = const(float, 4.0)
DEBUG    2021-09-22 21:51:27,356: on stmt: $28binary_power.13 = TairK ** $const26.12
DEBUG    2021-09-22 21:51:27,356: on stmt: $30binary_multiply.14 = $22binary_multiply.10 * $28binary_power.13
DEBUG    2021-09-22 21:51:27,356: on stmt: $32return_value.15 = cast(value=$30binary_multiply.14)
DEBUG    2021-09-22 21:51:27,356: on stmt: return $32return_value.15
DEBUG    2021-09-22 21:51:27,356: defs defaultdict(<class 'list'>,
            {'$10binary_power.4': [<numba.core.ir.Assign object at 0x7f913382a5b0>],
             '$12binary_multiply.5': [<numba.core.ir.Assign object at 0x7f913382a730>],
             '$14binary_add.6': [<numba.core.ir.Assign object at 0x7f913382a8b0>],
             '$18binary_multiply.8': [<numba.core.ir.Assign object at 0x7f913382ab50>],
             '$22binary_multiply.10': [<numba.core.ir.Assign object at 0x7f913382adf0>],
             '$28binary_power.13': [<numba.core.ir.Assign object at 0x7f9133832250>],
             '$30binary_multiply.14': [<numba.core.ir.Assign object at 0x7f91338323d0>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x7f9133832550>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f913382efd0>],
             '$const26.12': [<numba.core.ir.Assign object at 0x7f91338320d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f913382a190>],
             '$const8.3': [<numba.core.ir.Assign object at 0x7f913382a430>],
             'TairK': [<numba.core.ir.Assign object at 0x7f913382e070>],
             'cloudiness': [<numba.core.ir.Assign object at 0x7f913382ed30>],
             'emissivity_air': [<numba.core.ir.Assign object at 0x7f913382ec10>],
             'stefan_boltzmann': [<numba.core.ir.Assign object at 0x7f913382ee50>]})
DEBUG    2021-09-22 21:51:27,356: SSA violators set()
DEBUG    2021-09-22 21:51:27,371: bytecode dump:
>          0	NOP(arg=None, lineno=217)
           2	LOAD_DEREF(arg=1, lineno=217)
           4	LOAD_CONST(arg=1, lineno=217)
           6	CALL_FUNCTION(arg=1, lineno=217)
           8	STORE_FAST(arg=2, lineno=217)
          10	LOAD_DEREF(arg=1, lineno=218)
          12	LOAD_FAST(arg=0, lineno=218)
          14	CALL_FUNCTION(arg=1, lineno=218)
          16	STORE_FAST(arg=0, lineno=218)
          18	LOAD_FAST(arg=1, lineno=219)
          20	LOAD_CONST(arg=2, lineno=219)
          22	COMPARE_OP(arg=0, lineno=219)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=219)
          26	LOAD_CONST(arg=3, lineno=220)
          28	STORE_FAST(arg=3, lineno=220)
          30	LOAD_FAST(arg=1, lineno=221)
          32	UNARY_NEGATIVE(arg=None, lineno=221)
          34	STORE_FAST(arg=4, lineno=221)
          36	LOAD_FAST(arg=4, lineno=222)
          38	LOAD_CONST(arg=2, lineno=222)
          40	COMPARE_OP(arg=0, lineno=222)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=222)
          44	LOAD_GLOBAL(arg=0, lineno=223)
          46	RAISE_VARARGS(arg=1, lineno=223)
>         48	LOAD_DEREF(arg=0, lineno=224)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=224)
          52	LOAD_FAST(arg=0, lineno=225)
          54	LOAD_CONST(arg=2, lineno=225)
          56	COMPARE_OP(arg=2, lineno=225)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=225)
          60	LOAD_DEREF(arg=2, lineno=226)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=226)
          64	LOAD_DEREF(arg=2, lineno=227)
          66	RETURN_VALUE(arg=None, lineno=227)
>         68	LOAD_GLOBAL(arg=1, lineno=229)
          70	LOAD_CONST(arg=4, lineno=229)
          72	CALL_FUNCTION(arg=1, lineno=229)
          74	RAISE_VARARGS(arg=1, lineno=229)
>         76	LOAD_FAST(arg=0, lineno=230)
          78	LOAD_CONST(arg=1, lineno=230)
          80	COMPARE_OP(arg=3, lineno=230)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          84	LOAD_FAST(arg=0, lineno=230)
          86	LOAD_CONST(arg=5, lineno=230)
          88	COMPARE_OP(arg=3, lineno=230)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=230)
          92	LOAD_CONST(arg=2, lineno=231)
          94	RETURN_VALUE(arg=None, lineno=231)
          96	JUMP_FORWARD(arg=8, lineno=231)
>         98	LOAD_CONST(arg=6, lineno=233)
         100	STORE_FAST(arg=3, lineno=233)
         102	LOAD_FAST(arg=1, lineno=234)
         104	STORE_FAST(arg=4, lineno=234)
>        106	LOAD_FAST(arg=4, lineno=235)
         108	LOAD_CONST(arg=7, lineno=235)
         110	COMPARE_OP(arg=4, lineno=235)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=235)
         114	LOAD_GLOBAL(arg=2, lineno=237)
         116	LOAD_METHOD(arg=3, lineno=237)
         118	LOAD_FAST(arg=0, lineno=237)
         120	LOAD_GLOBAL(arg=4, lineno=237)
         122	LOAD_FAST(arg=1, lineno=237)
         124	CALL_FUNCTION(arg=1, lineno=237)
         126	CALL_METHOD(arg=2, lineno=237)
         128	RETURN_VALUE(arg=None, lineno=237)
>        130	LOAD_FAST(arg=4, lineno=238)
         132	LOAD_CONST(arg=2, lineno=238)
         134	COMPARE_OP(arg=3, lineno=238)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=238)
         138	LOAD_FAST(arg=4, lineno=239)
         140	LOAD_CONST(arg=1, lineno=239)
         142	BINARY_AND(arg=None, lineno=239)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=239)
         146	LOAD_FAST(arg=2, lineno=240)
         148	LOAD_FAST(arg=0, lineno=240)
         150	INPLACE_MULTIPLY(arg=None, lineno=240)
         152	STORE_FAST(arg=2, lineno=240)
>        154	LOAD_FAST(arg=4, lineno=241)
         156	LOAD_CONST(arg=1, lineno=241)
         158	INPLACE_RSHIFT(arg=None, lineno=241)
         160	STORE_FAST(arg=4, lineno=241)
         162	LOAD_FAST(arg=0, lineno=242)
         164	LOAD_FAST(arg=0, lineno=242)
         166	INPLACE_MULTIPLY(arg=None, lineno=242)
         168	STORE_FAST(arg=0, lineno=242)
         170	JUMP_ABSOLUTE(arg=130, lineno=242)
>        172	LOAD_FAST(arg=3, lineno=244)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=244)
         176	LOAD_CONST(arg=8, lineno=244)
         178	LOAD_FAST(arg=2, lineno=244)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=244)
         182	RETURN_VALUE(arg=None, lineno=244)
>        184	LOAD_FAST(arg=2, lineno=244)
         186	RETURN_VALUE(arg=None, lineno=244)
DEBUG    2021-09-22 21:51:27,371: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,371: stack: []
DEBUG    2021-09-22 21:51:27,371: dispatch pc=0, inst=NOP(arg=None, lineno=217)
DEBUG    2021-09-22 21:51:27,372: stack []
DEBUG    2021-09-22 21:51:27,372: dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG    2021-09-22 21:51:27,372: stack []
DEBUG    2021-09-22 21:51:27,372: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=217)
DEBUG    2021-09-22 21:51:27,372: stack ['$2load_deref.0']
DEBUG    2021-09-22 21:51:27,372: dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG    2021-09-22 21:51:27,372: stack ['$2load_deref.0', '$const4.1']
DEBUG    2021-09-22 21:51:27,372: dispatch pc=8, inst=STORE_FAST(arg=2, lineno=217)
DEBUG    2021-09-22 21:51:27,372: stack ['$6call_function.2']
DEBUG    2021-09-22 21:51:27,372: dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=218)
DEBUG    2021-09-22 21:51:27,372: stack []
DEBUG    2021-09-22 21:51:27,372: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=218)
DEBUG    2021-09-22 21:51:27,372: stack ['$10load_deref.3']
DEBUG    2021-09-22 21:51:27,372: dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=218)
DEBUG    2021-09-22 21:51:27,372: stack ['$10load_deref.3', '$a12.4']
DEBUG    2021-09-22 21:51:27,372: dispatch pc=16, inst=STORE_FAST(arg=0, lineno=218)
DEBUG    2021-09-22 21:51:27,372: stack ['$14call_function.5']
DEBUG    2021-09-22 21:51:27,372: dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=219)
DEBUG    2021-09-22 21:51:27,372: stack []
DEBUG    2021-09-22 21:51:27,372: dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=219)
DEBUG    2021-09-22 21:51:27,372: stack ['$b18.6']
DEBUG    2021-09-22 21:51:27,373: dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=219)
DEBUG    2021-09-22 21:51:27,373: stack ['$b18.6', '$const20.7']
DEBUG    2021-09-22 21:51:27,373: dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=219)
DEBUG    2021-09-22 21:51:27,373: stack ['$22compare_op.8']
DEBUG    2021-09-22 21:51:27,373: end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,373: pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,373: stack: []
DEBUG    2021-09-22 21:51:27,373: dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=220)
DEBUG    2021-09-22 21:51:27,373: stack []
DEBUG    2021-09-22 21:51:27,373: dispatch pc=28, inst=STORE_FAST(arg=3, lineno=220)
DEBUG    2021-09-22 21:51:27,373: stack ['$const26.0']
DEBUG    2021-09-22 21:51:27,373: dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=221)
DEBUG    2021-09-22 21:51:27,373: stack []
DEBUG    2021-09-22 21:51:27,373: dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=221)
DEBUG    2021-09-22 21:51:27,373: stack ['$b30.1']
DEBUG    2021-09-22 21:51:27,373: dispatch pc=34, inst=STORE_FAST(arg=4, lineno=221)
DEBUG    2021-09-22 21:51:27,373: stack ['$32unary_negative.2']
DEBUG    2021-09-22 21:51:27,373: dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=222)
DEBUG    2021-09-22 21:51:27,373: stack []
DEBUG    2021-09-22 21:51:27,374: dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG    2021-09-22 21:51:27,374: stack ['$exp36.3']
DEBUG    2021-09-22 21:51:27,374: dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=222)
DEBUG    2021-09-22 21:51:27,374: stack ['$exp36.3', '$const38.4']
DEBUG    2021-09-22 21:51:27,374: dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=222)
DEBUG    2021-09-22 21:51:27,374: stack ['$40compare_op.5']
DEBUG    2021-09-22 21:51:27,374: end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,374: pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,374: stack: []
DEBUG    2021-09-22 21:51:27,374: dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=233)
DEBUG    2021-09-22 21:51:27,374: stack []
DEBUG    2021-09-22 21:51:27,374: dispatch pc=100, inst=STORE_FAST(arg=3, lineno=233)
DEBUG    2021-09-22 21:51:27,374: stack ['$const98.0']
DEBUG    2021-09-22 21:51:27,374: dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=234)
DEBUG    2021-09-22 21:51:27,374: stack []
DEBUG    2021-09-22 21:51:27,374: dispatch pc=104, inst=STORE_FAST(arg=4, lineno=234)
DEBUG    2021-09-22 21:51:27,374: stack ['$b102.1']
DEBUG    2021-09-22 21:51:27,374: end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,374: pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,374: stack: []
DEBUG    2021-09-22 21:51:27,374: dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=223)
DEBUG    2021-09-22 21:51:27,375: stack []
DEBUG    2021-09-22 21:51:27,375: dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=223)
DEBUG    2021-09-22 21:51:27,375: stack ['$44load_global.0']
DEBUG    2021-09-22 21:51:27,375: end state. edges=[]
DEBUG    2021-09-22 21:51:27,375: pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,375: stack: []
DEBUG    2021-09-22 21:51:27,375: dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=224)
DEBUG    2021-09-22 21:51:27,375: stack []
DEBUG    2021-09-22 21:51:27,375: dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=224)
DEBUG    2021-09-22 21:51:27,375: stack ['$48load_deref.0']
DEBUG    2021-09-22 21:51:27,375: end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,375: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,375: stack: []
DEBUG    2021-09-22 21:51:27,375: dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=235)
DEBUG    2021-09-22 21:51:27,375: stack []
DEBUG    2021-09-22 21:51:27,375: dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=235)
DEBUG    2021-09-22 21:51:27,375: stack ['$exp106.0']
DEBUG    2021-09-22 21:51:27,375: dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=235)
DEBUG    2021-09-22 21:51:27,375: stack ['$exp106.0', '$const108.1']
DEBUG    2021-09-22 21:51:27,375: dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=235)
DEBUG    2021-09-22 21:51:27,376: stack ['$110compare_op.2']
DEBUG    2021-09-22 21:51:27,376: end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,376: pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,376: stack: []
DEBUG    2021-09-22 21:51:27,376: dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=225)
DEBUG    2021-09-22 21:51:27,376: stack []
DEBUG    2021-09-22 21:51:27,376: dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=225)
DEBUG    2021-09-22 21:51:27,376: stack ['$a52.0']
DEBUG    2021-09-22 21:51:27,376: dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=225)
DEBUG    2021-09-22 21:51:27,376: stack ['$a52.0', '$const54.1']
DEBUG    2021-09-22 21:51:27,376: dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=225)
DEBUG    2021-09-22 21:51:27,376: stack ['$56compare_op.2']
DEBUG    2021-09-22 21:51:27,376: end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,376: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,376: pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,376: stack: []
DEBUG    2021-09-22 21:51:27,376: dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=237)
DEBUG    2021-09-22 21:51:27,376: stack []
DEBUG    2021-09-22 21:51:27,376: dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=237)
DEBUG    2021-09-22 21:51:27,377: stack ['$114load_global.0']
DEBUG    2021-09-22 21:51:27,377: dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=237)
DEBUG    2021-09-22 21:51:27,377: stack ['$116load_method.1']
DEBUG    2021-09-22 21:51:27,377: dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=237)
DEBUG    2021-09-22 21:51:27,377: stack ['$116load_method.1', '$a118.2']
DEBUG    2021-09-22 21:51:27,377: dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=237)
DEBUG    2021-09-22 21:51:27,377: stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG    2021-09-22 21:51:27,377: dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=237)
DEBUG    2021-09-22 21:51:27,377: stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG    2021-09-22 21:51:27,377: dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=237)
DEBUG    2021-09-22 21:51:27,377: stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG    2021-09-22 21:51:27,377: dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=237)
DEBUG    2021-09-22 21:51:27,377: stack ['$126call_method.6']
DEBUG    2021-09-22 21:51:27,377: end state. edges=[]
DEBUG    2021-09-22 21:51:27,377: pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,377: stack: []
DEBUG    2021-09-22 21:51:27,377: dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG    2021-09-22 21:51:27,377: stack []
DEBUG    2021-09-22 21:51:27,377: dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=238)
DEBUG    2021-09-22 21:51:27,377: stack ['$exp130.0']
DEBUG    2021-09-22 21:51:27,377: dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=238)
DEBUG    2021-09-22 21:51:27,378: stack ['$exp130.0', '$const132.1']
DEBUG    2021-09-22 21:51:27,378: dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=238)
DEBUG    2021-09-22 21:51:27,378: stack ['$134compare_op.2']
DEBUG    2021-09-22 21:51:27,378: end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,378: pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,378: stack: []
DEBUG    2021-09-22 21:51:27,378: dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG    2021-09-22 21:51:27,378: stack []
DEBUG    2021-09-22 21:51:27,378: dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=226)
DEBUG    2021-09-22 21:51:27,378: stack ['$60load_deref.0']
DEBUG    2021-09-22 21:51:27,378: end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,378: pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,378: stack: []
DEBUG    2021-09-22 21:51:27,378: dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG    2021-09-22 21:51:27,378: stack []
DEBUG    2021-09-22 21:51:27,378: dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG    2021-09-22 21:51:27,378: stack ['$a76.0']
DEBUG    2021-09-22 21:51:27,378: dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG    2021-09-22 21:51:27,378: stack ['$a76.0', '$const78.1']
DEBUG    2021-09-22 21:51:27,378: dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG    2021-09-22 21:51:27,378: stack ['$80compare_op.2']
DEBUG    2021-09-22 21:51:27,379: end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,379: pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,379: stack: []
DEBUG    2021-09-22 21:51:27,379: dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=239)
DEBUG    2021-09-22 21:51:27,379: stack []
DEBUG    2021-09-22 21:51:27,379: dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=239)
DEBUG    2021-09-22 21:51:27,379: stack ['$exp138.0']
DEBUG    2021-09-22 21:51:27,379: dispatch pc=142, inst=BINARY_AND(arg=None, lineno=239)
DEBUG    2021-09-22 21:51:27,379: stack ['$exp138.0', '$const140.1']
DEBUG    2021-09-22 21:51:27,379: dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=239)
DEBUG    2021-09-22 21:51:27,379: stack ['$142binary_and.2']
DEBUG    2021-09-22 21:51:27,379: end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,379: pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,379: stack: []
DEBUG    2021-09-22 21:51:27,379: dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=244)
DEBUG    2021-09-22 21:51:27,379: stack []
DEBUG    2021-09-22 21:51:27,379: dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=244)
DEBUG    2021-09-22 21:51:27,379: stack ['$invert172.0']
DEBUG    2021-09-22 21:51:27,379: end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,379: pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,379: stack: []
DEBUG    2021-09-22 21:51:27,380: dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=227)
DEBUG    2021-09-22 21:51:27,380: stack []
DEBUG    2021-09-22 21:51:27,380: dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=227)
DEBUG    2021-09-22 21:51:27,380: stack ['$64load_deref.0']
DEBUG    2021-09-22 21:51:27,380: end state. edges=[]
DEBUG    2021-09-22 21:51:27,380: pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,380: stack: []
DEBUG    2021-09-22 21:51:27,380: dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=229)
DEBUG    2021-09-22 21:51:27,380: stack []
DEBUG    2021-09-22 21:51:27,380: dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=229)
DEBUG    2021-09-22 21:51:27,380: stack ['$68load_global.0']
DEBUG    2021-09-22 21:51:27,380: dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=229)
DEBUG    2021-09-22 21:51:27,380: stack ['$68load_global.0', '$const70.1']
DEBUG    2021-09-22 21:51:27,380: dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=229)
DEBUG    2021-09-22 21:51:27,380: stack ['$72call_function.2']
DEBUG    2021-09-22 21:51:27,380: end state. edges=[]
DEBUG    2021-09-22 21:51:27,380: pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,380: stack: []
DEBUG    2021-09-22 21:51:27,380: dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=230)
DEBUG    2021-09-22 21:51:27,380: stack []
DEBUG    2021-09-22 21:51:27,380: dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=230)
DEBUG    2021-09-22 21:51:27,380: stack ['$a84.0']
DEBUG    2021-09-22 21:51:27,380: dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=230)
DEBUG    2021-09-22 21:51:27,381: stack ['$a84.0', '$const86.1']
DEBUG    2021-09-22 21:51:27,381: dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=230)
DEBUG    2021-09-22 21:51:27,381: stack ['$88compare_op.2']
DEBUG    2021-09-22 21:51:27,381: end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,381: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,381: pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,381: stack: []
DEBUG    2021-09-22 21:51:27,381: dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=240)
DEBUG    2021-09-22 21:51:27,381: stack []
DEBUG    2021-09-22 21:51:27,381: dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=240)
DEBUG    2021-09-22 21:51:27,381: stack ['$r146.0']
DEBUG    2021-09-22 21:51:27,381: dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG    2021-09-22 21:51:27,381: stack ['$r146.0', '$a148.1']
DEBUG    2021-09-22 21:51:27,381: dispatch pc=152, inst=STORE_FAST(arg=2, lineno=240)
DEBUG    2021-09-22 21:51:27,381: stack ['$150inplace_multiply.2']
DEBUG    2021-09-22 21:51:27,381: end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,381: pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,381: stack: []
DEBUG    2021-09-22 21:51:27,381: dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=241)
DEBUG    2021-09-22 21:51:27,381: stack []
DEBUG    2021-09-22 21:51:27,381: dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=241)
DEBUG    2021-09-22 21:51:27,381: stack ['$exp154.0']
DEBUG    2021-09-22 21:51:27,381: dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=241)
DEBUG    2021-09-22 21:51:27,382: stack ['$exp154.0', '$const156.1']
DEBUG    2021-09-22 21:51:27,382: dispatch pc=160, inst=STORE_FAST(arg=4, lineno=241)
DEBUG    2021-09-22 21:51:27,382: stack ['$158inplace_rshift.2']
DEBUG    2021-09-22 21:51:27,382: dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG    2021-09-22 21:51:27,382: stack []
DEBUG    2021-09-22 21:51:27,382: dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=242)
DEBUG    2021-09-22 21:51:27,382: stack ['$a162.3']
DEBUG    2021-09-22 21:51:27,382: dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=242)
DEBUG    2021-09-22 21:51:27,382: stack ['$a162.3', '$a164.4']
DEBUG    2021-09-22 21:51:27,382: dispatch pc=168, inst=STORE_FAST(arg=0, lineno=242)
DEBUG    2021-09-22 21:51:27,382: stack ['$166inplace_multiply.5']
DEBUG    2021-09-22 21:51:27,382: dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=242)
DEBUG    2021-09-22 21:51:27,382: stack []
DEBUG    2021-09-22 21:51:27,382: end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,382: pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,382: stack: []
DEBUG    2021-09-22 21:51:27,382: dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=244)
DEBUG    2021-09-22 21:51:27,382: stack []
DEBUG    2021-09-22 21:51:27,383: dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG    2021-09-22 21:51:27,383: stack ['$const176.0']
DEBUG    2021-09-22 21:51:27,383: dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=244)
DEBUG    2021-09-22 21:51:27,383: stack ['$const176.0', '$r178.1']
DEBUG    2021-09-22 21:51:27,383: dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG    2021-09-22 21:51:27,383: stack ['$180binary_true_divide.2']
DEBUG    2021-09-22 21:51:27,383: end state. edges=[]
DEBUG    2021-09-22 21:51:27,383: pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,383: stack: []
DEBUG    2021-09-22 21:51:27,383: dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=244)
DEBUG    2021-09-22 21:51:27,383: stack []
DEBUG    2021-09-22 21:51:27,383: dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=244)
DEBUG    2021-09-22 21:51:27,383: stack ['$r184.0']
DEBUG    2021-09-22 21:51:27,383: end state. edges=[]
DEBUG    2021-09-22 21:51:27,383: pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,383: stack: []
DEBUG    2021-09-22 21:51:27,383: dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=231)
DEBUG    2021-09-22 21:51:27,383: stack []
DEBUG    2021-09-22 21:51:27,383: dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG    2021-09-22 21:51:27,383: stack ['$const92.0']
DEBUG    2021-09-22 21:51:27,383: end state. edges=[]
DEBUG    2021-09-22 21:51:27,383: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,383: pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,383: pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,384: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,384: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,384: defmap: {}
DEBUG    2021-09-22 21:51:27,384: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,384: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,384: keep phismap: {}
DEBUG    2021-09-22 21:51:27,384: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,384: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,384: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG    2021-09-22 21:51:27,384: block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,385: block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,388: label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:225),), kws=(), vararg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:226),), kws=(), vararg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:229)], kws=(), vararg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:230),), kws=(), vararg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG    2021-09-22 21:51:27,399: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,399: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,399: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,399: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,399: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,399: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,399: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,399: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,399: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,399: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,399: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,400: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,400: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,400: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,400: ==== SSA block analysis pass on 26
DEBUG    2021-09-22 21:51:27,400: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,400: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,400: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,400: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,400: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,400: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,400: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,400: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,400: ==== SSA block analysis pass on 44
DEBUG    2021-09-22 21:51:27,400: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,400: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,400: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,401: ==== SSA block analysis pass on 48
DEBUG    2021-09-22 21:51:27,401: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,401: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,401: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,401: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,401: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,401: ==== SSA block analysis pass on 98
DEBUG    2021-09-22 21:51:27,401: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,401: on stmt: invert = const(bool, False)
DEBUG    2021-09-22 21:51:27,401: on stmt: exp = b
DEBUG    2021-09-22 21:51:27,401: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,401: ==== SSA block analysis pass on 106
DEBUG    2021-09-22 21:51:27,401: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,401: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,401: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2021-09-22 21:51:27,401: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,402: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,402: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,402: ==== SSA block analysis pass on 114
DEBUG    2021-09-22 21:51:27,402: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,402: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,402: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,402: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,402: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,402: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,402: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,402: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,402: ==== SSA block analysis pass on 130
DEBUG    2021-09-22 21:51:27,402: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,402: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,402: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2021-09-22 21:51:27,402: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,402: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,402: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,402: ==== SSA block analysis pass on 138
DEBUG    2021-09-22 21:51:27,402: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,402: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,402: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2021-09-22 21:51:27,403: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,403: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,403: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,403: ==== SSA block analysis pass on 146
DEBUG    2021-09-22 21:51:27,403: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,403: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,403: on stmt: r = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,403: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,403: ==== SSA block analysis pass on 154
DEBUG    2021-09-22 21:51:27,403: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,403: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,403: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,403: on stmt: exp = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,403: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,403: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,403: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,403: ==== SSA block analysis pass on 172
DEBUG    2021-09-22 21:51:27,403: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,403: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,403: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,403: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,403: ==== SSA block analysis pass on 176
DEBUG    2021-09-22 21:51:27,403: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,403: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,403: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,404: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,404: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,404: ==== SSA block analysis pass on 184
DEBUG    2021-09-22 21:51:27,404: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9133838220>
DEBUG    2021-09-22 21:51:27,404: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,404: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,404: defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7f913382e610>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x7f91105aa250>],
             '$112pred': [<numba.core.ir.Assign object at 0x7f91105aa4f0>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x7f91105aa730>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x7f91105aa8b0>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x7f91105aab50>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x7f91105aae20>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x7f91105aafa0>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x7f91105ac130>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x7f91105ac5b0>],
             '$136pred': [<numba.core.ir.Assign object at 0x7f91105ac850>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x7f91105acd30>],
             '$144pred': [<numba.core.ir.Assign object at 0x7f91105acfd0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7f91105ae490>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7f91105ae9d0>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7f91105aee50>],
             '$174pred': [<numba.core.ir.Assign object at 0x7f91105b0370>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f91105b0850>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x7f91105b09d0>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x7f91105b0d30>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x7f9133848790>],
             '$24pred': [<numba.core.ir.Assign object at 0x7f9133848a30>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f9133832d60>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x7f91105a0490>],
             '$42pred': [<numba.core.ir.Assign object at 0x7f91105a0730>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x7f91105a0850>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x7f91105a0b50>],
             '$50pred': [<numba.core.ir.Assign object at 0x7f91105a0df0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x7f91105aa0d0>],
             '$const132.1': [<numba.core.ir.Assign object at 0x7f91105ac430>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7f91105acbb0>],
             '$const156.1': [<numba.core.ir.Assign object at 0x7f91105ae850>],
             '$const176.0': [<numba.core.ir.Assign object at 0x7f91105b05b0>],
             '$const20.7': [<numba.core.ir.Assign object at 0x7f91338481c0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x7f91105a0310>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f9133832fd0>],
             'a': [<numba.core.ir.Assign object at 0x7f913383b310>],
             'a.1': [<numba.core.ir.Assign object at 0x7f91338486a0>,
                     <numba.core.ir.Assign object at 0x7f91105aef10>],
             'b': [<numba.core.ir.Assign object at 0x7f9133832b50>],
             'bool112': [<numba.core.ir.Assign object at 0x7f91105aa3d0>],
             'bool136': [<numba.core.ir.Assign object at 0x7f91105ac730>],
             'bool144': [<numba.core.ir.Assign object at 0x7f91105aceb0>],
             'bool174': [<numba.core.ir.Assign object at 0x7f91105b0250>],
             'bool24': [<numba.core.ir.Assign object at 0x7f9133848910>],
             'bool42': [<numba.core.ir.Assign object at 0x7f91105a0610>],
             'bool50': [<numba.core.ir.Assign object at 0x7f91105a0cd0>],
             'exp': [<numba.core.ir.Assign object at 0x7f9133848f10>,
                     <numba.core.ir.Assign object at 0x7f91105a8df0>,
                     <numba.core.ir.Assign object at 0x7f91105aea90>],
             'invert': [<numba.core.ir.Assign object at 0x7f9133848b50>,
                        <numba.core.ir.Assign object at 0x7f91105a8b50>],
             'r': [<numba.core.ir.Assign object at 0x7f91338327f0>,
                   <numba.core.ir.Assign object at 0x7f91105ae550>]})
DEBUG    2021-09-22 21:51:27,404: SSA violators {'invert', 'a.1', 'exp', 'r'}
DEBUG    2021-09-22 21:51:27,404: Fix SSA violator on var invert
DEBUG    2021-09-22 21:51:27,405: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,405: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,405: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,405: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,405: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,405: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,405: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,405: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,405: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,405: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,405: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,405: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,405: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,405: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,405: ==== SSA block rewrite pass on 26
DEBUG    2021-09-22 21:51:27,405: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,405: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,405: first assign: invert
DEBUG    2021-09-22 21:51:27,405: replaced with: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,406: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,406: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,406: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,406: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,406: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,406: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,406: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,406: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,406: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,406: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,406: ==== SSA block rewrite pass on 48
DEBUG    2021-09-22 21:51:27,406: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,406: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,406: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,406: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,406: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,406: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,406: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,406: on stmt: invert = const(bool, False)
DEBUG    2021-09-22 21:51:27,406: replaced with: invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,406: on stmt: exp = b
DEBUG    2021-09-22 21:51:27,406: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,406: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,406: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,406: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,407: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2021-09-22 21:51:27,407: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,407: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,407: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,407: ==== SSA block rewrite pass on 114
DEBUG    2021-09-22 21:51:27,407: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,407: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,407: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,407: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,407: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,407: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,407: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,407: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,407: ==== SSA block rewrite pass on 130
DEBUG    2021-09-22 21:51:27,407: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,407: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,407: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2021-09-22 21:51:27,407: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,407: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,407: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,407: ==== SSA block rewrite pass on 138
DEBUG    2021-09-22 21:51:27,407: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,407: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,407: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2021-09-22 21:51:27,408: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,408: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,408: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,408: ==== SSA block rewrite pass on 146
DEBUG    2021-09-22 21:51:27,408: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,408: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,408: on stmt: r = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,408: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,408: ==== SSA block rewrite pass on 154
DEBUG    2021-09-22 21:51:27,408: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,408: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,408: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,408: on stmt: exp = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,408: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,408: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,408: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,408: ==== SSA block rewrite pass on 172
DEBUG    2021-09-22 21:51:27,408: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,408: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,408: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,408: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,408: ==== SSA block rewrite pass on 176
DEBUG    2021-09-22 21:51:27,408: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,408: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,408: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,409: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,409: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,409: ==== SSA block rewrite pass on 184
DEBUG    2021-09-22 21:51:27,409: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,409: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,409: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,409: Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f91105b0be0>],
             98: [<numba.core.ir.Assign object at 0x7f9133838220>]})
DEBUG    2021-09-22 21:51:27,409: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,409: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,409: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,409: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,409: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,409: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,409: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,409: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,409: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,409: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,409: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,409: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,410: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,410: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,410: ==== SSA block rewrite pass on 26
DEBUG    2021-09-22 21:51:27,410: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,410: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,410: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,410: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,410: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,410: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,410: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,410: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,410: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,410: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,410: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,410: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,410: ==== SSA block rewrite pass on 48
DEBUG    2021-09-22 21:51:27,410: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,410: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,410: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,410: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,410: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,411: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,411: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,411: on stmt: invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,411: on stmt: exp = b
DEBUG    2021-09-22 21:51:27,411: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,411: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,411: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,411: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,411: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2021-09-22 21:51:27,411: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,411: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,411: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,411: ==== SSA block rewrite pass on 114
DEBUG    2021-09-22 21:51:27,411: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,411: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,411: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,411: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,411: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,411: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,411: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,411: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,411: ==== SSA block rewrite pass on 130
DEBUG    2021-09-22 21:51:27,412: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,412: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,412: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2021-09-22 21:51:27,412: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,412: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,412: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,412: ==== SSA block rewrite pass on 138
DEBUG    2021-09-22 21:51:27,412: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,412: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,412: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2021-09-22 21:51:27,412: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,412: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,412: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,412: ==== SSA block rewrite pass on 146
DEBUG    2021-09-22 21:51:27,412: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,412: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,412: on stmt: r = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,412: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,412: ==== SSA block rewrite pass on 154
DEBUG    2021-09-22 21:51:27,412: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,412: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,413: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,413: on stmt: exp = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,413: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,413: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,413: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,413: ==== SSA block rewrite pass on 172
DEBUG    2021-09-22 21:51:27,413: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,413: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,413: on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,413: find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:220),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,413: find_def_from_top label 172
DEBUG    2021-09-22 21:51:27,413: idom 130 from label 172
DEBUG    2021-09-22 21:51:27,413: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,413: find_def_from_top label 130
DEBUG    2021-09-22 21:51:27,413: idom 106 from label 130
DEBUG    2021-09-22 21:51:27,413: find_def_from_bottom label 106
DEBUG    2021-09-22 21:51:27,413: find_def_from_top label 106
DEBUG    2021-09-22 21:51:27,413: insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG    2021-09-22 21:51:27,413: find_def_from_bottom label 48
DEBUG    2021-09-22 21:51:27,413: find_def_from_top label 48
DEBUG    2021-09-22 21:51:27,413: idom 26 from label 48
DEBUG    2021-09-22 21:51:27,413: find_def_from_bottom label 26
DEBUG    2021-09-22 21:51:27,413: incoming_def invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,413: find_def_from_bottom label 98
DEBUG    2021-09-22 21:51:27,414: incoming_def invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,414: replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,414: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,414: ==== SSA block rewrite pass on 176
DEBUG    2021-09-22 21:51:27,414: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,414: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,414: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,414: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,414: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,414: ==== SSA block rewrite pass on 184
DEBUG    2021-09-22 21:51:27,414: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,414: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,414: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,414: Fix SSA violator on var a.1
DEBUG    2021-09-22 21:51:27,414: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,414: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,414: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,414: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,414: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,414: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,414: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,415: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,415: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,415: first assign: a.1
DEBUG    2021-09-22 21:51:27,415: replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,415: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,415: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,415: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,415: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,415: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,415: ==== SSA block rewrite pass on 26
DEBUG    2021-09-22 21:51:27,415: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,415: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,415: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,415: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,415: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,415: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,415: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,415: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,415: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,415: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,415: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,415: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,415: ==== SSA block rewrite pass on 48
DEBUG    2021-09-22 21:51:27,415: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,416: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,416: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,416: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,416: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,416: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,416: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,416: on stmt: invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,416: on stmt: exp = b
DEBUG    2021-09-22 21:51:27,416: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,416: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,416: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,416: on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,416: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,416: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2021-09-22 21:51:27,416: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,416: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,416: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,416: ==== SSA block rewrite pass on 114
DEBUG    2021-09-22 21:51:27,416: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,416: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,416: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,417: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,417: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,417: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,417: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,417: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,417: ==== SSA block rewrite pass on 130
DEBUG    2021-09-22 21:51:27,417: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,417: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,417: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2021-09-22 21:51:27,417: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,417: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,417: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,417: ==== SSA block rewrite pass on 138
DEBUG    2021-09-22 21:51:27,417: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,417: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,417: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2021-09-22 21:51:27,417: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,417: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,417: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,417: ==== SSA block rewrite pass on 146
DEBUG    2021-09-22 21:51:27,417: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,417: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,417: on stmt: r = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,418: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,418: ==== SSA block rewrite pass on 154
DEBUG    2021-09-22 21:51:27,418: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,418: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,418: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,418: on stmt: exp = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,418: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,418: on stmt: a.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,418: replaced with: a.1.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,418: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,418: ==== SSA block rewrite pass on 172
DEBUG    2021-09-22 21:51:27,418: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,418: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,418: on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,418: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,418: ==== SSA block rewrite pass on 176
DEBUG    2021-09-22 21:51:27,418: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,418: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,418: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,418: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,418: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,418: ==== SSA block rewrite pass on 184
DEBUG    2021-09-22 21:51:27,418: Running <numba.core.ssa._FreshVarHandler object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,418: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,418: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,419: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f91105b0460>],
             154: [<numba.core.ir.Assign object at 0x7f91338380d0>]})
DEBUG    2021-09-22 21:51:27,419: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,419: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,419: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,419: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,419: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,419: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,419: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,419: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,419: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,419: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,419: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,419: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,419: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,419: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,419: ==== SSA block rewrite pass on 26
DEBUG    2021-09-22 21:51:27,419: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,419: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,419: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,419: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,419: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,420: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,420: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,420: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,420: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,420: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,420: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,420: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,420: ==== SSA block rewrite pass on 48
DEBUG    2021-09-22 21:51:27,420: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,420: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,420: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,420: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,420: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,420: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,420: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,420: on stmt: invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,420: on stmt: exp = b
DEBUG    2021-09-22 21:51:27,420: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,420: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,420: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,420: on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,420: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,420: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2021-09-22 21:51:27,420: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,420: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,421: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,421: ==== SSA block rewrite pass on 114
DEBUG    2021-09-22 21:51:27,421: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,421: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,421: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,421: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,421: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,421: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,421: find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,421: find_def_from_top label 114
DEBUG    2021-09-22 21:51:27,421: idom 106 from label 114
DEBUG    2021-09-22 21:51:27,421: find_def_from_bottom label 106
DEBUG    2021-09-22 21:51:27,421: find_def_from_top label 106
DEBUG    2021-09-22 21:51:27,421: idom 0 from label 106
DEBUG    2021-09-22 21:51:27,421: find_def_from_bottom label 0
DEBUG    2021-09-22 21:51:27,421: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,421: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,421: ==== SSA block rewrite pass on 130
DEBUG    2021-09-22 21:51:27,421: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,421: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,421: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2021-09-22 21:51:27,421: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,421: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,422: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,422: ==== SSA block rewrite pass on 138
DEBUG    2021-09-22 21:51:27,422: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,422: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,422: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2021-09-22 21:51:27,422: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,422: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,422: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,422: ==== SSA block rewrite pass on 146
DEBUG    2021-09-22 21:51:27,422: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,422: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,422: find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,422: find_def_from_top label 146
DEBUG    2021-09-22 21:51:27,422: idom 138 from label 146
DEBUG    2021-09-22 21:51:27,422: find_def_from_bottom label 138
DEBUG    2021-09-22 21:51:27,422: find_def_from_top label 138
DEBUG    2021-09-22 21:51:27,422: idom 130 from label 138
DEBUG    2021-09-22 21:51:27,422: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,422: find_def_from_top label 130
DEBUG    2021-09-22 21:51:27,422: insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2021-09-22 21:51:27,422: find_def_from_bottom label 106
DEBUG    2021-09-22 21:51:27,422: find_def_from_top label 106
DEBUG    2021-09-22 21:51:27,422: idom 0 from label 106
DEBUG    2021-09-22 21:51:27,422: find_def_from_bottom label 0
DEBUG    2021-09-22 21:51:27,422: incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,423: find_def_from_bottom label 154
DEBUG    2021-09-22 21:51:27,423: incoming_def a.1.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,423: replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,423: on stmt: r = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,423: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,423: ==== SSA block rewrite pass on 154
DEBUG    2021-09-22 21:51:27,423: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,423: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,423: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,423: on stmt: exp = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,423: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,423: find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,423: find_def_from_top label 154
DEBUG    2021-09-22 21:51:27,423: idom 138 from label 154
DEBUG    2021-09-22 21:51:27,423: find_def_from_bottom label 138
DEBUG    2021-09-22 21:51:27,423: find_def_from_top label 138
DEBUG    2021-09-22 21:51:27,423: idom 130 from label 138
DEBUG    2021-09-22 21:51:27,423: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,423: replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,423: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,423: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,423: ==== SSA block rewrite pass on 172
DEBUG    2021-09-22 21:51:27,423: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,424: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,424: on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,424: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,424: ==== SSA block rewrite pass on 176
DEBUG    2021-09-22 21:51:27,424: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,424: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,424: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,424: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,424: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,424: ==== SSA block rewrite pass on 184
DEBUG    2021-09-22 21:51:27,424: Running <numba.core.ssa._FixSSAVars object at 0x7f91207932e0>
DEBUG    2021-09-22 21:51:27,424: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,424: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,424: Fix SSA violator on var exp
DEBUG    2021-09-22 21:51:27,424: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,424: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,424: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,424: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,424: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,424: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,424: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,424: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,424: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,424: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,425: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,425: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,425: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,425: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,425: ==== SSA block rewrite pass on 26
DEBUG    2021-09-22 21:51:27,425: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,425: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,425: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,425: first assign: exp
DEBUG    2021-09-22 21:51:27,425: replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,425: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,425: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,425: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,425: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,425: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,425: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,425: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,425: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,425: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,425: ==== SSA block rewrite pass on 48
DEBUG    2021-09-22 21:51:27,425: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,425: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,425: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,425: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,425: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,426: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,426: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,426: on stmt: invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,426: on stmt: exp = b
DEBUG    2021-09-22 21:51:27,426: replaced with: exp.1 = b
DEBUG    2021-09-22 21:51:27,426: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,426: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,426: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,426: on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,426: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,426: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2021-09-22 21:51:27,426: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,426: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,426: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,426: ==== SSA block rewrite pass on 114
DEBUG    2021-09-22 21:51:27,426: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,426: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,426: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,426: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,426: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,426: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,426: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,426: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,426: ==== SSA block rewrite pass on 130
DEBUG    2021-09-22 21:51:27,427: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,427: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2021-09-22 21:51:27,427: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,427: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2021-09-22 21:51:27,427: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,427: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,427: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,427: ==== SSA block rewrite pass on 138
DEBUG    2021-09-22 21:51:27,427: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,427: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,427: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2021-09-22 21:51:27,427: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,427: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,427: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,427: ==== SSA block rewrite pass on 146
DEBUG    2021-09-22 21:51:27,427: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,427: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,427: on stmt: r = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,427: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,427: ==== SSA block rewrite pass on 154
DEBUG    2021-09-22 21:51:27,427: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,427: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,427: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,427: on stmt: exp = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,427: replaced with: exp.2 = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,428: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,428: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,428: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,428: ==== SSA block rewrite pass on 172
DEBUG    2021-09-22 21:51:27,428: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,428: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,428: on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,428: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,428: ==== SSA block rewrite pass on 176
DEBUG    2021-09-22 21:51:27,428: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,428: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,428: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,428: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,428: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,428: ==== SSA block rewrite pass on 184
DEBUG    2021-09-22 21:51:27,428: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133838490>
DEBUG    2021-09-22 21:51:27,428: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,428: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,428: Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f91338385e0>],
             98: [<numba.core.ir.Assign object at 0x7f9133838d30>],
             154: [<numba.core.ir.Assign object at 0x7f9133905a00>]})
DEBUG    2021-09-22 21:51:27,428: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,428: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,428: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,428: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,429: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,429: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,429: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,429: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,429: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,429: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,429: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,429: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,429: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,429: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,429: ==== SSA block rewrite pass on 26
DEBUG    2021-09-22 21:51:27,429: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,429: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,429: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,429: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,429: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,429: find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,429: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,429: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,429: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,429: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,429: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,429: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,429: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,430: ==== SSA block rewrite pass on 48
DEBUG    2021-09-22 21:51:27,430: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,430: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,430: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,430: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,430: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,430: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,430: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,430: on stmt: invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,430: on stmt: exp.1 = b
DEBUG    2021-09-22 21:51:27,430: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,430: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,430: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,430: on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,430: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,430: on stmt: $110compare_op.2 = exp > $const108.1
DEBUG    2021-09-22 21:51:27,430: find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG    2021-09-22 21:51:27,430: find_def_from_top label 106
DEBUG    2021-09-22 21:51:27,430: insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG    2021-09-22 21:51:27,430: find_def_from_bottom label 48
DEBUG    2021-09-22 21:51:27,430: find_def_from_top label 48
DEBUG    2021-09-22 21:51:27,430: idom 26 from label 48
DEBUG    2021-09-22 21:51:27,430: find_def_from_bottom label 26
DEBUG    2021-09-22 21:51:27,430: incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,431: find_def_from_bottom label 98
DEBUG    2021-09-22 21:51:27,431: incoming_def exp.1 = b
DEBUG    2021-09-22 21:51:27,431: replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2021-09-22 21:51:27,431: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,431: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,431: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,431: ==== SSA block rewrite pass on 114
DEBUG    2021-09-22 21:51:27,431: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,431: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,431: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,431: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,431: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,431: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,431: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,431: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,431: ==== SSA block rewrite pass on 130
DEBUG    2021-09-22 21:51:27,431: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,431: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2021-09-22 21:51:27,431: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,431: on stmt: $134compare_op.2 = exp != $const132.1
DEBUG    2021-09-22 21:51:27,431: find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG    2021-09-22 21:51:27,432: find_def_from_top label 130
DEBUG    2021-09-22 21:51:27,432: insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2021-09-22 21:51:27,432: find_def_from_bottom label 106
DEBUG    2021-09-22 21:51:27,432: incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,432: find_def_from_bottom label 154
DEBUG    2021-09-22 21:51:27,432: incoming_def exp.2 = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,432: replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2021-09-22 21:51:27,432: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,432: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,432: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,432: ==== SSA block rewrite pass on 138
DEBUG    2021-09-22 21:51:27,432: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,432: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,432: on stmt: $142binary_and.2 = exp & $const140.1
DEBUG    2021-09-22 21:51:27,432: find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG    2021-09-22 21:51:27,432: find_def_from_top label 138
DEBUG    2021-09-22 21:51:27,432: idom 130 from label 138
DEBUG    2021-09-22 21:51:27,432: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,432: replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2021-09-22 21:51:27,432: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,432: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,432: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,432: ==== SSA block rewrite pass on 146
DEBUG    2021-09-22 21:51:27,433: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,433: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,433: on stmt: r = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,433: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,433: ==== SSA block rewrite pass on 154
DEBUG    2021-09-22 21:51:27,433: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,433: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,433: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,433: find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,433: find_def_from_top label 154
DEBUG    2021-09-22 21:51:27,433: idom 138 from label 154
DEBUG    2021-09-22 21:51:27,433: find_def_from_bottom label 138
DEBUG    2021-09-22 21:51:27,433: find_def_from_top label 138
DEBUG    2021-09-22 21:51:27,433: idom 130 from label 138
DEBUG    2021-09-22 21:51:27,433: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,433: replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,433: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,433: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,433: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,434: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,434: ==== SSA block rewrite pass on 172
DEBUG    2021-09-22 21:51:27,434: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,434: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,434: on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,434: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,434: ==== SSA block rewrite pass on 176
DEBUG    2021-09-22 21:51:27,434: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,434: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,434: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,434: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,434: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,434: ==== SSA block rewrite pass on 184
DEBUG    2021-09-22 21:51:27,434: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0bb0>
DEBUG    2021-09-22 21:51:27,434: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,434: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,434: Fix SSA violator on var r
DEBUG    2021-09-22 21:51:27,434: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,434: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,434: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,434: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,434: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,434: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,434: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,435: first assign: r
DEBUG    2021-09-22 21:51:27,435: replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,435: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,435: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,435: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,435: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,435: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,435: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,435: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,435: ==== SSA block rewrite pass on 26
DEBUG    2021-09-22 21:51:27,435: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,435: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,435: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,435: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,435: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,435: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,435: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,435: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,435: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,435: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,435: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,435: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,435: ==== SSA block rewrite pass on 48
DEBUG    2021-09-22 21:51:27,435: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,436: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,436: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,436: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,436: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,436: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,436: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,436: on stmt: invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,436: on stmt: exp.1 = b
DEBUG    2021-09-22 21:51:27,436: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,436: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,436: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,436: on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,436: on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,436: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,436: on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2021-09-22 21:51:27,436: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,436: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,436: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,436: ==== SSA block rewrite pass on 114
DEBUG    2021-09-22 21:51:27,436: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,436: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,436: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,436: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,436: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,437: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,437: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,437: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,437: ==== SSA block rewrite pass on 130
DEBUG    2021-09-22 21:51:27,437: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,437: on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG    2021-09-22 21:51:27,437: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2021-09-22 21:51:27,437: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,437: on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2021-09-22 21:51:27,437: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,437: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,437: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,437: ==== SSA block rewrite pass on 138
DEBUG    2021-09-22 21:51:27,437: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,437: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,437: on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2021-09-22 21:51:27,437: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,437: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,437: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,437: ==== SSA block rewrite pass on 146
DEBUG    2021-09-22 21:51:27,437: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,437: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,437: on stmt: r = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,438: replaced with: r.1 = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,438: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,438: ==== SSA block rewrite pass on 154
DEBUG    2021-09-22 21:51:27,438: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,438: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,438: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,438: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,438: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,438: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,438: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,438: ==== SSA block rewrite pass on 172
DEBUG    2021-09-22 21:51:27,438: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,438: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,438: on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,438: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,438: ==== SSA block rewrite pass on 176
DEBUG    2021-09-22 21:51:27,438: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,438: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,438: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,438: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,438: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,438: ==== SSA block rewrite pass on 184
DEBUG    2021-09-22 21:51:27,438: Running <numba.core.ssa._FreshVarHandler object at 0x7f9133905b20>
DEBUG    2021-09-22 21:51:27,438: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,438: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,439: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f91339059a0>],
             146: [<numba.core.ir.Assign object at 0x7f9133838340>]})
DEBUG    2021-09-22 21:51:27,439: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,439: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,439: on stmt: a = arg(0, name=a)
DEBUG    2021-09-22 21:51:27,439: on stmt: b = arg(1, name=b)
DEBUG    2021-09-22 21:51:27,439: on stmt: $2load_deref.0 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,439: on stmt: $const4.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,439: on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,439: on stmt: $10load_deref.3 = freevar(tp: float64)
DEBUG    2021-09-22 21:51:27,439: on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,439: on stmt: $const20.7 = const(int, 0)
DEBUG    2021-09-22 21:51:27,439: on stmt: $22compare_op.8 = b < $const20.7
DEBUG    2021-09-22 21:51:27,439: on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,439: on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:219),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,439: on stmt: branch $24pred, 26, 98
DEBUG    2021-09-22 21:51:27,439: ==== SSA block rewrite pass on 26
DEBUG    2021-09-22 21:51:27,439: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,439: on stmt: invert = const(bool, True)
DEBUG    2021-09-22 21:51:27,439: on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG    2021-09-22 21:51:27,439: on stmt: $const38.4 = const(int, 0)
DEBUG    2021-09-22 21:51:27,439: on stmt: $40compare_op.5 = exp < $const38.4
DEBUG    2021-09-22 21:51:27,439: on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,439: on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:222),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,440: on stmt: branch $42pred, 44, 48
DEBUG    2021-09-22 21:51:27,440: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,440: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,440: on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG    2021-09-22 21:51:27,440: on stmt: <static> raise <class 'OverflowError'>
DEBUG    2021-09-22 21:51:27,440: ==== SSA block rewrite pass on 48
DEBUG    2021-09-22 21:51:27,440: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,440: on stmt: $48load_deref.0 = freevar(is_integer: False)
DEBUG    2021-09-22 21:51:27,440: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,440: on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:224),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,440: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,440: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,440: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,440: on stmt: invert.1 = const(bool, False)
DEBUG    2021-09-22 21:51:27,440: on stmt: exp.1 = b
DEBUG    2021-09-22 21:51:27,440: on stmt: jump 106
DEBUG    2021-09-22 21:51:27,440: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,440: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,440: on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,440: on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:220), Var(invert.1, numbers.py:233)], incoming_blocks=[48, 98])
DEBUG    2021-09-22 21:51:27,440: on stmt: $const108.1 = const(int, 65536)
DEBUG    2021-09-22 21:51:27,440: on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG    2021-09-22 21:51:27,440: on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,441: on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:235),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,441: on stmt: branch $112pred, 114, 130
DEBUG    2021-09-22 21:51:27,441: ==== SSA block rewrite pass on 114
DEBUG    2021-09-22 21:51:27,441: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,441: on stmt: $114load_global.0 = global(math: <module 'math' from '/Users/todd/opt/anaconda3/lib/python3.8/lib-dynload/math.cpython-38-darwin.so'>)
DEBUG    2021-09-22 21:51:27,441: on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG    2021-09-22 21:51:27,441: on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG    2021-09-22 21:51:27,441: on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,441: on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:218), Var($124call_function.5, numbers.py:237)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,441: on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG    2021-09-22 21:51:27,441: on stmt: return $128return_value.7
DEBUG    2021-09-22 21:51:27,441: ==== SSA block rewrite pass on 130
DEBUG    2021-09-22 21:51:27,441: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,441: on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[106, 154])
DEBUG    2021-09-22 21:51:27,441: on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[106, 154])
DEBUG    2021-09-22 21:51:27,441: on stmt: $const132.1 = const(int, 0)
DEBUG    2021-09-22 21:51:27,441: on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG    2021-09-22 21:51:27,441: on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,441: on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:238),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,441: on stmt: branch $136pred, 138, 172
DEBUG    2021-09-22 21:51:27,441: ==== SSA block rewrite pass on 138
DEBUG    2021-09-22 21:51:27,441: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,441: on stmt: $const140.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,442: on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG    2021-09-22 21:51:27,442: on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,442: on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:239),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,442: on stmt: branch $144pred, 146, 154
DEBUG    2021-09-22 21:51:27,442: ==== SSA block rewrite pass on 146
DEBUG    2021-09-22 21:51:27,442: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,442: on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,442: find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,442: find_def_from_top label 146
DEBUG    2021-09-22 21:51:27,442: idom 138 from label 146
DEBUG    2021-09-22 21:51:27,442: find_def_from_bottom label 138
DEBUG    2021-09-22 21:51:27,442: find_def_from_top label 138
DEBUG    2021-09-22 21:51:27,442: idom 130 from label 138
DEBUG    2021-09-22 21:51:27,442: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,442: find_def_from_top label 130
DEBUG    2021-09-22 21:51:27,442: insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG    2021-09-22 21:51:27,442: find_def_from_bottom label 106
DEBUG    2021-09-22 21:51:27,442: find_def_from_top label 106
DEBUG    2021-09-22 21:51:27,442: idom 0 from label 106
DEBUG    2021-09-22 21:51:27,442: find_def_from_bottom label 0
DEBUG    2021-09-22 21:51:27,442: incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:217)], kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,442: find_def_from_bottom label 154
DEBUG    2021-09-22 21:51:27,442: find_def_from_top label 154
DEBUG    2021-09-22 21:51:27,442: insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG    2021-09-22 21:51:27,443: find_def_from_bottom label 138
DEBUG    2021-09-22 21:51:27,443: find_def_from_top label 138
DEBUG    2021-09-22 21:51:27,443: idom 130 from label 138
DEBUG    2021-09-22 21:51:27,443: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,443: incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[106])
DEBUG    2021-09-22 21:51:27,443: find_def_from_bottom label 146
DEBUG    2021-09-22 21:51:27,443: incoming_def r.1 = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,443: incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:240), Var(r.1, numbers.py:240)], incoming_blocks=[138, 146])
DEBUG    2021-09-22 21:51:27,443: replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,443: on stmt: r.1 = $150inplace_multiply.2
DEBUG    2021-09-22 21:51:27,443: on stmt: jump 154
DEBUG    2021-09-22 21:51:27,443: ==== SSA block rewrite pass on 154
DEBUG    2021-09-22 21:51:27,443: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,443: on stmt: $const156.1 = const(int, 1)
DEBUG    2021-09-22 21:51:27,443: on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,443: on stmt: exp.2 = $158inplace_rshift.2
DEBUG    2021-09-22 21:51:27,443: on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG    2021-09-22 21:51:27,443: on stmt: a.1.1 = $166inplace_multiply.5
DEBUG    2021-09-22 21:51:27,443: on stmt: jump 130
DEBUG    2021-09-22 21:51:27,443: ==== SSA block rewrite pass on 172
DEBUG    2021-09-22 21:51:27,443: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,443: on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,443: on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,444: on stmt: branch $174pred, 176, 184
DEBUG    2021-09-22 21:51:27,444: ==== SSA block rewrite pass on 176
DEBUG    2021-09-22 21:51:27,444: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,444: on stmt: $const176.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,444: on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,444: find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG    2021-09-22 21:51:27,444: find_def_from_top label 176
DEBUG    2021-09-22 21:51:27,444: idom 172 from label 176
DEBUG    2021-09-22 21:51:27,444: find_def_from_bottom label 172
DEBUG    2021-09-22 21:51:27,444: find_def_from_top label 172
DEBUG    2021-09-22 21:51:27,444: idom 130 from label 172
DEBUG    2021-09-22 21:51:27,444: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,444: replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG    2021-09-22 21:51:27,444: on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG    2021-09-22 21:51:27,444: on stmt: return $182return_value.3
DEBUG    2021-09-22 21:51:27,444: ==== SSA block rewrite pass on 184
DEBUG    2021-09-22 21:51:27,444: Running <numba.core.ssa._FixSSAVars object at 0x7f91105b0fa0>
DEBUG    2021-09-22 21:51:27,444: on stmt: $186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,444: find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG    2021-09-22 21:51:27,444: find_def_from_top label 184
DEBUG    2021-09-22 21:51:27,444: idom 172 from label 184
DEBUG    2021-09-22 21:51:27,444: find_def_from_bottom label 172
DEBUG    2021-09-22 21:51:27,444: find_def_from_top label 172
DEBUG    2021-09-22 21:51:27,444: idom 130 from label 172
DEBUG    2021-09-22 21:51:27,444: find_def_from_bottom label 130
DEBUG    2021-09-22 21:51:27,444: replaced with: $186return_value.1 = cast(value=r.2)
DEBUG    2021-09-22 21:51:27,445: on stmt: return $186return_value.1
DEBUG    2021-09-22 21:51:27,531: bytecode dump:
>          0	NOP(arg=None, lineno=486)
           2	LOAD_FAST(arg=0, lineno=486)
           4	LOAD_CONST(arg=1, lineno=486)
           6	BINARY_SUBTRACT(arg=None, lineno=486)
           8	RETURN_VALUE(arg=None, lineno=486)
DEBUG    2021-09-22 21:51:27,531: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,531: stack: []
DEBUG    2021-09-22 21:51:27,531: dispatch pc=0, inst=NOP(arg=None, lineno=486)
DEBUG    2021-09-22 21:51:27,531: stack []
DEBUG    2021-09-22 21:51:27,531: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=486)
DEBUG    2021-09-22 21:51:27,531: stack []
DEBUG    2021-09-22 21:51:27,531: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=486)
DEBUG    2021-09-22 21:51:27,531: stack ['$tempk2.0']
DEBUG    2021-09-22 21:51:27,531: dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=486)
DEBUG    2021-09-22 21:51:27,531: stack ['$tempk2.0', '$const4.1']
DEBUG    2021-09-22 21:51:27,531: dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=486)
DEBUG    2021-09-22 21:51:27,531: stack ['$6binary_subtract.2']
DEBUG    2021-09-22 21:51:27,531: end state. edges=[]
DEBUG    2021-09-22 21:51:27,532: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,532: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,532: defmap: {}
DEBUG    2021-09-22 21:51:27,532: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,532: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,532: keep phismap: {}
DEBUG    2021-09-22 21:51:27,532: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,532: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,532: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$tempk2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$tempk2.0', 'rhs': '$const4.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,532: label 0:
    tempk = arg(0, name=tempk)               ['tempk']
    $const4.1 = const(float, 273.16)         ['$const4.1']
    $6binary_subtract.2 = tempk - $const4.1  ['$6binary_subtract.2', '$const4.1', 'tempk']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG    2021-09-22 21:51:27,533: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,533: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9140612e80>
DEBUG    2021-09-22 21:51:27,534: on stmt: tempk = arg(0, name=tempk)
DEBUG    2021-09-22 21:51:27,534: on stmt: $const4.1 = const(float, 273.16)
DEBUG    2021-09-22 21:51:27,534: on stmt: $6binary_subtract.2 = tempk - $const4.1
DEBUG    2021-09-22 21:51:27,534: on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
DEBUG    2021-09-22 21:51:27,534: on stmt: return $8return_value.3
DEBUG    2021-09-22 21:51:27,534: defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f9140612b50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9140612cd0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f91406129d0>],
             'tempk': [<numba.core.ir.Assign object at 0x7f91406122e0>]})
DEBUG    2021-09-22 21:51:27,534: SSA violators set()
DEBUG    2021-09-22 21:51:27,558: bytecode dump:
>          0	NOP(arg=None, lineno=543)
           2	LOAD_CONST(arg=1, lineno=543)
           4	LOAD_CONST(arg=2, lineno=543)
           6	LOAD_FAST(arg=0, lineno=543)
           8	BINARY_MULTIPLY(arg=None, lineno=543)
          10	BINARY_SUBTRACT(arg=None, lineno=543)
          12	RETURN_VALUE(arg=None, lineno=543)
DEBUG    2021-09-22 21:51:27,558: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,558: stack: []
DEBUG    2021-09-22 21:51:27,559: dispatch pc=0, inst=NOP(arg=None, lineno=543)
DEBUG    2021-09-22 21:51:27,559: stack []
DEBUG    2021-09-22 21:51:27,559: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=543)
DEBUG    2021-09-22 21:51:27,559: stack []
DEBUG    2021-09-22 21:51:27,559: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=543)
DEBUG    2021-09-22 21:51:27,559: stack ['$const2.0']
DEBUG    2021-09-22 21:51:27,559: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=543)
DEBUG    2021-09-22 21:51:27,559: stack ['$const2.0', '$const4.1']
DEBUG    2021-09-22 21:51:27,559: dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=543)
DEBUG    2021-09-22 21:51:27,559: stack ['$const2.0', '$const4.1', '$TwaterK6.2']
DEBUG    2021-09-22 21:51:27,559: dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=543)
DEBUG    2021-09-22 21:51:27,559: stack ['$const2.0', '$8binary_multiply.3']
DEBUG    2021-09-22 21:51:27,559: dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=543)
DEBUG    2021-09-22 21:51:27,559: stack ['$10binary_subtract.4']
DEBUG    2021-09-22 21:51:27,559: end state. edges=[]
DEBUG    2021-09-22 21:51:27,559: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,559: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,559: defmap: {}
DEBUG    2021-09-22 21:51:27,559: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,559: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,560: keep phismap: {}
DEBUG    2021-09-22 21:51:27,560: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,560: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,560: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$TwaterK6.2'}), (8, {'lhs': '$const4.1', 'rhs': '$TwaterK6.2', 'res': '$8binary_multiply.3'}), (10, {'lhs': '$const2.0', 'rhs': '$8binary_multiply.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,560: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    $const2.0 = const(int, 2499999)          ['$const2.0']
    $const4.1 = const(float, 2385.74)        ['$const4.1']
    $8binary_multiply.3 = $const4.1 * TwaterK ['$8binary_multiply.3', '$const4.1', 'TwaterK']
    $10binary_subtract.4 = $const2.0 - $8binary_multiply.3 ['$10binary_subtract.4', '$8binary_multiply.3', '$const2.0']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG    2021-09-22 21:51:27,562: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,562: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9140612070>
DEBUG    2021-09-22 21:51:27,562: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2021-09-22 21:51:27,562: on stmt: $const2.0 = const(int, 2499999)
DEBUG    2021-09-22 21:51:27,562: on stmt: $const4.1 = const(float, 2385.74)
DEBUG    2021-09-22 21:51:27,562: on stmt: $8binary_multiply.3 = $const4.1 * TwaterK
DEBUG    2021-09-22 21:51:27,562: on stmt: $10binary_subtract.4 = $const2.0 - $8binary_multiply.3
DEBUG    2021-09-22 21:51:27,562: on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
DEBUG    2021-09-22 21:51:27,562: on stmt: return $12return_value.5
DEBUG    2021-09-22 21:51:27,562: defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f912072f760>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f91105ae310>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x7f91105aac70>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f90f05c0580>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f91105acd30>],
             'TwaterK': [<numba.core.ir.Assign object at 0x7f90f05c0f10>]})
DEBUG    2021-09-22 21:51:27,562: SSA violators set()
DEBUG    2021-09-22 21:51:27,588: bytecode dump:
>          0	NOP(arg=None, lineno=553)
           2	LOAD_CONST(arg=1, lineno=553)
           4	LOAD_CONST(arg=2, lineno=553)
           6	LOAD_FAST(arg=0, lineno=554)
           8	LOAD_CONST(arg=3, lineno=554)
          10	BINARY_SUBTRACT(arg=None, lineno=554)
          12	LOAD_FAST(arg=0, lineno=554)
          14	LOAD_CONST(arg=3, lineno=554)
          16	BINARY_SUBTRACT(arg=None, lineno=554)
          18	BINARY_MULTIPLY(arg=None, lineno=554)
          20	LOAD_FAST(arg=0, lineno=554)
          22	LOAD_CONST(arg=4, lineno=554)
          24	BINARY_ADD(arg=None, lineno=554)
          26	BINARY_MULTIPLY(arg=None, lineno=554)
          28	LOAD_CONST(arg=5, lineno=555)
          30	LOAD_FAST(arg=0, lineno=555)
          32	LOAD_CONST(arg=6, lineno=555)
          34	BINARY_ADD(arg=None, lineno=555)
          36	BINARY_MULTIPLY(arg=None, lineno=555)
          38	BINARY_TRUE_DIVIDE(arg=None, lineno=554)
          40	BINARY_SUBTRACT(arg=None, lineno=553)
          42	BINARY_MULTIPLY(arg=None, lineno=553)
          44	RETURN_VALUE(arg=None, lineno=553)
DEBUG    2021-09-22 21:51:27,588: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,588: stack: []
DEBUG    2021-09-22 21:51:27,588: dispatch pc=0, inst=NOP(arg=None, lineno=553)
DEBUG    2021-09-22 21:51:27,588: stack []
DEBUG    2021-09-22 21:51:27,588: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=553)
DEBUG    2021-09-22 21:51:27,588: stack []
DEBUG    2021-09-22 21:51:27,588: dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=553)
DEBUG    2021-09-22 21:51:27,588: stack ['$const2.0']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=8, inst=LOAD_CONST(arg=3, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$TwaterC6.2']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$TwaterC6.2', '$const8.3']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$10binary_subtract.4']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=14, inst=LOAD_CONST(arg=3, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$TwaterC12.5']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$TwaterC12.5', '$const14.6']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$10binary_subtract.4', '$16binary_subtract.7']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$18binary_multiply.8']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=22, inst=LOAD_CONST(arg=4, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$TwaterC20.9']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=24, inst=BINARY_ADD(arg=None, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$TwaterC20.9', '$const22.10']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=554)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$18binary_multiply.8', '$24binary_add.11']
DEBUG    2021-09-22 21:51:27,589: dispatch pc=28, inst=LOAD_CONST(arg=5, lineno=555)
DEBUG    2021-09-22 21:51:27,589: stack ['$const2.0', '$const4.1', '$26binary_multiply.12']
DEBUG    2021-09-22 21:51:27,590: dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=555)
DEBUG    2021-09-22 21:51:27,590: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13']
DEBUG    2021-09-22 21:51:27,590: dispatch pc=32, inst=LOAD_CONST(arg=6, lineno=555)
DEBUG    2021-09-22 21:51:27,590: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$TwaterC30.14']
DEBUG    2021-09-22 21:51:27,590: dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=555)
DEBUG    2021-09-22 21:51:27,590: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$TwaterC30.14', '$const32.15']
DEBUG    2021-09-22 21:51:27,590: dispatch pc=36, inst=BINARY_MULTIPLY(arg=None, lineno=555)
DEBUG    2021-09-22 21:51:27,590: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$const28.13', '$34binary_add.16']
DEBUG    2021-09-22 21:51:27,590: dispatch pc=38, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=554)
DEBUG    2021-09-22 21:51:27,590: stack ['$const2.0', '$const4.1', '$26binary_multiply.12', '$36binary_multiply.17']
DEBUG    2021-09-22 21:51:27,590: dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=553)
DEBUG    2021-09-22 21:51:27,590: stack ['$const2.0', '$const4.1', '$38binary_true_divide.18']
DEBUG    2021-09-22 21:51:27,590: dispatch pc=42, inst=BINARY_MULTIPLY(arg=None, lineno=553)
DEBUG    2021-09-22 21:51:27,590: stack ['$const2.0', '$40binary_subtract.19']
DEBUG    2021-09-22 21:51:27,590: dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=553)
DEBUG    2021-09-22 21:51:27,590: stack ['$42binary_multiply.20']
DEBUG    2021-09-22 21:51:27,590: end state. edges=[]
DEBUG    2021-09-22 21:51:27,590: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,590: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,590: defmap: {}
DEBUG    2021-09-22 21:51:27,590: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,590: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,590: keep phismap: {}
DEBUG    2021-09-22 21:51:27,591: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,591: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,591: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$TwaterC6.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$TwaterC6.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'res': '$TwaterC12.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$TwaterC12.5', 'rhs': '$const14.6', 'res': '$16binary_subtract.7'}), (18, {'lhs': '$10binary_subtract.4', 'rhs': '$16binary_subtract.7', 'res': '$18binary_multiply.8'}), (20, {'res': '$TwaterC20.9'}), (22, {'res': '$const22.10'}), (24, {'lhs': '$TwaterC20.9', 'rhs': '$const22.10', 'res': '$24binary_add.11'}), (26, {'lhs': '$18binary_multiply.8', 'rhs': '$24binary_add.11', 'res': '$26binary_multiply.12'}), (28, {'res': '$const28.13'}), (30, {'res': '$TwaterC30.14'}), (32, {'res': '$const32.15'}), (34, {'lhs': '$TwaterC30.14', 'rhs': '$const32.15', 'res': '$34binary_add.16'}), (36, {'lhs': '$const28.13', 'rhs': '$34binary_add.16', 'res': '$36binary_multiply.17'}), (38, {'lhs': '$26binary_multiply.12', 'rhs': '$36binary_multiply.17', 'res': '$38binary_true_divide.18'}), (40, {'lhs': '$const4.1', 'rhs': '$38binary_true_divide.18', 'res': '$40binary_subtract.19'}), (42, {'lhs': '$const2.0', 'rhs': '$40binary_subtract.19', 'res': '$42binary_multiply.20'}), (44, {'retval': '$42binary_multiply.20', 'castval': '$44return_value.21'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,591: label 0:
    TwaterC = arg(0, name=TwaterC)           ['TwaterC']
    $const2.0 = const(float, 999.973)        ['$const2.0']
    $const4.1 = const(float, 1.0)            ['$const4.1']
    $const8.3 = const(float, 3.9863)         ['$const8.3']
    $10binary_subtract.4 = TwaterC - $const8.3 ['$10binary_subtract.4', '$const8.3', 'TwaterC']
    $const14.6 = const(float, 3.9863)        ['$const14.6']
    $16binary_subtract.7 = TwaterC - $const14.6 ['$16binary_subtract.7', '$const14.6', 'TwaterC']
    $18binary_multiply.8 = $10binary_subtract.4 * $16binary_subtract.7 ['$10binary_subtract.4', '$16binary_subtract.7', '$18binary_multiply.8']
    $const22.10 = const(float, 288.9414)     ['$const22.10']
    $24binary_add.11 = TwaterC + $const22.10 ['$24binary_add.11', '$const22.10', 'TwaterC']
    $26binary_multiply.12 = $18binary_multiply.8 * $24binary_add.11 ['$18binary_multiply.8', '$24binary_add.11', '$26binary_multiply.12']
    $const28.13 = const(float, 508929.2)     ['$const28.13']
    $const32.15 = const(float, 68.12963)     ['$const32.15']
    $34binary_add.16 = TwaterC + $const32.15 ['$34binary_add.16', '$const32.15', 'TwaterC']
    $36binary_multiply.17 = $const28.13 * $34binary_add.16 ['$34binary_add.16', '$36binary_multiply.17', '$const28.13']
    $38binary_true_divide.18 = $26binary_multiply.12 / $36binary_multiply.17 ['$26binary_multiply.12', '$36binary_multiply.17', '$38binary_true_divide.18']
    $40binary_subtract.19 = $const4.1 - $38binary_true_divide.18 ['$38binary_true_divide.18', '$40binary_subtract.19', '$const4.1']
    $42binary_multiply.20 = $const2.0 * $40binary_subtract.19 ['$40binary_subtract.19', '$42binary_multiply.20', '$const2.0']
    $44return_value.21 = cast(value=$42binary_multiply.20) ['$42binary_multiply.20', '$44return_value.21']
    return $44return_value.21                ['$44return_value.21']

DEBUG    2021-09-22 21:51:27,593: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,593: Running <numba.core.ssa._GatherDefsHandler object at 0x7f91105c4eb0>
DEBUG    2021-09-22 21:51:27,593: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2021-09-22 21:51:27,593: on stmt: $const2.0 = const(float, 999.973)
DEBUG    2021-09-22 21:51:27,593: on stmt: $const4.1 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,593: on stmt: $const8.3 = const(float, 3.9863)
DEBUG    2021-09-22 21:51:27,594: on stmt: $10binary_subtract.4 = TwaterC - $const8.3
DEBUG    2021-09-22 21:51:27,594: on stmt: $const14.6 = const(float, 3.9863)
DEBUG    2021-09-22 21:51:27,594: on stmt: $16binary_subtract.7 = TwaterC - $const14.6
DEBUG    2021-09-22 21:51:27,594: on stmt: $18binary_multiply.8 = $10binary_subtract.4 * $16binary_subtract.7
DEBUG    2021-09-22 21:51:27,594: on stmt: $const22.10 = const(float, 288.9414)
DEBUG    2021-09-22 21:51:27,594: on stmt: $24binary_add.11 = TwaterC + $const22.10
DEBUG    2021-09-22 21:51:27,594: on stmt: $26binary_multiply.12 = $18binary_multiply.8 * $24binary_add.11
DEBUG    2021-09-22 21:51:27,594: on stmt: $const28.13 = const(float, 508929.2)
DEBUG    2021-09-22 21:51:27,594: on stmt: $const32.15 = const(float, 68.12963)
DEBUG    2021-09-22 21:51:27,594: on stmt: $34binary_add.16 = TwaterC + $const32.15
DEBUG    2021-09-22 21:51:27,594: on stmt: $36binary_multiply.17 = $const28.13 * $34binary_add.16
DEBUG    2021-09-22 21:51:27,594: on stmt: $38binary_true_divide.18 = $26binary_multiply.12 / $36binary_multiply.17
DEBUG    2021-09-22 21:51:27,594: on stmt: $40binary_subtract.19 = $const4.1 - $38binary_true_divide.18
DEBUG    2021-09-22 21:51:27,594: on stmt: $42binary_multiply.20 = $const2.0 * $40binary_subtract.19
DEBUG    2021-09-22 21:51:27,594: on stmt: $44return_value.21 = cast(value=$42binary_multiply.20)
DEBUG    2021-09-22 21:51:27,594: on stmt: return $44return_value.21
DEBUG    2021-09-22 21:51:27,594: defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f90f05ccd30>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x7f90f05cb190>],
             '$18binary_multiply.8': [<numba.core.ir.Assign object at 0x7f90f05cb310>],
             '$24binary_add.11': [<numba.core.ir.Assign object at 0x7f90f05cb730>],
             '$26binary_multiply.12': [<numba.core.ir.Assign object at 0x7f90f05cb8b0>],
             '$34binary_add.16': [<numba.core.ir.Assign object at 0x7f90f05cbe50>],
             '$36binary_multiply.17': [<numba.core.ir.Assign object at 0x7f90f05cbfd0>],
             '$38binary_true_divide.18': [<numba.core.ir.Assign object at 0x7f90f05bc190>],
             '$40binary_subtract.19': [<numba.core.ir.Assign object at 0x7f90f05bc310>],
             '$42binary_multiply.20': [<numba.core.ir.Assign object at 0x7f90f05bc490>],
             '$44return_value.21': [<numba.core.ir.Assign object at 0x7f90f05bc610>],
             '$const14.6': [<numba.core.ir.Assign object at 0x7f90f05ccfd0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f90f05cc790>],
             '$const22.10': [<numba.core.ir.Assign object at 0x7f90f05cb5b0>],
             '$const28.13': [<numba.core.ir.Assign object at 0x7f90f05cba30>],
             '$const32.15': [<numba.core.ir.Assign object at 0x7f90f05cbcd0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f90f05cc910>],
             '$const8.3': [<numba.core.ir.Assign object at 0x7f90f05ccbb0>],
             'TwaterC': [<numba.core.ir.Assign object at 0x7f90f05cc1c0>]})
DEBUG    2021-09-22 21:51:27,595: SSA violators set()
DEBUG    2021-09-22 21:51:27,638: bytecode dump:
>          0	NOP(arg=None, lineno=475)
           2	LOAD_GLOBAL(arg=0, lineno=475)
           4	LOAD_FAST(arg=0, lineno=475)
           6	LOAD_GLOBAL(arg=1, lineno=475)
           8	LOAD_FAST(arg=0, lineno=475)
          10	LOAD_GLOBAL(arg=2, lineno=475)
          12	LOAD_FAST(arg=0, lineno=475)
          14	LOAD_GLOBAL(arg=3, lineno=475)
          16	LOAD_FAST(arg=0, lineno=475)
          18	LOAD_GLOBAL(arg=4, lineno=475)
          20	LOAD_FAST(arg=0, lineno=475)
          22	LOAD_GLOBAL(arg=5, lineno=475)
          24	LOAD_FAST(arg=0, lineno=475)
          26	LOAD_GLOBAL(arg=6, lineno=475)
          28	BINARY_MULTIPLY(arg=None, lineno=475)
          30	BINARY_ADD(arg=None, lineno=475)
          32	BINARY_MULTIPLY(arg=None, lineno=475)
          34	BINARY_ADD(arg=None, lineno=475)
          36	BINARY_MULTIPLY(arg=None, lineno=475)
          38	BINARY_ADD(arg=None, lineno=475)
          40	BINARY_MULTIPLY(arg=None, lineno=475)
          42	BINARY_ADD(arg=None, lineno=475)
          44	BINARY_MULTIPLY(arg=None, lineno=475)
          46	BINARY_ADD(arg=None, lineno=475)
          48	BINARY_MULTIPLY(arg=None, lineno=475)
          50	BINARY_ADD(arg=None, lineno=475)
          52	RETURN_VALUE(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,638: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,638: stack: []
DEBUG    2021-09-22 21:51:27,638: dispatch pc=0, inst=NOP(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,638: stack []
DEBUG    2021-09-22 21:51:27,638: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=475)
DEBUG    2021-09-22 21:51:27,638: stack []
DEBUG    2021-09-22 21:51:27,638: dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=475)
DEBUG    2021-09-22 21:51:27,638: stack ['$2load_global.0']
DEBUG    2021-09-22 21:51:27,638: dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=475)
DEBUG    2021-09-22 21:51:27,638: stack ['$2load_global.0', '$TwaterK4.1']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=10, inst=LOAD_GLOBAL(arg=2, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=14, inst=LOAD_GLOBAL(arg=3, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=18, inst=LOAD_GLOBAL(arg=4, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$18load_global.8']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=22, inst=LOAD_GLOBAL(arg=5, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$18load_global.8', '$TwaterK20.9']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$18load_global.8', '$TwaterK20.9', '$22load_global.10']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=26, inst=LOAD_GLOBAL(arg=6, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$18load_global.8', '$TwaterK20.9', '$22load_global.10', '$TwaterK24.11']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$18load_global.8', '$TwaterK20.9', '$22load_global.10', '$TwaterK24.11', '$26load_global.12']
DEBUG    2021-09-22 21:51:27,639: dispatch pc=30, inst=BINARY_ADD(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,639: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$18load_global.8', '$TwaterK20.9', '$22load_global.10', '$28binary_multiply.13']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=32, inst=BINARY_MULTIPLY(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$18load_global.8', '$TwaterK20.9', '$30binary_add.14']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$18load_global.8', '$32binary_multiply.15']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=36, inst=BINARY_MULTIPLY(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$TwaterK16.7', '$34binary_add.16']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=38, inst=BINARY_ADD(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$14load_global.6', '$36binary_multiply.17']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=40, inst=BINARY_MULTIPLY(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$TwaterK12.5', '$38binary_add.18']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$10load_global.4', '$40binary_multiply.19']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$TwaterK8.3', '$42binary_add.20']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=46, inst=BINARY_ADD(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$6load_global.2', '$44binary_multiply.21']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$TwaterK4.1', '$46binary_add.22']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=50, inst=BINARY_ADD(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$2load_global.0', '$48binary_multiply.23']
DEBUG    2021-09-22 21:51:27,640: dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=475)
DEBUG    2021-09-22 21:51:27,640: stack ['$50binary_add.24']
DEBUG    2021-09-22 21:51:27,640: end state. edges=[]
DEBUG    2021-09-22 21:51:27,641: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,641: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,641: defmap: {}
DEBUG    2021-09-22 21:51:27,641: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,641: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,641: keep phismap: {}
DEBUG    2021-09-22 21:51:27,641: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,641: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,641: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$TwaterK4.1'}), (6, {'res': '$6load_global.2'}), (8, {'res': '$TwaterK8.3'}), (10, {'res': '$10load_global.4'}), (12, {'res': '$TwaterK12.5'}), (14, {'res': '$14load_global.6'}), (16, {'res': '$TwaterK16.7'}), (18, {'res': '$18load_global.8'}), (20, {'res': '$TwaterK20.9'}), (22, {'res': '$22load_global.10'}), (24, {'res': '$TwaterK24.11'}), (26, {'res': '$26load_global.12'}), (28, {'lhs': '$TwaterK24.11', 'rhs': '$26load_global.12', 'res': '$28binary_multiply.13'}), (30, {'lhs': '$22load_global.10', 'rhs': '$28binary_multiply.13', 'res': '$30binary_add.14'}), (32, {'lhs': '$TwaterK20.9', 'rhs': '$30binary_add.14', 'res': '$32binary_multiply.15'}), (34, {'lhs': '$18load_global.8', 'rhs': '$32binary_multiply.15', 'res': '$34binary_add.16'}), (36, {'lhs': '$TwaterK16.7', 'rhs': '$34binary_add.16', 'res': '$36binary_multiply.17'}), (38, {'lhs': '$14load_global.6', 'rhs': '$36binary_multiply.17', 'res': '$38binary_add.18'}), (40, {'lhs': '$TwaterK12.5', 'rhs': '$38binary_add.18', 'res': '$40binary_multiply.19'}), (42, {'lhs': '$10load_global.4', 'rhs': '$40binary_multiply.19', 'res': '$42binary_add.20'}), (44, {'lhs': '$TwaterK8.3', 'rhs': '$42binary_add.20', 'res': '$44binary_multiply.21'}), (46, {'lhs': '$6load_global.2', 'rhs': '$44binary_multiply.21', 'res': '$46binary_add.22'}), (48, {'lhs': '$TwaterK4.1', 'rhs': '$46binary_add.22', 'res': '$48binary_multiply.23'}), (50, {'lhs': '$2load_global.0', 'rhs': '$48binary_multiply.23', 'res': '$50binary_add.24'}), (52, {'retval': '$50binary_add.24', 'castval': '$52return_value.25'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,642: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    $2load_global.0 = global(a0: 6984.505294) ['$2load_global.0']
    $6load_global.2 = global(a1: -188.903931) ['$6load_global.2']
    $10load_global.4 = global(a2: 2.133357675) ['$10load_global.4']
    $14load_global.6 = global(a3: -0.01288580973) ['$14load_global.6']
    $18load_global.8 = global(a4: 4.393587233e-05) ['$18load_global.8']
    $22load_global.10 = global(a5: -8.023923082e-08) ['$22load_global.10']
    $26load_global.12 = global(a6: 6.136820929e-11) ['$26load_global.12']
    $28binary_multiply.13 = TwaterK * $26load_global.12 ['$26load_global.12', '$28binary_multiply.13', 'TwaterK']
    $30binary_add.14 = $22load_global.10 + $28binary_multiply.13 ['$22load_global.10', '$28binary_multiply.13', '$30binary_add.14']
    $32binary_multiply.15 = TwaterK * $30binary_add.14 ['$30binary_add.14', '$32binary_multiply.15', 'TwaterK']
    $34binary_add.16 = $18load_global.8 + $32binary_multiply.15 ['$18load_global.8', '$32binary_multiply.15', '$34binary_add.16']
    $36binary_multiply.17 = TwaterK * $34binary_add.16 ['$34binary_add.16', '$36binary_multiply.17', 'TwaterK']
    $38binary_add.18 = $14load_global.6 + $36binary_multiply.17 ['$14load_global.6', '$36binary_multiply.17', '$38binary_add.18']
    $40binary_multiply.19 = TwaterK * $38binary_add.18 ['$38binary_add.18', '$40binary_multiply.19', 'TwaterK']
    $42binary_add.20 = $10load_global.4 + $40binary_multiply.19 ['$10load_global.4', '$40binary_multiply.19', '$42binary_add.20']
    $44binary_multiply.21 = TwaterK * $42binary_add.20 ['$42binary_add.20', '$44binary_multiply.21', 'TwaterK']
    $46binary_add.22 = $6load_global.2 + $44binary_multiply.21 ['$44binary_multiply.21', '$46binary_add.22', '$6load_global.2']
    $48binary_multiply.23 = TwaterK * $46binary_add.22 ['$46binary_add.22', '$48binary_multiply.23', 'TwaterK']
    $50binary_add.24 = $2load_global.0 + $48binary_multiply.23 ['$2load_global.0', '$48binary_multiply.23', '$50binary_add.24']
    $52return_value.25 = cast(value=$50binary_add.24) ['$50binary_add.24', '$52return_value.25']
    return $52return_value.25                ['$52return_value.25']

DEBUG    2021-09-22 21:51:27,644: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,644: Running <numba.core.ssa._GatherDefsHandler object at 0x7f914063f9d0>
DEBUG    2021-09-22 21:51:27,644: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2021-09-22 21:51:27,644: on stmt: $2load_global.0 = global(a0: 6984.505294)
DEBUG    2021-09-22 21:51:27,644: on stmt: $6load_global.2 = global(a1: -188.903931)
DEBUG    2021-09-22 21:51:27,644: on stmt: $10load_global.4 = global(a2: 2.133357675)
DEBUG    2021-09-22 21:51:27,644: on stmt: $14load_global.6 = global(a3: -0.01288580973)
DEBUG    2021-09-22 21:51:27,644: on stmt: $18load_global.8 = global(a4: 4.393587233e-05)
DEBUG    2021-09-22 21:51:27,644: on stmt: $22load_global.10 = global(a5: -8.023923082e-08)
DEBUG    2021-09-22 21:51:27,644: on stmt: $26load_global.12 = global(a6: 6.136820929e-11)
DEBUG    2021-09-22 21:51:27,644: on stmt: $28binary_multiply.13 = TwaterK * $26load_global.12
DEBUG    2021-09-22 21:51:27,644: on stmt: $30binary_add.14 = $22load_global.10 + $28binary_multiply.13
DEBUG    2021-09-22 21:51:27,644: on stmt: $32binary_multiply.15 = TwaterK * $30binary_add.14
DEBUG    2021-09-22 21:51:27,644: on stmt: $34binary_add.16 = $18load_global.8 + $32binary_multiply.15
DEBUG    2021-09-22 21:51:27,644: on stmt: $36binary_multiply.17 = TwaterK * $34binary_add.16
DEBUG    2021-09-22 21:51:27,644: on stmt: $38binary_add.18 = $14load_global.6 + $36binary_multiply.17
DEBUG    2021-09-22 21:51:27,645: on stmt: $40binary_multiply.19 = TwaterK * $38binary_add.18
DEBUG    2021-09-22 21:51:27,645: on stmt: $42binary_add.20 = $10load_global.4 + $40binary_multiply.19
DEBUG    2021-09-22 21:51:27,645: on stmt: $44binary_multiply.21 = TwaterK * $42binary_add.20
DEBUG    2021-09-22 21:51:27,645: on stmt: $46binary_add.22 = $6load_global.2 + $44binary_multiply.21
DEBUG    2021-09-22 21:51:27,645: on stmt: $48binary_multiply.23 = TwaterK * $46binary_add.22
DEBUG    2021-09-22 21:51:27,645: on stmt: $50binary_add.24 = $2load_global.0 + $48binary_multiply.23
DEBUG    2021-09-22 21:51:27,645: on stmt: $52return_value.25 = cast(value=$50binary_add.24)
DEBUG    2021-09-22 21:51:27,645: on stmt: return $52return_value.25
DEBUG    2021-09-22 21:51:27,645: defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f916094eb20>],
             '$14load_global.6': [<numba.core.ir.Assign object at 0x7f916094edc0>],
             '$18load_global.8': [<numba.core.ir.Assign object at 0x7f91609530a0>],
             '$22load_global.10': [<numba.core.ir.Assign object at 0x7f9160953340>],
             '$26load_global.12': [<numba.core.ir.Assign object at 0x7f91609535e0>],
             '$28binary_multiply.13': [<numba.core.ir.Assign object at 0x7f9160953760>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f916094e5e0>],
             '$30binary_add.14': [<numba.core.ir.Assign object at 0x7f91609538e0>],
             '$32binary_multiply.15': [<numba.core.ir.Assign object at 0x7f9160953a60>],
             '$34binary_add.16': [<numba.core.ir.Assign object at 0x7f9160953be0>],
             '$36binary_multiply.17': [<numba.core.ir.Assign object at 0x7f9160953d60>],
             '$38binary_add.18': [<numba.core.ir.Assign object at 0x7f9160953ee0>],
             '$40binary_multiply.19': [<numba.core.ir.Assign object at 0x7f91609510a0>],
             '$42binary_add.20': [<numba.core.ir.Assign object at 0x7f9160951220>],
             '$44binary_multiply.21': [<numba.core.ir.Assign object at 0x7f91609513a0>],
             '$46binary_add.22': [<numba.core.ir.Assign object at 0x7f9160951520>],
             '$48binary_multiply.23': [<numba.core.ir.Assign object at 0x7f91609516a0>],
             '$50binary_add.24': [<numba.core.ir.Assign object at 0x7f9160951820>],
             '$52return_value.25': [<numba.core.ir.Assign object at 0x7f91609519a0>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x7f916094e880>],
             'TwaterK': [<numba.core.ir.Assign object at 0x7f916094e160>]})
DEBUG    2021-09-22 21:51:27,645: SSA violators set()
DEBUG    2021-09-22 21:51:27,688: bytecode dump:
>          0	NOP(arg=None, lineno=462)
           2	LOAD_GLOBAL(arg=0, lineno=462)
           4	LOAD_GLOBAL(arg=1, lineno=462)
           6	BINARY_MULTIPLY(arg=None, lineno=462)
           8	LOAD_FAST(arg=0, lineno=462)
          10	LOAD_CONST(arg=1, lineno=462)
          12	BINARY_POWER(arg=None, lineno=462)
          14	BINARY_MULTIPLY(arg=None, lineno=462)
          16	RETURN_VALUE(arg=None, lineno=462)
DEBUG    2021-09-22 21:51:27,688: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,688: stack: []
DEBUG    2021-09-22 21:51:27,688: dispatch pc=0, inst=NOP(arg=None, lineno=462)
DEBUG    2021-09-22 21:51:27,688: stack []
DEBUG    2021-09-22 21:51:27,688: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=462)
DEBUG    2021-09-22 21:51:27,688: stack []
DEBUG    2021-09-22 21:51:27,688: dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=462)
DEBUG    2021-09-22 21:51:27,688: stack ['$2load_global.0']
DEBUG    2021-09-22 21:51:27,688: dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=462)
DEBUG    2021-09-22 21:51:27,688: stack ['$2load_global.0', '$4load_global.1']
DEBUG    2021-09-22 21:51:27,688: dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=462)
DEBUG    2021-09-22 21:51:27,688: stack ['$6binary_multiply.2']
DEBUG    2021-09-22 21:51:27,688: dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=462)
DEBUG    2021-09-22 21:51:27,688: stack ['$6binary_multiply.2', '$TwaterK8.3']
DEBUG    2021-09-22 21:51:27,688: dispatch pc=12, inst=BINARY_POWER(arg=None, lineno=462)
DEBUG    2021-09-22 21:51:27,688: stack ['$6binary_multiply.2', '$TwaterK8.3', '$const10.4']
DEBUG    2021-09-22 21:51:27,688: dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=462)
DEBUG    2021-09-22 21:51:27,689: stack ['$6binary_multiply.2', '$12binary_power.5']
DEBUG    2021-09-22 21:51:27,689: dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=462)
DEBUG    2021-09-22 21:51:27,689: stack ['$14binary_multiply.6']
DEBUG    2021-09-22 21:51:27,689: end state. edges=[]
DEBUG    2021-09-22 21:51:27,689: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,689: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,689: defmap: {}
DEBUG    2021-09-22 21:51:27,689: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,689: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,689: keep phismap: {}
DEBUG    2021-09-22 21:51:27,689: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,689: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,689: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'lhs': '$2load_global.0', 'rhs': '$4load_global.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$TwaterK8.3'}), (10, {'res': '$const10.4'}), (12, {'lhs': '$TwaterK8.3', 'rhs': '$const10.4', 'res': '$12binary_power.5'}), (14, {'lhs': '$6binary_multiply.2', 'rhs': '$12binary_power.5', 'res': '$14binary_multiply.6'}), (16, {'retval': '$14binary_multiply.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,690: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    $2load_global.0 = global(emissivity_water: 0.97) ['$2load_global.0']
    $4load_global.1 = global(stefan_boltzmann: 5.67e-08) ['$4load_global.1']
    $6binary_multiply.2 = $2load_global.0 * $4load_global.1 ['$2load_global.0', '$4load_global.1', '$6binary_multiply.2']
    $const10.4 = const(float, 4.0)           ['$const10.4']
    $12binary_power.5 = TwaterK ** $const10.4 ['$12binary_power.5', '$const10.4', 'TwaterK']
    $14binary_multiply.6 = $6binary_multiply.2 * $12binary_power.5 ['$12binary_power.5', '$14binary_multiply.6', '$6binary_multiply.2']
    $16return_value.7 = cast(value=$14binary_multiply.6) ['$14binary_multiply.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

DEBUG    2021-09-22 21:51:27,691: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,691: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160961490>
DEBUG    2021-09-22 21:51:27,691: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2021-09-22 21:51:27,691: on stmt: $2load_global.0 = global(emissivity_water: 0.97)
DEBUG    2021-09-22 21:51:27,691: on stmt: $4load_global.1 = global(stefan_boltzmann: 5.67e-08)
DEBUG    2021-09-22 21:51:27,691: on stmt: $6binary_multiply.2 = $2load_global.0 * $4load_global.1
DEBUG    2021-09-22 21:51:27,691: on stmt: $const10.4 = const(float, 4.0)
DEBUG    2021-09-22 21:51:27,691: on stmt: $12binary_power.5 = TwaterK ** $const10.4
DEBUG    2021-09-22 21:51:27,691: on stmt: $14binary_multiply.6 = $6binary_multiply.2 * $12binary_power.5
DEBUG    2021-09-22 21:51:27,691: on stmt: $16return_value.7 = cast(value=$14binary_multiply.6)
DEBUG    2021-09-22 21:51:27,692: on stmt: return $16return_value.7
DEBUG    2021-09-22 21:51:27,692: defs defaultdict(<class 'list'>,
            {'$12binary_power.5': [<numba.core.ir.Assign object at 0x7f91105c4520>],
             '$14binary_multiply.6': [<numba.core.ir.Assign object at 0x7f91105c4040>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x7f91105c4160>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f90f05bd220>],
             '$4load_global.1': [<numba.core.ir.Assign object at 0x7f9120768dc0>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f91105c4610>],
             '$const10.4': [<numba.core.ir.Assign object at 0x7f91105c4340>],
             'TwaterK': [<numba.core.ir.Assign object at 0x7f90f05bd790>]})
DEBUG    2021-09-22 21:51:27,692: SSA violators set()
DEBUG    2021-09-22 21:51:27,719: bytecode dump:
>          0	NOP(arg=None, lineno=573)
           2	LOAD_CONST(arg=1, lineno=573)
           4	LOAD_FAST(arg=1, lineno=573)
           6	BINARY_MULTIPLY(arg=None, lineno=573)
           8	LOAD_FAST(arg=2, lineno=573)
          10	LOAD_FAST(arg=1, lineno=573)
          12	BINARY_SUBTRACT(arg=None, lineno=573)
          14	BINARY_TRUE_DIVIDE(arg=None, lineno=573)
          16	STORE_FAST(arg=3, lineno=573)
          18	LOAD_CONST(arg=2, lineno=574)
          20	LOAD_FAST(arg=2, lineno=574)
          22	LOAD_FAST(arg=0, lineno=574)
          24	BINARY_TRUE_DIVIDE(arg=None, lineno=574)
          26	BINARY_MULTIPLY(arg=None, lineno=574)
          28	LOAD_CONST(arg=3, lineno=574)
          30	LOAD_FAST(arg=3, lineno=574)
          32	BINARY_ADD(arg=None, lineno=574)
          34	BINARY_MULTIPLY(arg=None, lineno=574)
          36	LOAD_CONST(arg=3, lineno=574)
          38	LOAD_CONST(arg=4, lineno=574)
          40	LOAD_FAST(arg=3, lineno=574)
          42	BINARY_MULTIPLY(arg=None, lineno=574)
          44	BINARY_ADD(arg=None, lineno=574)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=574)
          48	RETURN_VALUE(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,719: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,719: stack: []
DEBUG    2021-09-22 21:51:27,719: dispatch pc=0, inst=NOP(arg=None, lineno=573)
DEBUG    2021-09-22 21:51:27,719: stack []
DEBUG    2021-09-22 21:51:27,719: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=573)
DEBUG    2021-09-22 21:51:27,719: stack []
DEBUG    2021-09-22 21:51:27,719: dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=573)
DEBUG    2021-09-22 21:51:27,719: stack ['$const2.0']
DEBUG    2021-09-22 21:51:27,719: dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=573)
DEBUG    2021-09-22 21:51:27,719: stack ['$const2.0', '$esat_mb4.1']
DEBUG    2021-09-22 21:51:27,719: dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=573)
DEBUG    2021-09-22 21:51:27,719: stack ['$6binary_multiply.2']
DEBUG    2021-09-22 21:51:27,719: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=573)
DEBUG    2021-09-22 21:51:27,719: stack ['$6binary_multiply.2', '$pressure_mb8.3']
DEBUG    2021-09-22 21:51:27,719: dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=573)
DEBUG    2021-09-22 21:51:27,719: stack ['$6binary_multiply.2', '$pressure_mb8.3', '$esat_mb10.4']
DEBUG    2021-09-22 21:51:27,719: dispatch pc=14, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=573)
DEBUG    2021-09-22 21:51:27,720: stack ['$6binary_multiply.2', '$12binary_subtract.5']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=16, inst=STORE_FAST(arg=3, lineno=573)
DEBUG    2021-09-22 21:51:27,720: stack ['$14binary_true_divide.6']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack []
DEBUG    2021-09-22 21:51:27,720: dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$const18.7']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$const18.7', '$pressure_mb20.8']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=24, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$const18.7', '$pressure_mb20.8', '$TwaterK22.9']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=26, inst=BINARY_MULTIPLY(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$const18.7', '$24binary_true_divide.10']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$26binary_multiply.11']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$26binary_multiply.11', '$const28.12']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=32, inst=BINARY_ADD(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$26binary_multiply.11', '$const28.12', '$mixing_ratio_sat30.13']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=34, inst=BINARY_MULTIPLY(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$26binary_multiply.11', '$32binary_add.14']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$34binary_multiply.15']
DEBUG    2021-09-22 21:51:27,720: dispatch pc=38, inst=LOAD_CONST(arg=4, lineno=574)
DEBUG    2021-09-22 21:51:27,720: stack ['$34binary_multiply.15', '$const36.16']
DEBUG    2021-09-22 21:51:27,721: dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=574)
DEBUG    2021-09-22 21:51:27,721: stack ['$34binary_multiply.15', '$const36.16', '$const38.17']
DEBUG    2021-09-22 21:51:27,721: dispatch pc=42, inst=BINARY_MULTIPLY(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,721: stack ['$34binary_multiply.15', '$const36.16', '$const38.17', '$mixing_ratio_sat40.18']
DEBUG    2021-09-22 21:51:27,721: dispatch pc=44, inst=BINARY_ADD(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,721: stack ['$34binary_multiply.15', '$const36.16', '$42binary_multiply.19']
DEBUG    2021-09-22 21:51:27,721: dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,721: stack ['$34binary_multiply.15', '$44binary_add.20']
DEBUG    2021-09-22 21:51:27,721: dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=574)
DEBUG    2021-09-22 21:51:27,721: stack ['$46binary_true_divide.21']
DEBUG    2021-09-22 21:51:27,721: end state. edges=[]
DEBUG    2021-09-22 21:51:27,721: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,721: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,721: defmap: {}
DEBUG    2021-09-22 21:51:27,721: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,721: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,721: keep phismap: {}
DEBUG    2021-09-22 21:51:27,721: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,721: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,721: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$esat_mb4.1'}), (6, {'lhs': '$const2.0', 'rhs': '$esat_mb4.1', 'res': '$6binary_multiply.2'}), (8, {'res': '$pressure_mb8.3'}), (10, {'res': '$esat_mb10.4'}), (12, {'lhs': '$pressure_mb8.3', 'rhs': '$esat_mb10.4', 'res': '$12binary_subtract.5'}), (14, {'lhs': '$6binary_multiply.2', 'rhs': '$12binary_subtract.5', 'res': '$14binary_true_divide.6'}), (16, {'value': '$14binary_true_divide.6'}), (18, {'res': '$const18.7'}), (20, {'res': '$pressure_mb20.8'}), (22, {'res': '$TwaterK22.9'}), (24, {'lhs': '$pressure_mb20.8', 'rhs': '$TwaterK22.9', 'res': '$24binary_true_divide.10'}), (26, {'lhs': '$const18.7', 'rhs': '$24binary_true_divide.10', 'res': '$26binary_multiply.11'}), (28, {'res': '$const28.12'}), (30, {'res': '$mixing_ratio_sat30.13'}), (32, {'lhs': '$const28.12', 'rhs': '$mixing_ratio_sat30.13', 'res': '$32binary_add.14'}), (34, {'lhs': '$26binary_multiply.11', 'rhs': '$32binary_add.14', 'res': '$34binary_multiply.15'}), (36, {'res': '$const36.16'}), (38, {'res': '$const38.17'}), (40, {'res': '$mixing_ratio_sat40.18'}), (42, {'lhs': '$const38.17', 'rhs': '$mixing_ratio_sat40.18', 'res': '$42binary_multiply.19'}), (44, {'lhs': '$const36.16', 'rhs': '$42binary_multiply.19', 'res': '$44binary_add.20'}), (46, {'lhs': '$34binary_multiply.15', 'rhs': '$44binary_add.20', 'res': '$46binary_true_divide.21'}), (48, {'retval': '$46binary_true_divide.21', 'castval': '$48return_value.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,722: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    esat_mb = arg(1, name=esat_mb)           ['esat_mb']
    pressure_mb = arg(2, name=pressure_mb)   ['pressure_mb']
    $const2.0 = const(float, 0.622)          ['$const2.0']
    $6binary_multiply.2 = $const2.0 * esat_mb ['$6binary_multiply.2', '$const2.0', 'esat_mb']
    $12binary_subtract.5 = pressure_mb - esat_mb ['$12binary_subtract.5', 'esat_mb', 'pressure_mb']
    mixing_ratio_sat = $6binary_multiply.2 / $12binary_subtract.5 ['$12binary_subtract.5', '$6binary_multiply.2', 'mixing_ratio_sat']
    $const18.7 = const(float, 0.348)         ['$const18.7']
    $24binary_true_divide.10 = pressure_mb / TwaterK ['$24binary_true_divide.10', 'TwaterK', 'pressure_mb']
    $26binary_multiply.11 = $const18.7 * $24binary_true_divide.10 ['$24binary_true_divide.10', '$26binary_multiply.11', '$const18.7']
    $const28.12 = const(float, 1.0)          ['$const28.12']
    $32binary_add.14 = $const28.12 + mixing_ratio_sat ['$32binary_add.14', '$const28.12', 'mixing_ratio_sat']
    $34binary_multiply.15 = $26binary_multiply.11 * $32binary_add.14 ['$26binary_multiply.11', '$32binary_add.14', '$34binary_multiply.15']
    $const36.16 = const(float, 1.0)          ['$const36.16']
    $const38.17 = const(float, 1.61)         ['$const38.17']
    $42binary_multiply.19 = $const38.17 * mixing_ratio_sat ['$42binary_multiply.19', '$const38.17', 'mixing_ratio_sat']
    $44binary_add.20 = $const36.16 + $42binary_multiply.19 ['$42binary_multiply.19', '$44binary_add.20', '$const36.16']
    $46binary_true_divide.21 = $34binary_multiply.15 / $44binary_add.20 ['$34binary_multiply.15', '$44binary_add.20', '$46binary_true_divide.21']
    $48return_value.22 = cast(value=$46binary_true_divide.21) ['$46binary_true_divide.21', '$48return_value.22']
    return $48return_value.22                ['$48return_value.22']

DEBUG    2021-09-22 21:51:27,724: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,724: Running <numba.core.ssa._GatherDefsHandler object at 0x7f90f059b580>
DEBUG    2021-09-22 21:51:27,724: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2021-09-22 21:51:27,724: on stmt: esat_mb = arg(1, name=esat_mb)
DEBUG    2021-09-22 21:51:27,725: on stmt: pressure_mb = arg(2, name=pressure_mb)
DEBUG    2021-09-22 21:51:27,725: on stmt: $const2.0 = const(float, 0.622)
DEBUG    2021-09-22 21:51:27,725: on stmt: $6binary_multiply.2 = $const2.0 * esat_mb
DEBUG    2021-09-22 21:51:27,725: on stmt: $12binary_subtract.5 = pressure_mb - esat_mb
DEBUG    2021-09-22 21:51:27,725: on stmt: mixing_ratio_sat = $6binary_multiply.2 / $12binary_subtract.5
DEBUG    2021-09-22 21:51:27,725: on stmt: $const18.7 = const(float, 0.348)
DEBUG    2021-09-22 21:51:27,725: on stmt: $24binary_true_divide.10 = pressure_mb / TwaterK
DEBUG    2021-09-22 21:51:27,725: on stmt: $26binary_multiply.11 = $const18.7 * $24binary_true_divide.10
DEBUG    2021-09-22 21:51:27,725: on stmt: $const28.12 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,725: on stmt: $32binary_add.14 = $const28.12 + mixing_ratio_sat
DEBUG    2021-09-22 21:51:27,725: on stmt: $34binary_multiply.15 = $26binary_multiply.11 * $32binary_add.14
DEBUG    2021-09-22 21:51:27,725: on stmt: $const36.16 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,725: on stmt: $const38.17 = const(float, 1.61)
DEBUG    2021-09-22 21:51:27,725: on stmt: $42binary_multiply.19 = $const38.17 * mixing_ratio_sat
DEBUG    2021-09-22 21:51:27,725: on stmt: $44binary_add.20 = $const36.16 + $42binary_multiply.19
DEBUG    2021-09-22 21:51:27,725: on stmt: $46binary_true_divide.21 = $34binary_multiply.15 / $44binary_add.20
DEBUG    2021-09-22 21:51:27,725: on stmt: $48return_value.22 = cast(value=$46binary_true_divide.21)
DEBUG    2021-09-22 21:51:27,725: on stmt: return $48return_value.22
DEBUG    2021-09-22 21:51:27,726: defs defaultdict(<class 'list'>,
            {'$12binary_subtract.5': [<numba.core.ir.Assign object at 0x7f9140626a00>],
             '$24binary_true_divide.10': [<numba.core.ir.Assign object at 0x7f9160953460>],
             '$26binary_multiply.11': [<numba.core.ir.Assign object at 0x7f914062a970>],
             '$32binary_add.14': [<numba.core.ir.Assign object at 0x7f914062ad90>],
             '$34binary_multiply.15': [<numba.core.ir.Assign object at 0x7f914062af10>],
             '$42binary_multiply.19': [<numba.core.ir.Assign object at 0x7f9140633a90>],
             '$44binary_add.20': [<numba.core.ir.Assign object at 0x7f91406339a0>],
             '$46binary_true_divide.21': [<numba.core.ir.Assign object at 0x7f9140633b80>],
             '$48return_value.22': [<numba.core.ir.Assign object at 0x7f91406335e0>],
             '$6binary_multiply.2': [<numba.core.ir.Assign object at 0x7f914062a4f0>],
             '$const18.7': [<numba.core.ir.Assign object at 0x7f91406470d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f914062a250>],
             '$const28.12': [<numba.core.ir.Assign object at 0x7f914062aaf0>],
             '$const36.16': [<numba.core.ir.Assign object at 0x7f9140633fa0>],
             '$const38.17': [<numba.core.ir.Assign object at 0x7f9140633e80>],
             'TwaterK': [<numba.core.ir.Assign object at 0x7f91406471f0>],
             'esat_mb': [<numba.core.ir.Assign object at 0x7f9140647400>],
             'mixing_ratio_sat': [<numba.core.ir.Assign object at 0x7f9140647c40>],
             'pressure_mb': [<numba.core.ir.Assign object at 0x7f914062a0d0>]})
DEBUG    2021-09-22 21:51:27,726: SSA violators set()
DEBUG    2021-09-22 21:51:27,772: bytecode dump:
>          0	NOP(arg=None, lineno=510)
           2	LOAD_CONST(arg=1, lineno=510)
           4	STORE_FAST(arg=3, lineno=510)
           6	LOAD_GLOBAL(arg=0, lineno=511)
           8	LOAD_FAST(arg=2, lineno=511)
          10	LOAD_FAST(arg=1, lineno=511)
          12	BINARY_SUBTRACT(arg=None, lineno=511)
          14	BINARY_MULTIPLY(arg=None, lineno=511)
          16	LOAD_CONST(arg=2, lineno=511)
          18	BINARY_MULTIPLY(arg=None, lineno=511)
          20	LOAD_FAST(arg=2, lineno=511)
          22	LOAD_FAST(arg=0, lineno=511)
          24	LOAD_CONST(arg=2, lineno=511)
          26	BINARY_POWER(arg=None, lineno=511)
          28	BINARY_MULTIPLY(arg=None, lineno=511)
          30	BINARY_TRUE_DIVIDE(arg=None, lineno=511)
          32	STORE_FAST(arg=4, lineno=511)
          34	LOAD_FAST(arg=4, lineno=514)
          36	LOAD_CONST(arg=2, lineno=514)
          38	COMPARE_OP(arg=4, lineno=514)
          40	POP_JUMP_IF_FALSE(arg=46, lineno=514)
          42	LOAD_CONST(arg=2, lineno=515)
          44	STORE_FAST(arg=4, lineno=515)
>         46	LOAD_FAST(arg=4, lineno=516)
          48	LOAD_CONST(arg=3, lineno=516)
          50	COMPARE_OP(arg=0, lineno=516)
          52	POP_JUMP_IF_FALSE(arg=58, lineno=516)
          54	LOAD_CONST(arg=3, lineno=517)
          56	STORE_FAST(arg=4, lineno=517)
>         58	LOAD_FAST(arg=4, lineno=519)
          60	LOAD_CONST(arg=1, lineno=519)
          62	COMPARE_OP(arg=0, lineno=519)
          64	POP_JUMP_IF_FALSE(arg=98, lineno=519)
          66	LOAD_FAST(arg=4, lineno=520)
          68	LOAD_CONST(arg=4, lineno=520)
          70	COMPARE_OP(arg=5, lineno=520)
          72	POP_JUMP_IF_FALSE(arg=80, lineno=520)
          74	LOAD_CONST(arg=5, lineno=522)
          76	STORE_FAST(arg=3, lineno=522)
          78	JUMP_ABSOLUTE(arg=128, lineno=522)
>         80	LOAD_CONST(arg=5, lineno=525)
          82	LOAD_CONST(arg=6, lineno=525)
          84	LOAD_FAST(arg=4, lineno=525)
          86	BINARY_MULTIPLY(arg=None, lineno=525)
          88	BINARY_SUBTRACT(arg=None, lineno=525)
          90	LOAD_CONST(arg=7, lineno=525)
          92	BINARY_POWER(arg=None, lineno=525)
          94	STORE_FAST(arg=3, lineno=525)
          96	JUMP_FORWARD(arg=30, lineno=525)
>         98	LOAD_FAST(arg=4, lineno=527)
         100	LOAD_CONST(arg=8, lineno=527)
         102	COMPARE_OP(arg=1, lineno=527)
         104	POP_JUMP_IF_FALSE(arg=112, lineno=527)
         106	LOAD_CONST(arg=5, lineno=529)
         108	STORE_FAST(arg=3, lineno=529)
         110	JUMP_FORWARD(arg=16, lineno=529)
>        112	LOAD_CONST(arg=5, lineno=532)
         114	LOAD_CONST(arg=9, lineno=532)
         116	LOAD_FAST(arg=4, lineno=532)
         118	BINARY_MULTIPLY(arg=None, lineno=532)
         120	BINARY_ADD(arg=None, lineno=532)
         122	LOAD_CONST(arg=10, lineno=532)
         124	BINARY_POWER(arg=None, lineno=532)
         126	STORE_FAST(arg=3, lineno=532)
>        128	LOAD_FAST(arg=4, lineno=533)
         130	LOAD_FAST(arg=3, lineno=533)
         132	BUILD_TUPLE(arg=2, lineno=533)
         134	RETURN_VALUE(arg=None, lineno=533)
DEBUG    2021-09-22 21:51:27,772: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,772: stack: []
DEBUG    2021-09-22 21:51:27,772: dispatch pc=0, inst=NOP(arg=None, lineno=510)
DEBUG    2021-09-22 21:51:27,772: stack []
DEBUG    2021-09-22 21:51:27,772: dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=510)
DEBUG    2021-09-22 21:51:27,772: stack []
DEBUG    2021-09-22 21:51:27,772: dispatch pc=4, inst=STORE_FAST(arg=3, lineno=510)
DEBUG    2021-09-22 21:51:27,772: stack ['$const2.0']
DEBUG    2021-09-22 21:51:27,772: dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=511)
DEBUG    2021-09-22 21:51:27,772: stack []
DEBUG    2021-09-22 21:51:27,773: dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$6load_global.1']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$6load_global.1', '$density_air8.2']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=12, inst=BINARY_SUBTRACT(arg=None, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$6load_global.1', '$density_air8.2', '$density_air_sat10.3']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=14, inst=BINARY_MULTIPLY(arg=None, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$6load_global.1', '$12binary_subtract.4']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$14binary_multiply.5']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=18, inst=BINARY_MULTIPLY(arg=None, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$14binary_multiply.5', '$const16.6']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$18binary_multiply.7']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$18binary_multiply.7', '$density_air20.8']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$18binary_multiply.7', '$density_air20.8', '$wind_speed22.9']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=26, inst=BINARY_POWER(arg=None, lineno=511)
DEBUG    2021-09-22 21:51:27,773: stack ['$18binary_multiply.7', '$density_air20.8', '$wind_speed22.9', '$const24.10']
DEBUG    2021-09-22 21:51:27,773: dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=511)
DEBUG    2021-09-22 21:51:27,774: stack ['$18binary_multiply.7', '$density_air20.8', '$26binary_power.11']
DEBUG    2021-09-22 21:51:27,774: dispatch pc=30, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=511)
DEBUG    2021-09-22 21:51:27,774: stack ['$18binary_multiply.7', '$28binary_multiply.12']
DEBUG    2021-09-22 21:51:27,774: dispatch pc=32, inst=STORE_FAST(arg=4, lineno=511)
DEBUG    2021-09-22 21:51:27,774: stack ['$30binary_true_divide.13']
DEBUG    2021-09-22 21:51:27,774: dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=514)
DEBUG    2021-09-22 21:51:27,774: stack []
DEBUG    2021-09-22 21:51:27,774: dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=514)
DEBUG    2021-09-22 21:51:27,774: stack ['$Ri_No34.14']
DEBUG    2021-09-22 21:51:27,774: dispatch pc=38, inst=COMPARE_OP(arg=4, lineno=514)
DEBUG    2021-09-22 21:51:27,774: stack ['$Ri_No34.14', '$const36.15']
DEBUG    2021-09-22 21:51:27,774: dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=46, lineno=514)
DEBUG    2021-09-22 21:51:27,774: stack ['$38compare_op.16']
DEBUG    2021-09-22 21:51:27,774: end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,774: pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,774: stack: []
DEBUG    2021-09-22 21:51:27,774: dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=515)
DEBUG    2021-09-22 21:51:27,774: stack []
DEBUG    2021-09-22 21:51:27,774: dispatch pc=44, inst=STORE_FAST(arg=4, lineno=515)
DEBUG    2021-09-22 21:51:27,774: stack ['$const42.0']
DEBUG    2021-09-22 21:51:27,774: end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,774: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,775: stack: []
DEBUG    2021-09-22 21:51:27,775: dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=516)
DEBUG    2021-09-22 21:51:27,775: stack []
DEBUG    2021-09-22 21:51:27,775: dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=516)
DEBUG    2021-09-22 21:51:27,775: stack ['$Ri_No46.0']
DEBUG    2021-09-22 21:51:27,775: dispatch pc=50, inst=COMPARE_OP(arg=0, lineno=516)
DEBUG    2021-09-22 21:51:27,775: stack ['$Ri_No46.0', '$const48.1']
DEBUG    2021-09-22 21:51:27,775: dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=58, lineno=516)
DEBUG    2021-09-22 21:51:27,775: stack ['$50compare_op.2']
DEBUG    2021-09-22 21:51:27,775: end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,775: pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,775: pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,775: stack: []
DEBUG    2021-09-22 21:51:27,775: dispatch pc=54, inst=LOAD_CONST(arg=3, lineno=517)
DEBUG    2021-09-22 21:51:27,775: stack []
DEBUG    2021-09-22 21:51:27,775: dispatch pc=56, inst=STORE_FAST(arg=4, lineno=517)
DEBUG    2021-09-22 21:51:27,775: stack ['$const54.0']
DEBUG    2021-09-22 21:51:27,775: end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,775: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,775: stack: []
DEBUG    2021-09-22 21:51:27,775: dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=519)
DEBUG    2021-09-22 21:51:27,775: stack []
DEBUG    2021-09-22 21:51:27,775: dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=519)
DEBUG    2021-09-22 21:51:27,775: stack ['$Ri_No58.0']
DEBUG    2021-09-22 21:51:27,776: dispatch pc=62, inst=COMPARE_OP(arg=0, lineno=519)
DEBUG    2021-09-22 21:51:27,776: stack ['$Ri_No58.0', '$const60.1']
DEBUG    2021-09-22 21:51:27,776: dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=98, lineno=519)
DEBUG    2021-09-22 21:51:27,776: stack ['$62compare_op.2']
DEBUG    2021-09-22 21:51:27,776: end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,776: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,776: pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,776: stack: []
DEBUG    2021-09-22 21:51:27,776: dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=520)
DEBUG    2021-09-22 21:51:27,776: stack []
DEBUG    2021-09-22 21:51:27,776: dispatch pc=68, inst=LOAD_CONST(arg=4, lineno=520)
DEBUG    2021-09-22 21:51:27,776: stack ['$Ri_No66.0']
DEBUG    2021-09-22 21:51:27,776: dispatch pc=70, inst=COMPARE_OP(arg=5, lineno=520)
DEBUG    2021-09-22 21:51:27,776: stack ['$Ri_No66.0', '$const68.1']
DEBUG    2021-09-22 21:51:27,776: dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=80, lineno=520)
DEBUG    2021-09-22 21:51:27,776: stack ['$70compare_op.2']
DEBUG    2021-09-22 21:51:27,776: end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,776: pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,776: stack: []
DEBUG    2021-09-22 21:51:27,776: dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=527)
DEBUG    2021-09-22 21:51:27,776: stack []
DEBUG    2021-09-22 21:51:27,776: dispatch pc=100, inst=LOAD_CONST(arg=8, lineno=527)
DEBUG    2021-09-22 21:51:27,776: stack ['$Ri_No98.0']
DEBUG    2021-09-22 21:51:27,776: dispatch pc=102, inst=COMPARE_OP(arg=1, lineno=527)
DEBUG    2021-09-22 21:51:27,777: stack ['$Ri_No98.0', '$const100.1']
DEBUG    2021-09-22 21:51:27,777: dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=112, lineno=527)
DEBUG    2021-09-22 21:51:27,777: stack ['$102compare_op.2']
DEBUG    2021-09-22 21:51:27,777: end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,777: pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,777: stack: []
DEBUG    2021-09-22 21:51:27,777: dispatch pc=74, inst=LOAD_CONST(arg=5, lineno=522)
DEBUG    2021-09-22 21:51:27,777: stack []
DEBUG    2021-09-22 21:51:27,777: dispatch pc=76, inst=STORE_FAST(arg=3, lineno=522)
DEBUG    2021-09-22 21:51:27,777: stack ['$const74.0']
DEBUG    2021-09-22 21:51:27,777: dispatch pc=78, inst=JUMP_ABSOLUTE(arg=128, lineno=522)
DEBUG    2021-09-22 21:51:27,777: stack []
DEBUG    2021-09-22 21:51:27,777: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,777: pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,777: stack: []
DEBUG    2021-09-22 21:51:27,777: dispatch pc=80, inst=LOAD_CONST(arg=5, lineno=525)
DEBUG    2021-09-22 21:51:27,777: stack []
DEBUG    2021-09-22 21:51:27,777: dispatch pc=82, inst=LOAD_CONST(arg=6, lineno=525)
DEBUG    2021-09-22 21:51:27,777: stack ['$const80.0']
DEBUG    2021-09-22 21:51:27,777: dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=525)
DEBUG    2021-09-22 21:51:27,777: stack ['$const80.0', '$const82.1']
DEBUG    2021-09-22 21:51:27,777: dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=525)
DEBUG    2021-09-22 21:51:27,777: stack ['$const80.0', '$const82.1', '$Ri_No84.2']
DEBUG    2021-09-22 21:51:27,777: dispatch pc=88, inst=BINARY_SUBTRACT(arg=None, lineno=525)
DEBUG    2021-09-22 21:51:27,778: stack ['$const80.0', '$86binary_multiply.3']
DEBUG    2021-09-22 21:51:27,778: dispatch pc=90, inst=LOAD_CONST(arg=7, lineno=525)
DEBUG    2021-09-22 21:51:27,778: stack ['$88binary_subtract.4']
DEBUG    2021-09-22 21:51:27,778: dispatch pc=92, inst=BINARY_POWER(arg=None, lineno=525)
DEBUG    2021-09-22 21:51:27,778: stack ['$88binary_subtract.4', '$const90.5']
DEBUG    2021-09-22 21:51:27,778: dispatch pc=94, inst=STORE_FAST(arg=3, lineno=525)
DEBUG    2021-09-22 21:51:27,778: stack ['$92binary_power.6']
DEBUG    2021-09-22 21:51:27,778: dispatch pc=96, inst=JUMP_FORWARD(arg=30, lineno=525)
DEBUG    2021-09-22 21:51:27,778: stack []
DEBUG    2021-09-22 21:51:27,778: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,778: pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,778: stack: []
DEBUG    2021-09-22 21:51:27,778: dispatch pc=106, inst=LOAD_CONST(arg=5, lineno=529)
DEBUG    2021-09-22 21:51:27,778: stack []
DEBUG    2021-09-22 21:51:27,778: dispatch pc=108, inst=STORE_FAST(arg=3, lineno=529)
DEBUG    2021-09-22 21:51:27,778: stack ['$const106.0']
DEBUG    2021-09-22 21:51:27,778: dispatch pc=110, inst=JUMP_FORWARD(arg=16, lineno=529)
DEBUG    2021-09-22 21:51:27,778: stack []
DEBUG    2021-09-22 21:51:27,778: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,778: pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,778: stack: []
DEBUG    2021-09-22 21:51:27,778: dispatch pc=112, inst=LOAD_CONST(arg=5, lineno=532)
DEBUG    2021-09-22 21:51:27,778: stack []
DEBUG    2021-09-22 21:51:27,779: dispatch pc=114, inst=LOAD_CONST(arg=9, lineno=532)
DEBUG    2021-09-22 21:51:27,779: stack ['$const112.0']
DEBUG    2021-09-22 21:51:27,779: dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=532)
DEBUG    2021-09-22 21:51:27,779: stack ['$const112.0', '$const114.1']
DEBUG    2021-09-22 21:51:27,779: dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=532)
DEBUG    2021-09-22 21:51:27,779: stack ['$const112.0', '$const114.1', '$Ri_No116.2']
DEBUG    2021-09-22 21:51:27,779: dispatch pc=120, inst=BINARY_ADD(arg=None, lineno=532)
DEBUG    2021-09-22 21:51:27,779: stack ['$const112.0', '$118binary_multiply.3']
DEBUG    2021-09-22 21:51:27,779: dispatch pc=122, inst=LOAD_CONST(arg=10, lineno=532)
DEBUG    2021-09-22 21:51:27,779: stack ['$120binary_add.4']
DEBUG    2021-09-22 21:51:27,779: dispatch pc=124, inst=BINARY_POWER(arg=None, lineno=532)
DEBUG    2021-09-22 21:51:27,779: stack ['$120binary_add.4', '$const122.5']
DEBUG    2021-09-22 21:51:27,779: dispatch pc=126, inst=STORE_FAST(arg=3, lineno=532)
DEBUG    2021-09-22 21:51:27,779: stack ['$124binary_power.6']
DEBUG    2021-09-22 21:51:27,779: end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,779: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,779: stack: []
DEBUG    2021-09-22 21:51:27,779: dispatch pc=128, inst=LOAD_FAST(arg=4, lineno=533)
DEBUG    2021-09-22 21:51:27,779: stack []
DEBUG    2021-09-22 21:51:27,779: dispatch pc=130, inst=LOAD_FAST(arg=3, lineno=533)
DEBUG    2021-09-22 21:51:27,779: stack ['$Ri_No128.0']
DEBUG    2021-09-22 21:51:27,779: dispatch pc=132, inst=BUILD_TUPLE(arg=2, lineno=533)
DEBUG    2021-09-22 21:51:27,779: stack ['$Ri_No128.0', '$Ri_fxn130.1']
DEBUG    2021-09-22 21:51:27,779: dispatch pc=134, inst=RETURN_VALUE(arg=None, lineno=533)
DEBUG    2021-09-22 21:51:27,780: stack ['$132build_tuple.2']
DEBUG    2021-09-22 21:51:27,780: end state. edges=[]
DEBUG    2021-09-22 21:51:27,780: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,780: pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,780: pending: deque([State(pc_initial=128 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,780: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,780: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=128 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,780: defmap: {}
DEBUG    2021-09-22 21:51:27,780: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,780: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,780: keep phismap: {}
DEBUG    2021-09-22 21:51:27,780: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,780: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,780: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$6load_global.1'}), (8, {'res': '$density_air8.2'}), (10, {'res': '$density_air_sat10.3'}), (12, {'lhs': '$density_air8.2', 'rhs': '$density_air_sat10.3', 'res': '$12binary_subtract.4'}), (14, {'lhs': '$6load_global.1', 'rhs': '$12binary_subtract.4', 'res': '$14binary_multiply.5'}), (16, {'res': '$const16.6'}), (18, {'lhs': '$14binary_multiply.5', 'rhs': '$const16.6', 'res': '$18binary_multiply.7'}), (20, {'res': '$density_air20.8'}), (22, {'res': '$wind_speed22.9'}), (24, {'res': '$const24.10'}), (26, {'lhs': '$wind_speed22.9', 'rhs': '$const24.10', 'res': '$26binary_power.11'}), (28, {'lhs': '$density_air20.8', 'rhs': '$26binary_power.11', 'res': '$28binary_multiply.12'}), (30, {'lhs': '$18binary_multiply.7', 'rhs': '$28binary_multiply.12', 'res': '$30binary_true_divide.13'}), (32, {'value': '$30binary_true_divide.13'}), (34, {'res': '$Ri_No34.14'}), (36, {'res': '$const36.15'}), (38, {'lhs': '$Ri_No34.14', 'rhs': '$const36.15', 'res': '$38compare_op.16'}), (40, {'pred': '$38compare_op.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 46: ()})
DEBUG    2021-09-22 21:51:27,780: block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$const42.0'}), (44, {'value': '$const42.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$Ri_No46.0'}), (48, {'res': '$const48.1'}), (50, {'lhs': '$Ri_No46.0', 'rhs': '$const48.1', 'res': '$50compare_op.2'}), (52, {'pred': '$50compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 58: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$const54.0'}), (56, {'value': '$const54.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$Ri_No58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$Ri_No58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 98: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$Ri_No66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$Ri_No66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 80: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$const80.0'}), (82, {'res': '$const82.1'}), (84, {'res': '$Ri_No84.2'}), (86, {'lhs': '$const82.1', 'rhs': '$Ri_No84.2', 'res': '$86binary_multiply.3'}), (88, {'lhs': '$const80.0', 'rhs': '$86binary_multiply.3', 'res': '$88binary_subtract.4'}), (90, {'res': '$const90.5'}), (92, {'lhs': '$88binary_subtract.4', 'rhs': '$const90.5', 'res': '$92binary_power.6'}), (94, {'value': '$92binary_power.6'}), (96, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$Ri_No98.0'}), (100, {'res': '$const100.1'}), (102, {'lhs': '$Ri_No98.0', 'rhs': '$const100.1', 'res': '$102compare_op.2'}), (104, {'pred': '$102compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 112: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$const106.0'}), (108, {'value': '$const106.0'}), (110, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$const112.0'}), (114, {'res': '$const114.1'}), (116, {'res': '$Ri_No116.2'}), (118, {'lhs': '$const114.1', 'rhs': '$Ri_No116.2', 'res': '$118binary_multiply.3'}), (120, {'lhs': '$const112.0', 'rhs': '$118binary_multiply.3', 'res': '$120binary_add.4'}), (122, {'res': '$const122.5'}), (124, {'lhs': '$120binary_add.4', 'rhs': '$const122.5', 'res': '$124binary_power.6'}), (126, {'value': '$124binary_power.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG    2021-09-22 21:51:27,781: block_infos State(pc_initial=128 nstack_initial=0):
AdaptBlockInfo(insts=((128, {'res': '$Ri_No128.0'}), (130, {'res': '$Ri_fxn130.1'}), (132, {'items': ['$Ri_No128.0', '$Ri_fxn130.1'], 'res': '$132build_tuple.2'}), (134, {'retval': '$132build_tuple.2', 'castval': '$134return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,784: label 0:
    wind_speed = arg(0, name=wind_speed)     ['wind_speed']
    density_air_sat = arg(1, name=density_air_sat) ['density_air_sat']
    density_air = arg(2, name=density_air)   ['density_air']
    Ri_fxn = const(float, 0.0)               ['Ri_fxn']
    $6load_global.1 = global(gravity: -9.806) ['$6load_global.1']
    $12binary_subtract.4 = density_air - density_air_sat ['$12binary_subtract.4', 'density_air', 'density_air_sat']
    $14binary_multiply.5 = $6load_global.1 * $12binary_subtract.4 ['$12binary_subtract.4', '$14binary_multiply.5', '$6load_global.1']
    $const16.6 = const(float, 2.0)           ['$const16.6']
    $18binary_multiply.7 = $14binary_multiply.5 * $const16.6 ['$14binary_multiply.5', '$18binary_multiply.7', '$const16.6']
    $const24.10 = const(float, 2.0)          ['$const24.10']
    $26binary_power.11 = wind_speed ** $const24.10 ['$26binary_power.11', '$const24.10', 'wind_speed']
    $28binary_multiply.12 = density_air * $26binary_power.11 ['$26binary_power.11', '$28binary_multiply.12', 'density_air']
    Ri_No = $18binary_multiply.7 / $28binary_multiply.12 ['$18binary_multiply.7', '$28binary_multiply.12', 'Ri_No']
    $const36.15 = const(float, 2.0)          ['$const36.15']
    $38compare_op.16 = Ri_No > $const36.15   ['$38compare_op.16', '$const36.15', 'Ri_No']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, TSM2.py:514),), kws=(), vararg=None, target=None) ['$38compare_op.16', '$40pred', 'bool40']
    branch $40pred, 42, 46                   ['$40pred']
label 42:
    Ri_No = const(float, 2.0)                ['Ri_No']
    jump 46                                  []
label 46:
    $const48.1 = const(float, -1.0)          ['$const48.1']
    $50compare_op.2 = Ri_No < $const48.1     ['$50compare_op.2', '$const48.1', 'Ri_No']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, TSM2.py:516),), kws=(), vararg=None, target=None) ['$50compare_op.2', '$52pred', 'bool52']
    branch $52pred, 54, 58                   ['$52pred']
label 54:
    Ri_No = const(float, -1.0)               ['Ri_No']
    jump 58                                  []
label 58:
    $const60.1 = const(float, 0.0)           ['$const60.1']
    $62compare_op.2 = Ri_No < $const60.1     ['$62compare_op.2', '$const60.1', 'Ri_No']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:519),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 98                   ['$64pred']
label 66:
    $const68.1 = const(float, -0.01)         ['$const68.1']
    $70compare_op.2 = Ri_No >= $const68.1    ['$70compare_op.2', '$const68.1', 'Ri_No']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, TSM2.py:520),), kws=(), vararg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 80                   ['$72pred']
label 74:
    Ri_fxn = const(float, 1.0)               ['Ri_fxn']
    jump 128                                 []
label 80:
    $const80.0 = const(float, 1.0)           ['$const80.0']
    $const82.1 = const(float, 22.0)          ['$const82.1']
    $86binary_multiply.3 = $const82.1 * Ri_No ['$86binary_multiply.3', '$const82.1', 'Ri_No']
    $88binary_subtract.4 = $const80.0 - $86binary_multiply.3 ['$86binary_multiply.3', '$88binary_subtract.4', '$const80.0']
    $const90.5 = const(float, 0.8)           ['$const90.5']
    Ri_fxn = $88binary_subtract.4 ** $const90.5 ['$88binary_subtract.4', '$const90.5', 'Ri_fxn']
    jump 128                                 []
label 98:
    $const100.1 = const(float, 0.01)         ['$const100.1']
    $102compare_op.2 = Ri_No <= $const100.1  ['$102compare_op.2', '$const100.1', 'Ri_No']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, TSM2.py:527),), kws=(), vararg=None, target=None) ['$102compare_op.2', '$104pred', 'bool104']
    branch $104pred, 106, 112                ['$104pred']
label 106:
    Ri_fxn = const(float, 1.0)               ['Ri_fxn']
    jump 128                                 []
label 112:
    $const112.0 = const(float, 1.0)          ['$const112.0']
    $const114.1 = const(float, 34.0)         ['$const114.1']
    $118binary_multiply.3 = $const114.1 * Ri_No ['$118binary_multiply.3', '$const114.1', 'Ri_No']
    $120binary_add.4 = $const112.0 + $118binary_multiply.3 ['$118binary_multiply.3', '$120binary_add.4', '$const112.0']
    $const122.5 = const(float, -0.8)         ['$const122.5']
    Ri_fxn = $120binary_add.4 ** $const122.5 ['$120binary_add.4', '$const122.5', 'Ri_fxn']
    jump 128                                 []
label 128:
    $132build_tuple.2 = build_tuple(items=[Var(Ri_No, TSM2.py:511), Var(Ri_fxn, TSM2.py:510)]) ['$132build_tuple.2', 'Ri_No', 'Ri_fxn']
    $134return_value.3 = cast(value=$132build_tuple.2) ['$132build_tuple.2', '$134return_value.3']
    return $134return_value.3                ['$134return_value.3']

DEBUG    2021-09-22 21:51:27,790: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,790: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,790: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2021-09-22 21:51:27,790: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2021-09-22 21:51:27,790: on stmt: density_air = arg(2, name=density_air)
DEBUG    2021-09-22 21:51:27,791: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,791: on stmt: $6load_global.1 = global(gravity: -9.806)
DEBUG    2021-09-22 21:51:27,791: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2021-09-22 21:51:27,791: on stmt: $14binary_multiply.5 = $6load_global.1 * $12binary_subtract.4
DEBUG    2021-09-22 21:51:27,791: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,791: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2021-09-22 21:51:27,791: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,791: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2021-09-22 21:51:27,791: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2021-09-22 21:51:27,791: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2021-09-22 21:51:27,791: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,791: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2021-09-22 21:51:27,791: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,791: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, TSM2.py:514),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,791: on stmt: branch $40pred, 42, 46
DEBUG    2021-09-22 21:51:27,791: ==== SSA block analysis pass on 42
DEBUG    2021-09-22 21:51:27,791: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,791: on stmt: Ri_No = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,791: on stmt: jump 46
DEBUG    2021-09-22 21:51:27,791: ==== SSA block analysis pass on 46
DEBUG    2021-09-22 21:51:27,791: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,791: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,791: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2021-09-22 21:51:27,792: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,792: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, TSM2.py:516),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,792: on stmt: branch $52pred, 54, 58
DEBUG    2021-09-22 21:51:27,792: ==== SSA block analysis pass on 54
DEBUG    2021-09-22 21:51:27,792: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,792: on stmt: Ri_No = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,792: on stmt: jump 58
DEBUG    2021-09-22 21:51:27,792: ==== SSA block analysis pass on 58
DEBUG    2021-09-22 21:51:27,792: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,792: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,792: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2021-09-22 21:51:27,792: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,792: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:519),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,792: on stmt: branch $64pred, 66, 98
DEBUG    2021-09-22 21:51:27,792: ==== SSA block analysis pass on 66
DEBUG    2021-09-22 21:51:27,792: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,792: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2021-09-22 21:51:27,792: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2021-09-22 21:51:27,792: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,792: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, TSM2.py:520),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,792: on stmt: branch $72pred, 74, 80
DEBUG    2021-09-22 21:51:27,792: ==== SSA block analysis pass on 74
DEBUG    2021-09-22 21:51:27,792: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,792: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,792: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,793: ==== SSA block analysis pass on 80
DEBUG    2021-09-22 21:51:27,793: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,793: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,793: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2021-09-22 21:51:27,793: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2021-09-22 21:51:27,793: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2021-09-22 21:51:27,793: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2021-09-22 21:51:27,793: on stmt: Ri_fxn = $88binary_subtract.4 ** $const90.5
DEBUG    2021-09-22 21:51:27,793: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,793: ==== SSA block analysis pass on 98
DEBUG    2021-09-22 21:51:27,793: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,793: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2021-09-22 21:51:27,793: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2021-09-22 21:51:27,793: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,793: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, TSM2.py:527),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,793: on stmt: branch $104pred, 106, 112
DEBUG    2021-09-22 21:51:27,793: ==== SSA block analysis pass on 106
DEBUG    2021-09-22 21:51:27,793: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,793: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,793: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,793: ==== SSA block analysis pass on 112
DEBUG    2021-09-22 21:51:27,793: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,793: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,793: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2021-09-22 21:51:27,793: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2021-09-22 21:51:27,794: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2021-09-22 21:51:27,794: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2021-09-22 21:51:27,794: on stmt: Ri_fxn = $120binary_add.4 ** $const122.5
DEBUG    2021-09-22 21:51:27,794: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,794: ==== SSA block analysis pass on 128
DEBUG    2021-09-22 21:51:27,794: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9160965ca0>
DEBUG    2021-09-22 21:51:27,794: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, TSM2.py:511), Var(Ri_fxn, TSM2.py:510)])
DEBUG    2021-09-22 21:51:27,794: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2021-09-22 21:51:27,794: on stmt: return $134return_value.3
DEBUG    2021-09-22 21:51:27,794: defs defaultdict(<class 'list'>,
            {'$102compare_op.2': [<numba.core.ir.Assign object at 0x7f91406286d0>],
             '$104pred': [<numba.core.ir.Assign object at 0x7f9140628370>],
             '$118binary_multiply.3': [<numba.core.ir.Assign object at 0x7f9160965340>],
             '$120binary_add.4': [<numba.core.ir.Assign object at 0x7f9160972fd0>],
             '$12binary_subtract.4': [<numba.core.ir.Assign object at 0x7f90f0609730>],
             '$132build_tuple.2': [<numba.core.ir.Assign object at 0x7f9160972490>],
             '$134return_value.3': [<numba.core.ir.Assign object at 0x7f9160972430>],
             '$14binary_multiply.5': [<numba.core.ir.Assign object at 0x7f90f06098b0>],
             '$18binary_multiply.7': [<numba.core.ir.Assign object at 0x7f90f0609bb0>],
             '$26binary_power.11': [<numba.core.ir.Assign object at 0x7f90f060c130>],
             '$28binary_multiply.12': [<numba.core.ir.Assign object at 0x7f90f060c2b0>],
             '$38compare_op.16': [<numba.core.ir.Assign object at 0x7f90f060c970>],
             '$40pred': [<numba.core.ir.Assign object at 0x7f90f060cc10>],
             '$50compare_op.2': [<numba.core.ir.Assign object at 0x7f90f05f6850>],
             '$52pred': [<numba.core.ir.Assign object at 0x7f90f05f6220>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x7f90f05e5520>],
             '$64pred': [<numba.core.ir.Assign object at 0x7f90f05e5310>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x7f90f0609370>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x7f90f05e56d0>],
             '$72pred': [<numba.core.ir.Assign object at 0x7f90f05d9fd0>],
             '$86binary_multiply.3': [<numba.core.ir.Assign object at 0x7f90f05d98b0>],
             '$88binary_subtract.4': [<numba.core.ir.Assign object at 0x7f90f05d9610>],
             '$const100.1': [<numba.core.ir.Assign object at 0x7f9140633130>],
             '$const112.0': [<numba.core.ir.Assign object at 0x7f9160965e50>],
             '$const114.1': [<numba.core.ir.Assign object at 0x7f9160965c70>],
             '$const122.5': [<numba.core.ir.Assign object at 0x7f9160972d30>],
             '$const16.6': [<numba.core.ir.Assign object at 0x7f90f0609a30>],
             '$const24.10': [<numba.core.ir.Assign object at 0x7f90f0609f70>],
             '$const36.15': [<numba.core.ir.Assign object at 0x7f90f060c7f0>],
             '$const48.1': [<numba.core.ir.Assign object at 0x7f90f05f69d0>],
             '$const60.1': [<numba.core.ir.Assign object at 0x7f90f05e5d00>],
             '$const68.1': [<numba.core.ir.Assign object at 0x7f90f05e5bb0>],
             '$const80.0': [<numba.core.ir.Assign object at 0x7f90f05d9a30>],
             '$const82.1': [<numba.core.ir.Assign object at 0x7f90f05d9940>],
             '$const90.5': [<numba.core.ir.Assign object at 0x7f90f05d9400>],
             'Ri_No': [<numba.core.ir.Assign object at 0x7f90f060c430>,
                       <numba.core.ir.Assign object at 0x7f90f060c550>,
                       <numba.core.ir.Assign object at 0x7f90f05f63a0>],
             'Ri_fxn': [<numba.core.ir.Assign object at 0x7f90f06090d0>,
                        <numba.core.ir.Assign object at 0x7f90f05d9b20>,
                        <numba.core.ir.Assign object at 0x7f90f05d9070>,
                        <numba.core.ir.Assign object at 0x7f9140628f70>,
                        <numba.core.ir.Assign object at 0x7f9160972bb0>],
             'bool104': [<numba.core.ir.Assign object at 0x7f9140628250>],
             'bool40': [<numba.core.ir.Assign object at 0x7f90f060caf0>],
             'bool52': [<numba.core.ir.Assign object at 0x7f90f05f66d0>],
             'bool64': [<numba.core.ir.Assign object at 0x7f90f05e5640>],
             'bool72': [<numba.core.ir.Assign object at 0x7f90f05e50a0>],
             'density_air': [<numba.core.ir.Assign object at 0x7f90f05f6f10>],
             'density_air_sat': [<numba.core.ir.Assign object at 0x7f90f05f6df0>],
             'wind_speed': [<numba.core.ir.Assign object at 0x7f90f05f64c0>]})
DEBUG    2021-09-22 21:51:27,795: SSA violators {'Ri_No', 'Ri_fxn'}
DEBUG    2021-09-22 21:51:27,795: Fix SSA violator on var Ri_No
DEBUG    2021-09-22 21:51:27,795: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,795: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,795: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2021-09-22 21:51:27,795: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2021-09-22 21:51:27,795: on stmt: density_air = arg(2, name=density_air)
DEBUG    2021-09-22 21:51:27,795: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,795: on stmt: $6load_global.1 = global(gravity: -9.806)
DEBUG    2021-09-22 21:51:27,795: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2021-09-22 21:51:27,795: on stmt: $14binary_multiply.5 = $6load_global.1 * $12binary_subtract.4
DEBUG    2021-09-22 21:51:27,795: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,795: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2021-09-22 21:51:27,795: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,795: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2021-09-22 21:51:27,795: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2021-09-22 21:51:27,795: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2021-09-22 21:51:27,795: first assign: Ri_No
DEBUG    2021-09-22 21:51:27,795: replaced with: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2021-09-22 21:51:27,795: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,795: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2021-09-22 21:51:27,795: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,795: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, TSM2.py:514),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,796: on stmt: branch $40pred, 42, 46
DEBUG    2021-09-22 21:51:27,796: ==== SSA block rewrite pass on 42
DEBUG    2021-09-22 21:51:27,796: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,796: on stmt: Ri_No = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,796: replaced with: Ri_No.1 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,796: on stmt: jump 46
DEBUG    2021-09-22 21:51:27,796: ==== SSA block rewrite pass on 46
DEBUG    2021-09-22 21:51:27,796: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,796: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,796: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2021-09-22 21:51:27,796: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,796: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, TSM2.py:516),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,796: on stmt: branch $52pred, 54, 58
DEBUG    2021-09-22 21:51:27,796: ==== SSA block rewrite pass on 54
DEBUG    2021-09-22 21:51:27,796: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,796: on stmt: Ri_No = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,796: replaced with: Ri_No.2 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,796: on stmt: jump 58
DEBUG    2021-09-22 21:51:27,796: ==== SSA block rewrite pass on 58
DEBUG    2021-09-22 21:51:27,796: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,796: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,796: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2021-09-22 21:51:27,796: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,797: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:519),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,797: on stmt: branch $64pred, 66, 98
DEBUG    2021-09-22 21:51:27,797: ==== SSA block rewrite pass on 66
DEBUG    2021-09-22 21:51:27,797: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,797: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2021-09-22 21:51:27,797: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2021-09-22 21:51:27,797: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,797: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, TSM2.py:520),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,797: on stmt: branch $72pred, 74, 80
DEBUG    2021-09-22 21:51:27,797: ==== SSA block rewrite pass on 74
DEBUG    2021-09-22 21:51:27,797: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,797: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,797: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,797: ==== SSA block rewrite pass on 80
DEBUG    2021-09-22 21:51:27,797: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,797: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,797: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2021-09-22 21:51:27,797: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2021-09-22 21:51:27,797: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2021-09-22 21:51:27,797: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2021-09-22 21:51:27,797: on stmt: Ri_fxn = $88binary_subtract.4 ** $const90.5
DEBUG    2021-09-22 21:51:27,797: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,797: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,798: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,798: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2021-09-22 21:51:27,798: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2021-09-22 21:51:27,798: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,798: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, TSM2.py:527),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,798: on stmt: branch $104pred, 106, 112
DEBUG    2021-09-22 21:51:27,798: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,798: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,798: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,798: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,798: ==== SSA block rewrite pass on 112
DEBUG    2021-09-22 21:51:27,798: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,798: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,798: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2021-09-22 21:51:27,798: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2021-09-22 21:51:27,798: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2021-09-22 21:51:27,798: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2021-09-22 21:51:27,798: on stmt: Ri_fxn = $120binary_add.4 ** $const122.5
DEBUG    2021-09-22 21:51:27,798: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,798: ==== SSA block rewrite pass on 128
DEBUG    2021-09-22 21:51:27,798: Running <numba.core.ssa._FreshVarHandler object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,798: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, TSM2.py:511), Var(Ri_fxn, TSM2.py:510)])
DEBUG    2021-09-22 21:51:27,799: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2021-09-22 21:51:27,799: on stmt: return $134return_value.3
DEBUG    2021-09-22 21:51:27,799: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f90f05f6c70>],
             42: [<numba.core.ir.Assign object at 0x7f90f05f6550>],
             54: [<numba.core.ir.Assign object at 0x7f9140628520>]})
DEBUG    2021-09-22 21:51:27,799: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,799: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,799: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2021-09-22 21:51:27,799: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2021-09-22 21:51:27,799: on stmt: density_air = arg(2, name=density_air)
DEBUG    2021-09-22 21:51:27,799: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,799: on stmt: $6load_global.1 = global(gravity: -9.806)
DEBUG    2021-09-22 21:51:27,799: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2021-09-22 21:51:27,799: on stmt: $14binary_multiply.5 = $6load_global.1 * $12binary_subtract.4
DEBUG    2021-09-22 21:51:27,799: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,799: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2021-09-22 21:51:27,799: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,799: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2021-09-22 21:51:27,799: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2021-09-22 21:51:27,799: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2021-09-22 21:51:27,799: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,799: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2021-09-22 21:51:27,800: find_def var='Ri_No' stmt=$38compare_op.16 = Ri_No > $const36.15
DEBUG    2021-09-22 21:51:27,800: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,800: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, TSM2.py:514),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,800: on stmt: branch $40pred, 42, 46
DEBUG    2021-09-22 21:51:27,800: ==== SSA block rewrite pass on 42
DEBUG    2021-09-22 21:51:27,800: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,800: on stmt: Ri_No.1 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,800: on stmt: jump 46
DEBUG    2021-09-22 21:51:27,800: ==== SSA block rewrite pass on 46
DEBUG    2021-09-22 21:51:27,800: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,800: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,800: on stmt: $50compare_op.2 = Ri_No < $const48.1
DEBUG    2021-09-22 21:51:27,800: find_def var='Ri_No' stmt=$50compare_op.2 = Ri_No < $const48.1
DEBUG    2021-09-22 21:51:27,800: find_def_from_top label 46
DEBUG    2021-09-22 21:51:27,800: insert phi node Ri_No.3 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG    2021-09-22 21:51:27,800: find_def_from_bottom label 0
DEBUG    2021-09-22 21:51:27,800: incoming_def Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2021-09-22 21:51:27,800: find_def_from_bottom label 42
DEBUG    2021-09-22 21:51:27,800: incoming_def Ri_No.1 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,800: replaced with: $50compare_op.2 = Ri_No.3 < $const48.1
DEBUG    2021-09-22 21:51:27,801: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,801: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, TSM2.py:516),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,801: on stmt: branch $52pred, 54, 58
DEBUG    2021-09-22 21:51:27,801: ==== SSA block rewrite pass on 54
DEBUG    2021-09-22 21:51:27,801: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,801: on stmt: Ri_No.2 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,801: on stmt: jump 58
DEBUG    2021-09-22 21:51:27,801: ==== SSA block rewrite pass on 58
DEBUG    2021-09-22 21:51:27,801: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,801: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,801: on stmt: $62compare_op.2 = Ri_No < $const60.1
DEBUG    2021-09-22 21:51:27,801: find_def var='Ri_No' stmt=$62compare_op.2 = Ri_No < $const60.1
DEBUG    2021-09-22 21:51:27,801: find_def_from_top label 58
DEBUG    2021-09-22 21:51:27,801: insert phi node Ri_No.4 = phi(incoming_values=[], incoming_blocks=[]) at 58
DEBUG    2021-09-22 21:51:27,801: find_def_from_bottom label 54
DEBUG    2021-09-22 21:51:27,801: incoming_def Ri_No.2 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,801: find_def_from_bottom label 46
DEBUG    2021-09-22 21:51:27,801: incoming_def Ri_No.3 = phi(incoming_values=[Var(Ri_No, TSM2.py:511), Var(Ri_No.1, TSM2.py:515)], incoming_blocks=[0, 42])
DEBUG    2021-09-22 21:51:27,801: replaced with: $62compare_op.2 = Ri_No.4 < $const60.1
DEBUG    2021-09-22 21:51:27,801: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,801: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:519),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,801: on stmt: branch $64pred, 66, 98
DEBUG    2021-09-22 21:51:27,802: ==== SSA block rewrite pass on 66
DEBUG    2021-09-22 21:51:27,802: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,802: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2021-09-22 21:51:27,802: on stmt: $70compare_op.2 = Ri_No >= $const68.1
DEBUG    2021-09-22 21:51:27,802: find_def var='Ri_No' stmt=$70compare_op.2 = Ri_No >= $const68.1
DEBUG    2021-09-22 21:51:27,802: find_def_from_top label 66
DEBUG    2021-09-22 21:51:27,802: idom 58 from label 66
DEBUG    2021-09-22 21:51:27,802: find_def_from_bottom label 58
DEBUG    2021-09-22 21:51:27,802: replaced with: $70compare_op.2 = Ri_No.4 >= $const68.1
DEBUG    2021-09-22 21:51:27,802: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,802: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, TSM2.py:520),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,802: on stmt: branch $72pred, 74, 80
DEBUG    2021-09-22 21:51:27,802: ==== SSA block rewrite pass on 74
DEBUG    2021-09-22 21:51:27,802: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,802: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,802: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,802: ==== SSA block rewrite pass on 80
DEBUG    2021-09-22 21:51:27,802: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,802: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,802: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2021-09-22 21:51:27,802: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2021-09-22 21:51:27,802: find_def var='Ri_No' stmt=$86binary_multiply.3 = $const82.1 * Ri_No
DEBUG    2021-09-22 21:51:27,803: find_def_from_top label 80
DEBUG    2021-09-22 21:51:27,803: idom 66 from label 80
DEBUG    2021-09-22 21:51:27,803: find_def_from_bottom label 66
DEBUG    2021-09-22 21:51:27,803: find_def_from_top label 66
DEBUG    2021-09-22 21:51:27,803: idom 58 from label 66
DEBUG    2021-09-22 21:51:27,803: find_def_from_bottom label 58
DEBUG    2021-09-22 21:51:27,803: replaced with: $86binary_multiply.3 = $const82.1 * Ri_No.4
DEBUG    2021-09-22 21:51:27,803: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2021-09-22 21:51:27,803: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2021-09-22 21:51:27,803: on stmt: Ri_fxn = $88binary_subtract.4 ** $const90.5
DEBUG    2021-09-22 21:51:27,803: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,803: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,803: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,803: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2021-09-22 21:51:27,803: on stmt: $102compare_op.2 = Ri_No <= $const100.1
DEBUG    2021-09-22 21:51:27,803: find_def var='Ri_No' stmt=$102compare_op.2 = Ri_No <= $const100.1
DEBUG    2021-09-22 21:51:27,803: find_def_from_top label 98
DEBUG    2021-09-22 21:51:27,803: idom 58 from label 98
DEBUG    2021-09-22 21:51:27,803: find_def_from_bottom label 58
DEBUG    2021-09-22 21:51:27,803: replaced with: $102compare_op.2 = Ri_No.4 <= $const100.1
DEBUG    2021-09-22 21:51:27,803: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,803: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, TSM2.py:527),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,803: on stmt: branch $104pred, 106, 112
DEBUG    2021-09-22 21:51:27,804: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,804: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,804: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,804: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,804: ==== SSA block rewrite pass on 112
DEBUG    2021-09-22 21:51:27,804: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,804: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,804: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2021-09-22 21:51:27,804: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2021-09-22 21:51:27,804: find_def var='Ri_No' stmt=$118binary_multiply.3 = $const114.1 * Ri_No
DEBUG    2021-09-22 21:51:27,804: find_def_from_top label 112
DEBUG    2021-09-22 21:51:27,804: idom 98 from label 112
DEBUG    2021-09-22 21:51:27,804: find_def_from_bottom label 98
DEBUG    2021-09-22 21:51:27,804: find_def_from_top label 98
DEBUG    2021-09-22 21:51:27,804: idom 58 from label 98
DEBUG    2021-09-22 21:51:27,804: find_def_from_bottom label 58
DEBUG    2021-09-22 21:51:27,804: replaced with: $118binary_multiply.3 = $const114.1 * Ri_No.4
DEBUG    2021-09-22 21:51:27,804: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2021-09-22 21:51:27,804: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2021-09-22 21:51:27,804: on stmt: Ri_fxn = $120binary_add.4 ** $const122.5
DEBUG    2021-09-22 21:51:27,804: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,804: ==== SSA block rewrite pass on 128
DEBUG    2021-09-22 21:51:27,804: Running <numba.core.ssa._FixSSAVars object at 0x7f9160965cd0>
DEBUG    2021-09-22 21:51:27,804: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No, TSM2.py:511), Var(Ri_fxn, TSM2.py:510)])
DEBUG    2021-09-22 21:51:27,805: find_def var='Ri_No' stmt=$132build_tuple.2 = build_tuple(items=[Var(Ri_No, TSM2.py:511), Var(Ri_fxn, TSM2.py:510)])
DEBUG    2021-09-22 21:51:27,805: find_def_from_top label 128
DEBUG    2021-09-22 21:51:27,805: idom 58 from label 128
DEBUG    2021-09-22 21:51:27,805: find_def_from_bottom label 58
DEBUG    2021-09-22 21:51:27,805: replaced with: $132build_tuple.2 = build_tuple(items=[Var(Ri_No.4, TSM2.py:519), Var(Ri_fxn, TSM2.py:510)])
DEBUG    2021-09-22 21:51:27,805: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2021-09-22 21:51:27,805: on stmt: return $134return_value.3
DEBUG    2021-09-22 21:51:27,805: Fix SSA violator on var Ri_fxn
DEBUG    2021-09-22 21:51:27,805: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,805: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,805: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2021-09-22 21:51:27,805: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2021-09-22 21:51:27,805: on stmt: density_air = arg(2, name=density_air)
DEBUG    2021-09-22 21:51:27,805: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,805: first assign: Ri_fxn
DEBUG    2021-09-22 21:51:27,805: replaced with: Ri_fxn = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,805: on stmt: $6load_global.1 = global(gravity: -9.806)
DEBUG    2021-09-22 21:51:27,805: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2021-09-22 21:51:27,805: on stmt: $14binary_multiply.5 = $6load_global.1 * $12binary_subtract.4
DEBUG    2021-09-22 21:51:27,805: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,805: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2021-09-22 21:51:27,805: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,805: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2021-09-22 21:51:27,806: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2021-09-22 21:51:27,806: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2021-09-22 21:51:27,806: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,806: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2021-09-22 21:51:27,806: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,806: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, TSM2.py:514),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,806: on stmt: branch $40pred, 42, 46
DEBUG    2021-09-22 21:51:27,806: ==== SSA block rewrite pass on 42
DEBUG    2021-09-22 21:51:27,806: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,806: on stmt: Ri_No.1 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,806: on stmt: jump 46
DEBUG    2021-09-22 21:51:27,806: ==== SSA block rewrite pass on 46
DEBUG    2021-09-22 21:51:27,806: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,806: on stmt: Ri_No.3 = phi(incoming_values=[Var(Ri_No, TSM2.py:511), Var(Ri_No.1, TSM2.py:515)], incoming_blocks=[0, 42])
DEBUG    2021-09-22 21:51:27,806: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,806: on stmt: $50compare_op.2 = Ri_No.3 < $const48.1
DEBUG    2021-09-22 21:51:27,806: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,806: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, TSM2.py:516),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,806: on stmt: branch $52pred, 54, 58
DEBUG    2021-09-22 21:51:27,806: ==== SSA block rewrite pass on 54
DEBUG    2021-09-22 21:51:27,807: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,807: on stmt: Ri_No.2 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,807: on stmt: jump 58
DEBUG    2021-09-22 21:51:27,807: ==== SSA block rewrite pass on 58
DEBUG    2021-09-22 21:51:27,807: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,807: on stmt: Ri_No.4 = phi(incoming_values=[Var(Ri_No.2, TSM2.py:517), Var(Ri_No.3, TSM2.py:516)], incoming_blocks=[54, 46])
DEBUG    2021-09-22 21:51:27,807: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,807: on stmt: $62compare_op.2 = Ri_No.4 < $const60.1
DEBUG    2021-09-22 21:51:27,807: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,807: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:519),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,807: on stmt: branch $64pred, 66, 98
DEBUG    2021-09-22 21:51:27,807: ==== SSA block rewrite pass on 66
DEBUG    2021-09-22 21:51:27,807: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,807: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2021-09-22 21:51:27,807: on stmt: $70compare_op.2 = Ri_No.4 >= $const68.1
DEBUG    2021-09-22 21:51:27,807: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,807: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, TSM2.py:520),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,807: on stmt: branch $72pred, 74, 80
DEBUG    2021-09-22 21:51:27,807: ==== SSA block rewrite pass on 74
DEBUG    2021-09-22 21:51:27,807: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,807: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,807: replaced with: Ri_fxn.1 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,807: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,807: ==== SSA block rewrite pass on 80
DEBUG    2021-09-22 21:51:27,807: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,808: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,808: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2021-09-22 21:51:27,808: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No.4
DEBUG    2021-09-22 21:51:27,808: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2021-09-22 21:51:27,808: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2021-09-22 21:51:27,808: on stmt: Ri_fxn = $88binary_subtract.4 ** $const90.5
DEBUG    2021-09-22 21:51:27,808: replaced with: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2021-09-22 21:51:27,808: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,808: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,808: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,808: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2021-09-22 21:51:27,808: on stmt: $102compare_op.2 = Ri_No.4 <= $const100.1
DEBUG    2021-09-22 21:51:27,808: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,808: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, TSM2.py:527),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,808: on stmt: branch $104pred, 106, 112
DEBUG    2021-09-22 21:51:27,808: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,808: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,808: on stmt: Ri_fxn = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,808: replaced with: Ri_fxn.3 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,808: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,808: ==== SSA block rewrite pass on 112
DEBUG    2021-09-22 21:51:27,808: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,808: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,808: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2021-09-22 21:51:27,808: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No.4
DEBUG    2021-09-22 21:51:27,809: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2021-09-22 21:51:27,809: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2021-09-22 21:51:27,809: on stmt: Ri_fxn = $120binary_add.4 ** $const122.5
DEBUG    2021-09-22 21:51:27,809: replaced with: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2021-09-22 21:51:27,809: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,809: ==== SSA block rewrite pass on 128
DEBUG    2021-09-22 21:51:27,809: Running <numba.core.ssa._FreshVarHandler object at 0x7f91406479d0>
DEBUG    2021-09-22 21:51:27,809: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No.4, TSM2.py:519), Var(Ri_fxn, TSM2.py:510)])
DEBUG    2021-09-22 21:51:27,809: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2021-09-22 21:51:27,809: on stmt: return $134return_value.3
DEBUG    2021-09-22 21:51:27,809: Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f9140647970>],
             74: [<numba.core.ir.Assign object at 0x7f90f05f6c40>],
             80: [<numba.core.ir.Assign object at 0x7f90f05a5a30>],
             106: [<numba.core.ir.Assign object at 0x7f90f05a5c40>],
             112: [<numba.core.ir.Assign object at 0x7f90f05a5af0>]})
DEBUG    2021-09-22 21:51:27,809: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,809: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,809: on stmt: wind_speed = arg(0, name=wind_speed)
DEBUG    2021-09-22 21:51:27,809: on stmt: density_air_sat = arg(1, name=density_air_sat)
DEBUG    2021-09-22 21:51:27,809: on stmt: density_air = arg(2, name=density_air)
DEBUG    2021-09-22 21:51:27,809: on stmt: Ri_fxn = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,809: on stmt: $6load_global.1 = global(gravity: -9.806)
DEBUG    2021-09-22 21:51:27,809: on stmt: $12binary_subtract.4 = density_air - density_air_sat
DEBUG    2021-09-22 21:51:27,809: on stmt: $14binary_multiply.5 = $6load_global.1 * $12binary_subtract.4
DEBUG    2021-09-22 21:51:27,809: on stmt: $const16.6 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,809: on stmt: $18binary_multiply.7 = $14binary_multiply.5 * $const16.6
DEBUG    2021-09-22 21:51:27,810: on stmt: $const24.10 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,810: on stmt: $26binary_power.11 = wind_speed ** $const24.10
DEBUG    2021-09-22 21:51:27,810: on stmt: $28binary_multiply.12 = density_air * $26binary_power.11
DEBUG    2021-09-22 21:51:27,810: on stmt: Ri_No = $18binary_multiply.7 / $28binary_multiply.12
DEBUG    2021-09-22 21:51:27,810: on stmt: $const36.15 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,810: on stmt: $38compare_op.16 = Ri_No > $const36.15
DEBUG    2021-09-22 21:51:27,810: on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,810: on stmt: $40pred = call bool40($38compare_op.16, func=bool40, args=(Var($38compare_op.16, TSM2.py:514),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,810: on stmt: branch $40pred, 42, 46
DEBUG    2021-09-22 21:51:27,810: ==== SSA block rewrite pass on 42
DEBUG    2021-09-22 21:51:27,810: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,810: on stmt: Ri_No.1 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,810: on stmt: jump 46
DEBUG    2021-09-22 21:51:27,810: ==== SSA block rewrite pass on 46
DEBUG    2021-09-22 21:51:27,810: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,810: on stmt: Ri_No.3 = phi(incoming_values=[Var(Ri_No, TSM2.py:511), Var(Ri_No.1, TSM2.py:515)], incoming_blocks=[0, 42])
DEBUG    2021-09-22 21:51:27,810: on stmt: $const48.1 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,810: on stmt: $50compare_op.2 = Ri_No.3 < $const48.1
DEBUG    2021-09-22 21:51:27,810: on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,810: on stmt: $52pred = call bool52($50compare_op.2, func=bool52, args=(Var($50compare_op.2, TSM2.py:516),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,810: on stmt: branch $52pred, 54, 58
DEBUG    2021-09-22 21:51:27,810: ==== SSA block rewrite pass on 54
DEBUG    2021-09-22 21:51:27,810: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,811: on stmt: Ri_No.2 = const(float, -1.0)
DEBUG    2021-09-22 21:51:27,811: on stmt: jump 58
DEBUG    2021-09-22 21:51:27,811: ==== SSA block rewrite pass on 58
DEBUG    2021-09-22 21:51:27,811: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,811: on stmt: Ri_No.4 = phi(incoming_values=[Var(Ri_No.2, TSM2.py:517), Var(Ri_No.3, TSM2.py:516)], incoming_blocks=[54, 46])
DEBUG    2021-09-22 21:51:27,811: on stmt: $const60.1 = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,811: on stmt: $62compare_op.2 = Ri_No.4 < $const60.1
DEBUG    2021-09-22 21:51:27,811: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,811: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:519),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,811: on stmt: branch $64pred, 66, 98
DEBUG    2021-09-22 21:51:27,811: ==== SSA block rewrite pass on 66
DEBUG    2021-09-22 21:51:27,811: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,811: on stmt: $const68.1 = const(float, -0.01)
DEBUG    2021-09-22 21:51:27,811: on stmt: $70compare_op.2 = Ri_No.4 >= $const68.1
DEBUG    2021-09-22 21:51:27,811: on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,811: on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, TSM2.py:520),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,811: on stmt: branch $72pred, 74, 80
DEBUG    2021-09-22 21:51:27,811: ==== SSA block rewrite pass on 74
DEBUG    2021-09-22 21:51:27,811: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,811: on stmt: Ri_fxn.1 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,811: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,811: ==== SSA block rewrite pass on 80
DEBUG    2021-09-22 21:51:27,811: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,811: on stmt: $const80.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,812: on stmt: $const82.1 = const(float, 22.0)
DEBUG    2021-09-22 21:51:27,812: on stmt: $86binary_multiply.3 = $const82.1 * Ri_No.4
DEBUG    2021-09-22 21:51:27,812: on stmt: $88binary_subtract.4 = $const80.0 - $86binary_multiply.3
DEBUG    2021-09-22 21:51:27,812: on stmt: $const90.5 = const(float, 0.8)
DEBUG    2021-09-22 21:51:27,812: on stmt: Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2021-09-22 21:51:27,812: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,812: ==== SSA block rewrite pass on 98
DEBUG    2021-09-22 21:51:27,812: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,812: on stmt: $const100.1 = const(float, 0.01)
DEBUG    2021-09-22 21:51:27,812: on stmt: $102compare_op.2 = Ri_No.4 <= $const100.1
DEBUG    2021-09-22 21:51:27,812: on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,812: on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, TSM2.py:527),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,812: on stmt: branch $104pred, 106, 112
DEBUG    2021-09-22 21:51:27,812: ==== SSA block rewrite pass on 106
DEBUG    2021-09-22 21:51:27,812: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,812: on stmt: Ri_fxn.3 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,812: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,812: ==== SSA block rewrite pass on 112
DEBUG    2021-09-22 21:51:27,812: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,812: on stmt: $const112.0 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,812: on stmt: $const114.1 = const(float, 34.0)
DEBUG    2021-09-22 21:51:27,812: on stmt: $118binary_multiply.3 = $const114.1 * Ri_No.4
DEBUG    2021-09-22 21:51:27,812: on stmt: $120binary_add.4 = $const112.0 + $118binary_multiply.3
DEBUG    2021-09-22 21:51:27,812: on stmt: $const122.5 = const(float, -0.8)
DEBUG    2021-09-22 21:51:27,812: on stmt: Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2021-09-22 21:51:27,813: on stmt: jump 128
DEBUG    2021-09-22 21:51:27,813: ==== SSA block rewrite pass on 128
DEBUG    2021-09-22 21:51:27,813: Running <numba.core.ssa._FixSSAVars object at 0x7f916096deb0>
DEBUG    2021-09-22 21:51:27,813: on stmt: $132build_tuple.2 = build_tuple(items=[Var(Ri_No.4, TSM2.py:519), Var(Ri_fxn, TSM2.py:510)])
DEBUG    2021-09-22 21:51:27,813: find_def var='Ri_fxn' stmt=$132build_tuple.2 = build_tuple(items=[Var(Ri_No.4, TSM2.py:519), Var(Ri_fxn, TSM2.py:510)])
DEBUG    2021-09-22 21:51:27,813: find_def_from_top label 128
DEBUG    2021-09-22 21:51:27,813: insert phi node Ri_fxn.5 = phi(incoming_values=[], incoming_blocks=[]) at 128
DEBUG    2021-09-22 21:51:27,813: find_def_from_bottom label 80
DEBUG    2021-09-22 21:51:27,813: incoming_def Ri_fxn.2 = $88binary_subtract.4 ** $const90.5
DEBUG    2021-09-22 21:51:27,813: find_def_from_bottom label 74
DEBUG    2021-09-22 21:51:27,813: incoming_def Ri_fxn.1 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,813: find_def_from_bottom label 112
DEBUG    2021-09-22 21:51:27,813: incoming_def Ri_fxn.4 = $120binary_add.4 ** $const122.5
DEBUG    2021-09-22 21:51:27,813: find_def_from_bottom label 106
DEBUG    2021-09-22 21:51:27,813: incoming_def Ri_fxn.3 = const(float, 1.0)
DEBUG    2021-09-22 21:51:27,813: replaced with: $132build_tuple.2 = build_tuple(items=[Var(Ri_No.4, TSM2.py:519), Var(Ri_fxn.5, TSM2.py:533)])
DEBUG    2021-09-22 21:51:27,813: on stmt: $134return_value.3 = cast(value=$132build_tuple.2)
DEBUG    2021-09-22 21:51:27,813: on stmt: return $134return_value.3
DEBUG    2021-09-22 21:51:27,882: bytecode dump:
>          0	NOP(arg=None, lineno=429)
           2	LOAD_GLOBAL(arg=0, lineno=429)
           4	LOAD_CONST(arg=1, lineno=429)
           6	LOAD_GLOBAL(arg=1, lineno=429)
           8	BINARY_MULTIPLY(arg=None, lineno=429)
          10	LOAD_FAST(arg=0, lineno=429)
          12	BINARY_MULTIPLY(arg=None, lineno=429)
          14	BINARY_ADD(arg=None, lineno=429)
          16	LOAD_CONST(arg=2, lineno=429)
          18	LOAD_GLOBAL(arg=2, lineno=429)
          20	BINARY_MULTIPLY(arg=None, lineno=429)
          22	LOAD_FAST(arg=0, lineno=429)
          24	LOAD_CONST(arg=1, lineno=429)
          26	BINARY_POWER(arg=None, lineno=429)
          28	BINARY_MULTIPLY(arg=None, lineno=429)
          30	BINARY_ADD(arg=None, lineno=429)
          32	LOAD_CONST(arg=3, lineno=429)
          34	LOAD_GLOBAL(arg=3, lineno=429)
          36	BINARY_MULTIPLY(arg=None, lineno=429)
          38	LOAD_FAST(arg=0, lineno=429)
          40	LOAD_CONST(arg=2, lineno=429)
          42	BINARY_POWER(arg=None, lineno=429)
          44	BINARY_MULTIPLY(arg=None, lineno=429)
          46	BINARY_ADD(arg=None, lineno=429)
          48	LOAD_CONST(arg=4, lineno=429)
          50	LOAD_GLOBAL(arg=4, lineno=429)
          52	BINARY_MULTIPLY(arg=None, lineno=429)
          54	LOAD_FAST(arg=0, lineno=429)
          56	LOAD_CONST(arg=3, lineno=429)
          58	BINARY_POWER(arg=None, lineno=429)
          60	BINARY_MULTIPLY(arg=None, lineno=429)
          62	BINARY_ADD(arg=None, lineno=429)
          64	LOAD_CONST(arg=5, lineno=429)
          66	LOAD_GLOBAL(arg=5, lineno=429)
          68	BINARY_MULTIPLY(arg=None, lineno=429)
          70	LOAD_FAST(arg=0, lineno=429)
          72	LOAD_CONST(arg=4, lineno=429)
          74	BINARY_POWER(arg=None, lineno=429)
          76	BINARY_MULTIPLY(arg=None, lineno=429)
          78	BINARY_ADD(arg=None, lineno=429)
          80	RETURN_VALUE(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,882: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,882: stack: []
DEBUG    2021-09-22 21:51:27,882: dispatch pc=0, inst=NOP(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack []
DEBUG    2021-09-22 21:51:27,882: dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack []
DEBUG    2021-09-22 21:51:27,882: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$2load_global.0']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$2load_global.0', '$const4.1']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$2load_global.0', '$const4.1', '$6load_global.2']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$2load_global.0', '$8binary_multiply.3']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=12, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$2load_global.0', '$8binary_multiply.3', '$TwaterK10.4']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$2load_global.0', '$12binary_multiply.5']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$14binary_add.6']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$14binary_add.6', '$const16.7']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,882: stack ['$14binary_add.6', '$const16.7', '$18load_global.8']
DEBUG    2021-09-22 21:51:27,882: dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$14binary_add.6', '$20binary_multiply.9']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$14binary_add.6', '$20binary_multiply.9', '$TwaterK22.10']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=26, inst=BINARY_POWER(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$14binary_add.6', '$20binary_multiply.9', '$TwaterK22.10', '$const24.11']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$14binary_add.6', '$20binary_multiply.9', '$26binary_power.12']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=30, inst=BINARY_ADD(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$14binary_add.6', '$28binary_multiply.13']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$30binary_add.14']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$30binary_add.14', '$const32.15']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=36, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$30binary_add.14', '$const32.15', '$34load_global.16']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$30binary_add.14', '$36binary_multiply.17']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$30binary_add.14', '$36binary_multiply.17', '$TwaterK38.18']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=42, inst=BINARY_POWER(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$30binary_add.14', '$36binary_multiply.17', '$TwaterK38.18', '$const40.19']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$30binary_add.14', '$36binary_multiply.17', '$42binary_power.20']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=46, inst=BINARY_ADD(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$30binary_add.14', '$44binary_multiply.21']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=48, inst=LOAD_CONST(arg=4, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$46binary_add.22']
DEBUG    2021-09-22 21:51:27,883: dispatch pc=50, inst=LOAD_GLOBAL(arg=4, lineno=429)
DEBUG    2021-09-22 21:51:27,883: stack ['$46binary_add.22', '$const48.23']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=52, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$46binary_add.22', '$const48.23', '$50load_global.24']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$46binary_add.22', '$52binary_multiply.25']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=56, inst=LOAD_CONST(arg=3, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$46binary_add.22', '$52binary_multiply.25', '$TwaterK54.26']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=58, inst=BINARY_POWER(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$46binary_add.22', '$52binary_multiply.25', '$TwaterK54.26', '$const56.27']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=60, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$46binary_add.22', '$52binary_multiply.25', '$58binary_power.28']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=62, inst=BINARY_ADD(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$46binary_add.22', '$60binary_multiply.29']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=64, inst=LOAD_CONST(arg=5, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$62binary_add.30']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=66, inst=LOAD_GLOBAL(arg=5, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$62binary_add.30', '$const64.31']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=68, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$62binary_add.30', '$const64.31', '$66load_global.32']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$62binary_add.30', '$68binary_multiply.33']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=72, inst=LOAD_CONST(arg=4, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$62binary_add.30', '$68binary_multiply.33', '$TwaterK70.34']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=74, inst=BINARY_POWER(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$62binary_add.30', '$68binary_multiply.33', '$TwaterK70.34', '$const72.35']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=76, inst=BINARY_MULTIPLY(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$62binary_add.30', '$68binary_multiply.33', '$74binary_power.36']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$62binary_add.30', '$76binary_multiply.37']
DEBUG    2021-09-22 21:51:27,884: dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=429)
DEBUG    2021-09-22 21:51:27,884: stack ['$78binary_add.38']
DEBUG    2021-09-22 21:51:27,885: end state. edges=[]
DEBUG    2021-09-22 21:51:27,885: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,885: Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,885: defmap: {}
DEBUG    2021-09-22 21:51:27,885: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,885: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,885: keep phismap: {}
DEBUG    2021-09-22 21:51:27,885: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,885: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,885: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$6load_global.2'}), (8, {'lhs': '$const4.1', 'rhs': '$6load_global.2', 'res': '$8binary_multiply.3'}), (10, {'res': '$TwaterK10.4'}), (12, {'lhs': '$8binary_multiply.3', 'rhs': '$TwaterK10.4', 'res': '$12binary_multiply.5'}), (14, {'lhs': '$2load_global.0', 'rhs': '$12binary_multiply.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$18load_global.8'}), (20, {'lhs': '$const16.7', 'rhs': '$18load_global.8', 'res': '$20binary_multiply.9'}), (22, {'res': '$TwaterK22.10'}), (24, {'res': '$const24.11'}), (26, {'lhs': '$TwaterK22.10', 'rhs': '$const24.11', 'res': '$26binary_power.12'}), (28, {'lhs': '$20binary_multiply.9', 'rhs': '$26binary_power.12', 'res': '$28binary_multiply.13'}), (30, {'lhs': '$14binary_add.6', 'rhs': '$28binary_multiply.13', 'res': '$30binary_add.14'}), (32, {'res': '$const32.15'}), (34, {'res': '$34load_global.16'}), (36, {'lhs': '$const32.15', 'rhs': '$34load_global.16', 'res': '$36binary_multiply.17'}), (38, {'res': '$TwaterK38.18'}), (40, {'res': '$const40.19'}), (42, {'lhs': '$TwaterK38.18', 'rhs': '$const40.19', 'res': '$42binary_power.20'}), (44, {'lhs': '$36binary_multiply.17', 'rhs': '$42binary_power.20', 'res': '$44binary_multiply.21'}), (46, {'lhs': '$30binary_add.14', 'rhs': '$44binary_multiply.21', 'res': '$46binary_add.22'}), (48, {'res': '$const48.23'}), (50, {'res': '$50load_global.24'}), (52, {'lhs': '$const48.23', 'rhs': '$50load_global.24', 'res': '$52binary_multiply.25'}), (54, {'res': '$TwaterK54.26'}), (56, {'res': '$const56.27'}), (58, {'lhs': '$TwaterK54.26', 'rhs': '$const56.27', 'res': '$58binary_power.28'}), (60, {'lhs': '$52binary_multiply.25', 'rhs': '$58binary_power.28', 'res': '$60binary_multiply.29'}), (62, {'lhs': '$46binary_add.22', 'rhs': '$60binary_multiply.29', 'res': '$62binary_add.30'}), (64, {'res': '$const64.31'}), (66, {'res': '$66load_global.32'}), (68, {'lhs': '$const64.31', 'rhs': '$66load_global.32', 'res': '$68binary_multiply.33'}), (70, {'res': '$TwaterK70.34'}), (72, {'res': '$const72.35'}), (74, {'lhs': '$TwaterK70.34', 'rhs': '$const72.35', 'res': '$74binary_power.36'}), (76, {'lhs': '$68binary_multiply.33', 'rhs': '$74binary_power.36', 'res': '$76binary_multiply.37'}), (78, {'lhs': '$62binary_add.30', 'rhs': '$76binary_multiply.37', 'res': '$78binary_add.38'}), (80, {'retval': '$78binary_add.38', 'castval': '$80return_value.39'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,886: label 0:
    TwaterK = arg(0, name=TwaterK)           ['TwaterK']
    $2load_global.0 = global(a1: -188.903931) ['$2load_global.0']
    $const4.1 = const(float, 2.0)            ['$const4.1']
    $6load_global.2 = global(a2: 2.133357675) ['$6load_global.2']
    $8binary_multiply.3 = $const4.1 * $6load_global.2 ['$6load_global.2', '$8binary_multiply.3', '$const4.1']
    $12binary_multiply.5 = $8binary_multiply.3 * TwaterK ['$12binary_multiply.5', '$8binary_multiply.3', 'TwaterK']
    $14binary_add.6 = $2load_global.0 + $12binary_multiply.5 ['$12binary_multiply.5', '$14binary_add.6', '$2load_global.0']
    $const16.7 = const(float, 3.0)           ['$const16.7']
    $18load_global.8 = global(a3: -0.01288580973) ['$18load_global.8']
    $20binary_multiply.9 = $const16.7 * $18load_global.8 ['$18load_global.8', '$20binary_multiply.9', '$const16.7']
    $const24.11 = const(float, 2.0)          ['$const24.11']
    $26binary_power.12 = TwaterK ** $const24.11 ['$26binary_power.12', '$const24.11', 'TwaterK']
    $28binary_multiply.13 = $20binary_multiply.9 * $26binary_power.12 ['$20binary_multiply.9', '$26binary_power.12', '$28binary_multiply.13']
    $30binary_add.14 = $14binary_add.6 + $28binary_multiply.13 ['$14binary_add.6', '$28binary_multiply.13', '$30binary_add.14']
    $const32.15 = const(float, 4.0)          ['$const32.15']
    $34load_global.16 = global(a4: 4.393587233e-05) ['$34load_global.16']
    $36binary_multiply.17 = $const32.15 * $34load_global.16 ['$34load_global.16', '$36binary_multiply.17', '$const32.15']
    $const40.19 = const(float, 3.0)          ['$const40.19']
    $42binary_power.20 = TwaterK ** $const40.19 ['$42binary_power.20', '$const40.19', 'TwaterK']
    $44binary_multiply.21 = $36binary_multiply.17 * $42binary_power.20 ['$36binary_multiply.17', '$42binary_power.20', '$44binary_multiply.21']
    $46binary_add.22 = $30binary_add.14 + $44binary_multiply.21 ['$30binary_add.14', '$44binary_multiply.21', '$46binary_add.22']
    $const48.23 = const(float, 5.0)          ['$const48.23']
    $50load_global.24 = global(a5: -8.023923082e-08) ['$50load_global.24']
    $52binary_multiply.25 = $const48.23 * $50load_global.24 ['$50load_global.24', '$52binary_multiply.25', '$const48.23']
    $const56.27 = const(float, 4.0)          ['$const56.27']
    $58binary_power.28 = TwaterK ** $const56.27 ['$58binary_power.28', '$const56.27', 'TwaterK']
    $60binary_multiply.29 = $52binary_multiply.25 * $58binary_power.28 ['$52binary_multiply.25', '$58binary_power.28', '$60binary_multiply.29']
    $62binary_add.30 = $46binary_add.22 + $60binary_multiply.29 ['$46binary_add.22', '$60binary_multiply.29', '$62binary_add.30']
    $const64.31 = const(float, 6.0)          ['$const64.31']
    $66load_global.32 = global(a6: 6.136820929e-11) ['$66load_global.32']
    $68binary_multiply.33 = $const64.31 * $66load_global.32 ['$66load_global.32', '$68binary_multiply.33', '$const64.31']
    $const72.35 = const(float, 5.0)          ['$const72.35']
    $74binary_power.36 = TwaterK ** $const72.35 ['$74binary_power.36', '$const72.35', 'TwaterK']
    $76binary_multiply.37 = $68binary_multiply.33 * $74binary_power.36 ['$68binary_multiply.33', '$74binary_power.36', '$76binary_multiply.37']
    $78binary_add.38 = $62binary_add.30 + $76binary_multiply.37 ['$62binary_add.30', '$76binary_multiply.37', '$78binary_add.38']
    $80return_value.39 = cast(value=$78binary_add.38) ['$78binary_add.38', '$80return_value.39']
    return $80return_value.39                ['$80return_value.39']

DEBUG    2021-09-22 21:51:27,888: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,888: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120774670>
DEBUG    2021-09-22 21:51:27,888: on stmt: TwaterK = arg(0, name=TwaterK)
DEBUG    2021-09-22 21:51:27,888: on stmt: $2load_global.0 = global(a1: -188.903931)
DEBUG    2021-09-22 21:51:27,888: on stmt: $const4.1 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,888: on stmt: $6load_global.2 = global(a2: 2.133357675)
DEBUG    2021-09-22 21:51:27,888: on stmt: $8binary_multiply.3 = $const4.1 * $6load_global.2
DEBUG    2021-09-22 21:51:27,889: on stmt: $12binary_multiply.5 = $8binary_multiply.3 * TwaterK
DEBUG    2021-09-22 21:51:27,889: on stmt: $14binary_add.6 = $2load_global.0 + $12binary_multiply.5
DEBUG    2021-09-22 21:51:27,889: on stmt: $const16.7 = const(float, 3.0)
DEBUG    2021-09-22 21:51:27,889: on stmt: $18load_global.8 = global(a3: -0.01288580973)
DEBUG    2021-09-22 21:51:27,889: on stmt: $20binary_multiply.9 = $const16.7 * $18load_global.8
DEBUG    2021-09-22 21:51:27,889: on stmt: $const24.11 = const(float, 2.0)
DEBUG    2021-09-22 21:51:27,889: on stmt: $26binary_power.12 = TwaterK ** $const24.11
DEBUG    2021-09-22 21:51:27,889: on stmt: $28binary_multiply.13 = $20binary_multiply.9 * $26binary_power.12
DEBUG    2021-09-22 21:51:27,889: on stmt: $30binary_add.14 = $14binary_add.6 + $28binary_multiply.13
DEBUG    2021-09-22 21:51:27,889: on stmt: $const32.15 = const(float, 4.0)
DEBUG    2021-09-22 21:51:27,889: on stmt: $34load_global.16 = global(a4: 4.393587233e-05)
DEBUG    2021-09-22 21:51:27,889: on stmt: $36binary_multiply.17 = $const32.15 * $34load_global.16
DEBUG    2021-09-22 21:51:27,889: on stmt: $const40.19 = const(float, 3.0)
DEBUG    2021-09-22 21:51:27,889: on stmt: $42binary_power.20 = TwaterK ** $const40.19
DEBUG    2021-09-22 21:51:27,889: on stmt: $44binary_multiply.21 = $36binary_multiply.17 * $42binary_power.20
DEBUG    2021-09-22 21:51:27,889: on stmt: $46binary_add.22 = $30binary_add.14 + $44binary_multiply.21
DEBUG    2021-09-22 21:51:27,889: on stmt: $const48.23 = const(float, 5.0)
DEBUG    2021-09-22 21:51:27,889: on stmt: $50load_global.24 = global(a5: -8.023923082e-08)
DEBUG    2021-09-22 21:51:27,889: on stmt: $52binary_multiply.25 = $const48.23 * $50load_global.24
DEBUG    2021-09-22 21:51:27,889: on stmt: $const56.27 = const(float, 4.0)
DEBUG    2021-09-22 21:51:27,889: on stmt: $58binary_power.28 = TwaterK ** $const56.27
DEBUG    2021-09-22 21:51:27,889: on stmt: $60binary_multiply.29 = $52binary_multiply.25 * $58binary_power.28
DEBUG    2021-09-22 21:51:27,889: on stmt: $62binary_add.30 = $46binary_add.22 + $60binary_multiply.29
DEBUG    2021-09-22 21:51:27,889: on stmt: $const64.31 = const(float, 6.0)
DEBUG    2021-09-22 21:51:27,889: on stmt: $66load_global.32 = global(a6: 6.136820929e-11)
DEBUG    2021-09-22 21:51:27,889: on stmt: $68binary_multiply.33 = $const64.31 * $66load_global.32
DEBUG    2021-09-22 21:51:27,889: on stmt: $const72.35 = const(float, 5.0)
DEBUG    2021-09-22 21:51:27,889: on stmt: $74binary_power.36 = TwaterK ** $const72.35
DEBUG    2021-09-22 21:51:27,889: on stmt: $76binary_multiply.37 = $68binary_multiply.33 * $74binary_power.36
DEBUG    2021-09-22 21:51:27,890: on stmt: $78binary_add.38 = $62binary_add.30 + $76binary_multiply.37
DEBUG    2021-09-22 21:51:27,890: on stmt: $80return_value.39 = cast(value=$78binary_add.38)
DEBUG    2021-09-22 21:51:27,890: on stmt: return $80return_value.39
DEBUG    2021-09-22 21:51:27,890: defs defaultdict(<class 'list'>,
            {'$12binary_multiply.5': [<numba.core.ir.Assign object at 0x7f9140628fd0>],
             '$14binary_add.6': [<numba.core.ir.Assign object at 0x7f90f05f6130>],
             '$18load_global.8': [<numba.core.ir.Assign object at 0x7f90f060c670>],
             '$20binary_multiply.9': [<numba.core.ir.Assign object at 0x7f9110587760>],
             '$26binary_power.12': [<numba.core.ir.Assign object at 0x7f9160951f70>],
             '$28binary_multiply.13': [<numba.core.ir.Assign object at 0x7f9160965b20>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f9120774280>],
             '$30binary_add.14': [<numba.core.ir.Assign object at 0x7f9160972c70>],
             '$34load_global.16': [<numba.core.ir.Assign object at 0x7f90f05e5520>],
             '$36binary_multiply.17': [<numba.core.ir.Assign object at 0x7f90f05bca60>],
             '$42binary_power.20': [<numba.core.ir.Assign object at 0x7f90f05a51c0>],
             '$44binary_multiply.21': [<numba.core.ir.Assign object at 0x7f90f05a5e20>],
             '$46binary_add.22': [<numba.core.ir.Assign object at 0x7f90f05bdbe0>],
             '$50load_global.24': [<numba.core.ir.Assign object at 0x7f9160981e20>],
             '$52binary_multiply.25': [<numba.core.ir.Assign object at 0x7f90f05ff070>],
             '$58binary_power.28': [<numba.core.ir.Assign object at 0x7f90f05ff490>],
             '$60binary_multiply.29': [<numba.core.ir.Assign object at 0x7f90f05ff610>],
             '$62binary_add.30': [<numba.core.ir.Assign object at 0x7f90f05ff790>],
             '$66load_global.32': [<numba.core.ir.Assign object at 0x7f90f05ffa90>],
             '$68binary_multiply.33': [<numba.core.ir.Assign object at 0x7f90f05ffc10>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x7f9120774be0>],
             '$74binary_power.36': [<numba.core.ir.Assign object at 0x7f90f05e3070>],
             '$76binary_multiply.37': [<numba.core.ir.Assign object at 0x7f90f05e31f0>],
             '$78binary_add.38': [<numba.core.ir.Assign object at 0x7f90f05e3370>],
             '$80return_value.39': [<numba.core.ir.Assign object at 0x7f90f05e34f0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x7f9140647f40>],
             '$const16.7': [<numba.core.ir.Assign object at 0x7f90f05f6910>],
             '$const24.11': [<numba.core.ir.Assign object at 0x7f90f05d90a0>],
             '$const32.15': [<numba.core.ir.Assign object at 0x7f9160972940>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f9120774c40>],
             '$const40.19': [<numba.core.ir.Assign object at 0x7f90f05a5220>],
             '$const48.23': [<numba.core.ir.Assign object at 0x7f9160981dc0>],
             '$const56.27': [<numba.core.ir.Assign object at 0x7f90f05ff310>],
             '$const64.31': [<numba.core.ir.Assign object at 0x7f90f05ff910>],
             '$const72.35': [<numba.core.ir.Assign object at 0x7f90f05ffeb0>],
             'TwaterK': [<numba.core.ir.Assign object at 0x7f9120774580>]})
DEBUG    2021-09-22 21:51:27,890: SSA violators set()
DEBUG    2021-09-22 21:51:27,943: bytecode dump:
>          0	NOP(arg=None, lineno=585)
           2	LOAD_FAST(arg=0, lineno=585)
           4	LOAD_CONST(arg=1, lineno=585)
           6	COMPARE_OP(arg=1, lineno=585)
           8	POP_JUMP_IF_FALSE(arg=16, lineno=585)
          10	LOAD_CONST(arg=2, lineno=586)
          12	STORE_FAST(arg=1, lineno=586)
          14	JUMP_FORWARD(arg=74, lineno=586)
>         16	LOAD_FAST(arg=0, lineno=587)
          18	LOAD_CONST(arg=3, lineno=587)
          20	COMPARE_OP(arg=1, lineno=587)
          22	POP_JUMP_IF_FALSE(arg=30, lineno=587)
          24	LOAD_CONST(arg=4, lineno=588)
          26	STORE_FAST(arg=1, lineno=588)
          28	JUMP_FORWARD(arg=60, lineno=588)
>         30	LOAD_FAST(arg=0, lineno=589)
          32	LOAD_CONST(arg=5, lineno=589)
          34	COMPARE_OP(arg=1, lineno=589)
          36	POP_JUMP_IF_FALSE(arg=44, lineno=589)
          38	LOAD_CONST(arg=6, lineno=590)
          40	STORE_FAST(arg=1, lineno=590)
          42	JUMP_FORWARD(arg=46, lineno=590)
>         44	LOAD_FAST(arg=0, lineno=591)
          46	LOAD_CONST(arg=7, lineno=591)
          48	COMPARE_OP(arg=1, lineno=591)
          50	POP_JUMP_IF_FALSE(arg=58, lineno=591)
          52	LOAD_CONST(arg=8, lineno=592)
          54	STORE_FAST(arg=1, lineno=592)
          56	JUMP_FORWARD(arg=32, lineno=592)
>         58	LOAD_FAST(arg=0, lineno=593)
          60	LOAD_CONST(arg=9, lineno=593)
          62	COMPARE_OP(arg=1, lineno=593)
          64	POP_JUMP_IF_FALSE(arg=72, lineno=593)
          66	LOAD_CONST(arg=10, lineno=594)
          68	STORE_FAST(arg=1, lineno=594)
          70	JUMP_FORWARD(arg=18, lineno=594)
>         72	LOAD_FAST(arg=0, lineno=595)
          74	LOAD_CONST(arg=11, lineno=595)
          76	COMPARE_OP(arg=1, lineno=595)
          78	POP_JUMP_IF_FALSE(arg=86, lineno=595)
          80	LOAD_CONST(arg=12, lineno=596)
          82	STORE_FAST(arg=1, lineno=596)
          84	JUMP_FORWARD(arg=4, lineno=596)
>         86	LOAD_CONST(arg=13, lineno=598)
          88	STORE_FAST(arg=1, lineno=598)
>         90	LOAD_FAST(arg=1, lineno=599)
          92	RETURN_VALUE(arg=None, lineno=599)
DEBUG    2021-09-22 21:51:27,943: pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,943: stack: []
DEBUG    2021-09-22 21:51:27,943: dispatch pc=0, inst=NOP(arg=None, lineno=585)
DEBUG    2021-09-22 21:51:27,943: stack []
DEBUG    2021-09-22 21:51:27,943: dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=585)
DEBUG    2021-09-22 21:51:27,943: stack []
DEBUG    2021-09-22 21:51:27,943: dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=585)
DEBUG    2021-09-22 21:51:27,943: stack ['$TwaterC2.0']
DEBUG    2021-09-22 21:51:27,943: dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=585)
DEBUG    2021-09-22 21:51:27,943: stack ['$TwaterC2.0', '$const4.1']
DEBUG    2021-09-22 21:51:27,943: dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=16, lineno=585)
DEBUG    2021-09-22 21:51:27,944: stack ['$6compare_op.2']
DEBUG    2021-09-22 21:51:27,944: end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,944: pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=16 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,944: stack: []
DEBUG    2021-09-22 21:51:27,944: dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=586)
DEBUG    2021-09-22 21:51:27,944: stack []
DEBUG    2021-09-22 21:51:27,944: dispatch pc=12, inst=STORE_FAST(arg=1, lineno=586)
DEBUG    2021-09-22 21:51:27,944: stack ['$const10.0']
DEBUG    2021-09-22 21:51:27,944: dispatch pc=14, inst=JUMP_FORWARD(arg=74, lineno=586)
DEBUG    2021-09-22 21:51:27,944: stack []
DEBUG    2021-09-22 21:51:27,944: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,944: pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,944: stack: []
DEBUG    2021-09-22 21:51:27,944: dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=587)
DEBUG    2021-09-22 21:51:27,944: stack []
DEBUG    2021-09-22 21:51:27,944: dispatch pc=18, inst=LOAD_CONST(arg=3, lineno=587)
DEBUG    2021-09-22 21:51:27,944: stack ['$TwaterC16.0']
DEBUG    2021-09-22 21:51:27,944: dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=587)
DEBUG    2021-09-22 21:51:27,944: stack ['$TwaterC16.0', '$const18.1']
DEBUG    2021-09-22 21:51:27,944: dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=30, lineno=587)
DEBUG    2021-09-22 21:51:27,944: stack ['$20compare_op.2']
DEBUG    2021-09-22 21:51:27,945: end state. edges=[Edge(pc=24, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,945: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,945: stack: []
DEBUG    2021-09-22 21:51:27,945: dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=599)
DEBUG    2021-09-22 21:51:27,945: stack []
DEBUG    2021-09-22 21:51:27,945: dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=599)
DEBUG    2021-09-22 21:51:27,945: stack ['$Cp_water90.0']
DEBUG    2021-09-22 21:51:27,945: end state. edges=[]
DEBUG    2021-09-22 21:51:27,945: pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,945: stack: []
DEBUG    2021-09-22 21:51:27,945: dispatch pc=24, inst=LOAD_CONST(arg=4, lineno=588)
DEBUG    2021-09-22 21:51:27,945: stack []
DEBUG    2021-09-22 21:51:27,945: dispatch pc=26, inst=STORE_FAST(arg=1, lineno=588)
DEBUG    2021-09-22 21:51:27,945: stack ['$const24.0']
DEBUG    2021-09-22 21:51:27,945: dispatch pc=28, inst=JUMP_FORWARD(arg=60, lineno=588)
DEBUG    2021-09-22 21:51:27,945: stack []
DEBUG    2021-09-22 21:51:27,945: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,945: pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,945: stack: []
DEBUG    2021-09-22 21:51:27,945: dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=589)
DEBUG    2021-09-22 21:51:27,945: stack []
DEBUG    2021-09-22 21:51:27,945: dispatch pc=32, inst=LOAD_CONST(arg=5, lineno=589)
DEBUG    2021-09-22 21:51:27,945: stack ['$TwaterC30.0']
DEBUG    2021-09-22 21:51:27,945: dispatch pc=34, inst=COMPARE_OP(arg=1, lineno=589)
DEBUG    2021-09-22 21:51:27,945: stack ['$TwaterC30.0', '$const32.1']
DEBUG    2021-09-22 21:51:27,946: dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=44, lineno=589)
DEBUG    2021-09-22 21:51:27,946: stack ['$34compare_op.2']
DEBUG    2021-09-22 21:51:27,946: end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,946: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=38 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,946: pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,946: stack: []
DEBUG    2021-09-22 21:51:27,946: dispatch pc=38, inst=LOAD_CONST(arg=6, lineno=590)
DEBUG    2021-09-22 21:51:27,946: stack []
DEBUG    2021-09-22 21:51:27,946: dispatch pc=40, inst=STORE_FAST(arg=1, lineno=590)
DEBUG    2021-09-22 21:51:27,946: stack ['$const38.0']
DEBUG    2021-09-22 21:51:27,946: dispatch pc=42, inst=JUMP_FORWARD(arg=46, lineno=590)
DEBUG    2021-09-22 21:51:27,946: stack []
DEBUG    2021-09-22 21:51:27,946: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,946: pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,946: stack: []
DEBUG    2021-09-22 21:51:27,946: dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=591)
DEBUG    2021-09-22 21:51:27,946: stack []
DEBUG    2021-09-22 21:51:27,946: dispatch pc=46, inst=LOAD_CONST(arg=7, lineno=591)
DEBUG    2021-09-22 21:51:27,946: stack ['$TwaterC44.0']
DEBUG    2021-09-22 21:51:27,946: dispatch pc=48, inst=COMPARE_OP(arg=1, lineno=591)
DEBUG    2021-09-22 21:51:27,946: stack ['$TwaterC44.0', '$const46.1']
DEBUG    2021-09-22 21:51:27,946: dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=58, lineno=591)
DEBUG    2021-09-22 21:51:27,946: stack ['$48compare_op.2']
DEBUG    2021-09-22 21:51:27,946: end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,947: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,947: pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,947: stack: []
DEBUG    2021-09-22 21:51:27,947: dispatch pc=52, inst=LOAD_CONST(arg=8, lineno=592)
DEBUG    2021-09-22 21:51:27,947: stack []
DEBUG    2021-09-22 21:51:27,947: dispatch pc=54, inst=STORE_FAST(arg=1, lineno=592)
DEBUG    2021-09-22 21:51:27,947: stack ['$const52.0']
DEBUG    2021-09-22 21:51:27,947: dispatch pc=56, inst=JUMP_FORWARD(arg=32, lineno=592)
DEBUG    2021-09-22 21:51:27,947: stack []
DEBUG    2021-09-22 21:51:27,947: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,947: pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,947: stack: []
DEBUG    2021-09-22 21:51:27,947: dispatch pc=58, inst=LOAD_FAST(arg=0, lineno=593)
DEBUG    2021-09-22 21:51:27,947: stack []
DEBUG    2021-09-22 21:51:27,947: dispatch pc=60, inst=LOAD_CONST(arg=9, lineno=593)
DEBUG    2021-09-22 21:51:27,947: stack ['$TwaterC58.0']
DEBUG    2021-09-22 21:51:27,947: dispatch pc=62, inst=COMPARE_OP(arg=1, lineno=593)
DEBUG    2021-09-22 21:51:27,947: stack ['$TwaterC58.0', '$const60.1']
DEBUG    2021-09-22 21:51:27,947: dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=72, lineno=593)
DEBUG    2021-09-22 21:51:27,947: stack ['$62compare_op.2']
DEBUG    2021-09-22 21:51:27,947: end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,947: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,947: pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,947: stack: []
DEBUG    2021-09-22 21:51:27,947: dispatch pc=66, inst=LOAD_CONST(arg=10, lineno=594)
DEBUG    2021-09-22 21:51:27,948: stack []
DEBUG    2021-09-22 21:51:27,948: dispatch pc=68, inst=STORE_FAST(arg=1, lineno=594)
DEBUG    2021-09-22 21:51:27,948: stack ['$const66.0']
DEBUG    2021-09-22 21:51:27,948: dispatch pc=70, inst=JUMP_FORWARD(arg=18, lineno=594)
DEBUG    2021-09-22 21:51:27,948: stack []
DEBUG    2021-09-22 21:51:27,948: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,948: pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,948: stack: []
DEBUG    2021-09-22 21:51:27,948: dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=595)
DEBUG    2021-09-22 21:51:27,948: stack []
DEBUG    2021-09-22 21:51:27,948: dispatch pc=74, inst=LOAD_CONST(arg=11, lineno=595)
DEBUG    2021-09-22 21:51:27,948: stack ['$TwaterC72.0']
DEBUG    2021-09-22 21:51:27,948: dispatch pc=76, inst=COMPARE_OP(arg=1, lineno=595)
DEBUG    2021-09-22 21:51:27,948: stack ['$TwaterC72.0', '$const74.1']
DEBUG    2021-09-22 21:51:27,948: dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=86, lineno=595)
DEBUG    2021-09-22 21:51:27,948: stack ['$76compare_op.2']
DEBUG    2021-09-22 21:51:27,948: end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,948: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,948: pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,948: stack: []
DEBUG    2021-09-22 21:51:27,948: dispatch pc=80, inst=LOAD_CONST(arg=12, lineno=596)
DEBUG    2021-09-22 21:51:27,948: stack []
DEBUG    2021-09-22 21:51:27,948: dispatch pc=82, inst=STORE_FAST(arg=1, lineno=596)
DEBUG    2021-09-22 21:51:27,948: stack ['$const80.0']
DEBUG    2021-09-22 21:51:27,949: dispatch pc=84, inst=JUMP_FORWARD(arg=4, lineno=596)
DEBUG    2021-09-22 21:51:27,949: stack []
DEBUG    2021-09-22 21:51:27,949: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,949: pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,949: stack: []
DEBUG    2021-09-22 21:51:27,949: dispatch pc=86, inst=LOAD_CONST(arg=13, lineno=598)
DEBUG    2021-09-22 21:51:27,949: stack []
DEBUG    2021-09-22 21:51:27,949: dispatch pc=88, inst=STORE_FAST(arg=1, lineno=598)
DEBUG    2021-09-22 21:51:27,949: stack ['$const86.0']
DEBUG    2021-09-22 21:51:27,949: end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
DEBUG    2021-09-22 21:51:27,949: pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,949: pending: deque([State(pc_initial=90 nstack_initial=0)])
DEBUG    2021-09-22 21:51:27,949: -------------------------Prune PHIs-------------------------
DEBUG    2021-09-22 21:51:27,950: Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set()})
DEBUG    2021-09-22 21:51:27,950: defmap: {}
DEBUG    2021-09-22 21:51:27,950: phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,950: changing phismap: defaultdict(<class 'set'>, {})
DEBUG    2021-09-22 21:51:27,950: keep phismap: {}
DEBUG    2021-09-22 21:51:27,950: new_out: defaultdict(<class 'dict'>, {})
DEBUG    2021-09-22 21:51:27,950: ----------------------DONE Prune PHIs-----------------------
DEBUG    2021-09-22 21:51:27,950: block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$TwaterC2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$TwaterC2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 16: ()})
DEBUG    2021-09-22 21:51:27,950: block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'value': '$const10.0'}), (14, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2021-09-22 21:51:27,950: block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$TwaterC16.0'}), (18, {'res': '$const18.1'}), (20, {'lhs': '$TwaterC16.0', 'rhs': '$const18.1', 'res': '$20compare_op.2'}), (22, {'pred': '$20compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: (), 30: ()})
DEBUG    2021-09-22 21:51:27,950: block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$const24.0'}), (26, {'value': '$const24.0'}), (28, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2021-09-22 21:51:27,950: block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$TwaterC30.0'}), (32, {'res': '$const32.1'}), (34, {'lhs': '$TwaterC30.0', 'rhs': '$const32.1', 'res': '$34compare_op.2'}), (36, {'pred': '$34compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 44: ()})
DEBUG    2021-09-22 21:51:27,950: block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$const38.0'}), (40, {'value': '$const38.0'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2021-09-22 21:51:27,950: block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$TwaterC44.0'}), (46, {'res': '$const46.1'}), (48, {'lhs': '$TwaterC44.0', 'rhs': '$const46.1', 'res': '$48compare_op.2'}), (50, {'pred': '$48compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 58: ()})
DEBUG    2021-09-22 21:51:27,950: block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$const52.0'}), (54, {'value': '$const52.0'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2021-09-22 21:51:27,951: block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$TwaterC58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$TwaterC58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 72: ()})
DEBUG    2021-09-22 21:51:27,951: block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$const66.0'}), (68, {'value': '$const66.0'}), (70, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2021-09-22 21:51:27,951: block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$TwaterC72.0'}), (74, {'res': '$const74.1'}), (76, {'lhs': '$TwaterC72.0', 'rhs': '$const74.1', 'res': '$76compare_op.2'}), (78, {'pred': '$76compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 86: ()})
DEBUG    2021-09-22 21:51:27,951: block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$const80.0'}), (82, {'value': '$const80.0'}), (84, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2021-09-22 21:51:27,951: block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$const86.0'}), (88, {'value': '$const86.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
DEBUG    2021-09-22 21:51:27,951: block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$Cp_water90.0'}), (92, {'retval': '$Cp_water90.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG    2021-09-22 21:51:27,952: label 0:
    TwaterC = arg(0, name=TwaterC)           ['TwaterC']
    $const4.1 = const(float, 0.0)            ['$const4.1']
    $6compare_op.2 = TwaterC <= $const4.1    ['$6compare_op.2', '$const4.1', 'TwaterC']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, TSM2.py:585),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 16                    ['$8pred']
label 10:
    Cp_water = const(float, 4218.0)          ['Cp_water']
    jump 90                                  []
label 16:
    $const18.1 = const(float, 5.0)           ['$const18.1']
    $20compare_op.2 = TwaterC <= $const18.1  ['$20compare_op.2', '$const18.1', 'TwaterC']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, TSM2.py:587),), kws=(), vararg=None, target=None) ['$20compare_op.2', '$22pred', 'bool22']
    branch $22pred, 24, 30                   ['$22pred']
label 24:
    Cp_water = const(float, 4202.0)          ['Cp_water']
    jump 90                                  []
label 30:
    $const32.1 = const(float, 10.0)          ['$const32.1']
    $34compare_op.2 = TwaterC <= $const32.1  ['$34compare_op.2', '$const32.1', 'TwaterC']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, TSM2.py:589),), kws=(), vararg=None, target=None) ['$34compare_op.2', '$36pred', 'bool36']
    branch $36pred, 38, 44                   ['$36pred']
label 38:
    Cp_water = const(float, 4192.0)          ['Cp_water']
    jump 90                                  []
label 44:
    $const46.1 = const(float, 15.0)          ['$const46.1']
    $48compare_op.2 = TwaterC <= $const46.1  ['$48compare_op.2', '$const46.1', 'TwaterC']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, TSM2.py:591),), kws=(), vararg=None, target=None) ['$48compare_op.2', '$50pred', 'bool50']
    branch $50pred, 52, 58                   ['$50pred']
label 52:
    Cp_water = const(float, 4186.0)          ['Cp_water']
    jump 90                                  []
label 58:
    $const60.1 = const(float, 20.0)          ['$const60.1']
    $62compare_op.2 = TwaterC <= $const60.1  ['$62compare_op.2', '$const60.1', 'TwaterC']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:593),), kws=(), vararg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 72                   ['$64pred']
label 66:
    Cp_water = const(float, 4182.0)          ['Cp_water']
    jump 90                                  []
label 72:
    $const74.1 = const(float, 25.0)          ['$const74.1']
    $76compare_op.2 = TwaterC <= $const74.1  ['$76compare_op.2', '$const74.1', 'TwaterC']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, TSM2.py:595),), kws=(), vararg=None, target=None) ['$76compare_op.2', '$78pred', 'bool78']
    branch $78pred, 80, 86                   ['$78pred']
label 80:
    Cp_water = const(float, 4180.0)          ['Cp_water']
    jump 90                                  []
label 86:
    Cp_water = const(float, 4178.0)          ['Cp_water']
    jump 90                                  []
label 90:
    $92return_value.1 = cast(value=Cp_water) ['$92return_value.1', 'Cp_water']
    return $92return_value.1                 ['$92return_value.1']

DEBUG    2021-09-22 21:51:27,958: ==== SSA block analysis pass on 0
DEBUG    2021-09-22 21:51:27,959: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,959: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2021-09-22 21:51:27,959: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,959: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2021-09-22 21:51:27,959: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,959: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, TSM2.py:585),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,959: on stmt: branch $8pred, 10, 16
DEBUG    2021-09-22 21:51:27,959: ==== SSA block analysis pass on 10
DEBUG    2021-09-22 21:51:27,959: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,959: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2021-09-22 21:51:27,959: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,959: ==== SSA block analysis pass on 16
DEBUG    2021-09-22 21:51:27,959: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,959: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2021-09-22 21:51:27,959: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2021-09-22 21:51:27,959: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,959: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, TSM2.py:587),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,959: on stmt: branch $22pred, 24, 30
DEBUG    2021-09-22 21:51:27,959: ==== SSA block analysis pass on 24
DEBUG    2021-09-22 21:51:27,959: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,959: on stmt: Cp_water = const(float, 4202.0)
DEBUG    2021-09-22 21:51:27,959: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,959: ==== SSA block analysis pass on 30
DEBUG    2021-09-22 21:51:27,959: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,960: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2021-09-22 21:51:27,960: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2021-09-22 21:51:27,960: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,960: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, TSM2.py:589),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,960: on stmt: branch $36pred, 38, 44
DEBUG    2021-09-22 21:51:27,960: ==== SSA block analysis pass on 38
DEBUG    2021-09-22 21:51:27,960: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,960: on stmt: Cp_water = const(float, 4192.0)
DEBUG    2021-09-22 21:51:27,960: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,960: ==== SSA block analysis pass on 44
DEBUG    2021-09-22 21:51:27,960: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,960: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2021-09-22 21:51:27,960: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2021-09-22 21:51:27,960: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,960: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, TSM2.py:591),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,960: on stmt: branch $50pred, 52, 58
DEBUG    2021-09-22 21:51:27,960: ==== SSA block analysis pass on 52
DEBUG    2021-09-22 21:51:27,960: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,960: on stmt: Cp_water = const(float, 4186.0)
DEBUG    2021-09-22 21:51:27,960: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,960: ==== SSA block analysis pass on 58
DEBUG    2021-09-22 21:51:27,960: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,960: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2021-09-22 21:51:27,960: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2021-09-22 21:51:27,960: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,961: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:593),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,961: on stmt: branch $64pred, 66, 72
DEBUG    2021-09-22 21:51:27,961: ==== SSA block analysis pass on 66
DEBUG    2021-09-22 21:51:27,961: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,961: on stmt: Cp_water = const(float, 4182.0)
DEBUG    2021-09-22 21:51:27,961: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,961: ==== SSA block analysis pass on 72
DEBUG    2021-09-22 21:51:27,961: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,961: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2021-09-22 21:51:27,961: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2021-09-22 21:51:27,961: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,961: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, TSM2.py:595),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,961: on stmt: branch $78pred, 80, 86
DEBUG    2021-09-22 21:51:27,961: ==== SSA block analysis pass on 80
DEBUG    2021-09-22 21:51:27,961: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,961: on stmt: Cp_water = const(float, 4180.0)
DEBUG    2021-09-22 21:51:27,961: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,961: ==== SSA block analysis pass on 86
DEBUG    2021-09-22 21:51:27,961: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,961: on stmt: Cp_water = const(float, 4178.0)
DEBUG    2021-09-22 21:51:27,961: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,961: ==== SSA block analysis pass on 90
DEBUG    2021-09-22 21:51:27,961: Running <numba.core.ssa._GatherDefsHandler object at 0x7f9120746460>
DEBUG    2021-09-22 21:51:27,961: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2021-09-22 21:51:27,961: on stmt: return $92return_value.1
DEBUG    2021-09-22 21:51:27,962: defs defaultdict(<class 'list'>,
            {'$20compare_op.2': [<numba.core.ir.Assign object at 0x7f90f059f310>],
             '$22pred': [<numba.core.ir.Assign object at 0x7f90f059f070>],
             '$34compare_op.2': [<numba.core.ir.Assign object at 0x7f912075fc10>],
             '$36pred': [<numba.core.ir.Assign object at 0x7f912075fb50>],
             '$48compare_op.2': [<numba.core.ir.Assign object at 0x7f90f059b340>],
             '$50pred': [<numba.core.ir.Assign object at 0x7f90f059b460>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x7f90f05c3070>],
             '$64pred': [<numba.core.ir.Assign object at 0x7f91105a49d0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f90f05bcd00>],
             '$76compare_op.2': [<numba.core.ir.Assign object at 0x7f9120780250>],
             '$78pred': [<numba.core.ir.Assign object at 0x7f9120780a30>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f9160961730>],
             '$92return_value.1': [<numba.core.ir.Assign object at 0x7f9120793130>],
             '$const18.1': [<numba.core.ir.Assign object at 0x7f90f059f2b0>],
             '$const32.1': [<numba.core.ir.Assign object at 0x7f90f059fbb0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f90f05bcf40>],
             '$const46.1': [<numba.core.ir.Assign object at 0x7f90f059b490>],
             '$const60.1': [<numba.core.ir.Assign object at 0x7f90f05c3100>],
             '$const74.1': [<numba.core.ir.Assign object at 0x7f9120780b20>],
             'Cp_water': [<numba.core.ir.Assign object at 0x7f91609619d0>,
                          <numba.core.ir.Assign object at 0x7f90f059fc40>,
                          <numba.core.ir.Assign object at 0x7f90f059ba30>,
                          <numba.core.ir.Assign object at 0x7f90f05c3910>,
                          <numba.core.ir.Assign object at 0x7f91105a4130>,
                          <numba.core.ir.Assign object at 0x7f91207800d0>,
                          <numba.core.ir.Assign object at 0x7f9140639940>],
             'TwaterC': [<numba.core.ir.Assign object at 0x7f9140626640>],
             'bool22': [<numba.core.ir.Assign object at 0x7f90f059fe80>],
             'bool36': [<numba.core.ir.Assign object at 0x7f912075f9d0>],
             'bool50': [<numba.core.ir.Assign object at 0x7f90f059baf0>],
             'bool64': [<numba.core.ir.Assign object at 0x7f91105a4a00>],
             'bool78': [<numba.core.ir.Assign object at 0x7f9120780df0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f90f05bcca0>]})
DEBUG    2021-09-22 21:51:27,962: SSA violators {'Cp_water'}
DEBUG    2021-09-22 21:51:27,962: Fix SSA violator on var Cp_water
DEBUG    2021-09-22 21:51:27,962: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,962: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,962: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2021-09-22 21:51:27,962: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,962: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2021-09-22 21:51:27,962: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,962: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, TSM2.py:585),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,962: on stmt: branch $8pred, 10, 16
DEBUG    2021-09-22 21:51:27,962: ==== SSA block rewrite pass on 10
DEBUG    2021-09-22 21:51:27,962: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,962: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2021-09-22 21:51:27,963: first assign: Cp_water
DEBUG    2021-09-22 21:51:27,963: replaced with: Cp_water = const(float, 4218.0)
DEBUG    2021-09-22 21:51:27,963: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,963: ==== SSA block rewrite pass on 16
DEBUG    2021-09-22 21:51:27,963: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,963: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2021-09-22 21:51:27,963: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2021-09-22 21:51:27,963: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,963: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, TSM2.py:587),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,963: on stmt: branch $22pred, 24, 30
DEBUG    2021-09-22 21:51:27,963: ==== SSA block rewrite pass on 24
DEBUG    2021-09-22 21:51:27,963: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,963: on stmt: Cp_water = const(float, 4202.0)
DEBUG    2021-09-22 21:51:27,963: replaced with: Cp_water.1 = const(float, 4202.0)
DEBUG    2021-09-22 21:51:27,963: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,963: ==== SSA block rewrite pass on 30
DEBUG    2021-09-22 21:51:27,963: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,963: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2021-09-22 21:51:27,963: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2021-09-22 21:51:27,963: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,963: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, TSM2.py:589),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,963: on stmt: branch $36pred, 38, 44
DEBUG    2021-09-22 21:51:27,963: ==== SSA block rewrite pass on 38
DEBUG    2021-09-22 21:51:27,963: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,963: on stmt: Cp_water = const(float, 4192.0)
DEBUG    2021-09-22 21:51:27,964: replaced with: Cp_water.2 = const(float, 4192.0)
DEBUG    2021-09-22 21:51:27,964: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,964: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,964: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,964: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2021-09-22 21:51:27,964: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2021-09-22 21:51:27,964: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,964: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, TSM2.py:591),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,964: on stmt: branch $50pred, 52, 58
DEBUG    2021-09-22 21:51:27,964: ==== SSA block rewrite pass on 52
DEBUG    2021-09-22 21:51:27,964: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,964: on stmt: Cp_water = const(float, 4186.0)
DEBUG    2021-09-22 21:51:27,964: replaced with: Cp_water.3 = const(float, 4186.0)
DEBUG    2021-09-22 21:51:27,964: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,964: ==== SSA block rewrite pass on 58
DEBUG    2021-09-22 21:51:27,964: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,964: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2021-09-22 21:51:27,964: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2021-09-22 21:51:27,964: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,964: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:593),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,964: on stmt: branch $64pred, 66, 72
DEBUG    2021-09-22 21:51:27,964: ==== SSA block rewrite pass on 66
DEBUG    2021-09-22 21:51:27,964: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,964: on stmt: Cp_water = const(float, 4182.0)
DEBUG    2021-09-22 21:51:27,964: replaced with: Cp_water.4 = const(float, 4182.0)
DEBUG    2021-09-22 21:51:27,965: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,965: ==== SSA block rewrite pass on 72
DEBUG    2021-09-22 21:51:27,965: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,965: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2021-09-22 21:51:27,965: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2021-09-22 21:51:27,965: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,965: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, TSM2.py:595),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,965: on stmt: branch $78pred, 80, 86
DEBUG    2021-09-22 21:51:27,965: ==== SSA block rewrite pass on 80
DEBUG    2021-09-22 21:51:27,965: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,965: on stmt: Cp_water = const(float, 4180.0)
DEBUG    2021-09-22 21:51:27,965: replaced with: Cp_water.5 = const(float, 4180.0)
DEBUG    2021-09-22 21:51:27,965: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,965: ==== SSA block rewrite pass on 86
DEBUG    2021-09-22 21:51:27,965: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,965: on stmt: Cp_water = const(float, 4178.0)
DEBUG    2021-09-22 21:51:27,965: replaced with: Cp_water.6 = const(float, 4178.0)
DEBUG    2021-09-22 21:51:27,965: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,965: ==== SSA block rewrite pass on 90
DEBUG    2021-09-22 21:51:27,965: Running <numba.core.ssa._FreshVarHandler object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,965: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2021-09-22 21:51:27,965: on stmt: return $92return_value.1
DEBUG    2021-09-22 21:51:27,965: Replaced assignments: defaultdict(<class 'list'>,
            {10: [<numba.core.ir.Assign object at 0x7f90f05a54c0>],
             24: [<numba.core.ir.Assign object at 0x7f9120746460>],
             38: [<numba.core.ir.Assign object at 0x7f9140639f10>],
             52: [<numba.core.ir.Assign object at 0x7f91207936a0>],
             66: [<numba.core.ir.Assign object at 0x7f9140626f40>],
             80: [<numba.core.ir.Assign object at 0x7f91406268e0>],
             86: [<numba.core.ir.Assign object at 0x7f9140626790>]})
DEBUG    2021-09-22 21:51:27,966: ==== SSA block rewrite pass on 0
DEBUG    2021-09-22 21:51:27,966: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,966: on stmt: TwaterC = arg(0, name=TwaterC)
DEBUG    2021-09-22 21:51:27,966: on stmt: $const4.1 = const(float, 0.0)
DEBUG    2021-09-22 21:51:27,966: on stmt: $6compare_op.2 = TwaterC <= $const4.1
DEBUG    2021-09-22 21:51:27,966: on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,966: on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, TSM2.py:585),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,966: on stmt: branch $8pred, 10, 16
DEBUG    2021-09-22 21:51:27,966: ==== SSA block rewrite pass on 10
DEBUG    2021-09-22 21:51:27,966: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,966: on stmt: Cp_water = const(float, 4218.0)
DEBUG    2021-09-22 21:51:27,966: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,966: ==== SSA block rewrite pass on 16
DEBUG    2021-09-22 21:51:27,966: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,966: on stmt: $const18.1 = const(float, 5.0)
DEBUG    2021-09-22 21:51:27,966: on stmt: $20compare_op.2 = TwaterC <= $const18.1
DEBUG    2021-09-22 21:51:27,966: on stmt: bool22 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,966: on stmt: $22pred = call bool22($20compare_op.2, func=bool22, args=(Var($20compare_op.2, TSM2.py:587),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,966: on stmt: branch $22pred, 24, 30
DEBUG    2021-09-22 21:51:27,966: ==== SSA block rewrite pass on 24
DEBUG    2021-09-22 21:51:27,966: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,966: on stmt: Cp_water.1 = const(float, 4202.0)
DEBUG    2021-09-22 21:51:27,966: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,967: ==== SSA block rewrite pass on 30
DEBUG    2021-09-22 21:51:27,967: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,967: on stmt: $const32.1 = const(float, 10.0)
DEBUG    2021-09-22 21:51:27,967: on stmt: $34compare_op.2 = TwaterC <= $const32.1
DEBUG    2021-09-22 21:51:27,967: on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,967: on stmt: $36pred = call bool36($34compare_op.2, func=bool36, args=(Var($34compare_op.2, TSM2.py:589),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,967: on stmt: branch $36pred, 38, 44
DEBUG    2021-09-22 21:51:27,967: ==== SSA block rewrite pass on 38
DEBUG    2021-09-22 21:51:27,967: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,967: on stmt: Cp_water.2 = const(float, 4192.0)
DEBUG    2021-09-22 21:51:27,967: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,967: ==== SSA block rewrite pass on 44
DEBUG    2021-09-22 21:51:27,967: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,967: on stmt: $const46.1 = const(float, 15.0)
DEBUG    2021-09-22 21:51:27,967: on stmt: $48compare_op.2 = TwaterC <= $const46.1
DEBUG    2021-09-22 21:51:27,967: on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,967: on stmt: $50pred = call bool50($48compare_op.2, func=bool50, args=(Var($48compare_op.2, TSM2.py:591),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,967: on stmt: branch $50pred, 52, 58
DEBUG    2021-09-22 21:51:27,967: ==== SSA block rewrite pass on 52
DEBUG    2021-09-22 21:51:27,967: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,967: on stmt: Cp_water.3 = const(float, 4186.0)
DEBUG    2021-09-22 21:51:27,967: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,967: ==== SSA block rewrite pass on 58
DEBUG    2021-09-22 21:51:27,967: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,968: on stmt: $const60.1 = const(float, 20.0)
DEBUG    2021-09-22 21:51:27,968: on stmt: $62compare_op.2 = TwaterC <= $const60.1
DEBUG    2021-09-22 21:51:27,968: on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,968: on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, TSM2.py:593),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,968: on stmt: branch $64pred, 66, 72
DEBUG    2021-09-22 21:51:27,968: ==== SSA block rewrite pass on 66
DEBUG    2021-09-22 21:51:27,968: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,968: on stmt: Cp_water.4 = const(float, 4182.0)
DEBUG    2021-09-22 21:51:27,968: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,968: ==== SSA block rewrite pass on 72
DEBUG    2021-09-22 21:51:27,968: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,968: on stmt: $const74.1 = const(float, 25.0)
DEBUG    2021-09-22 21:51:27,968: on stmt: $76compare_op.2 = TwaterC <= $const74.1
DEBUG    2021-09-22 21:51:27,968: on stmt: bool78 = global(bool: <class 'bool'>)
DEBUG    2021-09-22 21:51:27,968: on stmt: $78pred = call bool78($76compare_op.2, func=bool78, args=(Var($76compare_op.2, TSM2.py:595),), kws=(), vararg=None, target=None)
DEBUG    2021-09-22 21:51:27,968: on stmt: branch $78pred, 80, 86
DEBUG    2021-09-22 21:51:27,968: ==== SSA block rewrite pass on 80
DEBUG    2021-09-22 21:51:27,968: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,968: on stmt: Cp_water.5 = const(float, 4180.0)
DEBUG    2021-09-22 21:51:27,968: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,968: ==== SSA block rewrite pass on 86
DEBUG    2021-09-22 21:51:27,968: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,969: on stmt: Cp_water.6 = const(float, 4178.0)
DEBUG    2021-09-22 21:51:27,969: on stmt: jump 90
DEBUG    2021-09-22 21:51:27,969: ==== SSA block rewrite pass on 90
DEBUG    2021-09-22 21:51:27,969: Running <numba.core.ssa._FixSSAVars object at 0x7f90f05a5bb0>
DEBUG    2021-09-22 21:51:27,969: on stmt: $92return_value.1 = cast(value=Cp_water)
DEBUG    2021-09-22 21:51:27,969: find_def var='Cp_water' stmt=$92return_value.1 = cast(value=Cp_water)
DEBUG    2021-09-22 21:51:27,969: find_def_from_top label 90
DEBUG    2021-09-22 21:51:27,969: insert phi node Cp_water.7 = phi(incoming_values=[], incoming_blocks=[]) at 90
DEBUG    2021-09-22 21:51:27,969: find_def_from_bottom label 66
DEBUG    2021-09-22 21:51:27,969: incoming_def Cp_water.4 = const(float, 4182.0)
DEBUG    2021-09-22 21:51:27,969: find_def_from_bottom label 38
DEBUG    2021-09-22 21:51:27,969: incoming_def Cp_water.2 = const(float, 4192.0)
DEBUG    2021-09-22 21:51:27,969: find_def_from_bottom label 10
DEBUG    2021-09-22 21:51:27,969: incoming_def Cp_water = const(float, 4218.0)
DEBUG    2021-09-22 21:51:27,969: find_def_from_bottom label 80
DEBUG    2021-09-22 21:51:27,969: incoming_def Cp_water.5 = const(float, 4180.0)
DEBUG    2021-09-22 21:51:27,969: find_def_from_bottom label 52
DEBUG    2021-09-22 21:51:27,970: incoming_def Cp_water.3 = const(float, 4186.0)
DEBUG    2021-09-22 21:51:27,970: find_def_from_bottom label 86
DEBUG    2021-09-22 21:51:27,970: incoming_def Cp_water.6 = const(float, 4178.0)
DEBUG    2021-09-22 21:51:27,970: find_def_from_bottom label 24
DEBUG    2021-09-22 21:51:27,970: incoming_def Cp_water.1 = const(float, 4202.0)
DEBUG    2021-09-22 21:51:27,970: replaced with: $92return_value.1 = cast(value=Cp_water.7)
DEBUG    2021-09-22 21:51:27,970: on stmt: return $92return_value.1
